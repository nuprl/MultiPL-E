{
  "name": "mbpp_608_bell_Number",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_608_bell_Number.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell: [[Int]] = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i-1][0])\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81bb763c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81bb45a561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b81bb45a286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b81bb45a13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b81bb459bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b81bb44348a <unavailable> + 1340554\n6    tmp1lbcuof9                        0x000055a462b56ce1 <unavailable> + 7393\n7    tmp1lbcuof9                        0x000055a462b566b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b81bb94f460 __libc_start_main + 245\n9    tmp1lbcuof9                        0x000055a462b563d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i - 1][0])\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i - 1][j])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "tmp79m3eis1/tmp79m3eis1.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49bea2dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49be724b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49be724988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49be7237b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp79m3eis1                        0x000055a4e44a4725 <unavailable> + 5925\n5    libc.so.6                          0x00002b49bec19460 __libc_start_main + 245\n6    tmp79m3eis1                        0x000055a4e44a43d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab772000c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab771cf7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab771cf7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab771cf713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab771cf6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ab771ce048a <unavailable> + 1340554\n6    tmps6dpjkx2                        0x00005600a1099c77 <unavailable> + 7287\n7    tmps6dpjkx2                        0x00005600a10996b8 <unavailable> + 5816\n8    libc.so.6                          0x00002ab7721ec460 __libc_start_main + 245\n9    tmps6dpjkx2                        0x00005600a10993d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        bell.append([1])\n        for j in 1..<i {\n            bell[i].append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        bell[i].append(1)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "tmp5yuislfs/tmp5yuislfs.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b09dbc6dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b09db964b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b09db964988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b09db9637b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5yuislfs                        0x0000559e6caab725 <unavailable> + 5925\n5    libc.so.6                          0x00002b09dbe59460 __libc_start_main + 245\n6    tmp5yuislfs                        0x0000559e6caab3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab772000c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab771cf7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab771cf7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab771cf713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab771cf6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ab771ce048a <unavailable> + 1340554\n6    tmps6dpjkx2                        0x00005600a1099c77 <unavailable> + 7287\n7    tmps6dpjkx2                        0x00005600a10996b8 <unavailable> + 5816\n8    libc.so.6                          0x00002ab7721ec460 __libc_start_main + 245\n9    tmps6dpjkx2                        0x00005600a10993d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i - 1][0])\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i - 1][j])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "tmp79m3eis1/tmp79m3eis1.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49bea2dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49be724b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49be724988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49be7237b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp79m3eis1                        0x000055a4e44a4725 <unavailable> + 5925\n5    libc.so.6                          0x00002b49bec19460 __libc_start_main + 245\n6    tmp79m3eis1                        0x000055a4e44a43d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab772000c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab771cf7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab771cf7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab771cf713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab771cf6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ab771ce048a <unavailable> + 1340554\n6    tmps6dpjkx2                        0x00005600a1099c77 <unavailable> + 7287\n7    tmps6dpjkx2                        0x00005600a10996b8 <unavailable> + 5816\n8    libc.so.6                          0x00002ab7721ec460 __libc_start_main + 245\n9    tmps6dpjkx2                        0x00005600a10993d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57eb607c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57eb2fe561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b57eb2fe286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b57eb2fe13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b57eb2fdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b57eb2e748a <unavailable> + 1340554\n6    tmp9_wq5z0b                        0x0000559f69903c77 <unavailable> + 7287\n7    tmp9_wq5z0b                        0x0000559f699036b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b57eb7f3460 __libc_start_main + 245\n9    tmp9_wq5z0b                        0x0000559f699033d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1...i {\n            row.append(bell[i-1][j-1] + row[j-1])\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "tmpqa8pu990/tmpqa8pu990.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b80ab8ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b80ab5c3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b80ab5c3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b80ab5c27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqa8pu990                        0x0000558d9096a635 <unavailable> + 5685\n5    libc.so.6                          0x00002b80abab8460 __libc_start_main + 245\n6    tmpqa8pu990                        0x0000558d9096a2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i-1][0])\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81bb763c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81bb45a561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b81bb45a286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b81bb45a13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b81bb459bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b81bb44348a <unavailable> + 1340554\n6    tmp1lbcuof9                        0x000055a462b56ce1 <unavailable> + 7393\n7    tmp1lbcuof9                        0x000055a462b566b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b81bb94f460 __libc_start_main + 245\n9    tmp1lbcuof9                        0x000055a462b563d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    \n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1..<i {\n            temp.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4b4131c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4b3e28561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae4b3e28286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae4b3e2813c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae4b3e27bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ae4b3e1148a <unavailable> + 1340554\n6    tmpk03he3ix                        0x00005621a4ff2c77 <unavailable> + 7287\n7    tmpk03he3ix                        0x00005621a4ff26b8 <unavailable> + 5816\n8    libc.so.6                          0x00002ae4b431d460 __libc_start_main + 245\n9    tmpk03he3ix                        0x00005621a4ff23d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i - 1][0])\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i - 1][j])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "tmp79m3eis1/tmp79m3eis1.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49bea2dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49be724b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49be724988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49be7237b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp79m3eis1                        0x000055a4e44a4725 <unavailable> + 5925\n5    libc.so.6                          0x00002b49bec19460 __libc_start_main + 245\n6    tmp79m3eis1                        0x000055a4e44a43d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    for i in 1...n {\n        var row = [Int]()\n        for j in 0...i {\n            if j == 0 {\n                row.append(bell[i-1][j])\n            } else if j == i {\n                row.append(bell[i-1][j-1])\n            } else {\n                row.append(bell[i-1][j-1] + bell[i-1][j])\n            }\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "tmpqwn3lo8i/tmpqwn3lo8i.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae3b0933c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae3b062ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae3b062a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae3b06297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqwn3lo8i                        0x0000562239a61635 <unavailable> + 5685\n5    libc.so.6                          0x00002ae3b0b1f460 __libc_start_main + 245\n6    tmpqwn3lo8i                        0x0000562239a612e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i-1][0])\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i-1][j])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "tmpy_0fkvjm/tmpy_0fkvjm.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba955f58c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba955c4fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba955c4f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba955c4e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy_0fkvjm                        0x000055df1d7ba725 <unavailable> + 5925\n5    libc.so.6                          0x00002ba956144460 __libc_start_main + 245\n6    tmpy_0fkvjm                        0x000055df1d7ba3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57eb607c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57eb2fe561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b57eb2fe286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b57eb2fe13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b57eb2fdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b57eb2e748a <unavailable> + 1340554\n6    tmp9_wq5z0b                        0x0000559f69903c77 <unavailable> + 7287\n7    tmp9_wq5z0b                        0x0000559f699036b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b57eb7f3460 __libc_start_main + 245\n9    tmp9_wq5z0b                        0x0000559f699033d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        bell.append([1])\n        for j in 1..<i {\n            bell[i].append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        bell[i].append(1)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "tmp5yuislfs/tmp5yuislfs.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b09dbc6dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b09db964b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b09db964988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b09db9637b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5yuislfs                        0x0000559e6caab725 <unavailable> + 5925\n5    libc.so.6                          0x00002b09dbe59460 __libc_start_main + 245\n6    tmp5yuislfs                        0x0000559e6caab3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i - 1][0])\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i - 1][j])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "tmp79m3eis1/tmp79m3eis1.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49bea2dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49be724b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49be724988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49be7237b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp79m3eis1                        0x000055a4e44a4725 <unavailable> + 5925\n5    libc.so.6                          0x00002b49bec19460 __libc_start_main + 245\n6    tmp79m3eis1                        0x000055a4e44a43d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1...i {\n            var sum = 0\n            for k in 0..<j {\n                sum += bell[i - 1][k] * row[j - k - 1]\n            }\n            row.append(sum)\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmpntdd5ho_/tmpntdd5ho_.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab745be9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab7458e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab7458e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab7458df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpntdd5ho_                        0x000055873e91c725 <unavailable> + 5925\n5    libc.so.6                          0x00002ab745dd5460 __libc_start_main + 245\n6    tmpntdd5ho_                        0x000055873e91c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57eb607c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57eb2fe561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b57eb2fe286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b57eb2fe13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b57eb2fdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b57eb2e748a <unavailable> + 1340554\n6    tmp9_wq5z0b                        0x0000559f69903c77 <unavailable> + 7287\n7    tmp9_wq5z0b                        0x0000559f699036b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b57eb7f3460 __libc_start_main + 245\n9    tmp9_wq5z0b                        0x0000559f699033d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i-1][0])\n        for j in 0..<i-1 {\n            row.append(bell[i-1][j] + bell[i][j])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7fe5d49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7fe5a40561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b7fe5a40286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b7fe5a4013c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b7fe5a3fbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b7fe5a2948a <unavailable> + 1340554\n6    tmpuo8sr35z                        0x000056419a9decc4 <unavailable> + 7364\n7    tmpuo8sr35z                        0x000056419a9de6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b7fe5f35460 __libc_start_main + 245\n9    tmpuo8sr35z                        0x000056419a9de3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell: [[Int]] = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1...i {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell: [[Int]] = Array(repeating: Array(repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1...i {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1...i {\n            temp.append(bell[i-1][j-1] + temp[j-1])\n        }\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmp0odek_jj/tmp0odek_jj.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1cda58c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1cd74fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae1cd74f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae1cd74e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0odek_jj                        0x000056195240d635 <unavailable> + 5685\n5    libc.so.6                          0x00002ae1cdc44460 __libc_start_main + 245\n6    tmp0odek_jj                        0x000056195240d2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        bell.append([1])\n        for j in 1..<i {\n            bell[i].append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        bell[i].append(1)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmpuppv1cji/tmpuppv1cji.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab18ac00c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab18a8f7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab18a8f7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab18a8f67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuppv1cji                        0x0000559d6cded725 <unavailable> + 5925\n5    libc.so.6                          0x00002ab18adec460 __libc_start_main + 245\n6    tmpuppv1cji                        0x0000559d6cded3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab772000c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab771cf7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab771cf7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab771cf713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab771cf6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ab771ce048a <unavailable> + 1340554\n6    tmps6dpjkx2                        0x00005600a1099c77 <unavailable> + 7287\n7    tmps6dpjkx2                        0x00005600a10996b8 <unavailable> + 5816\n8    libc.so.6                          0x00002ab7721ec460 __libc_start_main + 245\n9    tmps6dpjkx2                        0x00005600a10993d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab772000c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab771cf7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab771cf7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab771cf713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab771cf6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ab771ce048a <unavailable> + 1340554\n6    tmps6dpjkx2                        0x00005600a1099c77 <unavailable> + 7287\n7    tmps6dpjkx2                        0x00005600a10996b8 <unavailable> + 5816\n8    libc.so.6                          0x00002ab7721ec460 __libc_start_main + 245\n9    tmps6dpjkx2                        0x00005600a10993d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57eb607c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57eb2fe561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b57eb2fe286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b57eb2fe13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b57eb2fdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b57eb2e748a <unavailable> + 1340554\n6    tmp9_wq5z0b                        0x0000559f69903c77 <unavailable> + 7287\n7    tmp9_wq5z0b                        0x0000559f699036b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b57eb7f3460 __libc_start_main + 245\n9    tmp9_wq5z0b                        0x0000559f699033d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57eb607c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57eb2fe561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b57eb2fe286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b57eb2fe13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b57eb2fdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b57eb2e748a <unavailable> + 1340554\n6    tmp9_wq5z0b                        0x0000559f69903c77 <unavailable> + 7287\n7    tmp9_wq5z0b                        0x0000559f699036b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b57eb7f3460 __libc_start_main + 245\n9    tmp9_wq5z0b                        0x0000559f699033d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57eb607c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57eb2fe561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b57eb2fe286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b57eb2fe13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b57eb2fdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b57eb2e748a <unavailable> + 1340554\n6    tmp9_wq5z0b                        0x0000559f69903c77 <unavailable> + 7287\n7    tmp9_wq5z0b                        0x0000559f699036b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b57eb7f3460 __libc_start_main + 245\n9    tmp9_wq5z0b                        0x0000559f699033d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab772000c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab771cf7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab771cf7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab771cf713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab771cf6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ab771ce048a <unavailable> + 1340554\n6    tmps6dpjkx2                        0x00005600a1099c77 <unavailable> + 7287\n7    tmps6dpjkx2                        0x00005600a10996b8 <unavailable> + 5816\n8    libc.so.6                          0x00002ab7721ec460 __libc_start_main + 245\n9    tmps6dpjkx2                        0x00005600a10993d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2..<n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n-1][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmpu6gt2j26/tmpu6gt2j26.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab816bebc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab8168e2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab8168e2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab8168e17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu6gt2j26                        0x000055e3a12da635 <unavailable> + 5685\n5    libc.so.6                          0x00002ab816dd7460 __libc_start_main + 245\n6    tmpu6gt2j26                        0x000055e3a12da2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab772000c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab771cf7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab771cf7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab771cf713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab771cf6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ab771ce048a <unavailable> + 1340554\n6    tmps6dpjkx2                        0x00005600a1099c77 <unavailable> + 7287\n7    tmps6dpjkx2                        0x00005600a10996b8 <unavailable> + 5816\n8    libc.so.6                          0x00002ab7721ec460 __libc_start_main + 245\n9    tmps6dpjkx2                        0x00005600a10993d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1...i {\n            row.append(bell[i-1][j-1] + row[j-1])\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmp_zeco1o9/tmp_zeco1o9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b30c7d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b30c7a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b30c7a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b30c7a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_zeco1o9                        0x00005643ec9c4635 <unavailable> + 5685\n5    libc.so.6                          0x00002b30c7f5f460 __libc_start_main + 245\n6    tmp_zeco1o9                        0x00005643ec9c42e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell: [[Int]] = [[Int]](repeating: [Int](repeating: 0, count: n+1), count: n+1)\n    bell[0][0] = 1\n    for i in 1..<n+1 {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1..<i+1 {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i-1][0])\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81bb763c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81bb45a561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b81bb45a286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b81bb45a13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b81bb459bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b81bb44348a <unavailable> + 1340554\n6    tmp1lbcuof9                        0x000055a462b56ce1 <unavailable> + 7393\n7    tmp1lbcuof9                        0x000055a462b566b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b81bb94f460 __libc_start_main + 245\n9    tmp1lbcuof9                        0x000055a462b563d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2..<n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n - 1][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmp_3eumrr7/tmp_3eumrr7.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad0df793c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad0df48ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad0df48a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad0df4897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_3eumrr7                        0x00005645d1f98635 <unavailable> + 5685\n5    libc.so.6                          0x00002ad0df97f460 __libc_start_main + 245\n6    tmp_3eumrr7                        0x00005645d1f982e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab772000c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab771cf7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab771cf7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab771cf713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab771cf6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ab771ce048a <unavailable> + 1340554\n6    tmps6dpjkx2                        0x00005600a1099c77 <unavailable> + 7287\n7    tmps6dpjkx2                        0x00005600a10996b8 <unavailable> + 5816\n8    libc.so.6                          0x00002ab7721ec460 __libc_start_main + 245\n9    tmps6dpjkx2                        0x00005600a10993d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2..<n {\n        var row = [Int]()\n        row.append(bell[i - 1][0])\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n - 1][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmpsts8t398/tmpsts8t398.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a63194c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a62e8bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a62e8b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a62e8a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsts8t398                        0x000055e0d561c635 <unavailable> + 5685\n5    libc.so.6                          0x00002b9a63380460 __libc_start_main + 245\n6    tmpsts8t398                        0x000055e0d561c2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab772000c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab771cf7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab771cf7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab771cf713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab771cf6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ab771ce048a <unavailable> + 1340554\n6    tmps6dpjkx2                        0x00005600a1099c77 <unavailable> + 7287\n7    tmps6dpjkx2                        0x00005600a10996b8 <unavailable> + 5816\n8    libc.so.6                          0x00002ab7721ec460 __libc_start_main + 245\n9    tmps6dpjkx2                        0x00005600a10993d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    for i in 1...n {\n        var row = [Int]()\n        for j in 0...i {\n            if j == 0 {\n                row.append(bell[i-1][j])\n            } else {\n                row.append(bell[i-1][j-1] + row[j-1])\n            }\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmpp513jltx/tmpp513jltx.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5c9e6acc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5c9e3a3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5c9e3a3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5c9e3a27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpp513jltx                        0x000055c62e5de635 <unavailable> + 5685\n5    libc.so.6                          0x00002b5c9e898460 __libc_start_main + 245\n6    tmpp513jltx                        0x000055c62e5de2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57eb607c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57eb2fe561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b57eb2fe286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b57eb2fe13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b57eb2fdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b57eb2e748a <unavailable> + 1340554\n6    tmp9_wq5z0b                        0x0000559f69903c77 <unavailable> + 7287\n7    tmp9_wq5z0b                        0x0000559f699036b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b57eb7f3460 __libc_start_main + 245\n9    tmp9_wq5z0b                        0x0000559f699033d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var temp = [Int](repeating: 0, count: i + 1)\n        temp[0] = bell[i - 1][i - 1]\n        temp[i] = bell[i - 1][i - 1]\n        for j in 1..<i {\n            temp[j] = bell[i - 1][j - 1] + temp[j - 1]\n        }\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmpf5g3qdpt/tmpf5g3qdpt.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4a310cec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4a30dc5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4a30dc5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4a30dc47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf5g3qdpt                        0x000055f8699d2735 <unavailable> + 5941\n5    libc.so.6                          0x00002b4a312ba460 __libc_start_main + 245\n6    tmpf5g3qdpt                        0x000055f8699d23e9 <unavailable> + 5097\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab772000c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab771cf7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab771cf7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab771cf713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab771cf6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ab771ce048a <unavailable> + 1340554\n6    tmps6dpjkx2                        0x00005600a1099c77 <unavailable> + 7287\n7    tmps6dpjkx2                        0x00005600a10996b8 <unavailable> + 5816\n8    libc.so.6                          0x00002ab7721ec460 __libc_start_main + 245\n9    tmps6dpjkx2                        0x00005600a10993d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        bell.append([1])\n        for j in 1..<i {\n            bell[i].append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        bell[i].append(1)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "tmp5yuislfs/tmp5yuislfs.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b09dbc6dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b09db964b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b09db964988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b09db9637b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5yuislfs                        0x0000559e6caab725 <unavailable> + 5925\n5    libc.so.6                          0x00002b09dbe59460 __libc_start_main + 245\n6    tmp5yuislfs                        0x0000559e6caab3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    for i in 1...n {\n        var row = [Int]()\n        for j in 0...i {\n            if j == 0 {\n                row.append(bell[i-1][j])\n            } else if j == i {\n                row.append(bell[i-1][j-1])\n            } else {\n                row.append(bell[i-1][j-1] + bell[i-1][j])\n            }\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "tmpqwn3lo8i/tmpqwn3lo8i.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae3b0933c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae3b062ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae3b062a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae3b06297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqwn3lo8i                        0x0000562239a61635 <unavailable> + 5685\n5    libc.so.6                          0x00002ae3b0b1f460 __libc_start_main + 245\n6    tmpqwn3lo8i                        0x0000562239a612e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2..<n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n - 1][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmp_3eumrr7/tmp_3eumrr7.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad0df793c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad0df48ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad0df48a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad0df4897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_3eumrr7                        0x00005645d1f98635 <unavailable> + 5685\n5    libc.so.6                          0x00002ad0df97f460 __libc_start_main + 245\n6    tmp_3eumrr7                        0x00005645d1f982e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    for i in 1...n {\n        var row = [Int]()\n        row.append(bell[i-1][0])\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + row[j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmpn5ur9qfk/tmpn5ur9qfk.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b087c331c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b087c028b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b087c028988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b087c0277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn5ur9qfk                        0x000055aa05acf725 <unavailable> + 5925\n5    libc.so.6                          0x00002b087c51d460 __libc_start_main + 245\n6    tmpn5ur9qfk                        0x000055aa05acf3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab772000c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab771cf7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab771cf7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab771cf713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab771cf6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ab771ce048a <unavailable> + 1340554\n6    tmps6dpjkx2                        0x00005600a1099c77 <unavailable> + 7287\n7    tmps6dpjkx2                        0x00005600a10996b8 <unavailable> + 5816\n8    libc.so.6                          0x00002ab7721ec460 __libc_start_main + 245\n9    tmps6dpjkx2                        0x00005600a10993d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab772000c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab771cf7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab771cf7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab771cf713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab771cf6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ab771ce048a <unavailable> + 1340554\n6    tmps6dpjkx2                        0x00005600a1099c77 <unavailable> + 7287\n7    tmps6dpjkx2                        0x00005600a10996b8 <unavailable> + 5816\n8    libc.so.6                          0x00002ab7721ec460 __libc_start_main + 245\n9    tmps6dpjkx2                        0x00005600a10993d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    var bell: [Int] = [0]\n    bell.append(1)\n    for i in 2...n {\n        var sum = 0\n        for j in 0..<i {\n            sum += bell[j] * bell[i - j - 1]\n        }\n        bell.append(sum)\n    }\n    return bell[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmppc9rp711/tmppc9rp711.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b23c73f5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b23c70ecb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b23c70ec988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b23c70eb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppc9rp711                        0x0000561b6962c5e5 <unavailable> + 5605\n5    libc.so.6                          0x00002b23c75e1460 __libc_start_main + 245\n6    tmppc9rp711                        0x0000561b6962c299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i-1][0])\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81bb763c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81bb45a561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b81bb45a286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b81bb45a13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b81bb459bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b81bb44348a <unavailable> + 1340554\n6    tmp1lbcuof9                        0x000055a462b56ce1 <unavailable> + 7393\n7    tmp1lbcuof9                        0x000055a462b566b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b81bb94f460 __libc_start_main + 245\n9    tmp1lbcuof9                        0x000055a462b563d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2..<n {\n        bell.append([1])\n        for j in 1..<i {\n            bell[i].append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        bell[i].append(1)\n    }\n    return bell[n-1][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmpafvn03uv/tmpafvn03uv.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aacaef03c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aacaebfab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aacaebfa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aacaebf97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpafvn03uv                        0x00005616800c3635 <unavailable> + 5685\n5    libc.so.6                          0x00002aacaf0ef460 __libc_start_main + 245\n6    tmpafvn03uv                        0x00005616800c32e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell: [[Int]] = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i-1][0])\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81bb763c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81bb45a561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b81bb45a286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b81bb45a13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b81bb459bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b81bb44348a <unavailable> + 1340554\n6    tmp1lbcuof9                        0x000055a462b56ce1 <unavailable> + 7393\n7    tmp1lbcuof9                        0x000055a462b566b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b81bb94f460 __libc_start_main + 245\n9    tmp1lbcuof9                        0x000055a462b563d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1...i {\n            row.append(bell[i - 1][j - 1] + row[j - 1])\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmpes0i61ll/tmpes0i61ll.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67cdef7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67cdbeeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67cdbee988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67cdbed7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpes0i61ll                        0x000055c67f39d635 <unavailable> + 5685\n5    libc.so.6                          0x00002b67ce0e3460 __libc_start_main + 245\n6    tmpes0i61ll                        0x000055c67f39d2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57eb607c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57eb2fe561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b57eb2fe286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b57eb2fe13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b57eb2fdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b57eb2e748a <unavailable> + 1340554\n6    tmp9_wq5z0b                        0x0000559f69903c77 <unavailable> + 7287\n7    tmp9_wq5z0b                        0x0000559f699036b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b57eb7f3460 __libc_start_main + 245\n9    tmp9_wq5z0b                        0x0000559f699033d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        bell.append([1])\n        for j in 1..<i {\n            bell[i].append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        bell[i].append(1)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmpuppv1cji/tmpuppv1cji.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab18ac00c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab18a8f7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab18a8f7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab18a8f67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuppv1cji                        0x0000559d6cded725 <unavailable> + 5925\n5    libc.so.6                          0x00002ab18adec460 __libc_start_main + 245\n6    tmpuppv1cji                        0x0000559d6cded3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab772000c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab771cf7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab771cf7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab771cf713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab771cf6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ab771ce048a <unavailable> + 1340554\n6    tmps6dpjkx2                        0x00005600a1099c77 <unavailable> + 7287\n7    tmps6dpjkx2                        0x00005600a10996b8 <unavailable> + 5816\n8    libc.so.6                          0x00002ab7721ec460 __libc_start_main + 245\n9    tmps6dpjkx2                        0x00005600a10993d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2..<n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n - 1][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmp_3eumrr7/tmp_3eumrr7.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad0df793c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad0df48ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad0df48a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad0df4897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_3eumrr7                        0x00005645d1f98635 <unavailable> + 5685\n5    libc.so.6                          0x00002ad0df97f460 __libc_start_main + 245\n6    tmp_3eumrr7                        0x00005645d1f982e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        bell.append([1])\n        for j in 1..<i {\n            bell[i].append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        bell[i].append(1)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmpuppv1cji/tmpuppv1cji.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab18ac00c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab18a8f7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab18a8f7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab18a8f67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuppv1cji                        0x0000559d6cded725 <unavailable> + 5925\n5    libc.so.6                          0x00002ab18adec460 __libc_start_main + 245\n6    tmpuppv1cji                        0x0000559d6cded3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1..<i {\n            temp.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf28d08c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf289ff561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002abf289ff286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002abf289ff13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002abf289febb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002abf289e848a <unavailable> + 1340554\n6    tmpz96mazal                        0x00005653519a5c77 <unavailable> + 7287\n7    tmpz96mazal                        0x00005653519a56b8 <unavailable> + 5816\n8    libc.so.6                          0x00002abf28ef4460 __libc_start_main + 245\n9    tmpz96mazal                        0x00005653519a53d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57eb607c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57eb2fe561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b57eb2fe286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b57eb2fe13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b57eb2fdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b57eb2e748a <unavailable> + 1340554\n6    tmp9_wq5z0b                        0x0000559f69903c77 <unavailable> + 7287\n7    tmp9_wq5z0b                        0x0000559f699036b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b57eb7f3460 __libc_start_main + 245\n9    tmp9_wq5z0b                        0x0000559f699033d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    for i in 1...n {\n        bell.append([1])\n        for j in 1...i {\n            bell[i].append(bell[i-1][j-1] + bell[i][j-1])\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmp1xl83duc/tmp1xl83duc.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b79574e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b79571e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b79571e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b79571df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1xl83duc                        0x000055731991e635 <unavailable> + 5685\n5    libc.so.6                          0x00002b79576d5460 __libc_start_main + 245\n6    tmp1xl83duc                        0x000055731991e2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i-1][0])\n        for j in 0..<i-1 {\n            row.append(bell[i-1][j] + bell[i][j])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7fe5d49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7fe5a40561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b7fe5a40286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b7fe5a4013c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b7fe5a3fbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b7fe5a2948a <unavailable> + 1340554\n6    tmpuo8sr35z                        0x000056419a9decc4 <unavailable> + 7364\n7    tmpuo8sr35z                        0x000056419a9de6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b7fe5f35460 __libc_start_main + 245\n9    tmpuo8sr35z                        0x000056419a9de3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1...i {\n            row.append(bell[i-1][j-1] + row[j-1])\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "tmpqa8pu990/tmpqa8pu990.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b80ab8ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b80ab5c3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b80ab5c3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b80ab5c27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqa8pu990                        0x0000558d9096a635 <unavailable> + 5685\n5    libc.so.6                          0x00002b80abab8460 __libc_start_main + 245\n6    tmpqa8pu990                        0x0000558d9096a2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    \n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0b00c59c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0b00950561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b0b00950286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b0b0095013c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b0b0094fbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b0b0093948a <unavailable> + 1340554\n6    tmpswf4kggx                        0x00005567001bbc77 <unavailable> + 7287\n7    tmpswf4kggx                        0x00005567001bb6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b0b00e45460 __libc_start_main + 245\n9    tmpswf4kggx                        0x00005567001bb3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        bell.append([1])\n        for j in 1..<i {\n            bell[i].append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        bell[i].append(1)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmp3fm54sx2/tmp3fm54sx2.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b28c15dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b28c12d3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b28c12d3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b28c12d27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3fm54sx2                        0x00005627452cc725 <unavailable> + 5925\n5    libc.so.6                          0x00002b28c17c8460 __libc_start_main + 245\n6    tmp3fm54sx2                        0x00005627452cc3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1..<i {\n            temp.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3bdb002c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3bdacf9561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b3bdacf9286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b3bdacf913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b3bdacf8bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b3bdace248a <unavailable> + 1340554\n6    tmpsos9vpee                        0x0000559aba0e9c77 <unavailable> + 7287\n7    tmpsos9vpee                        0x0000559aba0e96b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b3bdb1ee460 __libc_start_main + 245\n9    tmpsos9vpee                        0x0000559aba0e93d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1...i {\n            row.append(bell[i-1][j-1] + row[j-1])\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "tmpqa8pu990/tmpqa8pu990.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b80ab8ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b80ab5c3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b80ab5c3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b80ab5c27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqa8pu990                        0x0000558d9096a635 <unavailable> + 5685\n5    libc.so.6                          0x00002b80abab8460 __libc_start_main + 245\n6    tmpqa8pu990                        0x0000558d9096a2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1...i {\n            row.append(bell[i-1][j-1] + row[j-1])\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "tmpqa8pu990/tmpqa8pu990.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b80ab8ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b80ab5c3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b80ab5c3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b80ab5c27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqa8pu990                        0x0000558d9096a635 <unavailable> + 5685\n5    libc.so.6                          0x00002b80abab8460 __libc_start_main + 245\n6    tmpqa8pu990                        0x0000558d9096a2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab772000c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab771cf7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab771cf7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab771cf713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab771cf6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ab771ce048a <unavailable> + 1340554\n6    tmps6dpjkx2                        0x00005600a1099c77 <unavailable> + 7287\n7    tmps6dpjkx2                        0x00005600a10996b8 <unavailable> + 5816\n8    libc.so.6                          0x00002ab7721ec460 __libc_start_main + 245\n9    tmps6dpjkx2                        0x00005600a10993d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1...i {\n            row.append(bell[i-1][j-1] + row[j-1])\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "tmpqa8pu990/tmpqa8pu990.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b80ab8ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b80ab5c3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b80ab5c3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b80ab5c27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqa8pu990                        0x0000558d9096a635 <unavailable> + 5685\n5    libc.so.6                          0x00002b80abab8460 __libc_start_main + 245\n6    tmpqa8pu990                        0x0000558d9096a2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i-1][0])\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdca88ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdca581561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002acdca581286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002acdca58113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002acdca580bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002acdca56a48a <unavailable> + 1340554\n6    tmp7ej2rb9a                        0x000055d084b03ce1 <unavailable> + 7393\n7    tmp7ej2rb9a                        0x000055d084b036b8 <unavailable> + 5816\n8    libc.so.6                          0x00002acdcaa76460 __libc_start_main + 245\n9    tmp7ej2rb9a                        0x000055d084b033d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i - 1][0])\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i - 1][j])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "tmp79m3eis1/tmp79m3eis1.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49bea2dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49be724b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49be724988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49be7237b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp79m3eis1                        0x000055a4e44a4725 <unavailable> + 5925\n5    libc.so.6                          0x00002b49bec19460 __libc_start_main + 245\n6    tmp79m3eis1                        0x000055a4e44a43d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57eb607c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57eb2fe561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b57eb2fe286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b57eb2fe13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b57eb2fdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b57eb2e748a <unavailable> + 1340554\n6    tmp9_wq5z0b                        0x0000559f69903c77 <unavailable> + 7287\n7    tmp9_wq5z0b                        0x0000559f699036b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b57eb7f3460 __libc_start_main + 245\n9    tmp9_wq5z0b                        0x0000559f699033d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        bell.append([1])\n        for j in 1..<i {\n            bell[i].append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        bell[i].append(1)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "tmp5yuislfs/tmp5yuislfs.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b09dbc6dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b09db964b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b09db964988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b09db9637b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5yuislfs                        0x0000559e6caab725 <unavailable> + 5925\n5    libc.so.6                          0x00002b09dbe59460 __libc_start_main + 245\n6    tmp5yuislfs                        0x0000559e6caab3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1...i {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2..<n {\n        var row = [Int]()\n        row.append(bell[i - 1][0])\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n - 1][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmpsts8t398/tmpsts8t398.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a63194c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a62e8bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a62e8b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a62e8a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsts8t398                        0x000055e0d561c635 <unavailable> + 5685\n5    libc.so.6                          0x00002b9a63380460 __libc_start_main + 245\n6    tmpsts8t398                        0x000055e0d561c2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n+1), count: n+1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1...i {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell: [[Int]] = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab772000c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab771cf7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab771cf7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab771cf713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab771cf6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ab771ce048a <unavailable> + 1340554\n6    tmps6dpjkx2                        0x00005600a1099c77 <unavailable> + 7287\n7    tmps6dpjkx2                        0x00005600a10996b8 <unavailable> + 5816\n8    libc.so.6                          0x00002ab7721ec460 __libc_start_main + 245\n9    tmps6dpjkx2                        0x00005600a10993d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell: [[Int]] = [[Int]](repeating: [Int](repeating: 0, count: n+1), count: n+1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1...i {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1...i {\n            row.append(bell[i - 1][j - 1] + row[j - 1])\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmpes0i61ll/tmpes0i61ll.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67cdef7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67cdbeeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67cdbee988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67cdbed7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpes0i61ll                        0x000055c67f39d635 <unavailable> + 5685\n5    libc.so.6                          0x00002b67ce0e3460 __libc_start_main + 245\n6    tmpes0i61ll                        0x000055c67f39d2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab772000c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab771cf7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab771cf7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab771cf713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab771cf6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ab771ce048a <unavailable> + 1340554\n6    tmps6dpjkx2                        0x00005600a1099c77 <unavailable> + 7287\n7    tmps6dpjkx2                        0x00005600a10996b8 <unavailable> + 5816\n8    libc.so.6                          0x00002ab7721ec460 __libc_start_main + 245\n9    tmps6dpjkx2                        0x00005600a10993d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57eb607c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57eb2fe561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b57eb2fe286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b57eb2fe13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b57eb2fdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b57eb2e748a <unavailable> + 1340554\n6    tmp9_wq5z0b                        0x0000559f69903c77 <unavailable> + 7287\n7    tmp9_wq5z0b                        0x0000559f699036b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b57eb7f3460 __libc_start_main + 245\n9    tmp9_wq5z0b                        0x0000559f699033d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57eb607c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57eb2fe561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b57eb2fe286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b57eb2fe13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b57eb2fdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b57eb2e748a <unavailable> + 1340554\n6    tmp9_wq5z0b                        0x0000559f69903c77 <unavailable> + 7287\n7    tmp9_wq5z0b                        0x0000559f699036b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b57eb7f3460 __libc_start_main + 245\n9    tmp9_wq5z0b                        0x0000559f699033d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    \n    for i in 2..<n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    \n    return bell[n-1][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmptikcdqki/tmptikcdqki.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1388822c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1388519b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1388519988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b13885187b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptikcdqki                        0x000055a1e1914635 <unavailable> + 5685\n5    libc.so.6                          0x00002b1388a0e460 __libc_start_main + 245\n6    tmptikcdqki                        0x000055a1e19142e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab772000c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab771cf7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab771cf7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab771cf713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab771cf6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ab771ce048a <unavailable> + 1340554\n6    tmps6dpjkx2                        0x00005600a1099c77 <unavailable> + 7287\n7    tmps6dpjkx2                        0x00005600a10996b8 <unavailable> + 5816\n8    libc.so.6                          0x00002ab7721ec460 __libc_start_main + 245\n9    tmps6dpjkx2                        0x00005600a10993d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57eb607c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57eb2fe561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b57eb2fe286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b57eb2fe13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b57eb2fdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b57eb2e748a <unavailable> + 1340554\n6    tmp9_wq5z0b                        0x0000559f69903c77 <unavailable> + 7287\n7    tmp9_wq5z0b                        0x0000559f699036b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b57eb7f3460 __libc_start_main + 245\n9    tmp9_wq5z0b                        0x0000559f699033d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i - 1][0])\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i - 1][j])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "tmp79m3eis1/tmp79m3eis1.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49bea2dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49be724b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49be724988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49be7237b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp79m3eis1                        0x000055a4e44a4725 <unavailable> + 5925\n5    libc.so.6                          0x00002b49bec19460 __libc_start_main + 245\n6    tmp79m3eis1                        0x000055a4e44a43d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i-1][0])\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81bb763c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81bb45a561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b81bb45a286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b81bb45a13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b81bb459bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b81bb44348a <unavailable> + 1340554\n6    tmp1lbcuof9                        0x000055a462b56ce1 <unavailable> + 7393\n7    tmp1lbcuof9                        0x000055a462b566b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b81bb94f460 __libc_start_main + 245\n9    tmp1lbcuof9                        0x000055a462b563d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1..<i {\n            temp.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b48fdab2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b48fd7a9561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b48fd7a9286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b48fd7a913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b48fd7a8bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b48fd79248a <unavailable> + 1340554\n6    tmpdsuebbx_                        0x00005614d97a5c77 <unavailable> + 7287\n7    tmpdsuebbx_                        0x00005614d97a56b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b48fdc9e460 __libc_start_main + 245\n9    tmpdsuebbx_                        0x00005614d97a53d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1...i {\n            row.append(bell[i-1][j-1] + row[j-1])\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "tmpqa8pu990/tmpqa8pu990.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b80ab8ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b80ab5c3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b80ab5c3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b80ab5c27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqa8pu990                        0x0000558d9096a635 <unavailable> + 5685\n5    libc.so.6                          0x00002b80abab8460 __libc_start_main + 245\n6    tmpqa8pu990                        0x0000558d9096a2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57eb607c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57eb2fe561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b57eb2fe286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b57eb2fe13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b57eb2fdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b57eb2e748a <unavailable> + 1340554\n6    tmp9_wq5z0b                        0x0000559f69903c77 <unavailable> + 7287\n7    tmp9_wq5z0b                        0x0000559f699036b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b57eb7f3460 __libc_start_main + 245\n9    tmp9_wq5z0b                        0x0000559f699033d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = Array(repeating: Array(repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1...i {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i-1][i-1])\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + row[j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmpxrw7m3vo/tmpxrw7m3vo.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5646a9cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5646793b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5646793988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56467927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxrw7m3vo                        0x000055ad45c65725 <unavailable> + 5925\n5    libc.so.6                          0x00002b5646c88460 __libc_start_main + 245\n6    tmpxrw7m3vo                        0x000055ad45c653d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i-1][0])\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81bb763c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81bb45a561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b81bb45a286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b81bb45a13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b81bb459bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b81bb44348a <unavailable> + 1340554\n6    tmp1lbcuof9                        0x000055a462b56ce1 <unavailable> + 7393\n7    tmp1lbcuof9                        0x000055a462b566b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b81bb94f460 __libc_start_main + 245\n9    tmp1lbcuof9                        0x000055a462b563d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i - 1][0])\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i - 1][j])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "tmp79m3eis1/tmp79m3eis1.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49bea2dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49be724b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49be724988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49be7237b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp79m3eis1                        0x000055a4e44a4725 <unavailable> + 5925\n5    libc.so.6                          0x00002b49bec19460 __libc_start_main + 245\n6    tmp79m3eis1                        0x000055a4e44a43d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2..<n {\n        bell.append([1])\n        for j in 1..<i {\n            bell[i].append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        bell[i].append(1)\n    }\n    return bell[n-1][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmpwloxbaqv/tmpwloxbaqv.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae47b9e1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae47b6d8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae47b6d8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae47b6d77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwloxbaqv                        0x00005650694f4635 <unavailable> + 5685\n5    libc.so.6                          0x00002ae47bbcd460 __libc_start_main + 245\n6    tmpwloxbaqv                        0x00005650694f42e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57eb607c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57eb2fe561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b57eb2fe286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b57eb2fe13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b57eb2fdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b57eb2e748a <unavailable> + 1340554\n6    tmp9_wq5z0b                        0x0000559f69903c77 <unavailable> + 7287\n7    tmp9_wq5z0b                        0x0000559f699036b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b57eb7f3460 __libc_start_main + 245\n9    tmp9_wq5z0b                        0x0000559f699033d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57eb607c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57eb2fe561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b57eb2fe286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b57eb2fe13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b57eb2fdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b57eb2e748a <unavailable> + 1340554\n6    tmp9_wq5z0b                        0x0000559f69903c77 <unavailable> + 7287\n7    tmp9_wq5z0b                        0x0000559f699036b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b57eb7f3460 __libc_start_main + 245\n9    tmp9_wq5z0b                        0x0000559f699033d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57eb607c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57eb2fe561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b57eb2fe286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b57eb2fe13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b57eb2fdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b57eb2e748a <unavailable> + 1340554\n6    tmp9_wq5z0b                        0x0000559f69903c77 <unavailable> + 7287\n7    tmp9_wq5z0b                        0x0000559f699036b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b57eb7f3460 __libc_start_main + 245\n9    tmp9_wq5z0b                        0x0000559f699033d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab772000c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab771cf7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab771cf7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab771cf713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab771cf6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ab771ce048a <unavailable> + 1340554\n6    tmps6dpjkx2                        0x00005600a1099c77 <unavailable> + 7287\n7    tmps6dpjkx2                        0x00005600a10996b8 <unavailable> + 5816\n8    libc.so.6                          0x00002ab7721ec460 __libc_start_main + 245\n9    tmps6dpjkx2                        0x00005600a10993d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell: [[Int]] = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6a40d7ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6a40a71561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b6a40a71286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b6a40a7113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b6a40a70bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b6a40a5a48a <unavailable> + 1340554\n6    tmpo2jbe9er                        0x0000556b1b59ec8e <unavailable> + 7310\n7    tmpo2jbe9er                        0x0000556b1b59e6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b6a40f66460 __libc_start_main + 245\n9    tmpo2jbe9er                        0x0000556b1b59e3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57eb607c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57eb2fe561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b57eb2fe286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b57eb2fe13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b57eb2fdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b57eb2e748a <unavailable> + 1340554\n6    tmp9_wq5z0b                        0x0000559f69903c77 <unavailable> + 7287\n7    tmp9_wq5z0b                        0x0000559f699036b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b57eb7f3460 __libc_start_main + 245\n9    tmp9_wq5z0b                        0x0000559f699033d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell: [[Int]] = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1...i {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57eb607c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57eb2fe561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b57eb2fe286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b57eb2fe13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b57eb2fdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b57eb2e748a <unavailable> + 1340554\n6    tmp9_wq5z0b                        0x0000559f69903c77 <unavailable> + 7287\n7    tmp9_wq5z0b                        0x0000559f699036b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b57eb7f3460 __libc_start_main + 245\n9    tmp9_wq5z0b                        0x0000559f699033d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1..<i {\n            temp.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3bdb002c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3bdacf9561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b3bdacf9286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b3bdacf913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b3bdacf8bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b3bdace248a <unavailable> + 1340554\n6    tmpsos9vpee                        0x0000559aba0e9c77 <unavailable> + 7287\n7    tmpsos9vpee                        0x0000559aba0e96b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b3bdb1ee460 __libc_start_main + 245\n9    tmpsos9vpee                        0x0000559aba0e93d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell: [[Int]] = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57eb607c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57eb2fe561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b57eb2fe286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b57eb2fe13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b57eb2fdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b57eb2e748a <unavailable> + 1340554\n6    tmp9_wq5z0b                        0x0000559f69903c77 <unavailable> + 7287\n7    tmp9_wq5z0b                        0x0000559f699036b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b57eb7f3460 __libc_start_main + 245\n9    tmp9_wq5z0b                        0x0000559f699033d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab772000c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab771cf7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab771cf7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab771cf713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab771cf6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ab771ce048a <unavailable> + 1340554\n6    tmps6dpjkx2                        0x00005600a1099c77 <unavailable> + 7287\n7    tmps6dpjkx2                        0x00005600a10996b8 <unavailable> + 5816\n8    libc.so.6                          0x00002ab7721ec460 __libc_start_main + 245\n9    tmps6dpjkx2                        0x00005600a10993d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    for i in 1...n {\n        var row = [Int]()\n        row.append(bell[i-1][i-1])\n        for j in 1...i {\n            row.append(row[j-1] + bell[i-1][j-1])\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var temp = [1]\n        for j in 1..<i {\n            temp.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b474623cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4745f33561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b4745f33286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b4745f3313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b4745f32bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b4745f1c48a <unavailable> + 1340554\n6    tmpkaf9fuvh                        0x0000564e3de34c2b <unavailable> + 7211\n7    tmpkaf9fuvh                        0x0000564e3de34668 <unavailable> + 5736\n8    libc.so.6                          0x00002b4746428460 __libc_start_main + 245\n9    tmpkaf9fuvh                        0x0000564e3de34389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1..<i {\n            temp.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf28d08c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf289ff561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002abf289ff286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002abf289ff13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002abf289febb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002abf289e848a <unavailable> + 1340554\n6    tmpz96mazal                        0x00005653519a5c77 <unavailable> + 7287\n7    tmpz96mazal                        0x00005653519a56b8 <unavailable> + 5816\n8    libc.so.6                          0x00002abf28ef4460 __libc_start_main + 245\n9    tmpz96mazal                        0x00005653519a53d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2..<n {\n        var row = [Int]()\n        row.append(bell[i - 1][0])\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n - 1][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmpsts8t398/tmpsts8t398.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a63194c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a62e8bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a62e8b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a62e8a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsts8t398                        0x000055e0d561c635 <unavailable> + 5685\n5    libc.so.6                          0x00002b9a63380460 __libc_start_main + 245\n6    tmpsts8t398                        0x000055e0d561c2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57eb607c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57eb2fe561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b57eb2fe286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b57eb2fe13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b57eb2fdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b57eb2e748a <unavailable> + 1340554\n6    tmp9_wq5z0b                        0x0000559f69903c77 <unavailable> + 7287\n7    tmp9_wq5z0b                        0x0000559f699036b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b57eb7f3460 __libc_start_main + 245\n9    tmp9_wq5z0b                        0x0000559f699033d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57eb607c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57eb2fe561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b57eb2fe286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b57eb2fe13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b57eb2fdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b57eb2e748a <unavailable> + 1340554\n6    tmp9_wq5z0b                        0x0000559f69903c77 <unavailable> + 7287\n7    tmp9_wq5z0b                        0x0000559f699036b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b57eb7f3460 __libc_start_main + 245\n9    tmp9_wq5z0b                        0x0000559f699033d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    for i in 1...n {\n        bell.append([1])\n        for j in 1...i {\n            bell[i].append(bell[i-1][j-1] + bell[i][j-1])\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmp1xl83duc/tmp1xl83duc.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b79574e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b79571e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b79571e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b79571df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1xl83duc                        0x000055731991e635 <unavailable> + 5685\n5    libc.so.6                          0x00002b79576d5460 __libc_start_main + 245\n6    tmp1xl83duc                        0x000055731991e2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i - 1][0])\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i - 1][j])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "tmp79m3eis1/tmp79m3eis1.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49bea2dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49be724b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49be724988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49be7237b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp79m3eis1                        0x000055a4e44a4725 <unavailable> + 5925\n5    libc.so.6                          0x00002b49bec19460 __libc_start_main + 245\n6    tmp79m3eis1                        0x000055a4e44a43d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1..<i {\n            temp.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b48fdab2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b48fd7a9561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b48fd7a9286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b48fd7a913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b48fd7a8bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b48fd79248a <unavailable> + 1340554\n6    tmpdsuebbx_                        0x00005614d97a5c77 <unavailable> + 7287\n7    tmpdsuebbx_                        0x00005614d97a56b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b48fdc9e460 __libc_start_main + 245\n9    tmpdsuebbx_                        0x00005614d97a53d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab772000c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab771cf7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab771cf7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab771cf713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab771cf6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ab771ce048a <unavailable> + 1340554\n6    tmps6dpjkx2                        0x00005600a1099c77 <unavailable> + 7287\n7    tmps6dpjkx2                        0x00005600a10996b8 <unavailable> + 5816\n8    libc.so.6                          0x00002ab7721ec460 __libc_start_main + 245\n9    tmps6dpjkx2                        0x00005600a10993d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell: [[Int]] = [[Int]](repeating: [Int](repeating: 0, count: n+1), count: n+1)\n    bell[0][0] = 1\n    for i in 1..<n+1 {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1..<i+1 {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n+1), count: n+1)\n    bell[0][0] = 1\n    for i in 1..<n+1 {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1..<i+1 {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab772000c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab771cf7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab771cf7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab771cf713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab771cf6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ab771ce048a <unavailable> + 1340554\n6    tmps6dpjkx2                        0x00005600a1099c77 <unavailable> + 7287\n7    tmps6dpjkx2                        0x00005600a10996b8 <unavailable> + 5816\n8    libc.so.6                          0x00002ab7721ec460 __libc_start_main + 245\n9    tmps6dpjkx2                        0x00005600a10993d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i - 1][0])\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i - 1][j])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "tmp79m3eis1/tmp79m3eis1.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49bea2dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49be724b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49be724988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49be7237b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp79m3eis1                        0x000055a4e44a4725 <unavailable> + 5925\n5    libc.so.6                          0x00002b49bec19460 __libc_start_main + 245\n6    tmp79m3eis1                        0x000055a4e44a43d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    var bell = [[Int]]()\n    bell.append([1])\n    for i in 1...n {\n        var row = [Int]()\n        for j in 0...i {\n            let tmp = bell[i-1][j-1] + (j >= i ? 0 : bell[i][j])\n            row.append(tmp)\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b806928ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8068f85561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b8068f85286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b8068f8513c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b8068f84bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b8068d87e83 <unavailable> + 188035\n6    tmpgbagvhbj                        0x00005582ba22aaff <unavailable> + 6911\n7    tmpgbagvhbj                        0x00005582ba22a5c8 <unavailable> + 5576\n8    libc.so.6                          0x00002b806947a460 __libc_start_main + 245\n9    tmpgbagvhbj                        0x00005582ba22a2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell: [[Int]] = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i - 1][0])\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i - 1][j])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "tmp79m3eis1/tmp79m3eis1.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49bea2dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49be724b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49be724988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49be7237b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp79m3eis1                        0x000055a4e44a4725 <unavailable> + 5925\n5    libc.so.6                          0x00002b49bec19460 __libc_start_main + 245\n6    tmp79m3eis1                        0x000055a4e44a43d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell: [[Int]] = [[Int]](repeating: [Int](repeating: 0, count: n+1), count: n+1)\n    bell[0][0] = 1\n    for i in 1..<n+1 {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1..<i+1 {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i-1][0])\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdca88ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdca581561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002acdca581286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002acdca58113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002acdca580bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002acdca56a48a <unavailable> + 1340554\n6    tmp7ej2rb9a                        0x000055d084b03ce1 <unavailable> + 7393\n7    tmp7ej2rb9a                        0x000055d084b036b8 <unavailable> + 5816\n8    libc.so.6                          0x00002acdcaa76460 __libc_start_main + 245\n9    tmp7ej2rb9a                        0x000055d084b033d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2..<n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n-1][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmpu6gt2j26/tmpu6gt2j26.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab816bebc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab8168e2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab8168e2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab8168e17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu6gt2j26                        0x000055e3a12da635 <unavailable> + 5685\n5    libc.so.6                          0x00002ab816dd7460 __libc_start_main + 245\n6    tmpu6gt2j26                        0x000055e3a12da2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    var bell = [[Int]]()\n    bell.append([1])\n    for i in 1...n {\n        var row = [Int]()\n        for j in 0...i {\n            if j == 0 {\n                row.append(bell[i - 1][j])\n            } else {\n                row.append(bell[i - 1][j - 1] + row[j - 1])\n            }\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmpartw4qyx/tmpartw4qyx.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad045794c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad04548bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad04548b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad04548a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpartw4qyx                        0x000055ce727cb635 <unavailable> + 5685\n5    libc.so.6                          0x00002ad045980460 __libc_start_main + 245\n6    tmpartw4qyx                        0x000055ce727cb2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1..<i {\n            temp.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b48fdab2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b48fd7a9561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b48fd7a9286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b48fd7a913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b48fd7a8bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b48fd79248a <unavailable> + 1340554\n6    tmpdsuebbx_                        0x00005614d97a5c77 <unavailable> + 7287\n7    tmpdsuebbx_                        0x00005614d97a56b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b48fdc9e460 __libc_start_main + 245\n9    tmpdsuebbx_                        0x00005614d97a53d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2..<n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n-1][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmpu6gt2j26/tmpu6gt2j26.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab816bebc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab8168e2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab8168e2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab8168e17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu6gt2j26                        0x000055e3a12da635 <unavailable> + 5685\n5    libc.so.6                          0x00002ab816dd7460 __libc_start_main + 245\n6    tmpu6gt2j26                        0x000055e3a12da2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        bell.append([1])\n        for j in 1..<i {\n            bell[i].append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        bell[i].append(1)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmp3fm54sx2/tmp3fm54sx2.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b28c15dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b28c12d3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b28c12d3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b28c12d27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3fm54sx2                        0x00005627452cc725 <unavailable> + 5925\n5    libc.so.6                          0x00002b28c17c8460 __libc_start_main + 245\n6    tmp3fm54sx2                        0x00005627452cc3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2..<n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n-1][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmpu6gt2j26/tmpu6gt2j26.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab816bebc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab8168e2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab8168e2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab8168e17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu6gt2j26                        0x000055e3a12da635 <unavailable> + 5685\n5    libc.so.6                          0x00002ab816dd7460 __libc_start_main + 245\n6    tmpu6gt2j26                        0x000055e3a12da2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i-1][0])\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81bb763c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81bb45a561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b81bb45a286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b81bb45a13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b81bb459bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b81bb44348a <unavailable> + 1340554\n6    tmp1lbcuof9                        0x000055a462b56ce1 <unavailable> + 7393\n7    tmp1lbcuof9                        0x000055a462b566b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b81bb94f460 __libc_start_main + 245\n9    tmp1lbcuof9                        0x000055a462b563d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell: [[Int]] = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i-1][0])\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdca88ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdca581561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002acdca581286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002acdca58113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002acdca580bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002acdca56a48a <unavailable> + 1340554\n6    tmp7ej2rb9a                        0x000055d084b03ce1 <unavailable> + 7393\n7    tmp7ej2rb9a                        0x000055d084b036b8 <unavailable> + 5816\n8    libc.so.6                          0x00002acdcaa76460 __libc_start_main + 245\n9    tmp7ej2rb9a                        0x000055d084b033d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell: [[Int]] = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i-1][i-1])\n        for j in 1...i-1 {\n            row.append(bell[i-1][j-1] + row[j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmp_8brlfng/tmp_8brlfng.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab308402c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab3080f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab3080f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab3080f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_8brlfng                        0x0000555dcbc44635 <unavailable> + 5685\n5    libc.so.6                          0x00002ab3085ee460 __libc_start_main + 245\n6    tmp_8brlfng                        0x0000555dcbc442e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1...i {\n            row.append(bell[i-1][j-1] + row[j-1])\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmp_zeco1o9/tmp_zeco1o9.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b30c7d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b30c7a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b30c7a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b30c7a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_zeco1o9                        0x00005643ec9c4635 <unavailable> + 5685\n5    libc.so.6                          0x00002b30c7f5f460 __libc_start_main + 245\n6    tmp_zeco1o9                        0x00005643ec9c42e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i-1][0])\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81bb763c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81bb45a561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b81bb45a286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b81bb45a13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b81bb459bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b81bb44348a <unavailable> + 1340554\n6    tmp1lbcuof9                        0x000055a462b56ce1 <unavailable> + 7393\n7    tmp1lbcuof9                        0x000055a462b566b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b81bb94f460 __libc_start_main + 245\n9    tmp1lbcuof9                        0x000055a462b563d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell: [[Int]] = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1...i {\n            row.append(bell[i-1][j-1] + row[j-1])\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "tmpqa8pu990/tmpqa8pu990.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b80ab8ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b80ab5c3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b80ab5c3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b80ab5c27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqa8pu990                        0x0000558d9096a635 <unavailable> + 5685\n5    libc.so.6                          0x00002b80abab8460 __libc_start_main + 245\n6    tmpqa8pu990                        0x0000558d9096a2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = Array(repeating: Array(repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1...i {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1...i {\n            row.append(bell[i-1][j-1] + row[j-1])\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "tmpqa8pu990/tmpqa8pu990.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b80ab8ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b80ab5c3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b80ab5c3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b80ab5c27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqa8pu990                        0x0000558d9096a635 <unavailable> + 5685\n5    libc.so.6                          0x00002b80abab8460 __libc_start_main + 245\n6    tmpqa8pu990                        0x0000558d9096a2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell: [[Int]] = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    var bell = [[Int]]()\n    bell.append([1])\n    for i in 1...n {\n        var row = [Int]()\n        for j in 0...i {\n            if j == 0 {\n                row.append(bell[i-1][j])\n            } else {\n                row.append(bell[i-1][j-1] + row[j-1])\n            }\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmp3fkx7jke/tmp3fkx7jke.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ade8727dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ade86f74b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ade86f74988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ade86f737b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3fkx7jke                        0x0000565039a45635 <unavailable> + 5685\n5    libc.so.6                          0x00002ade87469460 __libc_start_main + 245\n6    tmp3fkx7jke                        0x0000565039a452e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57eb607c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57eb2fe561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b57eb2fe286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b57eb2fe13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b57eb2fdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b57eb2e748a <unavailable> + 1340554\n6    tmp9_wq5z0b                        0x0000559f69903c77 <unavailable> + 7287\n7    tmp9_wq5z0b                        0x0000559f699036b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b57eb7f3460 __libc_start_main + 245\n9    tmp9_wq5z0b                        0x0000559f699033d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1..<i {\n            temp.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3bdb002c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3bdacf9561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b3bdacf9286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b3bdacf913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b3bdacf8bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b3bdace248a <unavailable> + 1340554\n6    tmpsos9vpee                        0x0000559aba0e9c77 <unavailable> + 7287\n7    tmpsos9vpee                        0x0000559aba0e96b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b3bdb1ee460 __libc_start_main + 245\n9    tmpsos9vpee                        0x0000559aba0e93d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1...i {\n            row.append(bell[i-1][j-1] + row[j-1])\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "tmpqa8pu990/tmpqa8pu990.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b80ab8ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b80ab5c3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b80ab5c3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b80ab5c27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqa8pu990                        0x0000558d9096a635 <unavailable> + 5685\n5    libc.so.6                          0x00002b80abab8460 __libc_start_main + 245\n6    tmpqa8pu990                        0x0000558d9096a2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i - 1][0])\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i - 1][j])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "tmp79m3eis1/tmp79m3eis1.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49bea2dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49be724b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49be724988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49be7237b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp79m3eis1                        0x000055a4e44a4725 <unavailable> + 5925\n5    libc.so.6                          0x00002b49bec19460 __libc_start_main + 245\n6    tmp79m3eis1                        0x000055a4e44a43d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2..<n {\n        bell.append([1])\n        for j in 1..<i {\n            bell[i].append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        bell[i].append(1)\n    }\n    return bell[n-1][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmpwloxbaqv/tmpwloxbaqv.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae47b9e1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae47b6d8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae47b6d8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae47b6d77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwloxbaqv                        0x00005650694f4635 <unavailable> + 5685\n5    libc.so.6                          0x00002ae47bbcd460 __libc_start_main + 245\n6    tmpwloxbaqv                        0x00005650694f42e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        bell.append([1])\n        for j in 1..<i {\n            bell[i].append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        bell[i].append(1)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmpuppv1cji/tmpuppv1cji.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab18ac00c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab18a8f7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab18a8f7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab18a8f67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuppv1cji                        0x0000559d6cded725 <unavailable> + 5925\n5    libc.so.6                          0x00002ab18adec460 __libc_start_main + 245\n6    tmpuppv1cji                        0x0000559d6cded3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    for i in 0...n {\n        var row = [Int]()\n        var endValue = 0\n        for j in 0...i {\n            if j == 0 {\n                endValue = 1\n            } else {\n                endValue = endValue * (i - j + 1) / j\n            }\n            row.append(endValue)\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "tmpzmyqhu_m/tmpzmyqhu_m.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba9d7a71c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba9d7768b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba9d7768988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba9d77677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzmyqhu_m                        0x00005651c5d86585 <unavailable> + 5509\n5    libc.so.6                          0x00002ba9d7c5d460 __libc_start_main + 245\n6    tmpzmyqhu_m                        0x00005651c5d86239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1..<i {\n            temp.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf28d08c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf289ff561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002abf289ff286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002abf289ff13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002abf289febb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002abf289e848a <unavailable> + 1340554\n6    tmpz96mazal                        0x00005653519a5c77 <unavailable> + 7287\n7    tmpz96mazal                        0x00005653519a56b8 <unavailable> + 5816\n8    libc.so.6                          0x00002abf28ef4460 __libc_start_main + 245\n9    tmpz96mazal                        0x00005653519a53d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50e75dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50e72d1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50e72d1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50e72d113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50e72d0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b50e72ba48a <unavailable> + 1340554\n6    tmpkhz993c6                        0x000055b9d3a7cc77 <unavailable> + 7287\n7    tmpkhz993c6                        0x000055b9d3a7c6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b50e77c6460 __libc_start_main + 245\n9    tmpkhz993c6                        0x000055b9d3a7c3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57eb607c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57eb2fe561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b57eb2fe286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b57eb2fe13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b57eb2fdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b57eb2e748a <unavailable> + 1340554\n6    tmp9_wq5z0b                        0x0000559f69903c77 <unavailable> + 7287\n7    tmp9_wq5z0b                        0x0000559f699036b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b57eb7f3460 __libc_start_main + 245\n9    tmp9_wq5z0b                        0x0000559f699033d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1...i {\n            row.append(bell[i-1][j-1] + row[j-1])\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509712,
      "stdout": "",
      "stderr": "tmpqa8pu990/tmpqa8pu990.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b80ab8ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b80ab5c3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b80ab5c3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b80ab5c27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqa8pu990                        0x0000558d9096a635 <unavailable> + 5685\n5    libc.so.6                          0x00002b80abab8460 __libc_start_main + 245\n6    tmpqa8pu990                        0x0000558d9096a2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i-1][0])\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdca88ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdca581561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002acdca581286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002acdca58113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002acdca580bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002acdca56a48a <unavailable> + 1340554\n6    tmp7ej2rb9a                        0x000055d084b03ce1 <unavailable> + 7393\n7    tmp7ej2rb9a                        0x000055d084b036b8 <unavailable> + 5816\n8    libc.so.6                          0x00002acdcaa76460 __libc_start_main + 245\n9    tmp7ej2rb9a                        0x000055d084b033d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}