{
  "name": "mbpp_627_find_First_Missing",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var result = 0\n    for i in 0..<array.count {\n        if array[i] != i + 1 {\n            result = i + 1\n            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpjtlyh6tm/tmpjtlyh6tm.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae3c53c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae3c50bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae3c50bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae3c50ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjtlyh6tm                        0x0000564538cfd54a <unavailable> + 5450\n5    libc.so.6                          0x00002ae3c55b0460 __libc_start_main + 245\n6    tmpjtlyh6tm                        0x0000564538cfd1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var result = 1\n    for i in array {\n        if i == result {\n            result += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpzexx3bvt/tmpzexx3bvt.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab781e70c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab781b67b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab781b67988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab781b667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzexx3bvt                        0x000055cec342462f <unavailable> + 5679\n5    libc.so.6                          0x00002ab78205c460 __libc_start_main + 245\n6    tmpzexx3bvt                        0x000055cec34240d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var missing = 1\n    for i in array {\n        if i == missing {\n            missing += 1\n        } else {\n            return missing\n        }\n    }\n    return missing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpgn4gx36i/tmpgn4gx36i.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afc061abc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afc05ea2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afc05ea2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afc05ea17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgn4gx36i                        0x000055a66c1e547a <unavailable> + 5242\n5    libc.so.6                          0x00002afc06397460 __libc_start_main + 245\n6    tmpgn4gx36i                        0x000055a66c1e50d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var min = 1\n    for i in array {\n        if i == min {\n            min += 1\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpseic9vxr/tmpseic9vxr.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9693b20c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9693817b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9693817988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b96938167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpseic9vxr                        0x000055b62ba8c62f <unavailable> + 5679\n5    libc.so.6                          0x00002b9693d0c460 __libc_start_main + 245\n6    tmpseic9vxr                        0x000055b62ba8c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var missingNumber = 1\n    for i in 0..<array.count {\n        if array[i] == missingNumber {\n            missingNumber += 1\n        }\n    }\n    return missingNumber\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "tmpk6y1gh36/tmpk6y1gh36.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5208bbbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b52088b2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b52088b2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b52088b17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk6y1gh36                        0x0000560a471e46ff <unavailable> + 5887\n5    libc.so.6                          0x00002b5208da7460 __libc_start_main + 245\n6    tmpk6y1gh36                        0x0000560a471e41a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var min = 1\n    for i in array {\n        if i == min {\n            min += 1\n        } else {\n            return min\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "tmp3v1jmxx4/tmp3v1jmxx4.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac800d33c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac800a2ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac800a2a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac800a297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3v1jmxx4                        0x000055744811347a <unavailable> + 5242\n5    libc.so.6                          0x00002ac800f1f460 __libc_start_main + 245\n6    tmp3v1jmxx4                        0x00005574481130d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "tmp7w72kxrv/tmp7w72kxrv.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b10df01dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b10ded14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b10ded14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b10ded137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7w72kxrv                        0x000056182a6983ba <unavailable> + 5050\n5    libc.so.6                          0x00002b10df209460 __libc_start_main + 245\n6    tmp7w72kxrv                        0x000056182a698019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "tmppiylo7gd/tmppiylo7gd.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acf7e462c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acf7e159b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acf7e159988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acf7e1587b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppiylo7gd                        0x000055db68f7b3ba <unavailable> + 5050\n5    libc.so.6                          0x00002acf7e64e460 __libc_start_main + 245\n6    tmppiylo7gd                        0x000055db68f7b019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    var j = 1\n    while i < array.count {\n        if array[i] != j {\n            return j\n        }\n        i += 1\n        j += 1\n    }\n    return j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "tmpnwm11eab/tmpnwm11eab.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b20fdbd4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b20fd8cbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b20fd8cb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b20fd8ca7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnwm11eab                        0x000055ec982793ba <unavailable> + 5050\n5    libc.so.6                          0x00002b20fddc0460 __libc_start_main + 245\n6    tmpnwm11eab                        0x000055ec98279019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var missingNumber = 0\n    for i in 0..<array.count {\n        if array[i] != i + 1 {\n            missingNumber = i + 1\n            break\n        }\n    }\n    return missingNumber\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "tmpp5ju3hvo/tmpp5ju3hvo.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab4d3f8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab4d3c85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab4d3c85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab4d3c847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpp5ju3hvo                        0x000055600203354a <unavailable> + 5450\n5    libc.so.6                          0x00002ab4d417a460 __libc_start_main + 245\n6    tmpp5ju3hvo                        0x00005560020331a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "tmp7w72kxrv/tmp7w72kxrv.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b10df01dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b10ded14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b10ded14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b10ded137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7w72kxrv                        0x000056182a6983ba <unavailable> + 5050\n5    libc.so.6                          0x00002b10df209460 __libc_start_main + 245\n6    tmp7w72kxrv                        0x000056182a698019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i+1 {\n            return i+1\n        }\n        i += 1\n    }\n    return i+1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "tmp3vvkdhcz/tmp3vvkdhcz.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b13704a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b137019fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b137019f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b137019e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3vvkdhcz                        0x000055f6d42033ba <unavailable> + 5050\n5    libc.so.6                          0x00002b1370694460 __libc_start_main + 245\n6    tmp3vvkdhcz                        0x000055f6d4203019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var firstMissing = 0\n    for (index, element) in array.enumerated() {\n        if index != element {\n            firstMissing = index\n            break\n        }\n    }\n    return firstMissing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "tmpvwysuh02/tmpvwysuh02.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abcfd027c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abcfcd1eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abcfcd1e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abcfcd1d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvwysuh02                        0x0000560ba52cc52a <unavailable> + 5418\n5    libc.so.6                          0x00002abcfd213460 __libc_start_main + 245\n6    tmpvwysuh02                        0x0000560ba52cc189 <unavailable> + 4489\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "tmppiylo7gd/tmppiylo7gd.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acf7e462c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acf7e159b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acf7e159988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acf7e1587b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppiylo7gd                        0x000055db68f7b3ba <unavailable> + 5050\n5    libc.so.6                          0x00002acf7e64e460 __libc_start_main + 245\n6    tmppiylo7gd                        0x000055db68f7b019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var missing = 1\n    for i in 0..<array.count {\n        if array[i] == missing {\n            missing += 1\n        } else {\n            return missing\n        }\n    }\n    return missing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "tmps0xe2wn5/tmps0xe2wn5.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8dc5d26c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8dc5a1db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8dc5a1d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8dc5a1c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps0xe2wn5                        0x0000562b0154b54a <unavailable> + 5450\n5    libc.so.6                          0x00002b8dc5f12460 __libc_start_main + 245\n6    tmps0xe2wn5                        0x0000562b0154b1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var missing = 1\n    for i in 0..<array.count {\n        if array[i] == missing {\n            missing += 1\n        }\n    }\n    return missing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "tmpde3m64d2/tmpde3m64d2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8982e9ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8982b95b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8982b95988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8982b947b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpde3m64d2                        0x000056086e6aa6ff <unavailable> + 5887\n5    libc.so.6                          0x00002b898308a460 __libc_start_main + 245\n6    tmpde3m64d2                        0x000056086e6aa1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var min = array[0]\n    var max = array[array.count-1]\n    var mid = 0\n    while min < max {\n        mid = (min + max)/2\n        if array[mid] == mid {\n            min = mid + 1\n        } else {\n            max = mid\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "tmpv1hlfmo1/tmpv1hlfmo1.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b07d59c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b07d56bdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b07d56bd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b07d56bc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpv1hlfmo1                        0x00005556052ed45a <unavailable> + 5210\n5    libc.so.6                          0x00002b07d5bb2460 __libc_start_main + 245\n6    tmpv1hlfmo1                        0x00005556052ed0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var firstMissing = 1\n    for i in array {\n        if i == firstMissing {\n            firstMissing += 1\n        }\n    }\n    return firstMissing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "tmpetqoo31_/tmpetqoo31_.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b637f6eec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b637f3e5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b637f3e5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b637f3e47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpetqoo31_                        0x000055f061ba362f <unavailable> + 5679\n5    libc.so.6                          0x00002b637f8da460 __libc_start_main + 245\n6    tmpetqoo31_                        0x000055f061ba30d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "tmppiylo7gd/tmppiylo7gd.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acf7e462c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acf7e159b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acf7e159988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acf7e1587b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppiylo7gd                        0x000055db68f7b3ba <unavailable> + 5050\n5    libc.so.6                          0x00002acf7e64e460 __libc_start_main + 245\n6    tmppiylo7gd                        0x000055db68f7b019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var missing = 0\n    for i in 0..<array.count {\n        if array[i] != i + 1 {\n            missing = i + 1\n            break\n        }\n    }\n    return missing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "tmpjg0zpjy4/tmpjg0zpjy4.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a8152cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a81223b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a81223988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a812227b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjg0zpjy4                        0x000055e9a656154a <unavailable> + 5450\n5    libc.so.6                          0x00002b8a81718460 __libc_start_main + 245\n6    tmpjg0zpjy4                        0x000055e9a65611a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var missing = 1\n    for i in 0..<array.count {\n        if array[i] == missing {\n            missing += 1\n        } else {\n            return missing\n        }\n    }\n    return missing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "tmps0xe2wn5/tmps0xe2wn5.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8dc5d26c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8dc5a1db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8dc5a1d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8dc5a1c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps0xe2wn5                        0x0000562b0154b54a <unavailable> + 5450\n5    libc.so.6                          0x00002b8dc5f12460 __libc_start_main + 245\n6    tmps0xe2wn5                        0x0000562b0154b1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    \n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "tmpcx75lh2p/tmpcx75lh2p.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51722acc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5171fa3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5171fa3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5171fa27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcx75lh2p                        0x000055b8d54a23ba <unavailable> + 5050\n5    libc.so.6                          0x00002b5172498460 __libc_start_main + 245\n6    tmpcx75lh2p                        0x000055b8d54a2019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var array = array\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "tmp7w72kxrv/tmp7w72kxrv.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b10df01dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b10ded14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b10ded14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b10ded137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7w72kxrv                        0x000056182a6983ba <unavailable> + 5050\n5    libc.so.6                          0x00002b10df209460 __libc_start_main + 245\n6    tmp7w72kxrv                        0x000056182a698019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i+1 {\n            return i+1\n        }\n        i += 1\n    }\n    return i+1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "tmp3vvkdhcz/tmp3vvkdhcz.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b13704a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b137019fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b137019f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b137019e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3vvkdhcz                        0x000055f6d42033ba <unavailable> + 5050\n5    libc.so.6                          0x00002b1370694460 __libc_start_main + 245\n6    tmp3vvkdhcz                        0x000055f6d4203019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var result = 1\n    for i in array {\n        if i == result {\n            result += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpzexx3bvt/tmpzexx3bvt.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab781e70c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab781b67b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab781b67988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab781b667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzexx3bvt                        0x000055cec342462f <unavailable> + 5679\n5    libc.so.6                          0x00002ab78205c460 __libc_start_main + 245\n6    tmpzexx3bvt                        0x000055cec34240d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var min = array[0]\n    var max = array[0]\n    for i in array {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    var result = 0\n    for i in min...max {\n        if !array.contains(i) {\n            result = i\n            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "tmp6u663tun/tmp6u663tun.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e47b09c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e47800b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e47800988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e477ff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6u663tun                        0x0000557413b006ba <unavailable> + 5818\n5    libc.so.6                          0x00002b5e47cf5460 __libc_start_main + 245\n6    tmp6u663tun                        0x0000557413b00319 <unavailable> + 4889\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            result = i\n            break\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1666123237,
      "stdout": "",
      "stderr": "tmpak0z5j61/tmpak0z5j61.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9592bc4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b95928bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b95928bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b95928ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpak0z5j61                        0x0000562364e5f3ba <unavailable> + 5050\n5    libc.so.6                          0x00002b9592db0460 __libc_start_main + 245\n6    tmpak0z5j61                        0x0000562364e5f019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return i + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpz16ntc88/tmpz16ntc88.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b829bc49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b829b940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b829b940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b829b93f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz16ntc88                        0x000055dc30a133ba <unavailable> + 5050\n5    libc.so.6                          0x00002b829be35460 __libc_start_main + 245\n6    tmpz16ntc88                        0x000055dc30a13019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i += 1\n    }\n    return array.count + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp5j6wssgq/tmp5j6wssgq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75a7a31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75a7728b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75a7728988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75a77277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j6wssgq                        0x0000556f134c13ba <unavailable> + 5050\n5    libc.so.6                          0x00002b75a7c1d460 __libc_start_main + 245\n6    tmp5j6wssgq                        0x0000556f134c1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.\nfunc find_First_Missing(array: [Int]) -> Int {\n    var i = 0\n    while i < array.count {\n        if array[i] != i {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_First_Missing(array: [0, 1, 2, 3]) == 4)\nassert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)\nassert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}