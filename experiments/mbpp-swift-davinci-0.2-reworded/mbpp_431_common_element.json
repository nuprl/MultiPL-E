{
  "name": "mbpp_431_common_element",
  "language": "swift",
  "prompt": "\n/// Write a function that takes two arrays and returns true if they have at least one common element.\nfunc common_element(list1: AnyHashable, list2: AnyHashable) -> Bool? {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_431_common_element.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(common_element(list1: [1, 2, 3, 4, 5], list2: [5, 6, 7, 8, 9]) == true)\nassert(common_element(list1: [1, 2, 3, 4, 5], list2: [6, 7, 8, 9]) == nil)\nassert(common_element(list1: [\"a\", \"b\", \"c\"], list2: [\"d\", \"b\", \"e\"]) == true)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    return list1.intersection(list2).isEmpty",
    "    return nil",
    "    if list1.contains(list2) {\n        return true\n    }\n    return false",
    "    if list1 == list2 {\n        return true\n    }\n    return false",
    "    return list1.intersection(list2).isEmpty ? false : true",
    "    var set1 = Set<AnyHashable>()\n    var set2 = Set<AnyHashable>()\n    \n    if let list1 = list1 as? [AnyHashable] {\n        for item in list1 {\n            set1.insert(item)\n        }\n    } else {\n        return nil\n    }\n    \n    if let list2 = list2 as? [AnyHashable] {\n        for item in list2 {\n            set2.insert(item)\n        }\n    } else {\n        return nil\n    }\n    \n    return !set1.isDisjoint(with: set2)",
    "    return list1.intersection(list2).isEmpty ? false : true",
    "    let set1 = Set(list1)\n    let set2 = Set(list2)\n    return set1.intersection(set2).isEmpty ? false : true",
    "    let list1 = list1 as! [AnyHashable]\n    let list2 = list2 as! [AnyHashable]\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true\n            }\n        }\n    }\n    return false",
    "    var common = false\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                common = true\n            }\n        }\n    }\n    return common",
    "    return list1.intersection(list2).isEmpty ? nil : true",
    "    if list1.count < list2.count {\n        for item in list1 {\n            if list2.contains(item) {\n                return true\n            }\n        }\n    } else {\n        for item in list2 {\n            if list1.contains(item) {\n                return true\n            }\n        }\n    }\n    return false",
    "    var set1 = Set<AnyHashable>()\n    var set2 = Set<AnyHashable>()\n    \n    if let list1 = list1 as? [AnyHashable] {\n        for item in list1 {\n            set1.insert(item)\n        }\n    } else {\n        return nil\n    }\n    \n    if let list2 = list2 as? [AnyHashable] {\n        for item in list2 {\n            set2.insert(item)\n        }\n    } else {\n        return nil\n    }\n    \n    return !set1.intersection(set2).isEmpty",
    "    if list1.count > list2.count {\n        for item in list1 {\n            if list2.contains(item) {\n                return true\n            }\n        }\n    } else {\n        for item in list2 {\n            if list1.contains(item) {\n                return true\n            }\n        }\n    }\n    return false",
    "    var common = false\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                common = true\n            }\n        }\n    }\n    return common",
    "    var common: Bool?\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                common = true\n            }\n        }\n    }\n    return common",
    "    return list1.intersection(list2).isEmpty ? false : true",
    "    return nil",
    "    if list1 == list2 {\n        return true\n    }\n    return false",
    "    if list1.contains(list2) {\n        return true\n    }\n    return false"
  ]
}