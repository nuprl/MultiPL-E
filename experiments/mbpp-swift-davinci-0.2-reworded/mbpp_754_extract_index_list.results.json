{
  "name": "mbpp_754_extract_index_list",
  "language": "swift",
  "prompt": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0...l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmpyu_wmumx.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpyu_wmumx.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpyu_wmumx.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpyu_wmumx.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyu_wmumx.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var common_elements = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            common_elements.append(l1[i])\n        }\n    }\n    return common_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp0yb_w6ph.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp0yb_w6ph.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp0yb_w6ph.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp0yb_w6ph.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0yb_w6ph.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var l1_index = [Int: Int]()\n    var l2_index = [Int: Int]()\n    var l3_index = [Int: Int]()\n    var common_index = [Int]()\n    for (index, value) in l1.enumerated() {\n        l1_index[value] = index\n    }\n    for (index, value) in l2.enumerated() {\n        l2_index[value] = index\n    }\n    for (index, value) in l3.enumerated() {\n        l3_index[value] = index\n    }\n    for (key, value) in l1_index {\n        if l2_index[key] == value && l3_index[key] == value {\n            common_index.append(value)\n        }\n    }\n    return common_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp2e_wjro_.swift:38:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp2e_wjro_.swift:39:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp2e_wjro_.swift:40:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp2e_wjro_.swift:41:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2e_wjro_.swift:41:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp6x_t6kmx.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6x_t6kmx.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var common_elements: [Int] = []\n    var index_list: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            common_elements.append(l1[i])\n            index_list.append(i)\n        }\n    }\n    return [common_elements, index_list]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmphgddqz5s.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmphgddqz5s.swift:29:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmphgddqz5s.swift:30:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmphgddqz5s.swift:31:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmphgddqz5s.swift:31:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for (index, element) in l1.enumerated() {\n        if element == l2[index] && element == l3[index] {\n            result.append(element)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp0asum69r.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp0asum69r.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp0asum69r.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp0asum69r.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0asum69r.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp6x_t6kmx.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6x_t6kmx.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp6x_t6kmx.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6x_t6kmx.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    let l1_set = Set(l1)\n    let l2_set = Set(l2)\n    let l3_set = Set(l3)\n    \n    let common_set = l1_set.intersection(l2_set).intersection(l3_set)\n    return common_set\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "/tmp/tmppe63ti8a.swift:25:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmppe63ti8a.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmppe63ti8a.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmppe63ti8a.swift:28:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmppe63ti8a.swift:28:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var common_elements = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            common_elements.append(l1[i])\n        }\n    }\n    return common_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp0yb_w6ph.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp0yb_w6ph.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp0yb_w6ph.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp0yb_w6ph.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0yb_w6ph.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp6x_t6kmx.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6x_t6kmx.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var index_list: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            index_list.append(i)\n        }\n    }\n    return index_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "/tmp/tmp6mrvc9z2.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6mrvc9z2.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6mrvc9z2.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6mrvc9z2.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6mrvc9z2.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var common_elements = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            common_elements.append(l1[i])\n        }\n    }\n    return common_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp0yb_w6ph.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp0yb_w6ph.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp0yb_w6ph.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp0yb_w6ph.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0yb_w6ph.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp6x_t6kmx.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6x_t6kmx.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var index_list = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            index_list.append(i)\n        }\n    }\n    return index_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmp9uf3myqb.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp9uf3myqb.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp9uf3myqb.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp9uf3myqb.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9uf3myqb.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmprigiabr9.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmprigiabr9.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmprigiabr9.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmprigiabr9.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmprigiabr9.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp6x_t6kmx.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6x_t6kmx.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var common_elements = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            common_elements.append(l1[i])\n        }\n    }\n    return common_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp0yb_w6ph.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp0yb_w6ph.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp0yb_w6ph.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp0yb_w6ph.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0yb_w6ph.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp6x_t6kmx.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6x_t6kmx.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l1[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "/tmp/tmpe6x5www2.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpe6x5www2.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpe6x5www2.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpe6x5www2.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe6x5www2.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var l1_index = 0\n    var l2_index = 0\n    var l3_index = 0\n    var l1_length = l1.count\n    var l2_length = l2.count\n    var l3_length = l3.count\n    var result = [Int]()\n    while l1_index < l1_length && l2_index < l2_length && l3_index < l3_length {\n        if l1[l1_index] == l2[l2_index] && l2[l2_index] == l3[l3_index] {\n            result.append(l1[l1_index])\n            l1_index += 1\n            l2_index += 1\n            l3_index += 1\n        } else if l1[l1_index] < l2[l2_index] {\n            l1_index += 1\n        } else if l2[l2_index] < l3[l3_index] {\n            l2_index += 1\n        } else {\n            l3_index += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmpbrxpe26u.swift:41:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpbrxpe26u.swift:42:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpbrxpe26u.swift:43:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpbrxpe26u.swift:44:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbrxpe26u.swift:44:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmprigiabr9.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmprigiabr9.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmprigiabr9.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmprigiabr9.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmprigiabr9.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp6x_t6kmx.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6x_t6kmx.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var common_elements = [Int]()\n    var index = 0\n    while index < l1.count && index < l2.count && index < l3.count {\n        if l1[index] == l2[index] && l2[index] == l3[index] {\n            common_elements.append(l1[index])\n        }\n        index += 1\n    }\n    return common_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "/tmp/tmp92jauy5l.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp92jauy5l.swift:29:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp92jauy5l.swift:30:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp92jauy5l.swift:31:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp92jauy5l.swift:31:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l1[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "/tmp/tmpe6x5www2.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpe6x5www2.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpe6x5www2.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpe6x5www2.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe6x5www2.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp6x_t6kmx.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6x_t6kmx.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp6x_t6kmx.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6x_t6kmx.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var index_list = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l1[i] == l3[i] {\n            index_list.append(i)\n        }\n    }\n    return index_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "/tmp/tmpd43a15rd.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpd43a15rd.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpd43a15rd.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpd43a15rd.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmpd43a15rd.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var common_elements = [Int]()\n    for (index, element) in l1.enumerated() {\n        if element == l2[index] && element == l3[index] {\n            common_elements.append(element)\n        }\n    }\n    return common_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmprplcnesb.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmprplcnesb.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmprplcnesb.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmprplcnesb.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmprplcnesb.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp6x_t6kmx.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6x_t6kmx.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmprigiabr9.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmprigiabr9.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmprigiabr9.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmprigiabr9.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmprigiabr9.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var l1_index = 0\n    var l2_index = 0\n    var l3_index = 0\n    var result = [Int]()\n    while l1_index < l1.count && l2_index < l2.count && l3_index < l3.count {\n        if l1[l1_index] == l2[l2_index] && l2[l2_index] == l3[l3_index] {\n            result.append(l1[l1_index])\n            l1_index += 1\n            l2_index += 1\n            l3_index += 1\n        } else if l1[l1_index] < l2[l2_index] {\n            l1_index += 1\n        } else if l2[l2_index] < l3[l3_index] {\n            l2_index += 1\n        } else {\n            l3_index += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmpsrwwe6v8.swift:38:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpsrwwe6v8.swift:39:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpsrwwe6v8.swift:40:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpsrwwe6v8.swift:41:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmpsrwwe6v8.swift:41:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var common_elements = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            common_elements.append(l1[i])\n        }\n    }\n    return common_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp0yb_w6ph.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp0yb_w6ph.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp0yb_w6ph.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp0yb_w6ph.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0yb_w6ph.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var l1_index = 0\n    var l2_index = 0\n    var l3_index = 0\n    var result = [Int]()\n    while l1_index < l1.count && l2_index < l2.count && l3_index < l3.count {\n        if l1[l1_index] == l2[l2_index] && l2[l2_index] == l3[l3_index] {\n            result.append(l1[l1_index])\n            l1_index += 1\n            l2_index += 1\n            l3_index += 1\n        } else if l1[l1_index] < l2[l2_index] {\n            l1_index += 1\n        } else if l2[l2_index] < l3[l3_index] {\n            l2_index += 1\n        } else {\n            l3_index += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmpsrwwe6v8.swift:38:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpsrwwe6v8.swift:39:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpsrwwe6v8.swift:40:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpsrwwe6v8.swift:41:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmpsrwwe6v8.swift:41:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var common_elements: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            common_elements.append(l1[i])\n        }\n    }\n    return common_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "/tmp/tmpf7kwmmbz.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpf7kwmmbz.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpf7kwmmbz.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpf7kwmmbz.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmpf7kwmmbz.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var common_elements = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            common_elements.append(l1[i])\n        }\n    }\n    return common_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp0yb_w6ph.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp0yb_w6ph.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp0yb_w6ph.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp0yb_w6ph.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0yb_w6ph.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for index in 0..<l1.count {\n        if l1[index] == l2[index] && l2[index] == l3[index] {\n            result.append(l1[index])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmpvy7h433j.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpvy7h433j.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpvy7h433j.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpvy7h433j.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvy7h433j.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var index_list: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            index_list.append(i)\n        }\n    }\n    return index_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "/tmp/tmp6mrvc9z2.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6mrvc9z2.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6mrvc9z2.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6mrvc9z2.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6mrvc9z2.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp6x_t6kmx.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6x_t6kmx.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmprigiabr9.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmprigiabr9.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmprigiabr9.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmprigiabr9.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmprigiabr9.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp6x_t6kmx.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6x_t6kmx.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var l1_index = [Int: Int]()\n    var l2_index = [Int: Int]()\n    var l3_index = [Int: Int]()\n    var common_index = [Int]()\n    for (index, value) in l1.enumerated() {\n        l1_index[value] = index\n    }\n    for (index, value) in l2.enumerated() {\n        l2_index[value] = index\n    }\n    for (index, value) in l3.enumerated() {\n        l3_index[value] = index\n    }\n    for (key, value) in l1_index {\n        if l2_index[key] == value && l3_index[key] == value {\n            common_index.append(value)\n        }\n    }\n    return common_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp2e_wjro_.swift:38:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp2e_wjro_.swift:39:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp2e_wjro_.swift:40:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp2e_wjro_.swift:41:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2e_wjro_.swift:41:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var l1_index = [Int]()\n    var l2_index = [Int]()\n    var l3_index = [Int]()\n    var common_index = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            common_index.append(i)\n        }\n    }\n    return common_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "/tmp/tmpszabwtj_.swift:29:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpszabwtj_.swift:30:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpszabwtj_.swift:31:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpszabwtj_.swift:32:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmpszabwtj_.swift:32:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp6x_t6kmx.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6x_t6kmx.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var index_list: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            index_list.append(i)\n        }\n    }\n    return index_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "/tmp/tmp6mrvc9z2.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6mrvc9z2.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6mrvc9z2.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6mrvc9z2.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6mrvc9z2.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var index_list = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            index_list.append(i)\n        }\n    }\n    return index_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmp9uf3myqb.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp9uf3myqb.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp9uf3myqb.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp9uf3myqb.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9uf3myqb.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    var index = 0\n    while index < l1.count && index < l2.count && index < l3.count {\n        if l1[index] == l2[index] && l2[index] == l3[index] {\n            result.append(l1[index])\n        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmp43gtsfqc.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp43gtsfqc.swift:29:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp43gtsfqc.swift:30:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp43gtsfqc.swift:31:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp43gtsfqc.swift:31:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmprigiabr9.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmprigiabr9.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmprigiabr9.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmprigiabr9.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmprigiabr9.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l1[i] == l3[i] {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmpw_8hj8uz.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpw_8hj8uz.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpw_8hj8uz.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpw_8hj8uz.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmpw_8hj8uz.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp6x_t6kmx.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6x_t6kmx.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var common_elements = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            common_elements.append(l1[i])\n        }\n    }\n    return common_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp0yb_w6ph.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp0yb_w6ph.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp0yb_w6ph.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp0yb_w6ph.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0yb_w6ph.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var common_indexes = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            common_indexes.append(i)\n        }\n    }\n    return common_indexes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmps_vex80s.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmps_vex80s.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmps_vex80s.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmps_vex80s.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmps_vex80s.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp6x_t6kmx.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6x_t6kmx.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp6x_t6kmx.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6x_t6kmx.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var common_elements = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            common_elements.append(l1[i])\n        }\n    }\n    return common_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp0yb_w6ph.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp0yb_w6ph.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp0yb_w6ph.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp0yb_w6ph.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0yb_w6ph.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    var index = 0\n    while index < l1.count && index < l2.count && index < l3.count {\n        if l1[index] == l2[index] && l2[index] == l3[index] {\n            result.append(l1[index])\n        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmp43gtsfqc.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp43gtsfqc.swift:29:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp43gtsfqc.swift:30:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp43gtsfqc.swift:31:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp43gtsfqc.swift:31:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    var index = 0\n    while index < l1.count && index < l2.count && index < l3.count {\n        if l1[index] == l2[index] && l2[index] == l3[index] {\n            result.append(l1[index])\n        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmp43gtsfqc.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp43gtsfqc.swift:29:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp43gtsfqc.swift:30:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp43gtsfqc.swift:31:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp43gtsfqc.swift:31:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp6x_t6kmx.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6x_t6kmx.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l1[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmp4e0pjmjd.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp4e0pjmjd.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp4e0pjmjd.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp4e0pjmjd.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4e0pjmjd.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l1[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "/tmp/tmpe6x5www2.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpe6x5www2.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpe6x5www2.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpe6x5www2.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe6x5www2.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    var index = 0\n    while index < l1.count && index < l2.count && index < l3.count {\n        if l1[index] == l2[index] && l2[index] == l3[index] {\n            result.append(l1[index])\n        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmp43gtsfqc.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp43gtsfqc.swift:29:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp43gtsfqc.swift:30:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp43gtsfqc.swift:31:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp43gtsfqc.swift:31:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var index_list: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            index_list.append(i)\n        }\n    }\n    return index_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "/tmp/tmp6mrvc9z2.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6mrvc9z2.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6mrvc9z2.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6mrvc9z2.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6mrvc9z2.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmprigiabr9.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmprigiabr9.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmprigiabr9.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmprigiabr9.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmprigiabr9.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var index_list = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            index_list.append(i)\n        }\n    }\n    return index_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmp9uf3myqb.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp9uf3myqb.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp9uf3myqb.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp9uf3myqb.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9uf3myqb.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp6x_t6kmx.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6x_t6kmx.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp6x_t6kmx.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6x_t6kmx.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    var index = 0\n    while index < l1.count && index < l2.count && index < l3.count {\n        if l1[index] == l2[index] && l2[index] == l3[index] {\n            result.append(l1[index])\n        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmp43gtsfqc.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp43gtsfqc.swift:29:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp43gtsfqc.swift:30:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp43gtsfqc.swift:31:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp43gtsfqc.swift:31:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var l1_index = 0\n    var l2_index = 0\n    var l3_index = 0\n    var result = [Int]()\n    while l1_index < l1.count && l2_index < l2.count && l3_index < l3.count {\n        if l1[l1_index] == l2[l2_index] && l2[l2_index] == l3[l3_index] {\n            result.append(l1[l1_index])\n            l1_index += 1\n            l2_index += 1\n            l3_index += 1\n        } else if l1[l1_index] < l2[l2_index] {\n            l1_index += 1\n        } else if l2[l2_index] < l3[l3_index] {\n            l2_index += 1\n        } else {\n            l3_index += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmpsrwwe6v8.swift:38:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpsrwwe6v8.swift:39:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpsrwwe6v8.swift:40:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpsrwwe6v8.swift:41:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmpsrwwe6v8.swift:41:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var index_list = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            index_list.append(i)\n        }\n    }\n    return index_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmp9uf3myqb.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp9uf3myqb.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp9uf3myqb.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp9uf3myqb.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9uf3myqb.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmprigiabr9.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmprigiabr9.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmprigiabr9.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmprigiabr9.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmprigiabr9.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    let l1_set = Set(l1)\n    let l2_set = Set(l2)\n    let l3_set = Set(l3)\n    let common_set = l1_set.intersection(l2_set).intersection(l3_set)\n    return common_set\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmp4750n5md.swift:24:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp4750n5md.swift:25:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp4750n5md.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp4750n5md.swift:27:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4750n5md.swift:27:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var index_list = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            index_list.append(i)\n        }\n    }\n    return index_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmp9uf3myqb.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp9uf3myqb.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp9uf3myqb.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp9uf3myqb.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9uf3myqb.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp6x_t6kmx.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6x_t6kmx.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp6x_t6kmx.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6x_t6kmx.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    var index = 0\n    while index < l1.count && index < l2.count && index < l3.count {\n        if l1[index] == l2[index] && l2[index] == l3[index] {\n            result.append(l1[index])\n        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmp43gtsfqc.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp43gtsfqc.swift:29:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp43gtsfqc.swift:30:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp43gtsfqc.swift:31:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp43gtsfqc.swift:31:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp6x_t6kmx.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6x_t6kmx.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l1[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "/tmp/tmpe6x5www2.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpe6x5www2.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpe6x5www2.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpe6x5www2.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe6x5www2.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    var index = 0\n    while index < l1.count && index < l2.count && index < l3.count {\n        if l1[index] == l2[index] && l2[index] == l3[index] {\n            result.append(l1[index])\n        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmp43gtsfqc.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp43gtsfqc.swift:29:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp43gtsfqc.swift:30:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp43gtsfqc.swift:31:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp43gtsfqc.swift:31:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var index_list = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            index_list.append(i)\n        }\n    }\n    return index_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmp9uf3myqb.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp9uf3myqb.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp9uf3myqb.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp9uf3myqb.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9uf3myqb.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123159,
      "stdout": "",
      "stderr": "/tmp/tmprigiabr9.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmprigiabr9.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmprigiabr9.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmprigiabr9.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmprigiabr9.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l1[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1666123158,
      "stdout": "",
      "stderr": "/tmp/tmpe6x5www2.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpe6x5www2.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpe6x5www2.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmpe6x5www2.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe6x5www2.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp6x_t6kmx.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp6x_t6kmx.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6x_t6kmx.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
      "timestamp": 1665510025,
      "stdout": "",
      "stderr": "/tmp/tmp50qtv0qf.swift:26:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:27:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:28:111: error: cannot convert value of type '[Int]' to expected argument type 'AnyHashable'\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\n                                                                                                              ^\n                                                                                                                     as AnyHashable\n/tmp/tmp50qtv0qf.swift:29:108: error: binary operator '==' cannot be applied to operands of type 'AnyHashable' and '[AnyHashable]'\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp50qtv0qf.swift:29:108: note: overloads for '==' exist with these partially matching parameter lists: (AnyHashable, AnyHashable)\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}