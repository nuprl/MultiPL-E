{
  "name": "mbpp_643_text_match_wordz_middle",
  "language": "swift",
  "prompt": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpz0z2uql5.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpz0z2uql5.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmprh49b_38.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmprh49b_38.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp3e7_4vz0.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp3e7_4vz0.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpyxm82_6n.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpyxm82_6n.swift:4:51: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n                                             ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpyxm82_6n.swift:4:97: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n                                                                                           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpyxm82_6n.swift:4:133: error: value of type 'String.Index' has no member 'predecessor'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n                                                                                                                      ~~~~~~~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: nil, locale: nil) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpdpa7rblu.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: nil, locale: nil) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpdpa7rblu.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: nil, locale: nil) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdpa7rblu.swift:4:78: error: 'nil' requires a contextual type\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: nil, locale: nil) != nil\n                                                                             ^\n/tmp/tmpdpa7rblu.swift:4:91: error: 'nil' requires a contextual type\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: nil, locale: nil) != nil\n                                                                                          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp15jvd1yk.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp15jvd1yk.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpz0z2uql5.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpz0z2uql5.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.contains(\"z\") && !text.hasPrefix(\"z\") && !text.hasSuffix(\"z\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpz0z2uql5.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpz0z2uql5.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let pattern = \"\\\\b[^z]*z[^z]*\\\\b\"\n    return text.range(of: pattern, options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmppc3kpdea.swift:5:17: error: value of type 'String' has no member 'range'\n    return text.range(of: pattern, options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmppc3kpdea.swift:5:46: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: pattern, options: .regularExpression) != nil\n                                            ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpcrnf34r1.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil\n           ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp15jvd1yk.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp15jvd1yk.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\") != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp18yx9s_6.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil\n           ~~~~ ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count)).count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpomftbcyv.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpomftbcyv.swift:5:56: error: cannot find 'NSRange' in scope\n    return regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count)).count > 0\n                                                       ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmp4ro3tdm1.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n           ~~~~ ^~~~~\n/tmp/tmp4ro3tdm1.swift:4:47: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                         ~~~~ ^~~~~\n/tmp/tmp4ro3tdm1.swift:4:89: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                                                                   ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\") != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp18yx9s_6.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil\n           ~~~~ ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmp4ro3tdm1.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n           ~~~~ ^~~~~\n/tmp/tmp4ro3tdm1.swift:4:47: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                         ~~~~ ^~~~~\n/tmp/tmp4ro3tdm1.swift:4:89: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                                                                   ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpcu83hig9.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpcu83hig9.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count)).count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpomftbcyv.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpomftbcyv.swift:5:56: error: cannot find 'NSRange' in scope\n    return regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count)).count > 0\n                                                       ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp15jvd1yk.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp15jvd1yk.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp15jvd1yk.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp15jvd1yk.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmp4ro3tdm1.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n           ~~~~ ^~~~~\n/tmp/tmp4ro3tdm1.swift:4:47: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                         ~~~~ ^~~~~\n/tmp/tmp4ro3tdm1.swift:4:89: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                                                                   ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil && text.range(of: \"^z\") == nil && text.range(of: \"z$\") == nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmps9d9w2s9.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"^z\") == nil && text.range(of: \"z$\") == nil\n           ~~~~ ^~~~~\n/tmp/tmps9d9w2s9.swift:4:47: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"^z\") == nil && text.range(of: \"z$\") == nil\n                                         ~~~~ ^~~~~\n/tmp/tmps9d9w2s9.swift:4:78: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"^z\") == nil && text.range(of: \"z$\") == nil\n                                                                        ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmp4ro3tdm1.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n           ~~~~ ^~~~~\n/tmp/tmp4ro3tdm1.swift:4:47: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                         ~~~~ ^~~~~\n/tmp/tmp4ro3tdm1.swift:4:89: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                                                                   ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp3e7_4vz0.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp3e7_4vz0.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmp4ro3tdm1.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n           ~~~~ ^~~~~\n/tmp/tmp4ro3tdm1.swift:4:47: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                         ~~~~ ^~~~~\n/tmp/tmp4ro3tdm1.swift:4:89: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                                                                   ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*z\\\\b\", options: .CaseInsensitive)\n    return regex.firstMatchInString(text, options: [], range: NSMakeRange(0, text.characters.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpqlas9qvd.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*z\\\\b\", options: .CaseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpqlas9qvd.swift:4:77: error: cannot infer contextual base in reference to member 'CaseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*z\\\\b\", options: .CaseInsensitive)\n                                                                           ~^~~~~~~~~~~~~~~\n/tmp/tmpqlas9qvd.swift:5:63: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatchInString(text, options: [], range: NSMakeRange(0, text.characters.count)) != nil\n                                                              ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp15jvd1yk.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp15jvd1yk.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\")?.startIndex != text.startIndex && text.rangeOfString(\"z\")?.endIndex != text.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmptti9aih6.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\")?.startIndex != text.startIndex && text.rangeOfString(\"z\")?.endIndex != text.endIndex\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmptti9aih6.swift:4:51: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\")?.startIndex != text.startIndex && text.rangeOfString(\"z\")?.endIndex != text.endIndex\n                                             ~~~~ ^~~~~~~~~~~~~\n/tmp/tmptti9aih6.swift:4:109: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\")?.startIndex != text.startIndex && text.rangeOfString(\"z\")?.endIndex != text.endIndex\n                                                                                                       ~~~~ ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpcrnf34r1.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil\n           ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp15jvd1yk.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp15jvd1yk.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]+z[^z]+\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpnp9y3q6k.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]+z[^z]+\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpnp9y3q6k.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpz0z2uql5.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpz0z2uql5.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp15jvd1yk.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp15jvd1yk.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let pattern = \"\\\\b[^z]*z[^z]*\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpdkvtf0lm.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpdkvtf0lm.swift:6:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpcrnf34r1.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil\n           ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpcrnf34r1.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil\n           ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmp4ro3tdm1.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n           ~~~~ ^~~~~\n/tmp/tmp4ro3tdm1.swift:4:47: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                         ~~~~ ^~~~~\n/tmp/tmp4ro3tdm1.swift:4:89: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                                                                   ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let pattern = \"\\\\b[^z]*z[^z]*\\\\b\"\n    return text.range(of: pattern, options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmppc3kpdea.swift:5:17: error: value of type 'String' has no member 'range'\n    return text.range(of: pattern, options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmppc3kpdea.swift:5:46: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: pattern, options: .regularExpression) != nil\n                                            ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpcu83hig9.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpcu83hig9.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmp4ro3tdm1.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n           ~~~~ ^~~~~\n/tmp/tmp4ro3tdm1.swift:4:47: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                         ~~~~ ^~~~~\n/tmp/tmp4ro3tdm1.swift:4:89: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                                                                   ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\")\n    return regex.firstMatch(in: text, range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmp6tln35hm.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\")\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp6tln35hm.swift:5:46: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .CaseInsensitive)\n    return regex.firstMatchInString(text, options: [], range: NSMakeRange(0, text.characters.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmp28leu_ob.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .CaseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp28leu_ob.swift:4:72: error: cannot infer contextual base in reference to member 'CaseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .CaseInsensitive)\n                                                                      ~^~~~~~~~~~~~~~~\n/tmp/tmp28leu_ob.swift:5:63: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatchInString(text, options: [], range: NSMakeRange(0, text.characters.count)) != nil\n                                                              ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpcu83hig9.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpcu83hig9.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)).count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpgx_ncfeb.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpgx_ncfeb.swift:5:56: error: cannot find 'NSRange' in scope\n    return regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)).count > 0\n                                                       ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\") != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp18yx9s_6.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil\n           ~~~~ ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp3e7_4vz0.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp3e7_4vz0.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: .caseInsensitive)\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpimgt9fdx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpimgt9fdx.swift:4:82: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: .caseInsensitive)\n                                                                                ~^~~~~~~~~~~~~~~\n/tmp/tmpimgt9fdx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\")\n    return regex.numberOfMatches(in: text, range: NSRange(location: 0, length: text.count)) > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpr8gay8_x.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\")\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpr8gay8_x.swift:5:51: error: cannot find 'NSRange' in scope\n    return regex.numberOfMatches(in: text, range: NSRange(location: 0, length: text.count)) > 0\n                                                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpyxm82_6n.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpyxm82_6n.swift:4:51: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n                                             ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpyxm82_6n.swift:4:97: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n                                                                                           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpyxm82_6n.swift:4:133: error: value of type 'String.Index' has no member 'predecessor'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n                                                                                                                      ~~~~~~~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpcrtl6dhu.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpcrtl6dhu.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.utf16.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\")\n    let matches = regex.matches(in: text, range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmp7ksnv0ik.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\")\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ksnv0ik.swift:5:50: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, range: NSRange(location: 0, length: text.utf16.count))\n                                                 ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let pattern = \"\\\\b[^z]*z[^z]*\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpdkvtf0lm.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpdkvtf0lm.swift:6:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*z\\\\b\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpranqq4lm.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*z\\\\b\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpranqq4lm.swift:4:77: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*z\\\\b\", options: .caseInsensitive)\n                                                                           ~^~~~~~~~~~~~~~~\n/tmp/tmpranqq4lm.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpz0z2uql5.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpz0z2uql5.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.numberOfMatches(in: text, options: [], range: NSRange(location: 0, length: text.count)) > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmps2svrjyo.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmps2svrjyo.swift:5:64: error: cannot find 'NSRange' in scope\n    return regex.numberOfMatches(in: text, options: [], range: NSRange(location: 0, length: text.count)) > 0\n                                                               ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpcu83hig9.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpcu83hig9.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpz0z2uql5.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpz0z2uql5.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp15jvd1yk.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp15jvd1yk.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let pattern = \"\\\\b[^z]*z[^z]*\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpdkvtf0lm.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpdkvtf0lm.swift:6:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp15jvd1yk.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp15jvd1yk.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp15jvd1yk.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp15jvd1yk.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpacze30a4.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpacze30a4.swift:4:72: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n                                                                      ~^~~~~~~~~~~~~~~\n/tmp/tmpacze30a4.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpz0z2uql5.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpz0z2uql5.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\")\n    let matches = regex.matches(in: text, range: NSRange(text.startIndex..., in: text))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmplbnledsa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\")\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmplbnledsa.swift:5:50: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, range: NSRange(text.startIndex..., in: text))\n                                                 ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\") != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp18yx9s_6.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil\n           ~~~~ ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let pattern = \"\\\\b[^z]*z[^z]*\\\\b\"\n    return text.range(of: pattern, options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmppc3kpdea.swift:5:17: error: value of type 'String' has no member 'range'\n    return text.range(of: pattern, options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmppc3kpdea.swift:5:46: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: pattern, options: .regularExpression) != nil\n                                            ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpacze30a4.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpacze30a4.swift:4:72: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n                                                                      ~^~~~~~~~~~~~~~~\n/tmp/tmpacze30a4.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\")\n    let matches = regex.matches(in: text, range: NSRange(text.startIndex..., in: text))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmplbnledsa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\")\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmplbnledsa.swift:5:50: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, range: NSRange(text.startIndex..., in: text))\n                                                 ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpcu83hig9.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpcu83hig9.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*z\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmp96n5ims4.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*z\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp96n5ims4.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression, range: nil, locale: nil) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmp596yfpr_.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression, range: nil, locale: nil) != nil\n           ~~~~ ^~~~~\n/tmp/tmp596yfpr_.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression, range: nil, locale: nil) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n/tmp/tmp596yfpr_.swift:4:68: error: 'nil' requires a contextual type\n    return text.range(of: \"z\", options: .regularExpression, range: nil, locale: nil) != nil\n                                                                   ^\n/tmp/tmp596yfpr_.swift:4:81: error: 'nil' requires a contextual type\n    return text.range(of: \"z\", options: .regularExpression, range: nil, locale: nil) != nil\n                                                                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\") != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp18yx9s_6.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil\n           ~~~~ ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp3e7_4vz0.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp3e7_4vz0.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpz0z2uql5.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpz0z2uql5.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\b\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmp6igopoc1.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp6igopoc1.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpz0z2uql5.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpz0z2uql5.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpcrnf34r1.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil\n           ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\")\n    let matches = regex.matches(in: text, range: NSRange(text.startIndex..., in: text))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmplbnledsa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\")\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmplbnledsa.swift:5:50: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, range: NSRange(text.startIndex..., in: text))\n                                                 ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\")\n    return regex.firstMatch(in: text, range: NSRange(location: 0, length: text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpro7zodzs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\")\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpro7zodzs.swift:5:46: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, range: NSRange(location: 0, length: text.count)) != nil\n                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp15jvd1yk.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp15jvd1yk.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpcu83hig9.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpcu83hig9.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*z\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmp96n5ims4.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*z\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp96n5ims4.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpcrnf34r1.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil\n           ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n    return regex.firstMatch(in: text, options: [], range: range) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmp3vzvpbr_.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp3vzvpbr_.swift:5:17: error: cannot find 'NSRange' in scope\n    let range = NSRange(location: 0, length: text.utf16.count)\n                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpz0z2uql5.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpz0z2uql5.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmp1ilc5xkx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp1ilc5xkx.swift:4:72: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n                                                                      ~^~~~~~~~~~~~~~~\n/tmp/tmp1ilc5xkx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpcu83hig9.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpcu83hig9.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp15jvd1yk.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp15jvd1yk.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpacze30a4.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpacze30a4.swift:4:72: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n                                                                      ~^~~~~~~~~~~~~~~\n/tmp/tmpacze30a4.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpcu83hig9.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpcu83hig9.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpcrnf34r1.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil\n           ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmp5j3im85i.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5j3im85i.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpz0z2uql5.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpz0z2uql5.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpcrnf34r1.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil\n           ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\") != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp18yx9s_6.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil\n           ~~~~ ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[^z].*[^z]$\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmp5b7uqy7z.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[^z].*[^z]$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5b7uqy7z.swift:4:77: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[^z].*[^z]$\", options: .caseInsensitive)\n                                                                           ~^~~~~~~~~~~~~~~\n/tmp/tmp5b7uqy7z.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp3e7_4vz0.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp3e7_4vz0.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmp1ilc5xkx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp1ilc5xkx.swift:4:72: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n                                                                      ~^~~~~~~~~~~~~~~\n/tmp/tmp1ilc5xkx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[a-zA-Z]*z[a-zA-Z]*$\")\n    let matches = regex.matches(in: text, range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpe_bf7vhm.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[a-zA-Z]*z[a-zA-Z]*$\")\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpe_bf7vhm.swift:5:50: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, range: NSRange(location: 0, length: text.count))\n                                                 ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\") != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp18yx9s_6.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil\n           ~~~~ ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpz0z2uql5.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpz0z2uql5.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpn_5xf_kz.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpn_5xf_kz.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\")\n    let matches = regex.matches(in: text, range: NSRange(text.startIndex..., in: text))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmplbnledsa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\")\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmplbnledsa.swift:5:50: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, range: NSRange(text.startIndex..., in: text))\n                                                 ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let pattern = \"\\\\b[^z]*z[^z]*\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpdkvtf0lm.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpdkvtf0lm.swift:6:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\")\n    let matches = regex.matches(in: text, range: NSRange(text.startIndex..., in: text))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpf_7tbmvs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\")\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpf_7tbmvs.swift:5:50: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, range: NSRange(text.startIndex..., in: text))\n                                                 ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpz0z2uql5.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpz0z2uql5.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmp4ro3tdm1.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n           ~~~~ ^~~~~\n/tmp/tmp4ro3tdm1.swift:4:47: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                         ~~~~ ^~~~~\n/tmp/tmp4ro3tdm1.swift:4:89: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                                                                   ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpyxm82_6n.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpyxm82_6n.swift:4:51: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n                                             ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpyxm82_6n.swift:4:97: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n                                                                                           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpyxm82_6n.swift:4:133: error: value of type 'String.Index' has no member 'predecessor'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n                                                                                                                      ~~~~~~~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let pattern = \"\\\\b[^z]*z[^z]*\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpdkvtf0lm.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpdkvtf0lm.swift:6:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmp4ro3tdm1.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n           ~~~~ ^~~~~\n/tmp/tmp4ro3tdm1.swift:4:47: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                         ~~~~ ^~~~~\n/tmp/tmp4ro3tdm1.swift:4:89: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                                                                   ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpyxm82_6n.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpyxm82_6n.swift:4:51: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n                                             ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpyxm82_6n.swift:4:97: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n                                                                                           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpyxm82_6n.swift:4:133: error: value of type 'String.Index' has no member 'predecessor'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n                                                                                                                      ~~~~~~~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpz0z2uql5.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpz0z2uql5.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let pattern = \"\\\\b[^z]*z[^z]*\\\\b\"\n    return text.range(of: pattern, options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmppc3kpdea.swift:5:17: error: value of type 'String' has no member 'range'\n    return text.range(of: pattern, options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmppc3kpdea.swift:5:46: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: pattern, options: .regularExpression) != nil\n                                            ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[^z]+z[^z]+$\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpze9nnu6b.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[^z]+z[^z]+$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpze9nnu6b.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpcu83hig9.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpcu83hig9.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: .caseInsensitive)\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpimgt9fdx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpimgt9fdx.swift:4:82: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: .caseInsensitive)\n                                                                                ~^~~~~~~~~~~~~~~\n/tmp/tmpimgt9fdx.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: nil, locale: nil) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpdpa7rblu.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: nil, locale: nil) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpdpa7rblu.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: nil, locale: nil) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdpa7rblu.swift:4:78: error: 'nil' requires a contextual type\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: nil, locale: nil) != nil\n                                                                             ^\n/tmp/tmpdpa7rblu.swift:4:91: error: 'nil' requires a contextual type\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: nil, locale: nil) != nil\n                                                                                          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpcu83hig9.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpcu83hig9.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.numberOfMatches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmp59tl35rv.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59tl35rv.swift:5:64: error: cannot find 'NSRange' in scope\n    return regex.numberOfMatches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) > 0\n                                                               ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\") != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp18yx9s_6.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil\n           ~~~~ ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\") != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp18yx9s_6.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil\n           ~~~~ ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpcu83hig9.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpcu83hig9.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpcrnf34r1.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil\n           ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpgfxh18ml.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpgfxh18ml.swift:4:72: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n                                                                      ~^~~~~~~~~~~~~~~\n/tmp/tmpgfxh18ml.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}