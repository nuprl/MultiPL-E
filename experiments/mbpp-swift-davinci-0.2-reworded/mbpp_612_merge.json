{
  "name": "mbpp_612_merge",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function which takes an array of arrays, where each subarray has two elements, and returns an array of two arrays where the first array has the first element of each subarray and the second one has the second.\nfunc merge(lst: AnyHashable) -> AnyHashable {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_612_merge.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(merge(lst: [[\"x\", \"y\"], [\"a\", \"b\"], [\"m\", \"n\"]]) == [[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"]])\nassert(merge(lst: [[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]])\nassert(merge(lst: [[\"x\", \"y\", \"z\"], [\"a\", \"b\", \"c\"], [\"m\", \"n\", \"o\"]]) == [[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"], [\"z\", \"c\", \"o\"]])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let lst = lst as! [AnyHashable]\n    let first = lst.map { $0 as! [AnyHashable] }.map { $0[0] }\n    let second = lst.map { $0 as! [AnyHashable] }.map { $0[1] }\n    return [first, second]",
    "    var first = [AnyHashable]()\n    var second = [AnyHashable]()\n    for item in lst as! [AnyHashable] {\n        first.append(item[0])\n        second.append(item[1])\n    }\n    return [first, second]",
    "    return lst",
    "    return lst",
    "    let lst = lst as! [AnyHashable]\n    let lst1 = lst.map { $0 as! [AnyHashable] }\n    let lst2 = lst1.map { $0[0] }\n    let lst3 = lst1.map { $0[1] }\n    return [lst2, lst3]",
    "    return lst",
    "    let lst = lst as! Array<AnyHashable>\n    let lst1 = lst[0] as! Array<AnyHashable>\n    let lst2 = lst[1] as! Array<AnyHashable>\n    return [lst1[0], lst2[0], lst1[1], lst2[1]]",
    "    return lst",
    "    return lst",
    "    return lst",
    "    let lst = lst as! [AnyHashable]\n    let lst1 = lst.map { $0 as! [AnyHashable] }\n    let lst2 = lst1.map { $0[0] }\n    let lst3 = lst1.map { $0[1] }\n    return [lst2, lst3]",
    "    return lst",
    "    return lst",
    "    return lst",
    "    var lst = lst\n    var lst1 = []\n    var lst2 = []\n    while lst.count > 0 {\n        let lst0 = lst[0]\n        lst1.append(lst0[0])\n        lst2.append(lst0[1])\n        lst = lst[1:]\n    }\n    return [lst1, lst2]",
    "    return lst",
    "    return lst",
    "    var lst = lst\n    var lst2 = lst\n    var lst3 = lst\n    var lst4 = lst\n    var lst5 = lst\n    var lst6 = lst\n    var lst7 = lst\n    var lst8 = lst\n    var lst9 = lst\n    var lst10 = lst\n    var lst11 = lst\n    var lst12 = lst\n    var lst13 = lst\n    var lst14 = lst\n    var lst15 = lst\n    var lst16 = lst\n    var lst17 = lst\n    var lst18 = lst\n    var lst19 = lst\n    var lst20 = lst\n    var lst21 = lst\n    var lst22 = lst\n    var lst23 = lst\n    var lst24 = lst\n    var lst25 = lst\n    var lst26 = lst\n    var lst27 = lst\n    var lst28 = lst\n    var lst29 = lst\n    var lst30 = lst\n    var lst31 = lst\n    var lst32 = lst\n    var lst33 = lst\n    var lst34 = lst\n    var lst35 = lst\n    var lst36 = lst\n    var lst37 = lst\n    var lst38 = lst\n    var lst39 = lst\n    var lst40 = lst\n    var lst41 = lst\n    var lst42 = lst\n    var lst43 = lst\n    var lst44 = lst\n    var lst45 = lst\n    var lst46 = lst\n    var lst47 = lst\n    var lst48 = lst\n    var lst49 = lst\n    var lst50 = lst\n    var lst51 = lst\n    var lst52 = lst\n    var lst53 = lst\n    var lst54 = lst\n    var lst55 = lst\n    var lst56 = lst\n    var lst57 = lst",
    "    return lst",
    "    let lst = lst as! [AnyHashable]\n    var a = [AnyHashable]()\n    var b = [AnyHashable]()\n    for i in lst {\n        let i = i as! [AnyHashable]\n        a.append(i[0])\n        b.append(i[1])\n    }\n    return [a, b]",
    "    var lst = lst\n    var lst2 = lst\n    var lst3 = lst\n    var lst4 = lst\n    var lst5 = lst\n    var lst6 = lst\n    var lst7 = lst\n    var lst8 = lst\n    var lst9 = lst\n    var lst10 = lst\n    var lst11 = lst\n    var lst12 = lst\n    var lst13 = lst\n    var lst14 = lst\n    var lst15 = lst\n    var lst16 = lst\n    var lst17 = lst\n    var lst18 = lst\n    var lst19 = lst\n    var lst20 = lst\n    var lst21 = lst\n    var lst22 = lst\n    var lst23 = lst\n    var lst24 = lst\n    var lst25 = lst\n    var lst26 = lst\n    var lst27 = lst\n    var lst28 = lst\n    var lst29 = lst\n    var lst30 = lst\n    var lst31 = lst\n    var lst32 = lst\n    var lst33 = lst\n    var lst34 = lst\n    var lst35 = lst\n    var lst36 = lst\n    var lst37 = lst\n    var lst38 = lst\n    var lst39 = lst\n    var lst40 = lst\n    var lst41 = lst\n    var lst42 = lst\n    var lst43 = lst\n    var lst44 = lst\n    var lst45 = lst\n    var lst46 = lst\n    var lst47 = lst\n    var lst48 = lst\n    var lst49 = lst\n    var lst50 = lst\n    var lst51 = lst\n    var lst52 = lst\n    var lst53 = lst\n    var lst54 = lst\n    var lst55 = lst\n    var lst56 = lst\n    var lst57 = lst",
    "    return lst",
    "    var first: AnyHashable = []\n    var second: AnyHashable = []\n    for i in 0..<len(lst) {\n        first.append(lst[i][0])\n        second.append(lst[i][1])\n    }\n    return [first, second]",
    "    return lst",
    "    if let lst = lst as? [AnyHashable] {\n        let first = lst.map { $0[0] }\n        let second = lst.map { $0[1] }\n        return [first, second]\n    } else {\n        return []\n    }",
    "    return lst",
    "    return lst",
    "    let lst = lst as! [AnyHashable]\n    let lst1 = lst.map { $0 as! [AnyHashable] }\n    let lst2 = lst1.map { $0[0] }\n    let lst3 = lst1.map { $0[1] }\n    return [lst2, lst3]",
    "    var lst = lst\n    var res = [AnyHashable]()\n    var res1 = [AnyHashable]()\n    var res2 = [AnyHashable]()\n    for i in 0..<lst.count {\n        res.append(lst[i])\n    }\n    for i in 0..<res.count {\n        res1.append(res[i][0])\n        res2.append(res[i][1])\n    }\n    return [res1, res2]",
    "    return lst",
    "    return lst",
    "    return lst",
    "    return lst",
    "    var lst = lst\n    var result = [AnyHashable]()\n    var first = [AnyHashable]()\n    var second = [AnyHashable]()\n    while lst.count > 0 {\n        let sublst = lst[0]\n        first.append(sublst[0])\n        second.append(sublst[1])\n        lst = lst[1]\n    }\n    result.append(first)\n    result.append(second)\n    return result",
    "    var lst = lst\n    var res = [AnyHashable]()\n    var res1 = [AnyHashable]()\n    var res2 = [AnyHashable]()\n    for i in 0..<lst.count {\n        res.append(lst[i])\n    }\n    for i in 0..<res.count {\n        res1.append(res[i][0])\n        res2.append(res[i][1])\n    }\n    return [res1, res2]",
    "    return lst",
    "    return lst",
    "    let lst = lst as! [AnyHashable]\n    var first = [AnyHashable]()\n    var second = [AnyHashable]()\n    for i in lst {\n        let i = i as! [AnyHashable]\n        first.append(i[0])\n        second.append(i[1])\n    }\n    return [first, second]",
    "    return lst",
    "    return lst",
    "    var lst = lst\n    var res = [AnyHashable]()\n    var res1 = [AnyHashable]()\n    var res2 = [AnyHashable]()\n    for i in 0..<lst.count {\n        res.append(lst[i])\n    }\n    for i in 0..<res.count {\n        res1.append(res[i][0])\n        res2.append(res[i][1])\n    }\n    return [res1, res2]",
    "    return lst",
    "    return lst",
    "    return lst",
    "    return lst",
    "    return lst",
    "    let lst = lst as! [AnyHashable]\n    let lst1 = lst.map { $0 as! [AnyHashable] }\n    let lst2 = lst1.map { $0[0] }\n    let lst3 = lst1.map { $0[1] }\n    return [lst2, lst3]",
    "    let lst = lst as! [AnyHashable]\n    var first: [AnyHashable] = []\n    var second: [AnyHashable] = []\n    for sublst in lst {\n        let sublst = sublst as! [AnyHashable]\n        first.append(sublst[0])\n        second.append(sublst[1])\n    }\n    return [first, second]",
    "    return lst",
    "    return lst",
    "    return lst",
    "    return lst",
    "    return lst",
    "    return lst",
    "    return lst",
    "    return lst",
    "    var result = [[AnyHashable]]()\n    result.append([AnyHashable]())\n    result.append([AnyHashable]())\n    for i in 0..<lst.count {\n        result[0].append(lst[i][0])\n        result[1].append(lst[i][1])\n    }\n    return result",
    "    return lst",
    "    var first: AnyHashable = []\n    var second: AnyHashable = []\n    for item in lst {\n        first.append(item[0])\n        second.append(item[1])\n    }\n    return [first, second]",
    "    return lst",
    "    return lst",
    "    let lst = lst as! [AnyHashable]\n    let lst1 = lst.map { $0 as! [AnyHashable] }\n    let lst2 = lst1.map { $0[0] }\n    let lst3 = lst1.map { $0[1] }\n    return [lst2, lst3]",
    "    return lst",
    "    let lst = lst as! [AnyHashable]\n    let first = lst.map { $0 as! [AnyHashable] }.map { $0[0] }\n    let second = lst.map { $0 as! [AnyHashable] }.map { $0[1] }\n    return [first, second]",
    "    return lst",
    "    return lst",
    "    let lst = lst as! [AnyHashable]\n    var lst1 = [AnyHashable]()\n    var lst2 = [AnyHashable]()\n    for i in lst {\n        let i = i as! [AnyHashable]\n        lst1.append(i[0])\n        lst2.append(i[1])\n    }\n    return [lst1, lst2]",
    "    let lst = lst as! [AnyHashable]\n    let first = lst.map { $0 as! [AnyHashable] }.map { $0[0] }\n    let second = lst.map { $0 as! [AnyHashable] }.map { $0[1] }\n    return [first, second]",
    "    return lst",
    "    if let lst = lst as? [AnyHashable] {\n        var first: [AnyHashable] = []\n        var second: [AnyHashable] = []\n        for item in lst {\n            if let item = item as? [AnyHashable] {\n                first.append(item[0])\n                second.append(item[1])\n            }\n        }\n        return [first, second]\n    }\n    return []",
    "    let lst = lst as! [AnyHashable]\n    let lst1 = lst.map { $0 as! [AnyHashable] }\n    let lst2 = lst1.map { $0[0] }\n    let lst3 = lst1.map { $0[1] }\n    return [lst2, lst3]",
    "    let lst = lst as! [AnyHashable]\n    var first = [AnyHashable]()\n    var second = [AnyHashable]()\n    for i in lst {\n        let i = i as! [AnyHashable]\n        first.append(i[0])\n        second.append(i[1])\n    }\n    return [first, second]",
    "    let lst = lst as! [AnyHashable]\n    var first: [AnyHashable] = []\n    var second: [AnyHashable] = []\n    for i in lst {\n        let i = i as! [AnyHashable]\n        first.append(i[0])\n        second.append(i[1])\n    }\n    return [first, second]",
    "    let lst = lst as! [AnyHashable]\n    let lst1 = lst.map { $0 as! [AnyHashable] }\n    let lst2 = lst1.map { $0[0] }\n    let lst3 = lst1.map { $0[1] }\n    return [lst2, lst3]",
    "    return lst",
    "    return lst",
    "    return lst",
    "    let lst = lst as! [AnyHashable]\n    let first = lst.map { $0 as! [AnyHashable] }.map { $0[0] }\n    let second = lst.map { $0 as! [AnyHashable] }.map { $0[1] }\n    return [first, second]",
    "    return lst",
    "    return lst",
    "    let lst = lst as! [AnyHashable]\n    let lst1 = lst.map { $0 as! [AnyHashable] }\n    let lst2 = lst1.map { $0[0] }\n    let lst3 = lst1.map { $0[1] }\n    return [lst2, lst3]",
    "    let lst = lst as! [AnyHashable]\n    let first = lst.map { $0 as! [AnyHashable] }.map { $0[0] }\n    let second = lst.map { $0 as! [AnyHashable] }.map { $0[1] }\n    return [first, second]",
    "    var lst = lst\n    var result = [AnyHashable]()\n    var first = [AnyHashable]()\n    var second = [AnyHashable]()\n    while lst.count > 0 {\n        let head = lst.pop()\n        first.append(head[0])\n        second.append(head[1])\n    }\n    result.append(first)\n    result.append(second)\n    return result",
    "    return lst",
    "    if lst is [AnyHashable] {\n        let lst = lst as! [AnyHashable]\n        if lst.count == 0 {\n            return []\n        }\n        if lst[0] is [AnyHashable] {\n            let lst = lst as! [[AnyHashable]]\n            var first = [AnyHashable]()\n            var second = [AnyHashable]()\n            for i in lst {\n                first.append(i[0])\n                second.append(i[1])\n            }\n            return [first, second]\n        }\n    }\n    return nil",
    "    return lst",
    "    return lst",
    "    let lst = lst as! [AnyHashable]\n    let first = lst.map { $0 as! [AnyHashable] }.map { $0[0] }\n    let second = lst.map { $0 as! [AnyHashable] }.map { $0[1] }\n    return [first, second]",
    "    var first: [AnyHashable] = []\n    var second: [AnyHashable] = []\n    for item in lst {\n        first.append(item[0])\n        second.append(item[1])\n    }\n    return [first, second]",
    "    return lst",
    "    return lst",
    "    return lst",
    "    let lst = lst as! [AnyHashable]\n    var first = [AnyHashable]()\n    var second = [AnyHashable]()\n    for i in lst {\n        let i = i as! [AnyHashable]\n        first.append(i[0])\n        second.append(i[1])\n    }\n    return [first, second]",
    "    let lst = lst as! [AnyHashable]\n    let first = lst.map { $0 as! [AnyHashable] }.map { $0[0] }\n    let second = lst.map { $0 as! [AnyHashable] }.map { $0[1] }\n    return [first, second]",
    "    return lst",
    "    if let lst = lst as? [AnyHashable] {\n        var first = [AnyHashable]()\n        var second = [AnyHashable]()\n        for item in lst {\n            if let item = item as? [AnyHashable] {\n                first.append(item[0])\n                second.append(item[1])\n            }\n        }\n        return [first, second]\n    }\n    return []",
    "    var lst = lst\n    var res = [AnyHashable]()\n    var res2 = [AnyHashable]()\n    for i in lst {\n        res.append(i[0])\n        res2.append(i[1])\n    }\n    return [res, res2]",
    "    return lst",
    "    let lst = lst as! [AnyHashable]\n    let first = lst.map { $0 as! [AnyHashable] }.map { $0[0] }\n    let second = lst.map { $0 as! [AnyHashable] }.map { $0[1] }\n    return [first, second]",
    "    var lst = lst\n    var lst1 = [AnyHashable]()\n    var lst2 = [AnyHashable]()\n    for i in 0..<lst.count {\n        lst1.append(lst[i][0])\n        lst2.append(lst[i][1])\n    }\n    return [lst1, lst2]",
    "    return lst",
    "    var first: [AnyHashable] = []\n    var second: [AnyHashable] = []\n    for i in lst {\n        first.append(i[0])\n        second.append(i[1])\n    }\n    return [first, second]",
    "    return lst",
    "    return lst",
    "    var result = [AnyHashable]()\n    var first = [AnyHashable]()\n    var second = [AnyHashable]()\n    for sub in lst {\n        first.append(sub[0])\n        second.append(sub[1])\n    }\n    result.append(first)\n    result.append(second)\n    return result",
    "    var first: [AnyHashable] = []\n    var second: [AnyHashable] = []\n    for i in lst {\n        first.append(i[0])\n        second.append(i[1])\n    }\n    return [first, second]",
    "    return lst",
    "    var lst = lst\n    var res = [AnyHashable]()\n    var res2 = [AnyHashable]()\n    for i in 0..<lst.count {\n        res.append(lst[i][0])\n        res2.append(lst[i][1])\n    }\n    return [res, res2]",
    "    return lst",
    "    return lst",
    "    return lst",
    "    let lst = lst as! [AnyHashable]\n    let lst1 = lst.map { $0 as! [AnyHashable] }\n    let lst2 = lst1.map { $0[0] }\n    let lst3 = lst1.map { $0[1] }\n    return [lst2, lst3]",
    "    return lst",
    "    return lst",
    "    return lst",
    "    let lst = lst as! [AnyHashable]\n    let lst0 = lst[0] as! [AnyHashable]\n    let lst1 = lst[1] as! [AnyHashable]\n    let lst2 = lst[2] as! [AnyHashable]\n    let lst3 = lst[3] as! [AnyHashable]\n    let lst4 = lst[4] as! [AnyHashable]\n    let lst5 = lst[5] as! [AnyHashable]\n    let lst6 = lst[6] as! [AnyHashable]\n    let lst7 = lst[7] as! [AnyHashable]\n    let lst8 = lst[8] as! [AnyHashable]\n    let lst9 = lst[9] as! [AnyHashable]\n    let lst10 = lst[10] as! [AnyHashable]\n    let lst11 = lst[11] as! [AnyHashable]\n    let lst12 = lst[12] as! [AnyHashable]\n    let lst13 = lst[13] as! [AnyHashable]\n    let lst14 = lst[14] as! [AnyHashable]\n    let lst15 = lst[15] as! [AnyHashable]\n    let lst16 = lst[16] as! [AnyHashable]\n    let lst17 = lst[17] as! [AnyHashable]\n    let lst18 = lst[18] as! [AnyHashable]\n    let lst19 = lst[19] as! [AnyHashable]\n    let lst20 = lst[20] as! [AnyHashable]\n    let lst21 = lst[21] as! [AnyHashable]\n    let lst22 = lst[22] as! [AnyHashable]\n    let lst23 = lst[23] as! [AnyHashable]\n    let lst24 = lst[24] as! [AnyHashable]\n    let lst25 = lst[25] as! [AnyHashable]\n    let",
    "    let lst = lst as! [AnyHashable]\n    let first = lst.map { $0 as! [AnyHashable] }.map { $0[0] }\n    let second = lst.map { $0 as! [AnyHashable] }.map { $0[1] }\n    return [first, second]",
    "    return lst",
    "    var lst = lst\n    var lst2 = lst\n    var lst3 = lst\n    var lst4 = lst\n    var lst5 = lst\n    var lst6 = lst\n    var lst7 = lst\n    var lst8 = lst\n    var lst9 = lst\n    var lst10 = lst\n    var lst11 = lst\n    var lst12 = lst\n    var lst13 = lst\n    var lst14 = lst\n    var lst15 = lst\n    var lst16 = lst\n    var lst17 = lst\n    var lst18 = lst\n    var lst19 = lst\n    var lst20 = lst\n    var lst21 = lst\n    var lst22 = lst\n    var lst23 = lst\n    var lst24 = lst\n    var lst25 = lst\n    var lst26 = lst\n    var lst27 = lst\n    var lst28 = lst\n    var lst29 = lst\n    var lst30 = lst\n    var lst31 = lst\n    var lst32 = lst\n    var lst33 = lst\n    var lst34 = lst\n    var lst35 = lst\n    var lst36 = lst\n    var lst37 = lst\n    var lst38 = lst\n    var lst39 = lst\n    var lst40 = lst\n    var lst41 = lst\n    var lst42 = lst\n    var lst43 = lst\n    var lst44 = lst\n    var lst45 = lst\n    var lst46 = lst\n    var lst47 = lst\n    var lst48 = lst\n    var lst49 = lst\n    var lst50 = lst\n    var lst51 = lst\n    var lst52 = lst\n    var lst53 = lst\n    var lst54 = lst\n    var lst55 = lst\n    var lst56 = lst\n    var lst57 = lst",
    "    let lst = lst as! [[AnyHashable]]\n    var first: [AnyHashable] = []\n    var second: [AnyHashable] = []\n    for i in lst {\n        first.append(i[0])\n        second.append(i[1])\n    }\n    return [first, second]",
    "    return lst",
    "    return lst",
    "    return lst",
    "    if let lst = lst as? [AnyHashable] {\n        if lst.count == 0 {\n            return []\n        } else if lst.count == 1 {\n            return lst[0]\n        } else {\n            let first = lst[0]\n            let second = lst[1]\n            if let first = first as? [AnyHashable], let second = second as? [AnyHashable] {\n                return [first + second] + merge(lst: Array(lst[2..<lst.count]))\n            } else {\n                return [first, second] + merge(lst: Array(lst[2..<lst.count]))\n            }\n        }\n    } else {\n        return []\n    }",
    "    let lst = lst as! [AnyHashable]\n    var res = [AnyHashable]()\n    var res1 = [AnyHashable]()\n    var res2 = [AnyHashable]()\n    for i in lst {\n        let i = i as! [AnyHashable]\n        res1.append(i[0])\n        res2.append(i[1])\n    }\n    res.append(res1)\n    res.append(res2)\n    return res",
    "    return lst",
    "    var result = [AnyHashable]()\n    var first = [AnyHashable]()\n    var second = [AnyHashable]()\n    for i in lst {\n        first.append(i[0])\n        second.append(i[1])\n    }\n    result.append(first)\n    result.append(second)\n    return result",
    "    var lst = lst\n    var result = [AnyHashable]()\n    for i in 0..<lst.count {\n        var sub = [AnyHashable]()\n        for j in 0..<lst[i].count {\n            sub.append(lst[i][j])\n        }\n        result.append(sub)\n    }\n    return result",
    "    return lst",
    "    var first: [AnyHashable] = []\n    var second: [AnyHashable] = []\n    for i in lst {\n        first.append(i[0])\n        second.append(i[1])\n    }\n    return [first, second]",
    "    var lst = lst\n    var result: AnyHashable = []\n    var result2: AnyHashable = []\n    while lst.count > 0 {\n        let first = lst.first\n        result.append(first.first)\n        result2.append(first.second)\n        lst = lst.rest\n    }\n    return [result, result2]",
    "    return lst",
    "    return lst",
    "    return lst",
    "    let lst = lst as! [AnyHashable]\n    let lst1 = lst.map { $0 as! [AnyHashable] }\n    let lst2 = lst1.map { $0[0] }\n    let lst3 = lst1.map { $0[1] }\n    return [lst2, lst3]",
    "    return lst",
    "    var lst = lst\n    var res = [AnyHashable]()\n    var res1 = [AnyHashable]()\n    var res2 = [AnyHashable]()\n    while lst.count > 0 {\n        let x = lst.pop()\n        res1.append(x.pop())\n        res2.append(x.pop())\n    }\n    res.append(res1)\n    res.append(res2)\n    return res",
    "    return lst",
    "    return lst",
    "    return lst",
    "    let lst = lst as! [AnyHashable]\n    var first = [AnyHashable]()\n    var second = [AnyHashable]()\n    for i in lst {\n        let i = i as! [AnyHashable]\n        first.append(i[0])\n        second.append(i[1])\n    }\n    return [first, second]",
    "    var res = [AnyHashable]()\n    var res1 = [AnyHashable]()\n    var res2 = [AnyHashable]()\n    for i in lst {\n        for j in i {\n            if j == 0 {\n                res1.append(j)\n            } else {\n                res2.append(j)\n            }\n        }\n    }\n    res.append(res1)\n    res.append(res2)\n    return res",
    "    return lst",
    "    return lst",
    "    var result = [AnyHashable]()\n    var first = [AnyHashable]()\n    var second = [AnyHashable]()\n    for i in lst {\n        first.append(i[0])\n        second.append(i[1])\n    }\n    result.append(first)\n    result.append(second)\n    return result",
    "    var res = [AnyHashable]()\n    var res1 = [AnyHashable]()\n    var res2 = [AnyHashable]()\n    for i in lst {\n        res.append(i)\n    }\n    for i in res {\n        res1.append(i[0])\n        res2.append(i[1])\n    }\n    return [res1, res2]",
    "    return lst",
    "    return lst",
    "    var lst = lst\n    var lst1 = [AnyHashable]()\n    var lst2 = [AnyHashable]()\n    for i in 0..<lst.count {\n        lst1.append(lst[i][0])\n        lst2.append(lst[i][1])\n    }\n    return [lst1, lst2]",
    "    return lst",
    "    let lst = lst as! [AnyHashable]\n    let first = lst.map { ($0 as! [AnyHashable])[0] }\n    let second = lst.map { ($0 as! [AnyHashable])[1] }\n    return [first, second]",
    "    let lst = lst as! [AnyHashable]\n    var first = [AnyHashable]()\n    var second = [AnyHashable]()\n    for i in lst {\n        let i = i as! [AnyHashable]\n        first.append(i[0])\n        second.append(i[1])\n    }\n    return [first, second]",
    "    return lst",
    "    let lst = lst as! Array<AnyHashable>\n    var first = Array<AnyHashable>()\n    var second = Array<AnyHashable>()\n    for i in lst {\n        let i = i as! Array<AnyHashable>\n        first.append(i[0])\n        second.append(i[1])\n    }\n    return [first, second]",
    "    let lst = lst as! [AnyHashable]\n    var first = [AnyHashable]()\n    var second = [AnyHashable]()\n    for i in lst {\n        let i = i as! [AnyHashable]\n        first.append(i[0])\n        second.append(i[1])\n    }\n    return [first, second]",
    "    return lst",
    "    var first = [AnyHashable]()\n    var second = [AnyHashable]()\n    for i in lst {\n        first.append(i[0])\n        second.append(i[1])\n    }\n    return [first, second]",
    "    return lst",
    "    return lst",
    "    return lst",
    "    let lst = lst as! [AnyHashable]\n    let lst1 = lst.map { $0 as! [AnyHashable] }\n    let lst2 = lst1.map { $0[0] }\n    let lst3 = lst1.map { $0[1] }\n    return [lst2, lst3]",
    "    return lst",
    "    return lst",
    "    let lst = lst as! [[AnyHashable]]\n    var first: [AnyHashable] = []\n    var second: [AnyHashable] = []\n    for sub in lst {\n        first.append(sub[0])\n        second.append(sub[1])\n    }\n    return [first, second]",
    "    return lst",
    "    let lst = lst as! [[AnyHashable]]\n    var first = [AnyHashable]()\n    var second = [AnyHashable]()\n    for i in lst {\n        first.append(i[0])\n        second.append(i[1])\n    }\n    return [first, second]",
    "    let lst = lst as! [AnyHashable]\n    var first = [AnyHashable]()\n    var second = [AnyHashable]()\n    for i in lst {\n        let i = i as! [AnyHashable]\n        first.append(i[0])\n        second.append(i[1])\n    }\n    return [first, second]",
    "    var lst = lst\n    var res = [AnyHashable]()\n    var res1 = [AnyHashable]()\n    var res2 = [AnyHashable]()\n    for i in 0..<lst.count {\n        res.append(lst[i])\n    }\n    for i in 0..<res.count {\n        res1.append(res[i][0])\n        res2.append(res[i][1])\n    }\n    return [res1, res2]",
    "    let lst = lst as! [AnyHashable]\n    let lst1 = lst.map { $0 as! [AnyHashable] }\n    let lst2 = lst1.map { $0[0] }\n    let lst3 = lst1.map { $0[1] }\n    return [lst2, lst3]",
    "    var lst = lst\n    var res = [AnyHashable]()\n    while lst.count > 0 {\n        let lst1 = lst[0]\n        let lst2 = lst[1]\n        res.append(lst1)\n        res.append(lst2)\n        lst = lst[2]\n    }\n    return res",
    "    return lst",
    "    return lst",
    "    return lst",
    "    return lst",
    "    var result: [AnyHashable] = []\n    var result1: [AnyHashable] = []\n    var result2: [AnyHashable] = []\n    for i in lst as! [AnyHashable] {\n        result1.append(i as! [AnyHashable][0])\n        result2.append(i as! [AnyHashable][1])\n    }\n    result.append(result1)\n    result.append(result2)\n    return result",
    "    var lst = lst\n    var res = [AnyHashable](), res1 = [AnyHashable](), res2 = [AnyHashable]()\n    for i in 0..<lst.count {\n        res.append(lst[i])\n    }\n    for i in 0..<res.count {\n        res1.append(res[i][0])\n        res2.append(res[i][1])\n    }\n    return [res1, res2]",
    "    return lst",
    "    return lst",
    "    var lst = lst\n    var lst1 = [AnyHashable]()\n    var lst2 = [AnyHashable]()\n    while lst.count > 0 {\n        let lst3 = lst.pop()\n        lst1.append(lst3[0])\n        lst2.append(lst3[1])\n    }\n    return [lst1, lst2]",
    "    return lst",
    "    let lst = lst as! [AnyHashable]\n    let lst1 = lst.map { $0 as! [AnyHashable] }\n    let lst2 = lst1.map { $0[0] }\n    let lst3 = lst1.map { $0[1] }\n    return [lst2, lst3]",
    "    return lst",
    "    return lst",
    "    let lst = lst as! [[AnyHashable]]\n    var first = [AnyHashable]()\n    var second = [AnyHashable]()\n    for i in lst {\n        first.append(i[0])\n        second.append(i[1])\n    }\n    return [first, second]",
    "    var res = [AnyHashable]()\n    var res1 = [AnyHashable]()\n    var res2 = [AnyHashable]()\n    for i in lst {\n        res.append(i)\n    }\n    for i in res {\n        res1.append(i[0])\n        res2.append(i[1])\n    }\n    return [res1, res2]",
    "    let lst = lst as! [AnyHashable]\n    let lst1 = lst.map { $0 as! [AnyHashable] }\n    let lst2 = lst1.map { $0[0] }\n    let lst3 = lst1.map { $0[1] }\n    return [lst2, lst3]",
    "    return lst",
    "    return lst",
    "    return lst",
    "    return lst",
    "    return lst",
    "    var lst = lst\n    var lst1 = [AnyHashable]()\n    var lst2 = [AnyHashable]()\n    for i in lst {\n        lst1.append(i[0])\n        lst2.append(i[1])\n    }\n    return [lst1, lst2]",
    "    let lst = lst as! [AnyHashable]\n    let lst1 = lst.map { $0 as! [AnyHashable] }\n    let lst2 = lst1.map { $0[0] }\n    let lst3 = lst1.map { $0[1] }\n    return [lst2, lst3]",
    "    return lst",
    "    return lst",
    "    return lst",
    "    return lst",
    "    let lst = lst as! [AnyHashable]\n    let first = lst.map { $0 as! [AnyHashable] }.map { $0[0] }\n    let second = lst.map { $0 as! [AnyHashable] }.map { $0[1] }\n    return [first, second]",
    "    return [lst[0], lst[1]]",
    "    return lst"
  ]
}