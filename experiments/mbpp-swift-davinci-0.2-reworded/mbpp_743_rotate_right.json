{
  "name": "mbpp_743_rotate_right",
  "language": "swift",
  "prompt": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    let n = list.count\n    var result = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        result[(i + m) % n] = list[i]\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let mod = m % n\n    let mod_list = Array(list[n - mod..<n])\n    let new_list = Array(list[0..<n - mod])\n    list = mod_list + new_list\n    return list",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    let n = list.count\n    var result = list\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let gcd = gcd_recursive(a: n, b: m)\n    for i in 0..<gcd {\n        let temp = list[n - i - 1]\n        var j = n - i - 1\n        while j >= m {\n            list[j] = list[j - m]\n            j -= m\n        }\n        list[j] = temp\n    }\n    return list",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let gcd = GCD(a: m, b: n)\n    for i in 0..<gcd {\n        let temp = list[i]\n        var j = i\n        while true {\n            let k = j + m\n            if k >= n {\n                list[j] = list[k - n]\n            } else {\n                list[j] = list[k]\n                j = k\n                break\n            }\n        }\n        list[j] = temp\n    }\n    return list",
    "    var list = list\n    let n = list.count\n    let gcd = gcd_func(a: m, b: n)\n    for i in 0..<gcd {\n        let temp = list[i]\n        var j = i\n        while true {\n            let k = j + m\n            if k >= n {\n                list[j] = list[k - n]\n            } else {\n                list[j] = list[k]\n                j = k\n                if j == i {\n                    break\n                }\n            }\n        }\n        list[j] = temp\n    }\n    return list",
    "    var result = list\n    let n = list.count\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result"
  ]
}