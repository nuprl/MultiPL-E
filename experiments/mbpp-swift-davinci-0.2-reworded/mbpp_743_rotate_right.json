{
  "name": "mbpp_743_rotate_right",
  "language": "swift",
  "prompt": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    let n = list.count\n    var result = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        result[(i + m) % n] = list[i]\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let mod = m % n\n    let mod_list = Array(list[n - mod..<n])\n    let new_list = Array(list[0..<n - mod])\n    list = mod_list + new_list\n    return list",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    let n = list.count\n    var result = list\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let gcd = gcd_recursive(a: n, b: m)\n    for i in 0..<gcd {\n        let temp = list[n - i - 1]\n        var j = n - i - 1\n        while j >= m {\n            list[j] = list[j - m]\n            j -= m\n        }\n        list[j] = temp\n    }\n    return list",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let gcd = GCD(a: m, b: n)\n    for i in 0..<gcd {\n        let temp = list[i]\n        var j = i\n        while true {\n            let k = j + m\n            if k >= n {\n                list[j] = list[k - n]\n            } else {\n                list[j] = list[k]\n                j = k\n                break\n            }\n        }\n        list[j] = temp\n    }\n    return list",
    "    var list = list\n    let n = list.count\n    let gcd = gcd_func(a: m, b: n)\n    for i in 0..<gcd {\n        let temp = list[i]\n        var j = i\n        while true {\n            let k = j + m\n            if k >= n {\n                list[j] = list[k - n]\n            } else {\n                list[j] = list[k]\n                j = k\n                if j == i {\n                    break\n                }\n            }\n        }\n        list[j] = temp\n    }\n    return list",
    "    var result = list\n    let n = list.count\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var result = list\n    let n = list.count\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let gcd = gcd_func(a: n, b: m)\n    for i in 0..<gcd {\n        let temp = list[n - i - 1]\n        list[n - i - 1] = list[n - i - 1 - m]\n        list[n - i - 1 - m] = temp\n    }\n    return list",
    "    var result = list\n    for _ in 0..<m {\n        result.insert(result.removeLast(), at: 0)\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    if m == 0 {\n        return list\n    }\n    let reverse = { (list: inout [Int], start: Int, end: Int) in\n        var start = start\n        var end = end\n        while start < end {\n            list.swapAt(start, end)\n            start += 1\n            end -= 1\n        }\n    }\n    reverse(&list, 0, n - m - 1)\n    reverse(&list, n - m, n - 1)\n    reverse(&list, 0, n - 1)\n    return list",
    "    var list = list\n    let n = list.count\n    let gcd = GCD(a: n, b: m)\n    for i in 0..<gcd {\n        let temp = list[n - i - 1]\n        var j = n - i - 1\n        while j - m >= 0 {\n            list[j] = list[j - m]\n            j -= m\n        }\n        list[j] = temp\n    }\n    return list",
    "    var list = list\n    let n = list.count\n    m %= n\n    reverse(&list, start: 0, end: n - 1)\n    reverse(&list, start: 0, end: m - 1)\n    reverse(&list, start: m, end: n - 1)\n    return list",
    "    var result = list\n    var i = 0\n    while i < m {\n        let temp = result.removeLast()\n        result.insert(temp, at: 0)\n        i += 1\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    let first = Array(list[n - m ..< n])\n    let second = Array(list[0 ..< n - m])\n    list = first + second\n    return list",
    "    let n = list.count\n    let m = m % n\n    let result = Array(list[n - m..<n] + list[0..<n - m])\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let temp = result.removeLast()\n        result.insert(temp, at: 0)\n    }\n    return result",
    "    let n = list.count\n    var result = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result",
    "    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var result = [Int]()\n    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var list = list\n    let n = list.count\n    m %= n\n    let gcd = gcd_of_two_numbers(a: n, b: m)\n    for i in 0..<gcd {\n        var j = i\n        var temp = list[i]\n        while true {\n            let k = j + m\n            if k >= n {\n                break\n            }\n            list[j] = list[k]\n            j = k\n        }\n        list[j] = temp\n    }\n    return list",
    "    let n = list.count\n    var result = list\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var new_list = list\n    for _ in 0..<m {\n        let last = new_list.removeLast()\n        new_list.insert(last, at: 0)\n    }\n    return new_list",
    "    var list = list\n    let n = list.count\n    let gcd = gcd_func(a: m, b: n)\n    for i in 0..<gcd {\n        let temp = list[n - i - 1]\n        var j = n - i - 1\n        while j != i {\n            list[j] = list[j - m]\n            j -= m\n        }\n        list[i] = temp\n    }\n    return list",
    "    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let temp = result.removeLast()\n        result.insert(temp, at: 0)\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let gcd = gcd_func(a: n, b: m)\n    for i in 0..<gcd {\n        let temp = list[n - i - 1]\n        list[n - i - 1] = list[n - i - m - 1]\n        list[n - i - m - 1] = temp\n    }\n    return list",
    "    var list = list\n    let n = list.count\n    let gcd = GCD(a: m, b: n)\n    for i in 0..<gcd {\n        let temp = list[i]\n        var j = i\n        while true {\n            let k = j + m\n            if k >= n {\n                list[j] = list[k - n]\n            } else {\n                list[j] = list[k]\n                j = k\n                if j == i {\n                    break\n                }\n            }\n        }\n        list[j] = temp\n    }\n    return list",
    "    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        result.insert(result.removeLast(), at: 0)\n    }\n    return result",
    "    var new_list = list\n    let n = list.count\n    for i in 0..<n {\n        new_list[(i + m) % n] = list[i]\n    }\n    return new_list",
    "    let n = list.count\n    var result = list\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result",
    "    var result = list\n    let n = list.count\n    for i in 0..<n {\n        result[(i+m)%n] = list[i]\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    if m == 0 {\n        return list\n    }\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var new_list = list\n    for _ in 0..<m {\n        let last = new_list.removeLast()\n        new_list.insert(last, at: 0)\n    }\n    return new_list",
    "    var list = list\n    let n = list.count\n    var m = m\n    if m > n {\n        m = m % n\n    }\n    if m == 0 {\n        return list\n    }\n    var temp = [Int]()\n    for i in (n - m)..<n {\n        temp.append(list[i])\n    }\n    for i in (m..<n).reversed() {\n        list[i] = list[i - m]\n    }\n    for i in 0..<m {\n        list[i] = temp[i]\n    }\n    return list",
    "    var result = list\n    let n = list.count\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result",
    "    let n = list.count\n    var result = list\n    for i in 0..<n {\n        result[i] = list[(i+m)%n]\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        result.insert(result.removeLast(), at: 0)\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    let n = list.count\n    var result = list\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result",
    "    var new_list = list\n    for _ in 0..<m {\n        let last = new_list.removeLast()\n        new_list.insert(last, at: 0)\n    }\n    return new_list",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let gcd = gcd_func(a: m, b: n)\n    for i in 0..<gcd {\n        var j = i\n        var temp = list[i]\n        while true {\n            let k = j + m\n            if k >= n {\n                break\n            }\n            list[j] = list[k]\n            j = k\n        }\n        list[j] = temp\n    }\n    return list",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var list = list\n    var m = m\n    if m > list.count {\n        m = m % list.count\n    }\n    let first = list[0..<list.count - m]\n    let second = list[list.count - m..<list.count]\n    list = Array(second + first)\n    return list",
    "    var list = list\n    let n = list.count\n    let gcd = gcd_func(a: n, b: m)\n    for i in 0..<gcd {\n        let temp = list[i]\n        var j = i\n        while true {\n            let k = j + m\n            if k >= n {\n                list[j] = list[k - n]\n            } else if k == i {\n                list[j] = temp\n                break\n            } else {\n                list[j] = list[k]\n            }\n            j = k\n        }\n    }\n    return list",
    "    var list = list\n    var m = m\n    while m > 0 {\n        let temp = list.removeLast()\n        list.insert(temp, at: 0)\n        m -= 1\n    }\n    return list",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    let n = list.count\n    var result = list\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result",
    "    let n = list.count\n    var result = list\n    for i in 0..<n {\n        result[(i + m) % n] = list[i]\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    let n = list.count\n    let m = m % n\n    let a = Array(list[n-m..<n])\n    let b = Array(list[0..<n-m])\n    return a + b",
    "    var result = list\n    let n = list.count\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let gcd = gcd_func(a: m, b: n)\n    for i in 0..<gcd {\n        let temp = list[i]\n        var j = i\n        while true {\n            let k = j + m\n            if k >= n {\n                list[j] = list[k - n]\n            } else {\n                list[j] = list[k]\n                j = k\n                break\n            }\n        }\n        list[j] = temp\n    }\n    return list",
    "    var result = list\n    for _ in 0..<m {\n        result.insert(result.removeLast(), at: 0)\n    }\n    return result",
    "    var list = list\n    var m = m\n    if m > list.count {\n        m = m % list.count\n    }\n    let a = Array(list[(list.count - m)..<list.count])\n    let b = Array(list[0..<(list.count - m)])\n    list = a + b\n    return list",
    "    let n = list.count\n    let m = m % n\n    return Array(list[n-m..<n] + list[0..<n-m])",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var result: [Int] = []\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let g = gcd(a: n, b: m)\n    for i in 0..<g {\n        var j = i\n        var temp = list[i]\n        while true {\n            let k = j + m\n            if k >= n {\n                list[j] = temp\n                break\n            } else {\n                list[j] = list[k]\n                j = k\n            }\n        }\n    }\n    return list",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var result = list\n    let n = list.count\n    for i in 0..<m {\n        let temp = result[n - 1]\n        for j in (1...n - 1).reversed() {\n            result[j] = result[j - 1]\n        }\n        result[0] = temp\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    for _ in 0..<m {\n        let last = list[n - 1]\n        for i in (0..<n - 1).reversed() {\n            list[i + 1] = list[i]\n        }\n        list[0] = last\n    }\n    return list",
    "    var result = list\n    let n = list.count\n    for i in 0..<n {\n        result[(i + m) % n] = list[i]\n    }\n    return result",
    "    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var list = list\n    let n = list.count\n    let gcd = gcd_func(a: m, b: n)\n    for i in 0..<gcd {\n        let temp = list[n - i - 1]\n        var j = n - i - 1\n        while j != i {\n            list[j] = list[j - m]\n            j -= m\n        }\n        list[i] = temp\n    }\n    return list",
    "    var list = list\n    let n = list.count\n    let gcd = gcd_recursive(a: m, b: n)\n    for i in 0..<gcd {\n        let temp = list[i]\n        var j = i\n        while true {\n            let k = j + m\n            if k >= n {\n                list[j] = list[k - n]\n            } else {\n                list[j] = list[k]\n                j = k\n                break\n            }\n        }\n        list[j] = temp\n    }\n    return list",
    "    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    let n = list.count\n    var result = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        result[(i + m) % n] = list[i]\n    }\n    return result",
    "    guard list.count > 0 else { return [] }\n    guard m > 0 else { return list }\n    let n = list.count\n    let m = m % n\n    let a = Array(list[n-m..<n])\n    let b = Array(list[0..<n-m])\n    return a + b",
    "    var result = list\n    for _ in 0..<m {\n        result.insert(result.removeLast(), at: 0)\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let temp = list.removeLast()\n        list.insert(temp, at: 0)\n    }\n    return list",
    "    var list = list\n    let n = list.count\n    for _ in 0..<m {\n        let temp = list[n-1]\n        for i in (0..<n-1).reversed() {\n            list[i+1] = list[i]\n        }\n        list[0] = temp\n    }\n    return list",
    "    let n = list.count\n    var result = list\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let gcd = GCD(a: m, b: n)\n    for i in 0..<gcd {\n        var j = i\n        var temp = list[i]\n        while true {\n            let k = j + m\n            if k >= n {\n                list[j] = temp\n                break\n            } else {\n                list[j] = list[k]\n                j = k\n            }\n        }\n    }\n    return list",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let gcd = GCD(a: n, b: m)\n    for i in 0..<gcd {\n        let temp = list[n - i - 1]\n        var j = n - i - 1\n        while j != i {\n            list[j] = list[j - m]\n            j -= m\n        }\n        list[i] = temp\n    }\n    return list",
    "    var list = list\n    let n = list.count\n    var m = m\n    m = m % n\n    if m < 0 {\n        m = n + m\n    }\n    if m == 0 {\n        return list\n    }\n    var i = 0\n    var j = n - 1\n    while i < j {\n        list.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    i = 0\n    j = m - 1\n    while i < j {\n        list.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    i = m\n    j = n - 1\n    while i < j {\n        list.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return list",
    "    var result = list\n    for _ in 0..<m {\n        result.insert(result.removeLast(), at: 0)\n    }\n    return result",
    "    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    let n = list.count\n    var result = list\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result",
    "    let n = list.count\n    var result = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        result[(i + m) % n] = list[i]\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    var m = m\n    if m > n {\n        m = m % n\n    }\n    if m == 0 {\n        return list\n    }\n    list.reverse()\n    let left = Array(list[0..<m])\n    let right = Array(list[m..<n])\n    left.reverse()\n    right.reverse()\n    return right + left",
    "    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var new_list = list\n    let n = list.count\n    for i in 0..<n {\n        new_list[i] = list[(i + m) % n]\n    }\n    return new_list",
    "    let n = list.count\n    var result = list\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result",
    "    let n = list.count\n    var new_list = list\n    for i in 0..<n {\n        new_list[i] = list[(i + m) % n]\n    }\n    return new_list",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let gcd = gcd_func(a: n, b: m)\n    for i in 0..<gcd {\n        let temp = list[n - i - 1]\n        var j = n - i - 1\n        while j != i {\n            list[j] = list[j - m]\n            j -= m\n        }\n        list[i] = temp\n    }\n    return list",
    "    var new_list = list\n    for _ in 0..<m {\n        new_list.insert(new_list.removeLast(), at: 0)\n    }\n    return new_list",
    "    var list = list\n    let n = list.count\n    let gcd = gcd_func(a: n, b: m)\n    \n    for i in 0..<gcd {\n        let temp = list[n - i - 1]\n        list[n - i - 1] = list[n - i - m - 1]\n        list[n - i - m - 1] = temp\n    }\n    \n    return list",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    var m = m\n    m = m % n\n    var temp = [Int]()\n    for i in 0..<m {\n        temp.append(list[n - m + i])\n    }\n    for i in (0..<n - m).reversed() {\n        list[i + m] = list[i]\n    }\n    for i in 0..<m {\n        list[i] = temp[i]\n    }\n    return list",
    "    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var list = list\n    var m = m\n    if m > list.count {\n        m = m % list.count\n    }\n    let a = Array(list[(list.count - m)..<list.count])\n    let b = Array(list[0..<(list.count - m)])\n    list = a + b\n    return list",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    let n = list.count\n    var result = list\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result",
    "    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    let n = list.count\n    var result = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        result[(i + m) % n] = list[i]\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    for _ in 0..<m {\n        let temp = list[n-1]\n        for i in (1...n-1).reversed() {\n            list[i] = list[i-1]\n        }\n        list[0] = temp\n    }\n    return list",
    "    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var result = list\n    for _ in 0..<m {\n        result.insert(result.removeLast(), at: 0)\n    }\n    return result",
    "    let n = list.count\n    var result = list\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result",
    "    var new_list = list\n    let n = list.count\n    for i in 0..<m {\n        let temp = new_list[n-1]\n        for j in (1...n-1).reversed() {\n            new_list[j] = new_list[j-1]\n        }\n        new_list[0] = temp\n    }\n    return new_list",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    let n = list.count\n    var result = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        result[(i + m) % n] = list[i]\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let gcd = GCD(a: n, b: m)\n    for i in 0..<gcd {\n        var j = i\n        var temp = list[i]\n        while true {\n            let k = j + m\n            if k >= n {\n                list[j] = temp\n                break\n            } else {\n                list[j] = list[k]\n                j = k\n            }\n        }\n    }\n    return list",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    list = list.reversed()\n    list = list[0..<m].reversed() + list[m..<n].reversed()\n    return list",
    "    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        result.insert(result.removeLast(), at: 0)\n    }\n    return result",
    "    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    let n = list.count\n    var result = list\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        result.insert(result.removeLast(), at: 0)\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var result = list\n    let n = list.count\n    for i in 0..<n {\n        result[(i + m) % n] = list[i]\n    }\n    return result",
    "    var new_list = list\n    for _ in 0..<m {\n        let last_item = new_list.removeLast()\n        new_list.insert(last_item, at: 0)\n    }\n    return new_list",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var result = list\n    for i in 0..<m {\n        let temp = result.removeLast()\n        result.insert(temp, at: 0)\n    }\n    return result",
    "    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var result: [Int] = []\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        result.insert(result.removeLast(), at: 0)\n    }\n    return result",
    "    var new_list = list\n    for _ in 0..<m {\n        let last = new_list.removeLast()\n        new_list.insert(last, at: 0)\n    }\n    return new_list",
    "    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var result: [Int] = []\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result",
    "    var list = list\n    var m = m\n    while m > 0 {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n        m -= 1\n    }\n    return list",
    "    var result = list\n    let n = list.count\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var list = list\n    let n = list.count\n    for _ in 0..<m {\n        let last = list[n-1]\n        for j in stride(from: n-1, to: 0, by: -1) {\n            list[j] = list[j-1]\n        }\n        list[0] = last\n    }\n    return list",
    "    var new_list = list\n    for i in 0..<m {\n        let temp = new_list.removeLast()\n        new_list.insert(temp, at: 0)\n    }\n    return new_list",
    "    var list = list\n    let n = list.count\n    let gcd = gcd_func(a: n, b: m)\n    for i in 0..<gcd {\n        let temp = list[n - i - 1]\n        var j = n - i - 1\n        while j != i {\n            list[j] = list[j - m]\n            j -= m\n        }\n        list[i] = temp\n    }\n    return list",
    "    var list = list\n    let n = list.count\n    for _ in 0..<m {\n        let temp = list[n-1]\n        for i in (0..<n-1).reversed() {\n            list[i+1] = list[i]\n        }\n        list[0] = temp\n    }\n    return list",
    "    var list = list\n    let n = list.count\n    let gcd = gcd_func(a: n, b: m)\n    for i in 0..<gcd {\n        let temp = list[n - i - 1]\n        var j = n - i - 1\n        while j != i {\n            list[j] = list[j - m]\n            j -= m\n        }\n        list[i] = temp\n    }\n    return list",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    let temp = list[n - m..<n]\n    list.removeSubrange(n - m..<n)\n    list.insert(contentsOf: temp, at: 0)\n    return list",
    "    var new_list = list\n    for _ in 0..<m {\n        let last = new_list.removeLast()\n        new_list.insert(last, at: 0)\n    }\n    return new_list",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    if m == 0 {\n        return list\n    }\n    var temp = list[n - 1]\n    for i in (0..<n).reversed() {\n        list[i] = list[i - 1]\n    }\n    list[0] = temp\n    return rotate_right(list: list, m: m - 1)",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var list = list\n    let n = list.count\n    let m = m % n\n    if m == 0 {\n        return list\n    }\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var new_list = list\n    for _ in 0..<m {\n        let last = new_list.removeLast()\n        new_list.insert(last, at: 0)\n    }\n    return new_list",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list",
    "    var result: [Int] = []\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        result.insert(result.removeLast(), at: 0)\n    }\n    return result",
    "    var result = list\n    let n = list.count\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result",
    "    let n = list.count\n    var result = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        result[(i + m) % n] = list[i]\n    }\n    return result",
    "    var new_list = list\n    for _ in 0..<m {\n        let last = new_list.removeLast()\n        new_list.insert(last, at: 0)\n    }\n    return new_list",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result",
    "    let n = list.count\n    var result = list\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result",
    "    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result"
  ]
}