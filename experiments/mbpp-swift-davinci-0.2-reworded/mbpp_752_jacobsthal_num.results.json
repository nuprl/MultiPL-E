{
  "name": "mbpp_752_jacobsthal_num",
  "language": "swift",
  "prompt": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_752_jacobsthal_num.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    var a = 0\n    var b = 1\n    var c = 0\n    for _ in 0..<n {\n        c = a + 2 * b\n        a = b\n        b = c\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "tmp8fcrk4ej/tmp8fcrk4ej.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b133f6bfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b133f3b6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b133f3b6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b133f3b57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8fcrk4ej                        0x00005648d708b335 <unavailable> + 4917\n5    libc.so.6                          0x00002b133f8ab460 __libc_start_main + 245\n6    tmp8fcrk4ej                        0x00005648d708afe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    var a = 0\n    var b = 1\n    var c = 0\n    if n == 0 {\n        return a\n    }\n    if n == 1 {\n        return b\n    }\n    for _ in 2...n {\n        c = 2 * b + a\n        a = b\n        b = c\n    }\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "tmphqo6prk_/tmphqo6prk_.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9e9c90cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9e9c603b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9e9c603988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9e9c6027b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphqo6prk_                        0x0000557694682335 <unavailable> + 4917\n5    libc.so.6                          0x00002b9e9caf8460 __libc_start_main + 245\n6    tmphqo6prk_                        0x0000557694681fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2 * jacobsthal_num(n: n-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2 * jacobsthal_num(n: n-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    var a = 0\n    var b = 1\n    var c = 0\n    if n == 0 {\n        return a\n    }\n    if n == 1 {\n        return b\n    }\n    for _ in 2...n {\n        c = 2 * b + a\n        a = b\n        b = c\n    }\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "tmphqo6prk_/tmphqo6prk_.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9e9c90cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9e9c603b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9e9c603988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9e9c6027b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphqo6prk_                        0x0000557694682335 <unavailable> + 4917\n5    libc.so.6                          0x00002b9e9caf8460 __libc_start_main + 245\n6    tmphqo6prk_                        0x0000557694681fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    var a = 0, b = 1\n    for _ in 0..<n {\n        let c = a + 2 * b\n        a = b\n        b = c\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "tmpv1gx9nu6/tmpv1gx9nu6.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba3da233c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba3d9f2ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba3d9f2a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3d9f297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpv1gx9nu6                        0x0000558b8c9ad335 <unavailable> + 4917\n5    libc.so.6                          0x00002ba3da41f460 __libc_start_main + 245\n6    tmpv1gx9nu6                        0x0000558b8c9acfe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2 * jacobsthal_num(n: n-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2*jacobsthal_num(n: n-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2 * jacobsthal_num(n: n-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2 * jacobsthal_num(n: n-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2 * jacobsthal_num(n: n-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n-1) + 2*jacobsthal_num(n: n-2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    var a = 0\n    var b = 1\n    var c = 0\n    for _ in 0..<n {\n        c = 2 * b + a\n        a = b\n        b = c\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "tmpryscbd31/tmpryscbd31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abd1b126c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abd1ae1db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abd1ae1d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abd1ae1c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpryscbd31                        0x00005601c821d335 <unavailable> + 4917\n5    libc.so.6                          0x00002abd1b312460 __libc_start_main + 245\n6    tmpryscbd31                        0x00005601c821cfe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2 * jacobsthal_num(n: n-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 { return 0 }\n    if n == 1 { return 1 }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    var a = 0\n    var b = 1\n    var c = 0\n    if n == 0 {\n        return a\n    }\n    if n == 1 {\n        return b\n    }\n    for _ in 2...n {\n        c = 2 * b + a\n        a = b\n        b = c\n    }\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "tmphqo6prk_/tmphqo6prk_.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9e9c90cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9e9c603b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9e9c603988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9e9c6027b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphqo6prk_                        0x0000557694682335 <unavailable> + 4917\n5    libc.so.6                          0x00002b9e9caf8460 __libc_start_main + 245\n6    tmphqo6prk_                        0x0000557694681fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n-1) + 2 * jacobsthal_num(n: n-2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2 * jacobsthal_num(n: n-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var jacobsthal_nums = [0, 1]\n    for i in 2...n {\n        jacobsthal_nums.append(jacobsthal_nums[i - 1] + 2 * jacobsthal_nums[i - 2])\n    }\n    return jacobsthal_nums[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    }\n    var a = 0\n    var b = 1\n    var c = 0\n    for _ in 2...n {\n        c = 2 * b + a\n        a = b\n        b = c\n    }\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "tmpp0r75apa/tmpp0r75apa.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cef017c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2ceed0eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2ceed0e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2ceed0d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpp0r75apa                        0x000055901e1f8335 <unavailable> + 4917\n5    libc.so.6                          0x00002b2cef203460 __libc_start_main + 245\n6    tmpp0r75apa                        0x000055901e1f7fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2*jacobsthal_num(n: n-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    var a = 0\n    var b = 1\n    var c = 0\n    for _ in 0..<n {\n        c = a + 2 * b\n        a = b\n        b = c\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "tmp8fcrk4ej/tmp8fcrk4ej.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b133f6bfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b133f3b6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b133f3b6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b133f3b57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8fcrk4ej                        0x00005648d708b335 <unavailable> + 4917\n5    libc.so.6                          0x00002b133f8ab460 __libc_start_main + 245\n6    tmp8fcrk4ej                        0x00005648d708afe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n-1) + 2 * jacobsthal_num(n: n-2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 { return 0 }\n    if n == 1 { return 1 }\n    return jacobsthal_num(n: n-1) + 2 * jacobsthal_num(n: n-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 { return 0 }\n    if n == 1 { return 1 }\n    return jacobsthal_num(n: n-1) + 2 * jacobsthal_num(n: n-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2 * jacobsthal_num(n: n-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 || n == 1 {\n        return n\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2 * jacobsthal_num(n: n-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2*jacobsthal_num(n: n-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2*jacobsthal_num(n: n-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2*jacobsthal_num(n: n-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    var a = 0, b = 1\n    for _ in 0..<n {\n        let c = a + 2 * b\n        a = b\n        b = c\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "tmpv1gx9nu6/tmpv1gx9nu6.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba3da233c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba3d9f2ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba3d9f2a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3d9f297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpv1gx9nu6                        0x0000558b8c9ad335 <unavailable> + 4917\n5    libc.so.6                          0x00002ba3da41f460 __libc_start_main + 245\n6    tmpv1gx9nu6                        0x0000558b8c9acfe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    var a = 0\n    var b = 1\n    var c = 0\n    for _ in 0..<n {\n        c = a + 2 * b\n        a = b\n        b = c\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "tmp8fcrk4ej/tmp8fcrk4ej.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b133f6bfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b133f3b6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b133f3b6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b133f3b57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8fcrk4ej                        0x00005648d708b335 <unavailable> + 4917\n5    libc.so.6                          0x00002b133f8ab460 __libc_start_main + 245\n6    tmp8fcrk4ej                        0x00005648d708afe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    var a = 0\n    var b = 1\n    var c = 0\n    for _ in 0..<n {\n        c = 2 * b + a\n        a = b\n        b = c\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "tmpryscbd31/tmpryscbd31.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abd1b126c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abd1ae1db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abd1ae1d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abd1ae1c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpryscbd31                        0x00005601c821d335 <unavailable> + 4917\n5    libc.so.6                          0x00002abd1b312460 __libc_start_main + 245\n6    tmpryscbd31                        0x00005601c821cfe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2*jacobsthal_num(n: n-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n-1) + 2*jacobsthal_num(n: n-2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
      "timestamp": 1665509982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}