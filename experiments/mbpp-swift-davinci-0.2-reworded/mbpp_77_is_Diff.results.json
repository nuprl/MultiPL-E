{
  "name": "mbpp_77_is_Diff",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "/tmp/tmpu6a44cw6.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum1 += n % 10\n        } else {\n            sum2 += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "/tmp/tmppmwatyor.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var diff = 0\n    var num = n\n    while num > 0 {\n        let digit = num % 10\n        num = num / 10\n        if sum > diff {\n            diff = sum - diff\n        } else {\n            diff = diff - sum\n        }\n        sum = sum + digit\n    }\n    if sum > diff {\n        diff = sum - diff\n    } else {\n        diff = diff - sum\n    }\n    return diff % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "tmpan9nz850/tmpan9nz850.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5198a73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b519876ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b519876a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b51987697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpan9nz850                        0x0000562d1879c2b4 <unavailable> + 4788\n5    libc.so.6                          0x00002b5198c5f460 __libc_start_main + 245\n6    tmpan9nz850                        0x0000562d1879bef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var temp = n\n    while temp > 0 {\n        sum1 += temp % 10\n        temp /= 10\n    }\n    temp = n / 10\n    while temp > 0 {\n        sum2 += temp % 10\n        temp /= 10\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "tmplodym8_1/tmplodym8_1.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8754825c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b875451cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b875451c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b875451b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplodym8_1                        0x000055d98e8842b4 <unavailable> + 4788\n5    libc.so.6                          0x00002b8754a11460 __libc_start_main + 245\n6    tmplodym8_1                        0x000055d98e883ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    var i = 0\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 1\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return abs(sum_even - sum_odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var num = n\n    while num > 0 {\n        sum += num % 10\n        num /= 10\n    }\n    return sum % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "tmpx1ema2xv/tmpx1ema2xv.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba93e7f5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba93e4ecb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba93e4ec988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba93e4eb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx1ema2xv                        0x000056207d9aa2b4 <unavailable> + 4788\n5    libc.so.6                          0x00002ba93e9e1460 __libc_start_main + 245\n6    tmpx1ema2xv                        0x000056207d9a9ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 1\n    while n > 0 {\n        if i % 2 == 0 {\n            sum2 += n % 10\n        } else {\n            sum1 += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "/tmp/tmpr6ztxh4r.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    var i = 0\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0 || sum1 - sum2 == 11 || sum2 - sum1 == 11\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var diff = 0\n    var num = n\n    while num > 0 {\n        sum += num % 10\n        num /= 10\n        diff -= num % 10\n        num /= 10\n    }\n    return sum + diff == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var diff = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum += num % 10\n        } else {\n            diff += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum - diff == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var temp = n\n    while temp > 0 {\n        sum1 += temp % 10\n        temp = temp / 10\n    }\n    temp = n\n    while temp > 0 {\n        sum2 += temp % 10\n        temp = temp / 10\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "tmpwg3vogj5/tmpwg3vogj5.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab9b24f0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab9b21e7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab9b21e7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab9b21e67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwg3vogj5                        0x000055d6ec530240 <unavailable> + 4672\n5    libc.so.6                          0x00002ab9b26dc460 __libc_start_main + 245\n6    tmpwg3vogj5                        0x000055d6ec52fef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum1 += n % 10\n        } else {\n            sum2 += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "/tmp/tmp_7oucu_f.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sumEven = 0\n    var sumOdd = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sumEven += num % 10\n        } else {\n            sumOdd += num % 10\n        }\n        i += 1\n        num /= 10\n    }\n    return abs(sumEven - sumOdd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    var i = 1\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return (sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var num = n\n    var diff = 0\n    while num > 0 {\n        sum += num % 10\n        num /= 10\n    }\n    if sum < 10 {\n        return false\n    }\n    while sum > 0 {\n        diff += sum % 10\n        sum /= 10\n    }\n    return diff % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "tmpgpazryqx/tmpgpazryqx.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9666b15c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b966680cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b966680c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b966680b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgpazryqx                        0x0000557872e542b4 <unavailable> + 4788\n5    libc.so.6                          0x00002b9666d01460 __libc_start_main + 245\n6    tmpgpazryqx                        0x0000557872e53ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var n = n\n    while n > 0 {\n        if i % 2 == 0 {\n            sum1 += n % 10\n        } else {\n            sum2 += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0 || sum2 - sum1 == 11\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var n = n\n    while n > 0 {\n        sum1 += n % 10\n        n /= 10\n        sum2 += n % 10\n        n /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 = sum1 + num % 10\n        } else {\n            sum2 = sum2 + num % 10\n        }\n        num = num / 10\n        i = i + 1\n    }\n    return sum1 - sum2 == 0 || sum1 - sum2 == 11 || sum1 - sum2 == -11\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 1\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        i += 1\n        num /= 10\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sumEven = 0\n    var sumOdd = 0\n    var i = 1\n    var temp = n\n    while temp > 0 {\n        if i % 2 == 0 {\n            sumEven += temp % 10\n        } else {\n            sumOdd += temp % 10\n        }\n        temp /= 10\n        i += 1\n    }\n    return abs(sumEven - sumOdd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var diff = 0\n    var num = n\n    while num > 0 {\n        let digit = num % 10\n        if sum > diff {\n            diff -= digit\n        } else {\n            diff += digit\n        }\n        sum += digit\n        num /= 10\n    }\n    return diff == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "tmpy3w6vc8m/tmpy3w6vc8m.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b65de183c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b65dde7ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b65dde7a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b65dde797b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy3w6vc8m                        0x000055ab21fc02b4 <unavailable> + 4788\n5    libc.so.6                          0x00002b65de36f460 __libc_start_main + 245\n6    tmpy3w6vc8m                        0x000055ab21fbfef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var diff = 0\n    var num = n\n    while num > 0 {\n        let digit = num % 10\n        sum += digit\n        num /= 10\n        let digit2 = num % 10\n        diff += digit2\n        num /= 10\n    }\n    return sum == diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sumEven = 0\n    var sumOdd = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sumEven += n % 10\n        } else {\n            sumOdd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return abs(sumEven - sumOdd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmpjz5wlase.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var diff = 0\n    var num = n\n    while num > 0 {\n        sum += num % 10\n        num /= 10\n        diff -= num % 10\n        num /= 10\n    }\n    return sum == diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "tmph6ouzhbn/tmph6ouzhbn.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b65c6681c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b65c6378b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b65c6378988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b65c63777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph6ouzhbn                        0x000055b7e7f9e2b4 <unavailable> + 4788\n5    libc.so.6                          0x00002b65c686d460 __libc_start_main + 245\n6    tmph6ouzhbn                        0x000055b7e7f9def9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n = n / 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmp6rb5bjzg.swift:13:9: error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 10\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    var i = 0\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0 || sum1 - sum2 == 11 || sum1 - sum2 == -11\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        i += 1\n        num /= 10\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var temp = n\n    while temp > 0 {\n        sum1 += temp % 10\n        temp /= 10\n    }\n    temp = n\n    while temp > 0 {\n        sum2 += temp % 10\n        temp /= 10\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "tmp9sc7kjmy/tmp9sc7kjmy.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8d90df8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8d90aefb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8d90aef988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8d90aee7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9sc7kjmy                        0x000055ea465ed240 <unavailable> + 4672\n5    libc.so.6                          0x00002b8d90fe4460 __libc_start_main + 245\n6    tmp9sc7kjmy                        0x000055ea465ecef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 1\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmptwy5tmjh.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sumEven = 0\n    var sumOdd = 0\n    var i = 0\n    var n = n\n    while n > 0 {\n        if i % 2 == 0 {\n            sumEven += n % 10\n        } else {\n            sumOdd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sumEven - sumOdd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var count = 0\n    var num = n\n    while num > 0 {\n        if count % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        num /= 10\n        count += 1\n    }\n    return abs(sum_even - sum_odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        i += 1\n        num /= 10\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    let str = String(n)\n    var sum = 0\n    for i in 0..<str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let char = str[index]\n        let num = Int(String(char))!\n        if i % 2 == 0 {\n            sum += num\n        } else {\n            sum -= num\n        }\n    }\n    return sum % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n = n / 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmp6rb5bjzg.swift:13:9: error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 10\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var temp = n\n    while temp > 0 {\n        if i % 2 == 0 {\n            sum1 += temp % 10\n        } else {\n            sum2 += temp % 10\n        }\n        temp /= 10\n        i += 1\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 1\n    var j = 1\n    while i <= n.count {\n        sum1 += n[i]\n        i += 2\n    }\n    while j <= n.count {\n        sum2 += n[j]\n        j += 2\n    }\n    return (sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmpyfrxcn8f.swift:8:18: error: value of type 'Int' has no member 'count'\n    while i <= n.count {\n               ~ ^~~~~\n/tmp/tmpyfrxcn8f.swift:9:18: error: value of type 'Int' has no subscripts\n        sum1 += n[i]\n                ~^\n/tmp/tmpyfrxcn8f.swift:12:18: error: value of type 'Int' has no member 'count'\n    while j <= n.count {\n               ~ ^~~~~\n/tmp/tmpyfrxcn8f.swift:13:18: error: value of type 'Int' has no subscripts\n        sum2 += n[j]\n                ~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var temp = n\n    while temp > 0 {\n        if i % 2 == 0 {\n            sum1 += temp % 10\n        } else {\n            sum2 += temp % 10\n        }\n        temp /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var num = n\n    var i = 0\n    while num > 0 {\n        if i % 2 == 0 {\n            sum_odd += num % 10\n        } else {\n            sum_even += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum_odd - sum_even == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    var i = 1\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return (sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var diff = 0\n    var num = n\n    while num > 0 {\n        sum += num % 10\n        num /= 10\n        diff += num % 10\n        num /= 10\n    }\n    return sum == diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    var i = 0\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return (sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            even += n % 10\n        } else {\n            odd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return abs(even - odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "/tmp/tmp53n00var.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var temp = n\n    var i = 0\n    while temp != 0 {\n        if i % 2 == 0 {\n            sum_even += temp % 10\n        } else {\n            sum_odd += temp % 10\n        }\n        temp /= 10\n        i += 1\n    }\n    return abs(sum_even - sum_odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var temp = n\n    while temp > 0 {\n        sum1 += temp % 10\n        temp /= 10\n        sum2 += temp % 10\n        temp /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    var i = 1\n    while num != 0 {\n        if i % 2 == 0 {\n            sum2 += num % 10\n        } else {\n            sum1 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return (sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var temp = n\n    while temp > 0 {\n        if i % 2 == 0 {\n            sum1 += temp % 10\n        } else {\n            sum2 += temp % 10\n        }\n        temp /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var diff = 0\n    var num = n\n    while num > 0 {\n        let lastDigit = num % 10\n        sum += lastDigit\n        num /= 10\n        \n        let lastDigit2 = num % 10\n        diff += lastDigit2\n        num /= 10\n    }\n    return (sum - diff) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var diff = 0\n    var num = n\n    while num > 0 {\n        let rem = num % 10\n        sum += rem\n        num /= 10\n        let rem2 = num % 10\n        diff += rem2\n        num /= 10\n    }\n    return sum == diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sumEven = 0\n    var sumOdd = 0\n    var i = 1\n    while n > 0 {\n        if i % 2 == 0 {\n            sumEven += n % 10\n        } else {\n            sumOdd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sumEven == sumOdd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "/tmp/tmpb7_t4c3s.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 1\n    var j = 1\n    while i <= n {\n        sum1 += i\n        i += 2\n    }\n    while j <= n {\n        sum2 += j\n        j += 2\n    }\n    if sum1 - sum2 == 0 {\n        return true\n    }\n    else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "tmpz_4vv73m/tmpz_4vv73m.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1470f12c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1470c09b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1470c09988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1470c087b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz_4vv73m                        0x00005624c25911b0 <unavailable> + 4528\n5    libc.so.6                          0x00002b14710fe460 __libc_start_main + 245\n6    tmpz_4vv73m                        0x00005624c2590e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var diff = 0\n    var num = n\n    while num > 0 {\n        let digit = num % 10\n        if sum > diff {\n            diff -= digit\n        } else {\n            sum += digit\n        }\n        num /= 10\n    }\n    return sum == diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "tmppdtnw6hq/tmppdtnw6hq.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af42ee27c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af42eb1eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af42eb1e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af42eb1d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppdtnw6hq                        0x000055ca0cbe82b4 <unavailable> + 4788\n5    libc.so.6                          0x00002af42f013460 __libc_start_main + 245\n6    tmppdtnw6hq                        0x000055ca0cbe7ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        i += 1\n        num /= 10\n    }\n    return abs(sum_even - sum_odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return (sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 1\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum_odd - sum_even == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var diff = 0\n    var num = n\n    while num > 0 {\n        sum += num % 10\n        num /= 10\n        diff -= num % 10\n        num /= 10\n    }\n    return (sum + diff) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var temp = n\n    var i = 1\n    while temp > 0 {\n        if i % 2 == 0 {\n            sum_even += temp % 10\n        } else {\n            sum_odd += temp % 10\n        }\n        temp = temp / 10\n        i += 1\n    }\n    return abs(sum_even - sum_odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var temp = n\n    while temp > 0 {\n        sum += temp % 10\n        temp /= 10\n    }\n    return sum % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "tmpk3cwlhgi/tmpk3cwlhgi.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aab43dd1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aab43ac8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aab43ac8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aab43ac77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk3cwlhgi                        0x000055cbd6e6a2b4 <unavailable> + 4788\n5    libc.so.6                          0x00002aab43fbd460 __libc_start_main + 245\n6    tmpk3cwlhgi                        0x000055cbd6e69ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var temp = n\n    while temp > 0 {\n        sum1 += temp % 10\n        temp /= 10\n        sum2 += temp % 10\n        temp /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var j = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num = num / 10\n        i += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var temp = n\n    while temp > 0 {\n        sum1 += temp % 10\n        temp /= 10\n    }\n    temp = n\n    while temp > 0 {\n        sum2 += temp % 10\n        temp /= 10\n    }\n    return (sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "tmpjomzede_/tmpjomzede_.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab627cddc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab6279d4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab6279d4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab6279d37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjomzede_                        0x00005648d3912240 <unavailable> + 4672\n5    libc.so.6                          0x00002ab627ec9460 __libc_start_main + 245\n6    tmpjomzede_                        0x00005648d3911ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 0\n    var temp = n\n    while temp > 0 {\n        if i % 2 == 0 {\n            sum_even += temp % 10\n        } else {\n            sum_odd += temp % 10\n        }\n        i += 1\n        temp /= 10\n    }\n    return abs(sum_even - sum_odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 1\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return (sum_even - sum_odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "/tmp/tmp3sicrrkf.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var temp = n\n    while temp > 0 {\n        sum1 += temp % 10\n        temp /= 10\n    }\n    temp = n\n    while temp > 0 {\n        sum2 += temp % 10\n        temp /= 10\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "tmp9sc7kjmy/tmp9sc7kjmy.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8d90df8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8d90aefb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8d90aef988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8d90aee7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9sc7kjmy                        0x000055ea465ed240 <unavailable> + 4672\n5    libc.so.6                          0x00002b8d90fe4460 __libc_start_main + 245\n6    tmp9sc7kjmy                        0x000055ea465ecef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var n = n\n    while n != 0 {\n        sum1 += n % 10\n        n /= 10\n        sum2 += n % 10\n        n /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 1\n    while n > 0 {\n        if i % 2 == 0 {\n            sum1 += n % 10\n        } else {\n            sum2 += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "/tmp/tmpkxu8k3vv.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var temp = n\n    while temp > 0 {\n        if i % 2 == 0 {\n            sum1 += temp % 10\n        } else {\n            sum2 += temp % 10\n        }\n        temp /= 10\n        i += 1\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var num = n\n    var count = 0\n    while num > 0 {\n        if count % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        num /= 10\n        count += 1\n    }\n    return abs(sum_even - sum_odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var j = 0\n    var temp = n\n    while temp > 0 {\n        if i % 2 == 0 {\n            sum1 += temp % 10\n        } else {\n            sum2 += temp % 10\n        }\n        temp /= 10\n        i += 1\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var n = n\n    while n > 0 {\n        if i % 2 == 0 {\n            sum1 += n % 10\n        } else {\n            sum2 += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1: Int = 0\n    var sum2: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var num: Int = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        i += 1\n        if num > 0 {\n            sum2 += num % 10\n            num /= 10\n            j += 1\n        }\n    }\n    return (sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 0\n    while n != 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return abs(sum_even - sum_odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "/tmp/tmpdqrtobrj.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 1\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum_odd - sum_even == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var evenSum = 0\n    var oddSum = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            evenSum += n % 10\n        } else {\n            oddSum += n % 10\n        }\n        i += 1\n        n /= 10\n    }\n    return evenSum - oddSum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "/tmp/tmp1bt6jzin.swift:14:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 1\n    while n > 0 {\n        if i % 2 == 0 {\n            sum2 += n % 10\n        } else {\n            sum1 += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0 || sum2 - sum1 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "/tmp/tmp3234zk5g.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        i += 1\n        num /= 10\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var j = 0\n    var num = n\n    while num > 0 {\n        let digit = num % 10\n        if i % 2 == 0 {\n            sum1 += digit\n        } else {\n            sum2 += digit\n        }\n        num /= 10\n        i += 1\n    }\n    return (sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 1\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n = n / 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "/tmp/tmpwoj4waop.swift:13:9: error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 10\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sumEven = 0\n    var sumOdd = 0\n    var temp = n\n    var count = 0\n    while temp > 0 {\n        if count % 2 == 0 {\n            sumEven += temp % 10\n        } else {\n            sumOdd += temp % 10\n        }\n        temp /= 10\n        count += 1\n    }\n    return abs(sumEven - sumOdd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var diff = 0\n    var num = n\n    var rem = 0\n    while num > 0 {\n        rem = num % 10\n        if sum >= diff {\n            diff = diff + rem\n        } else {\n            sum = sum + rem\n        }\n        num = num / 10\n    }\n    if (sum == diff) {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "tmp3_06xbll/tmp3_06xbll.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9d1603ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9d15d35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9d15d35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9d15d347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_06xbll                        0x0000560d633a3332 <unavailable> + 4914\n5    libc.so.6                          0x00002b9d1622a460 __libc_start_main + 245\n6    tmp3_06xbll                        0x0000560d633a2ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        i += 1\n        num /= 10\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 1\n    while n > 0 {\n        if i % 2 == 0 {\n            sum1 += n % 10\n        } else {\n            sum2 += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "/tmp/tmp2jj2nrqd.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var n = n\n    while n > 0 {\n        sum1 += n % 10\n        n /= 10\n        sum2 += n % 10\n        n /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var evenSum = 0\n    var oddSum = 0\n    var temp = n\n    var count = 0\n    while temp > 0 {\n        let rem = temp % 10\n        if count % 2 == 0 {\n            evenSum += rem\n        } else {\n            oddSum += rem\n        }\n        count += 1\n        temp /= 10\n    }\n    return abs(evenSum - oddSum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 0\n    while n != 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "/tmp/tmpr64vmofd.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0 || sum2 - sum1 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var j = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 1\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n = n / 10\n        i += 1\n    }\n    return sum_odd - sum_even == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "/tmp/tmpj_a9g_bg.swift:13:9: error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 10\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    var i = 0\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 1\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0 || sum_even - sum_odd == 11 || sum_even - sum_odd == -11\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "/tmp/tmpgjr7961d.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    if sum1 - sum2 == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var diff = 0\n    var num = n\n    while num > 0 {\n        sum = sum + num % 10\n        num = num / 10\n        diff = diff - num % 10\n        num = num / 10\n    }\n    return (sum + diff) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var n = n\n    var evenSum = 0\n    var oddSum = 0\n    var count = 0\n    while n > 0 {\n        let rem = n % 10\n        if count % 2 == 0 {\n            evenSum += rem\n        } else {\n            oddSum += rem\n        }\n        count += 1\n        n = n / 10\n    }\n    return abs(evenSum - oddSum) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var sum1 = 0\n    var num = n\n    while num > 0 {\n        sum = sum + num % 10\n        num = num / 10\n    }\n    num = n / 10\n    while num > 0 {\n        sum1 = sum1 + num % 10\n        num = num / 10\n    }\n    return sum - sum1 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "tmp0jnho8jl/tmp0jnho8jl.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab6a8a25c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab6a871cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab6a871c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab6a871b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0jnho8jl                        0x0000560d391a32b4 <unavailable> + 4788\n5    libc.so.6                          0x00002ab6a8c11460 __libc_start_main + 245\n6    tmp0jnho8jl                        0x0000560d391a2ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var n = n\n    while n > 0 {\n        if i % 2 == 0 {\n            sum1 += n % 10\n        } else {\n            sum2 += n % 10\n        }\n        i += 1\n        n /= 10\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    var count = 0\n    while num > 0 {\n        if count % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        count += 1\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var n = n\n    var i = 1\n    while n > 0 {\n        if i % 2 == 0 {\n            sum1 += n % 10\n        } else {\n            sum2 += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 1\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum2 += num % 10\n        } else {\n            sum1 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return (sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var diff = 0\n    var num = n\n    while num > 0 {\n        sum += num % 10\n        num /= 10\n        diff -= num % 10\n        num /= 10\n    }\n    return (sum + diff) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0 || sum2 - sum1 == 11\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return (sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 1\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return abs(sum_even - sum_odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 1\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        i += 1\n        num /= 10\n    }\n    return abs(sum_even - sum_odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var n = n\n    while n > 0 {\n        sum1 += n % 10\n        n /= 10\n        sum2 += n % 10\n        n /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var diff = 0\n    var num = n\n    while num != 0 {\n        sum += num % 10\n        num /= 10\n        diff -= num % 10\n        num /= 10\n    }\n    return sum == diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "tmpxh4hzuy7/tmpxh4hzuy7.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aaebff84c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aaebfc7bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aaebfc7b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aaebfc7a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxh4hzuy7                        0x0000555583f292b4 <unavailable> + 4788\n5    libc.so.6                          0x00002aaec0170460 __libc_start_main + 245\n6    tmpxh4hzuy7                        0x0000555583f28ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        i += 1\n        num /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var n = n\n    while n > 0 {\n        sum1 += n % 10\n        n /= 10\n        sum2 += n % 10\n        n /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        i += 1\n        num /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "/tmp/tmpu6a44cw6.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0 || sum2 - sum1 == 11\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 1\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum2 += num % 10\n        } else {\n            sum1 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    var i = 0\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var temp = n\n    var i = 1\n    while temp > 0 {\n        if i % 2 == 0 {\n            sum1 += temp % 10\n        } else {\n            sum2 += temp % 10\n        }\n        temp /= 10\n        i += 1\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    var i = 1\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var n = n\n    var evenSum = 0\n    var oddSum = 0\n    var isDivisible = false\n    while n > 0 {\n        let lastDigit = n % 10\n        if lastDigit % 2 == 0 {\n            evenSum += lastDigit\n        } else {\n            oddSum += lastDigit\n        }\n        n = n / 10\n    }\n    if abs(evenSum - oddSum) % 11 == 0 {\n        isDivisible = true\n    }\n    return isDivisible\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "tmp7c2kfzaz/tmp7c2kfzaz.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b967634cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9676043b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9676043988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b96760427b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7c2kfzaz                        0x00005568636bf3a4 <unavailable> + 5028\n5    libc.so.6                          0x00002b9676538460 __libc_start_main + 245\n6    tmp7c2kfzaz                        0x00005568636befe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sumEven = 0\n    var sumOdd = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sumEven = sumEven + num % 10\n        } else {\n            sumOdd = sumOdd + num % 10\n        }\n        i = i + 1\n        num = num / 10\n    }\n    return sumEven - sumOdd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var j = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        i += 1\n        n /= 10\n    }\n    return (sum_even - sum_odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "/tmp/tmpt36sz029.swift:14:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var n = n\n    while n > 0 {\n        sum1 += n % 10\n        n /= 10\n        sum2 += n % 10\n        n /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var diff = 0\n    var num = n\n    while num > 0 {\n        let digit = num % 10\n        if sum > diff {\n            diff -= digit\n        } else {\n            sum += digit\n        }\n        num /= 10\n    }\n    return sum == diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "tmppdtnw6hq/tmppdtnw6hq.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af42ee27c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af42eb1eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af42eb1e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af42eb1d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppdtnw6hq                        0x000055ca0cbe82b4 <unavailable> + 4788\n5    libc.so.6                          0x00002af42f013460 __libc_start_main + 245\n6    tmppdtnw6hq                        0x000055ca0cbe7ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 1\n    var temp = n\n    while temp > 0 {\n        if i % 2 == 0 {\n            sum_even += temp % 10\n        } else {\n            sum_odd += temp % 10\n        }\n        temp /= 10\n        i += 1\n    }\n    return (sum_even - sum_odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum1 += n % 10\n        } else {\n            sum2 += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "/tmp/tmp2x91vbzk.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 1\n    while n > 0 {\n        if i % 2 == 0 {\n            sum1 += n % 10\n        } else {\n            sum2 += n % 10\n        }\n        n = n / 10\n        i += 1\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "/tmp/tmp7ffady13.swift:13:9: error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 10\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var n = n\n    while n > 0 {\n        sum1 += n % 10\n        n /= 10\n        sum2 += n % 10\n        n /= 10\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return (sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var diff = 0\n    var num = n\n    var flag = 0\n    while num > 0 {\n        if flag == 0 {\n            sum = sum + num % 10\n            flag = 1\n        } else {\n            diff = diff + num % 10\n            flag = 0\n        }\n        num = num / 10\n    }\n    return sum - diff == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var diff = 0\n    var num = n\n    while num > 0 {\n        let digit = num % 10\n        num /= 10\n        if sum > diff {\n            diff -= digit\n        } else {\n            diff += digit\n        }\n        sum += digit\n    }\n    return diff == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "tmpm91p9bx4/tmpm91p9bx4.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfc8c10c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfc8907b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfc8907988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfc89067b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm91p9bx4                        0x000055e42138d2b4 <unavailable> + 4788\n5    libc.so.6                          0x00002adfc8dfc460 __libc_start_main + 245\n6    tmpm91p9bx4                        0x000055e42138cef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var diff = 0\n    var num = n\n    while num > 0 {\n        sum += num % 10\n        num /= 10\n        diff -= num % 10\n        num /= 10\n    }\n    return (sum + diff) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var s = 0\n    var t = n\n    while t > 0 {\n        s += t % 10\n        t /= 10\n    }\n    return s % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "tmpfmir5vwb/tmpfmir5vwb.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae9e0418c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae9e010fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae9e010f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae9e010e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfmir5vwb                        0x0000562eb36e82b4 <unavailable> + 4788\n5    libc.so.6                          0x00002ae9e0604460 __libc_start_main + 245\n6    tmpfmir5vwb                        0x0000562eb36e7ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    var count = 0\n    while num > 0 {\n        if count % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        count += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var diff = 0\n    var num = n\n    while num > 0 {\n        let digit = num % 10\n        sum += digit\n        num /= 10\n        let digit2 = num % 10\n        diff += digit2\n        num /= 10\n    }\n    return sum == diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 1\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num = num / 10\n        i += 1\n    }\n    return (sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var num = n\n    var i = 1\n    while num > 0 {\n        if i % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sumEven = 0\n    var sumOdd = 0\n    var num = n\n    var i = 1\n    while num > 0 {\n        let digit = num % 10\n        if i % 2 == 0 {\n            sumEven += digit\n        } else {\n            sumOdd += digit\n        }\n        num /= 10\n        i += 1\n    }\n    return abs(sumEven - sumOdd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    var count = 0\n    while num > 0 {\n        if count % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        count += 1\n    }\n    return (sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var diff = 0\n    var num = n\n    while num > 0 {\n        sum += num % 10\n        num /= 10\n        diff -= num % 10\n        num /= 10\n    }\n    return (sum + diff) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 1\n    var j = 1\n    while i <= n {\n        sum1 += i\n        i += 2\n    }\n    while j <= n {\n        sum2 += j\n        j += 2\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "tmp0dly0goh/tmp0dly0goh.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b302a988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b302a67fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b302a67f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b302a67e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0dly0goh                        0x00005603112c21b0 <unavailable> + 4528\n5    libc.so.6                          0x00002b302ab74460 __libc_start_main + 245\n6    tmp0dly0goh                        0x00005603112c1e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 0\n    var n = n\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        i += 1\n        n /= 10\n    }\n    return sum_even - sum_odd == 0 || sum_even - sum_odd == 11 || sum_even - sum_odd == -11\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 1\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var diff = 0\n    var num = n\n    while num > 0 {\n        sum += num % 10\n        num /= 10\n        diff -= num % 10\n        num /= 10\n    }\n    return sum == diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "tmph6ouzhbn/tmph6ouzhbn.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b65c6681c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b65c6378b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b65c6378988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b65c63777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph6ouzhbn                        0x000055b7e7f9e2b4 <unavailable> + 4788\n5    libc.so.6                          0x00002b65c686d460 __libc_start_main + 245\n6    tmph6ouzhbn                        0x000055b7e7f9def9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1: Int = 0\n    var sum2: Int = 0\n    var temp: Int = n\n    var count: Int = 0\n    while temp > 0 {\n        if count % 2 == 0 {\n            sum1 += temp % 10\n        } else {\n            sum2 += temp % 10\n        }\n        temp /= 10\n        count += 1\n    }\n    return sum1 - sum2 == 0 || sum2 - sum1 == 11\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var a = n\n    var b = 0\n    while a > 0 {\n        b = b + a % 10\n        a = a / 10\n    }\n    if b % 11 == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "tmp2ezkido6/tmp2ezkido6.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7a7899c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7a7590b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7a7590988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7a758f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2ezkido6                        0x000055b7ba2332b4 <unavailable> + 4788\n5    libc.so.6                          0x00002ad7a7a85460 __libc_start_main + 245\n6    tmp2ezkido6                        0x000055b7ba232ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var diff = 0\n    var num = n\n    var rem = 0\n    while num != 0 {\n        rem = num % 10\n        if sum >= diff {\n            sum = sum + rem\n        } else {\n            diff = diff + rem\n        }\n        num = num / 10\n    }\n    if sum == diff {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "tmpvhyymmab/tmpvhyymmab.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9f31710c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9f31407b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9f31407988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9f314067b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvhyymmab                        0x000055ed44a8b2b4 <unavailable> + 4788\n5    libc.so.6                          0x00002b9f318fc460 __libc_start_main + 245\n6    tmpvhyymmab                        0x000055ed44a8aef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 0\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "/tmp/tmpu6a44cw6.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sumEven = 0\n    var sumOdd = 0\n    var temp = n\n    var i = 1\n    while temp > 0 {\n        if i % 2 == 0 {\n            sumEven += temp % 10\n        } else {\n            sumOdd += temp % 10\n        }\n        temp /= 10\n        i += 1\n    }\n    return abs(sumEven - sumOdd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var diff = 0\n    var num = n\n    while num > 0 {\n        sum += num % 10\n        num /= 10\n        diff -= num % 10\n        num /= 10\n    }\n    return sum == diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "tmph6ouzhbn/tmph6ouzhbn.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b65c6681c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b65c6378b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b65c6378988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b65c63777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph6ouzhbn                        0x000055b7e7f9e2b4 <unavailable> + 4788\n5    libc.so.6                          0x00002b65c686d460 __libc_start_main + 245\n6    tmph6ouzhbn                        0x000055b7e7f9def9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 1\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum2 = sum2 + num % 10\n        } else {\n            sum1 = sum1 + num % 10\n        }\n        i = i + 1\n        num = num / 10\n    }\n    if abs(sum1 - sum2) % 11 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return abs(sum1 - sum2) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var diff = 0\n    var num = n\n    while num > 0 {\n        sum += num % 10\n        num /= 10\n        diff -= num % 10\n        num /= 10\n    }\n    return sum == diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "tmph6ouzhbn/tmph6ouzhbn.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b65c6681c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b65c6378b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b65c6378988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b65c63777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph6ouzhbn                        0x000055b7e7f9e2b4 <unavailable> + 4788\n5    libc.so.6                          0x00002b65c686d460 __libc_start_main + 245\n6    tmph6ouzhbn                        0x000055b7e7f9def9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num = num / 10\n        i += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var n = n\n    while n > 0 {\n        sum1 += n % 10\n        n /= 10\n        sum2 += n % 10\n        n /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var diff = 0\n    var num = n\n    while num > 0 {\n        sum += num % 10\n        num /= 10\n        diff -= num % 10\n        num /= 10\n    }\n    return (sum + diff) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        i += 1\n        num /= 10\n    }\n    return sum1 - sum2 == 0 || sum2 - sum1 == 11\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_even = 0\n    var sum_odd = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        i += 1\n        num /= 10\n    }\n    return sum_even - sum_odd == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    while num > 0 {\n        sum1 += num % 10\n        num /= 10\n        sum2 += num % 10\n        num /= 10\n    }\n    return sum1 == sum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var num = n\n    var digit = 0\n    while num > 0 {\n        digit = num % 10\n        if digit % 2 == 0 {\n            even += digit\n        } else {\n            odd += digit\n        }\n        num /= 10\n    }\n    return (even - odd) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "tmpjxxtdjok/tmpjxxtdjok.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4f9070fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4f90406b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4f90406988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4f904057b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjxxtdjok                        0x0000556638c382b4 <unavailable> + 4788\n5    libc.so.6                          0x00002b4f908fb460 __libc_start_main + 245\n6    tmpjxxtdjok                        0x0000556638c37ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var i = 0\n    var num = n\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0 || sum1 - sum2 == 11 || sum1 - sum2 == -11\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 1\n    while n > 0 {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n        i += 1\n    }\n    return sum_odd - sum_even == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "/tmp/tmpcf_2at5i.swift:13:11: error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum = 0\n    var diff = 0\n    var num = n\n    while num > 0 {\n        sum += num % 10\n        num /= 10\n        diff -= num % 10\n        num /= 10\n    }\n    return (sum + diff) % 11 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    var i = 0\n    while num > 0 {\n        if i % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum1 - sum2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum_odd = 0\n    var sum_even = 0\n    var i = 1\n    var num = n\n    while num != 0 {\n        if i % 2 == 0 {\n            sum_even += num % 10\n        } else {\n            sum_odd += num % 10\n        }\n        num /= 10\n        i += 1\n    }\n    return sum_odd - sum_even == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find whether a number is divisible by 11.\nfunc is_Diff(n: Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    var num = n\n    var count = 0\n    while num > 0 {\n        if count % 2 == 0 {\n            sum1 += num % 10\n        } else {\n            sum2 += num % 10\n        }\n        num /= 10\n        count += 1\n    }\n    return sum1 - sum2 == 0 || sum2 - sum1 == 11\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Diff(n: 12345) == false)\nassert(is_Diff(n: 1212112) == true)\nassert(is_Diff(n: 1212) == false)",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}