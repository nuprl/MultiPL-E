{
  "name": "mbpp_605_prime_num",
  "language": "swift",
  "prompt": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_605_prime_num.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "/tmp/tmpgob977qu.swift:13:22: error: cannot find 'sqrt' in scope\n    for i in 3...Int(sqrt(Double(num))) {\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num == 1 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num == 1 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b60a07f0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b60a04e7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b60a04e7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b60a04e713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b60a04e6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp16k2kl0v                        0x00005606262e9521 <unavailable> + 5409\n6    tmp16k2kl0v                        0x00005606262e93b2 <unavailable> + 5042\n7    libc.so.6                          0x00002b60a09dc460 __libc_start_main + 245\n8    tmp16k2kl0v                        0x00005606262e8fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "/tmp/tmpgob977qu.swift:13:22: error: cannot find 'sqrt' in scope\n    for i in 3...Int(sqrt(Double(num))) {\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "/tmp/tmpgob977qu.swift:13:22: error: cannot find 'sqrt' in scope\n    for i in 3...Int(sqrt(Double(num))) {\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num == 1 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1666122575,
      "stdout": "",
      "stderr": "/tmp/tmplu7yusrz.swift:13:22: error: cannot find 'sqrt' in scope\n    for i in 3...Int(sqrt(Double(num))) {\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num == 1 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    var i = 3\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1666122576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1666122575,
      "stdout": "",
      "stderr": "/tmp/tmp0zhlapu0.swift:10:22: error: cannot find 'sqrt' in scope\n    for i in 3...Int(sqrt(Double(num))) {\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    var i = 3\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1666122576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num == 1 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1666122575,
      "stdout": "",
      "stderr": "/tmp/tmplu7yusrz.swift:13:22: error: cannot find 'sqrt' in scope\n    for i in 3...Int(sqrt(Double(num))) {\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num == 1 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in stride(from: 3, through: Int(sqrt(Double(num))), by: 2) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1666122575,
      "stdout": "",
      "stderr": "/tmp/tmphryr0l_t.swift:13:43: error: cannot find 'sqrt' in scope\n    for i in stride(from: 3, through: Int(sqrt(Double(num))), by: 2) {\n                                          ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1666122576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "/tmp/tmpgob977qu.swift:13:22: error: cannot find 'sqrt' in scope\n    for i in 3...Int(sqrt(Double(num))) {\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num == 1 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1666122575,
      "stdout": "",
      "stderr": "/tmp/tmplu7yusrz.swift:13:22: error: cannot find 'sqrt' in scope\n    for i in 3...Int(sqrt(Double(num))) {\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "/tmp/tmpgob977qu.swift:13:22: error: cannot find 'sqrt' in scope\n    for i in 3...Int(sqrt(Double(num))) {\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in stride(from: 3, through: Int(sqrt(Double(num))), by: 2) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1666122575,
      "stdout": "",
      "stderr": "/tmp/tmpd9ghkvtv.swift:13:43: error: cannot find 'sqrt' in scope\n    for i in stride(from: 3, through: Int(sqrt(Double(num))), by: 2) {\n                                          ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "/tmp/tmpgob977qu.swift:13:22: error: cannot find 'sqrt' in scope\n    for i in 3...Int(sqrt(Double(num))) {\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "/tmp/tmpgob977qu.swift:13:22: error: cannot find 'sqrt' in scope\n    for i in 3...Int(sqrt(Double(num))) {\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in stride(from: 3, to: num/2, by: 2) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1666122576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num == 1 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1666122576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "/tmp/tmpgob977qu.swift:13:22: error: cannot find 'sqrt' in scope\n    for i in 3...Int(sqrt(Double(num))) {\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in stride(from: 3, through: Int(sqrt(Double(num))), by: 2) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1666122575,
      "stdout": "",
      "stderr": "/tmp/tmpd9ghkvtv.swift:13:43: error: cannot find 'sqrt' in scope\n    for i in stride(from: 3, through: Int(sqrt(Double(num))), by: 2) {\n                                          ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num == 1 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1666122575,
      "stdout": "",
      "stderr": "/tmp/tmplu7yusrz.swift:13:22: error: cannot find 'sqrt' in scope\n    for i in 3...Int(sqrt(Double(num))) {\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num == 1 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b60a07f0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b60a04e7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b60a04e7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b60a04e713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b60a04e6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp16k2kl0v                        0x00005606262e9521 <unavailable> + 5409\n6    tmp16k2kl0v                        0x00005606262e93b2 <unavailable> + 5042\n7    libc.so.6                          0x00002b60a09dc460 __libc_start_main + 245\n8    tmp16k2kl0v                        0x00005606262e8fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num == 1 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1666122575,
      "stdout": "",
      "stderr": "/tmp/tmplu7yusrz.swift:13:22: error: cannot find 'sqrt' in scope\n    for i in 3...Int(sqrt(Double(num))) {\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "/tmp/tmpgob977qu.swift:13:22: error: cannot find 'sqrt' in scope\n    for i in 3...Int(sqrt(Double(num))) {\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "/tmp/tmpgob977qu.swift:13:22: error: cannot find 'sqrt' in scope\n    for i in 3...Int(sqrt(Double(num))) {\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num == 1 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    var i = 2\n    while i < num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1666122576,
      "stdout": "",
      "stderr": "tmpiyh9008x/tmpiyh9008x.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ada22c64c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ada2295bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ada2295b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ada2295a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpiyh9008x                        0x00005622cebfc332 <unavailable> + 4914\n5    libc.so.6                          0x00002ada22e50460 __libc_start_main + 245\n6    tmpiyh9008x                        0x00005622cebfbef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in stride(from: 3, through: Int(sqrt(Double(num))), by: 2) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1666122575,
      "stdout": "",
      "stderr": "/tmp/tmpd9ghkvtv.swift:13:43: error: cannot find 'sqrt' in scope\n    for i in stride(from: 3, through: Int(sqrt(Double(num))), by: 2) {\n                                          ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1666122575,
      "stdout": "",
      "stderr": "/tmp/tmpno49h3jk.swift:13:22: error: cannot find 'sqrt' in scope\n    for i in 2...Int(sqrt(Double(num))) {\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num == 1 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in stride(from: 3, through: Int(sqrt(Double(num))), by: 2) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1666122575,
      "stdout": "",
      "stderr": "/tmp/tmpd9ghkvtv.swift:13:43: error: cannot find 'sqrt' in scope\n    for i in stride(from: 3, through: Int(sqrt(Double(num))), by: 2) {\n                                          ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num == 1 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1666122575,
      "stdout": "",
      "stderr": "/tmp/tmplu7yusrz.swift:13:22: error: cannot find 'sqrt' in scope\n    for i in 3...Int(sqrt(Double(num))) {\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num == 1 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "/tmp/tmpgob977qu.swift:13:22: error: cannot find 'sqrt' in scope\n    for i in 3...Int(sqrt(Double(num))) {\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "/tmp/tmpgob977qu.swift:13:22: error: cannot find 'sqrt' in scope\n    for i in 3...Int(sqrt(Double(num))) {\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1666122576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "/tmp/tmpgob977qu.swift:13:22: error: cannot find 'sqrt' in scope\n    for i in 3...Int(sqrt(Double(num))) {\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "/tmp/tmpgob977qu.swift:13:22: error: cannot find 'sqrt' in scope\n    for i in 3...Int(sqrt(Double(num))) {\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num == 1 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1666122576,
      "stdout": "",
      "stderr": "Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad2448acc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad2445a3561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ad2445a3286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ad2445a313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ad2445a2bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpv6ec6h4r                        0x00005579b70fa535 <unavailable> + 5429\n6    tmpv6ec6h4r                        0x00005579b70fa3b2 <unavailable> + 5042\n7    libc.so.6                          0x00002ad244a98460 __libc_start_main + 245\n8    tmpv6ec6h4r                        0x00005579b70f9fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    \n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1666122576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "/tmp/tmpgob977qu.swift:13:22: error: cannot find 'sqrt' in scope\n    for i in 3...Int(sqrt(Double(num))) {\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "/tmp/tmpgob977qu.swift:13:22: error: cannot find 'sqrt' in scope\n    for i in 3...Int(sqrt(Double(num))) {\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "/tmp/tmpgob977qu.swift:13:22: error: cannot find 'sqrt' in scope\n    for i in 3...Int(sqrt(Double(num))) {\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num == 1 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num == 1 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "/tmp/tmpgob977qu.swift:13:22: error: cannot find 'sqrt' in scope\n    for i in 3...Int(sqrt(Double(num))) {\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num == 1 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1666122576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num == 1 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1666122575,
      "stdout": "",
      "stderr": "/tmp/tmplu7yusrz.swift:13:22: error: cannot find 'sqrt' in scope\n    for i in 3...Int(sqrt(Double(num))) {\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num == 1 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1666122575,
      "stdout": "",
      "stderr": "/tmp/tmplu7yusrz.swift:13:22: error: cannot find 'sqrt' in scope\n    for i in 3...Int(sqrt(Double(num))) {\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "/tmp/tmpgob977qu.swift:13:22: error: cannot find 'sqrt' in scope\n    for i in 3...Int(sqrt(Double(num))) {\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 3..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1666122576,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num == 1 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b60a07f0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b60a04e7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b60a04e7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b60a04e713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b60a04e6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp16k2kl0v                        0x00005606262e9521 <unavailable> + 5409\n6    tmp16k2kl0v                        0x00005606262e93b2 <unavailable> + 5042\n7    libc.so.6                          0x00002b60a09dc460 __libc_start_main + 245\n8    tmp16k2kl0v                        0x00005606262e8fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num == 1 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b60a07f0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b60a04e7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b60a04e7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b60a04e713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b60a04e6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp16k2kl0v                        0x00005606262e9521 <unavailable> + 5409\n6    tmp16k2kl0v                        0x00005606262e93b2 <unavailable> + 5042\n7    libc.so.6                          0x00002b60a09dc460 __libc_start_main + 245\n8    tmp16k2kl0v                        0x00005606262e8fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num <= 1 {\n        return false\n    }\n    if num <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <= num {\n        if num % i == 0 {\n            return false\n        }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given integer is a prime number.\nfunc prime_num(num: Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2..<num {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(prime_num(num: 13) == true)\nassert(prime_num(num: 7) == true)\nassert(prime_num(num: -1010) == false)",
      "timestamp": 1665510112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}