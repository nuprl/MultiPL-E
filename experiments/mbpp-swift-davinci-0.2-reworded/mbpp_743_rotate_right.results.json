{
  "name": "mbpp_743_rotate_right",
  "language": "swift",
  "prompt": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmpxevnnbwh/tmpxevnnbwh.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd8274fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd82446b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd82446988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd824457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxevnnbwh                        0x000055581f78e731 <unavailable> + 5937\n5    libc.so.6                          0x00002afd8293b460 __libc_start_main + 245\n6    tmpxevnnbwh                        0x000055581f78e2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmpg4hg35kd/tmpg4hg35kd.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af9e32ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af9e2fc3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af9e2fc3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af9e2fc27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4hg35kd                        0x000055e3b9d63731 <unavailable> + 5937\n5    libc.so.6                          0x00002af9e34b8460 __libc_start_main + 245\n6    tmpg4hg35kd                        0x000055e3b9d632b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmpxevnnbwh/tmpxevnnbwh.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd8274fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd82446b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd82446988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd824457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxevnnbwh                        0x000055581f78e731 <unavailable> + 5937\n5    libc.so.6                          0x00002afd8293b460 __libc_start_main + 245\n6    tmpxevnnbwh                        0x000055581f78e2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    let n = list.count\n    var result = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        result[(i + m) % n] = list[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let mod = m % n\n    let mod_list = Array(list[n - mod..<n])\n    let new_list = Array(list[0..<n - mod])\n    list = mod_list + new_list\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmpxevnnbwh/tmpxevnnbwh.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd8274fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd82446b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd82446988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd824457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxevnnbwh                        0x000055581f78e731 <unavailable> + 5937\n5    libc.so.6                          0x00002afd8293b460 __libc_start_main + 245\n6    tmpxevnnbwh                        0x000055581f78e2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmpxevnnbwh/tmpxevnnbwh.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd8274fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd82446b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd82446988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd824457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxevnnbwh                        0x000055581f78e731 <unavailable> + 5937\n5    libc.so.6                          0x00002afd8293b460 __libc_start_main + 245\n6    tmpxevnnbwh                        0x000055581f78e2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    let n = list.count\n    var result = list\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmp7i84_3su/tmp7i84_3su.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aabeeb4ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aabee845b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aabee845988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aabee8447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7i84_3su                        0x0000555964f076d1 <unavailable> + 5841\n5    libc.so.6                          0x00002aabeed3a460 __libc_start_main + 245\n6    tmp7i84_3su                        0x0000555964f07259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let gcd = gcd_recursive(a: n, b: m)\n    for i in 0..<gcd {\n        let temp = list[n - i - 1]\n        var j = n - i - 1\n        while j >= m {\n            list[j] = list[j - m]\n            j -= m\n        }\n        list[j] = temp\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "/tmp/tmpdmq7bne2.swift:6:15: error: cannot find 'gcd_recursive' in scope\n    let gcd = gcd_recursive(a: n, b: m)\n              ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmpg4hg35kd/tmpg4hg35kd.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af9e32ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af9e2fc3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af9e2fc3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af9e2fc27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4hg35kd                        0x000055e3b9d63731 <unavailable> + 5937\n5    libc.so.6                          0x00002af9e34b8460 __libc_start_main + 245\n6    tmpg4hg35kd                        0x000055e3b9d632b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let gcd = GCD(a: m, b: n)\n    for i in 0..<gcd {\n        let temp = list[i]\n        var j = i\n        while true {\n            let k = j + m\n            if k >= n {\n                list[j] = list[k - n]\n            } else {\n                list[j] = list[k]\n                j = k\n                break\n            }\n        }\n        list[j] = temp\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "/tmp/tmp815dk_u_.swift:6:15: error: cannot find 'GCD' in scope\n    let gcd = GCD(a: m, b: n)\n              ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let gcd = gcd_func(a: m, b: n)\n    for i in 0..<gcd {\n        let temp = list[i]\n        var j = i\n        while true {\n            let k = j + m\n            if k >= n {\n                list[j] = list[k - n]\n            } else {\n                list[j] = list[k]\n                j = k\n                if j == i {\n                    break\n                }\n            }\n        }\n        list[j] = temp\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "/tmp/tmpzpifewpz.swift:6:15: error: cannot find 'gcd_func' in scope\n    let gcd = gcd_func(a: m, b: n)\n              ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    let n = list.count\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmppo8xa36s/tmppo8xa36s.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7872c05c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b78728fcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b78728fc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b78728fb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppo8xa36s                        0x000055a0205c36d1 <unavailable> + 5841\n5    libc.so.6                          0x00002b7872df1460 __libc_start_main + 245\n6    tmppo8xa36s                        0x000055a0205c3259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    let n = list.count\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmppo8xa36s/tmppo8xa36s.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7872c05c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b78728fcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b78728fc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b78728fb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppo8xa36s                        0x000055a0205c36d1 <unavailable> + 5841\n5    libc.so.6                          0x00002b7872df1460 __libc_start_main + 245\n6    tmppo8xa36s                        0x000055a0205c3259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let gcd = gcd_func(a: n, b: m)\n    for i in 0..<gcd {\n        let temp = list[n - i - 1]\n        list[n - i - 1] = list[n - i - 1 - m]\n        list[n - i - 1 - m] = temp\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "/tmp/tmpjo0ej3cq.swift:6:15: error: cannot find 'gcd_func' in scope\n    let gcd = gcd_func(a: n, b: m)\n              ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        result.insert(result.removeLast(), at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let m = m % n\n    if m == 0 {\n        return list\n    }\n    let reverse = { (list: inout [Int], start: Int, end: Int) in\n        var start = start\n        var end = end\n        while start < end {\n            list.swapAt(start, end)\n            start += 1\n            end -= 1\n        }\n    }\n    reverse(&list, 0, n - m - 1)\n    reverse(&list, n - m, n - 1)\n    reverse(&list, 0, n - 1)\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let gcd = GCD(a: n, b: m)\n    for i in 0..<gcd {\n        let temp = list[n - i - 1]\n        var j = n - i - 1\n        while j - m >= 0 {\n            list[j] = list[j - m]\n            j -= m\n        }\n        list[j] = temp\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "/tmp/tmpoid1yx5a.swift:6:15: error: cannot find 'GCD' in scope\n    let gcd = GCD(a: n, b: m)\n              ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    m %= n\n    reverse(&list, start: 0, end: n - 1)\n    reverse(&list, start: 0, end: m - 1)\n    reverse(&list, start: m, end: n - 1)\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "/tmp/tmp8nicv5a1.swift:6:7: error: left side of mutating operator isn't mutable: 'm' is a 'let' constant\n    m %= n\n    ~ ^\n/tmp/tmp8nicv5a1.swift:7:5: error: cannot find 'reverse' in scope\n    reverse(&list, start: 0, end: n - 1)\n    ^~~~~~~\n/tmp/tmp8nicv5a1.swift:8:5: error: cannot find 'reverse' in scope\n    reverse(&list, start: 0, end: m - 1)\n    ^~~~~~~\n/tmp/tmp8nicv5a1.swift:9:5: error: cannot find 'reverse' in scope\n    reverse(&list, start: m, end: n - 1)\n    ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    var i = 0\n    while i < m {\n        let temp = result.removeLast()\n        result.insert(temp, at: 0)\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let m = m % n\n    let first = Array(list[n - m ..< n])\n    let second = Array(list[0 ..< n - m])\n    list = first + second\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    let n = list.count\n    let m = m % n\n    let result = Array(list[n - m..<n] + list[0..<n - m])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let temp = result.removeLast()\n        result.insert(temp, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    let n = list.count\n    var result = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "tmp1iiesus2/tmp1iiesus2.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bdbe6ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bdbb61b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bdbb61988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bdbb607b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1iiesus2                        0x000055943eb46741 <unavailable> + 5953\n5    libc.so.6                          0x00002b8bdc056460 __libc_start_main + 245\n6    tmp1iiesus2                        0x000055943eb462c9 <unavailable> + 4809\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    m %= n\n    let gcd = gcd_of_two_numbers(a: n, b: m)\n    for i in 0..<gcd {\n        var j = i\n        var temp = list[i]\n        while true {\n            let k = j + m\n            if k >= n {\n                break\n            }\n            list[j] = list[k]\n            j = k\n        }\n        list[j] = temp\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "/tmp/tmpguevmjq2.swift:6:7: error: left side of mutating operator isn't mutable: 'm' is a 'let' constant\n    m %= n\n    ~ ^\n/tmp/tmpguevmjq2.swift:7:15: error: cannot find 'gcd_of_two_numbers' in scope\n    let gcd = gcd_of_two_numbers(a: n, b: m)\n              ^~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    let n = list.count\n    var result = list\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmp7i84_3su/tmp7i84_3su.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aabeeb4ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aabee845b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aabee845988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aabee8447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7i84_3su                        0x0000555964f076d1 <unavailable> + 5841\n5    libc.so.6                          0x00002aabeed3a460 __libc_start_main + 245\n6    tmp7i84_3su                        0x0000555964f07259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmpxevnnbwh/tmpxevnnbwh.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd8274fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd82446b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd82446988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd824457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxevnnbwh                        0x000055581f78e731 <unavailable> + 5937\n5    libc.so.6                          0x00002afd8293b460 __libc_start_main + 245\n6    tmpxevnnbwh                        0x000055581f78e2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var new_list = list\n    for _ in 0..<m {\n        let last = new_list.removeLast()\n        new_list.insert(last, at: 0)\n    }\n    return new_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let gcd = gcd_func(a: m, b: n)\n    for i in 0..<gcd {\n        let temp = list[n - i - 1]\n        var j = n - i - 1\n        while j != i {\n            list[j] = list[j - m]\n            j -= m\n        }\n        list[i] = temp\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "/tmp/tmpofn5ooue.swift:6:15: error: cannot find 'gcd_func' in scope\n    let gcd = gcd_func(a: m, b: n)\n              ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmpg4hg35kd/tmpg4hg35kd.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af9e32ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af9e2fc3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af9e2fc3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af9e2fc27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4hg35kd                        0x000055e3b9d63731 <unavailable> + 5937\n5    libc.so.6                          0x00002af9e34b8460 __libc_start_main + 245\n6    tmpg4hg35kd                        0x000055e3b9d632b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let temp = result.removeLast()\n        result.insert(temp, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let gcd = gcd_func(a: n, b: m)\n    for i in 0..<gcd {\n        let temp = list[n - i - 1]\n        list[n - i - 1] = list[n - i - m - 1]\n        list[n - i - m - 1] = temp\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "/tmp/tmpj9kidc_i.swift:6:15: error: cannot find 'gcd_func' in scope\n    let gcd = gcd_func(a: n, b: m)\n              ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let gcd = GCD(a: m, b: n)\n    for i in 0..<gcd {\n        let temp = list[i]\n        var j = i\n        while true {\n            let k = j + m\n            if k >= n {\n                list[j] = list[k - n]\n            } else {\n                list[j] = list[k]\n                j = k\n                if j == i {\n                    break\n                }\n            }\n        }\n        list[j] = temp\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "/tmp/tmpyaxgjzxr.swift:6:15: error: cannot find 'GCD' in scope\n    let gcd = GCD(a: m, b: n)\n              ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmpg4hg35kd/tmpg4hg35kd.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af9e32ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af9e2fc3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af9e2fc3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af9e2fc27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4hg35kd                        0x000055e3b9d63731 <unavailable> + 5937\n5    libc.so.6                          0x00002af9e34b8460 __libc_start_main + 245\n6    tmpg4hg35kd                        0x000055e3b9d632b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmpxevnnbwh/tmpxevnnbwh.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd8274fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd82446b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd82446988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd824457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxevnnbwh                        0x000055581f78e731 <unavailable> + 5937\n5    libc.so.6                          0x00002afd8293b460 __libc_start_main + 245\n6    tmpxevnnbwh                        0x000055581f78e2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        result.insert(result.removeLast(), at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var new_list = list\n    let n = list.count\n    for i in 0..<n {\n        new_list[(i + m) % n] = list[i]\n    }\n    return new_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    let n = list.count\n    var result = list\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmp7i84_3su/tmp7i84_3su.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aabeeb4ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aabee845b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aabee845988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aabee8447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7i84_3su                        0x0000555964f076d1 <unavailable> + 5841\n5    libc.so.6                          0x00002aabeed3a460 __libc_start_main + 245\n6    tmp7i84_3su                        0x0000555964f07259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    let n = list.count\n    for i in 0..<n {\n        result[(i+m)%n] = list[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmpg4hg35kd/tmpg4hg35kd.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af9e32ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af9e2fc3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af9e2fc3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af9e2fc27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4hg35kd                        0x000055e3b9d63731 <unavailable> + 5937\n5    libc.so.6                          0x00002af9e34b8460 __libc_start_main + 245\n6    tmpg4hg35kd                        0x000055e3b9d632b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let m = m % n\n    if m == 0 {\n        return list\n    }\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var new_list = list\n    for _ in 0..<m {\n        let last = new_list.removeLast()\n        new_list.insert(last, at: 0)\n    }\n    return new_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    var m = m\n    if m > n {\n        m = m % n\n    }\n    if m == 0 {\n        return list\n    }\n    var temp = [Int]()\n    for i in (n - m)..<n {\n        temp.append(list[i])\n    }\n    for i in (m..<n).reversed() {\n        list[i] = list[i - m]\n    }\n    for i in 0..<m {\n        list[i] = temp[i]\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    let n = list.count\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmppo8xa36s/tmppo8xa36s.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7872c05c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b78728fcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b78728fc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b78728fb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppo8xa36s                        0x000055a0205c36d1 <unavailable> + 5841\n5    libc.so.6                          0x00002b7872df1460 __libc_start_main + 245\n6    tmppo8xa36s                        0x000055a0205c3259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    let n = list.count\n    var result = list\n    for i in 0..<n {\n        result[i] = list[(i+m)%n]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "tmpttovh7b5/tmpttovh7b5.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3a484e8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3a481dfb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3a481df988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3a481de7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpttovh7b5                        0x00005560fef516d1 <unavailable> + 5841\n5    libc.so.6                          0x00002b3a486d4460 __libc_start_main + 245\n6    tmpttovh7b5                        0x00005560fef51259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        result.insert(result.removeLast(), at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmpg4hg35kd/tmpg4hg35kd.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af9e32ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af9e2fc3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af9e2fc3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af9e2fc27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4hg35kd                        0x000055e3b9d63731 <unavailable> + 5937\n5    libc.so.6                          0x00002af9e34b8460 __libc_start_main + 245\n6    tmpg4hg35kd                        0x000055e3b9d632b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    let n = list.count\n    var result = list\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmp7i84_3su/tmp7i84_3su.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aabeeb4ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aabee845b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aabee845988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aabee8447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7i84_3su                        0x0000555964f076d1 <unavailable> + 5841\n5    libc.so.6                          0x00002aabeed3a460 __libc_start_main + 245\n6    tmp7i84_3su                        0x0000555964f07259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var new_list = list\n    for _ in 0..<m {\n        let last = new_list.removeLast()\n        new_list.insert(last, at: 0)\n    }\n    return new_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmpg4hg35kd/tmpg4hg35kd.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af9e32ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af9e2fc3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af9e2fc3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af9e2fc27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4hg35kd                        0x000055e3b9d63731 <unavailable> + 5937\n5    libc.so.6                          0x00002af9e34b8460 __libc_start_main + 245\n6    tmpg4hg35kd                        0x000055e3b9d632b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let gcd = gcd_func(a: m, b: n)\n    for i in 0..<gcd {\n        var j = i\n        var temp = list[i]\n        while true {\n            let k = j + m\n            if k >= n {\n                break\n            }\n            list[j] = list[k]\n            j = k\n        }\n        list[j] = temp\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "/tmp/tmpo01wzv99.swift:6:15: error: cannot find 'gcd_func' in scope\n    let gcd = gcd_func(a: m, b: n)\n              ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmpxevnnbwh/tmpxevnnbwh.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd8274fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd82446b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd82446988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd824457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxevnnbwh                        0x000055581f78e731 <unavailable> + 5937\n5    libc.so.6                          0x00002afd8293b460 __libc_start_main + 245\n6    tmpxevnnbwh                        0x000055581f78e2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    var m = m\n    if m > list.count {\n        m = m % list.count\n    }\n    let first = list[0..<list.count - m]\n    let second = list[list.count - m..<list.count]\n    list = Array(second + first)\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let gcd = gcd_func(a: n, b: m)\n    for i in 0..<gcd {\n        let temp = list[i]\n        var j = i\n        while true {\n            let k = j + m\n            if k >= n {\n                list[j] = list[k - n]\n            } else if k == i {\n                list[j] = temp\n                break\n            } else {\n                list[j] = list[k]\n            }\n            j = k\n        }\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "/tmp/tmpbxft97w8.swift:6:15: error: cannot find 'gcd_func' in scope\n    let gcd = gcd_func(a: n, b: m)\n              ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    var m = m\n    while m > 0 {\n        let temp = list.removeLast()\n        list.insert(temp, at: 0)\n        m -= 1\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmpxevnnbwh/tmpxevnnbwh.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd8274fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd82446b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd82446988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd824457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxevnnbwh                        0x000055581f78e731 <unavailable> + 5937\n5    libc.so.6                          0x00002afd8293b460 __libc_start_main + 245\n6    tmpxevnnbwh                        0x000055581f78e2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    let n = list.count\n    var result = list\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmp7i84_3su/tmp7i84_3su.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aabeeb4ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aabee845b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aabee845988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aabee8447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7i84_3su                        0x0000555964f076d1 <unavailable> + 5841\n5    libc.so.6                          0x00002aabeed3a460 __libc_start_main + 245\n6    tmp7i84_3su                        0x0000555964f07259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    let n = list.count\n    var result = list\n    for i in 0..<n {\n        result[(i + m) % n] = list[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmpg4hg35kd/tmpg4hg35kd.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af9e32ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af9e2fc3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af9e2fc3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af9e2fc27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4hg35kd                        0x000055e3b9d63731 <unavailable> + 5937\n5    libc.so.6                          0x00002af9e34b8460 __libc_start_main + 245\n6    tmpg4hg35kd                        0x000055e3b9d632b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmpxevnnbwh/tmpxevnnbwh.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd8274fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd82446b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd82446988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd824457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxevnnbwh                        0x000055581f78e731 <unavailable> + 5937\n5    libc.so.6                          0x00002afd8293b460 __libc_start_main + 245\n6    tmpxevnnbwh                        0x000055581f78e2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    let n = list.count\n    let m = m % n\n    let a = Array(list[n-m..<n])\n    let b = Array(list[0..<n-m])\n    return a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    let n = list.count\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmppo8xa36s/tmppo8xa36s.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7872c05c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b78728fcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b78728fc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b78728fb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppo8xa36s                        0x000055a0205c36d1 <unavailable> + 5841\n5    libc.so.6                          0x00002b7872df1460 __libc_start_main + 245\n6    tmppo8xa36s                        0x000055a0205c3259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let gcd = gcd_func(a: m, b: n)\n    for i in 0..<gcd {\n        let temp = list[i]\n        var j = i\n        while true {\n            let k = j + m\n            if k >= n {\n                list[j] = list[k - n]\n            } else {\n                list[j] = list[k]\n                j = k\n                break\n            }\n        }\n        list[j] = temp\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "/tmp/tmpwo0zpjdz.swift:6:15: error: cannot find 'gcd_func' in scope\n    let gcd = gcd_func(a: m, b: n)\n              ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        result.insert(result.removeLast(), at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    var m = m\n    if m > list.count {\n        m = m % list.count\n    }\n    let a = Array(list[(list.count - m)..<list.count])\n    let b = Array(list[0..<(list.count - m)])\n    list = a + b\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    let n = list.count\n    let m = m % n\n    return Array(list[n-m..<n] + list[0..<n-m])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result: [Int] = []\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "tmpvo6uwcwb/tmpvo6uwcwb.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b93cefb5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b93cecacb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b93cecac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b93cecab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvo6uwcwb                        0x000055e8a60766d1 <unavailable> + 5841\n5    libc.so.6                          0x00002b93cf1a1460 __libc_start_main + 245\n6    tmpvo6uwcwb                        0x000055e8a6076259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let g = gcd(a: n, b: m)\n    for i in 0..<g {\n        var j = i\n        var temp = list[i]\n        while true {\n            let k = j + m\n            if k >= n {\n                list[j] = temp\n                break\n            } else {\n                list[j] = list[k]\n                j = k\n            }\n        }\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "/tmp/tmp4vph5s9w.swift:6:13: error: cannot find 'gcd' in scope\n    let g = gcd(a: n, b: m)\n            ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmpxevnnbwh/tmpxevnnbwh.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd8274fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd82446b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd82446988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd824457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxevnnbwh                        0x000055581f78e731 <unavailable> + 5937\n5    libc.so.6                          0x00002afd8293b460 __libc_start_main + 245\n6    tmpxevnnbwh                        0x000055581f78e2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    let n = list.count\n    for i in 0..<m {\n        let temp = result[n - 1]\n        for j in (1...n - 1).reversed() {\n            result[j] = result[j - 1]\n        }\n        result[0] = temp\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    for _ in 0..<m {\n        let last = list[n - 1]\n        for i in (0..<n - 1).reversed() {\n            list[i + 1] = list[i]\n        }\n        list[0] = last\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    let n = list.count\n    for i in 0..<n {\n        result[(i + m) % n] = list[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let gcd = gcd_func(a: m, b: n)\n    for i in 0..<gcd {\n        let temp = list[n - i - 1]\n        var j = n - i - 1\n        while j != i {\n            list[j] = list[j - m]\n            j -= m\n        }\n        list[i] = temp\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "/tmp/tmpofn5ooue.swift:6:15: error: cannot find 'gcd_func' in scope\n    let gcd = gcd_func(a: m, b: n)\n              ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let gcd = gcd_recursive(a: m, b: n)\n    for i in 0..<gcd {\n        let temp = list[i]\n        var j = i\n        while true {\n            let k = j + m\n            if k >= n {\n                list[j] = list[k - n]\n            } else {\n                list[j] = list[k]\n                j = k\n                break\n            }\n        }\n        list[j] = temp\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "/tmp/tmp0pcz_ztd.swift:6:15: error: cannot find 'gcd_recursive' in scope\n    let gcd = gcd_recursive(a: m, b: n)\n              ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    let n = list.count\n    var result = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        result[(i + m) % n] = list[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    guard list.count > 0 else { return [] }\n    guard m > 0 else { return list }\n    let n = list.count\n    let m = m % n\n    let a = Array(list[n-m..<n])\n    let b = Array(list[0..<n-m])\n    return a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        result.insert(result.removeLast(), at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let m = m % n\n    for _ in 0..<m {\n        let temp = list.removeLast()\n        list.insert(temp, at: 0)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    for _ in 0..<m {\n        let temp = list[n-1]\n        for i in (0..<n-1).reversed() {\n            list[i+1] = list[i]\n        }\n        list[0] = temp\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    let n = list.count\n    var result = list\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmp7i84_3su/tmp7i84_3su.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aabeeb4ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aabee845b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aabee845988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aabee8447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7i84_3su                        0x0000555964f076d1 <unavailable> + 5841\n5    libc.so.6                          0x00002aabeed3a460 __libc_start_main + 245\n6    tmp7i84_3su                        0x0000555964f07259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let gcd = GCD(a: m, b: n)\n    for i in 0..<gcd {\n        var j = i\n        var temp = list[i]\n        while true {\n            let k = j + m\n            if k >= n {\n                list[j] = temp\n                break\n            } else {\n                list[j] = list[k]\n                j = k\n            }\n        }\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "/tmp/tmpo4urfugb.swift:6:15: error: cannot find 'GCD' in scope\n    let gcd = GCD(a: m, b: n)\n              ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmpg4hg35kd/tmpg4hg35kd.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af9e32ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af9e2fc3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af9e2fc3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af9e2fc27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4hg35kd                        0x000055e3b9d63731 <unavailable> + 5937\n5    libc.so.6                          0x00002af9e34b8460 __libc_start_main + 245\n6    tmpg4hg35kd                        0x000055e3b9d632b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmpg4hg35kd/tmpg4hg35kd.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af9e32ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af9e2fc3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af9e2fc3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af9e2fc27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4hg35kd                        0x000055e3b9d63731 <unavailable> + 5937\n5    libc.so.6                          0x00002af9e34b8460 __libc_start_main + 245\n6    tmpg4hg35kd                        0x000055e3b9d632b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let gcd = GCD(a: n, b: m)\n    for i in 0..<gcd {\n        let temp = list[n - i - 1]\n        var j = n - i - 1\n        while j != i {\n            list[j] = list[j - m]\n            j -= m\n        }\n        list[i] = temp\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "/tmp/tmp1im7ttob.swift:6:15: error: cannot find 'GCD' in scope\n    let gcd = GCD(a: n, b: m)\n              ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    var m = m\n    m = m % n\n    if m < 0 {\n        m = n + m\n    }\n    if m == 0 {\n        return list\n    }\n    var i = 0\n    var j = n - 1\n    while i < j {\n        list.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    i = 0\n    j = m - 1\n    while i < j {\n        list.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    i = m\n    j = n - 1\n    while i < j {\n        list.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        result.insert(result.removeLast(), at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    let n = list.count\n    var result = list\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmp7i84_3su/tmp7i84_3su.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aabeeb4ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aabee845b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aabee845988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aabee8447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7i84_3su                        0x0000555964f076d1 <unavailable> + 5841\n5    libc.so.6                          0x00002aabeed3a460 __libc_start_main + 245\n6    tmp7i84_3su                        0x0000555964f07259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    let n = list.count\n    var result = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        result[(i + m) % n] = list[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    var m = m\n    if m > n {\n        m = m % n\n    }\n    if m == 0 {\n        return list\n    }\n    list.reverse()\n    let left = Array(list[0..<m])\n    let right = Array(list[m..<n])\n    left.reverse()\n    right.reverse()\n    return right + left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "/tmp/tmplj24bo2x.swift:16:10: error: cannot use mutating member on immutable value: 'left' is a 'let' constant\n    left.reverse()\n    ~~~~ ^\n/tmp/tmplj24bo2x.swift:14:5: note: change 'let' to 'var' to make it mutable\n    let left = Array(list[0..<m])\n    ^~~\n    var\n/tmp/tmplj24bo2x.swift:17:11: error: cannot use mutating member on immutable value: 'right' is a 'let' constant\n    right.reverse()\n    ~~~~~ ^\n/tmp/tmplj24bo2x.swift:15:5: note: change 'let' to 'var' to make it mutable\n    let right = Array(list[m..<n])\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmpg4hg35kd/tmpg4hg35kd.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af9e32ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af9e2fc3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af9e2fc3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af9e2fc27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4hg35kd                        0x000055e3b9d63731 <unavailable> + 5937\n5    libc.so.6                          0x00002af9e34b8460 __libc_start_main + 245\n6    tmpg4hg35kd                        0x000055e3b9d632b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var new_list = list\n    let n = list.count\n    for i in 0..<n {\n        new_list[i] = list[(i + m) % n]\n    }\n    return new_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "tmppu_6evdt/tmppu_6evdt.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8c4b423c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8c4b11ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8c4b11a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8c4b1197b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppu_6evdt                        0x000055d890b5b6d1 <unavailable> + 5841\n5    libc.so.6                          0x00002b8c4b60f460 __libc_start_main + 245\n6    tmppu_6evdt                        0x000055d890b5b259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    let n = list.count\n    var result = list\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmp7i84_3su/tmp7i84_3su.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aabeeb4ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aabee845b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aabee845988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aabee8447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7i84_3su                        0x0000555964f076d1 <unavailable> + 5841\n5    libc.so.6                          0x00002aabeed3a460 __libc_start_main + 245\n6    tmp7i84_3su                        0x0000555964f07259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    let n = list.count\n    var new_list = list\n    for i in 0..<n {\n        new_list[i] = list[(i + m) % n]\n    }\n    return new_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "tmp3hhkmptk/tmp3hhkmptk.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6efbc1ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6efb915b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6efb915988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6efb9147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3hhkmptk                        0x000055e50705b6d1 <unavailable> + 5841\n5    libc.so.6                          0x00002b6efbe0a460 __libc_start_main + 245\n6    tmp3hhkmptk                        0x000055e50705b259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let gcd = gcd_func(a: n, b: m)\n    for i in 0..<gcd {\n        let temp = list[n - i - 1]\n        var j = n - i - 1\n        while j != i {\n            list[j] = list[j - m]\n            j -= m\n        }\n        list[i] = temp\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "/tmp/tmpvuod_lkd.swift:6:15: error: cannot find 'gcd_func' in scope\n    let gcd = gcd_func(a: n, b: m)\n              ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var new_list = list\n    for _ in 0..<m {\n        new_list.insert(new_list.removeLast(), at: 0)\n    }\n    return new_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let gcd = gcd_func(a: n, b: m)\n    \n    for i in 0..<gcd {\n        let temp = list[n - i - 1]\n        list[n - i - 1] = list[n - i - m - 1]\n        list[n - i - m - 1] = temp\n    }\n    \n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "/tmp/tmp0706cfjf.swift:6:15: error: cannot find 'gcd_func' in scope\n    let gcd = gcd_func(a: n, b: m)\n              ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    var m = m\n    m = m % n\n    var temp = [Int]()\n    for i in 0..<m {\n        temp.append(list[n - m + i])\n    }\n    for i in (0..<n - m).reversed() {\n        list[i + m] = list[i]\n    }\n    for i in 0..<m {\n        list[i] = temp[i]\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmpxevnnbwh/tmpxevnnbwh.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd8274fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd82446b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd82446988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd824457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxevnnbwh                        0x000055581f78e731 <unavailable> + 5937\n5    libc.so.6                          0x00002afd8293b460 __libc_start_main + 245\n6    tmpxevnnbwh                        0x000055581f78e2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    var m = m\n    if m > list.count {\n        m = m % list.count\n    }\n    let a = Array(list[(list.count - m)..<list.count])\n    let b = Array(list[0..<(list.count - m)])\n    list = a + b\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmpxevnnbwh/tmpxevnnbwh.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd8274fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd82446b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd82446988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd824457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxevnnbwh                        0x000055581f78e731 <unavailable> + 5937\n5    libc.so.6                          0x00002afd8293b460 __libc_start_main + 245\n6    tmpxevnnbwh                        0x000055581f78e2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    let n = list.count\n    var result = list\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmp7i84_3su/tmp7i84_3su.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aabeeb4ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aabee845b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aabee845988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aabee8447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7i84_3su                        0x0000555964f076d1 <unavailable> + 5841\n5    libc.so.6                          0x00002aabeed3a460 __libc_start_main + 245\n6    tmp7i84_3su                        0x0000555964f07259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    let n = list.count\n    var result = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        result[(i + m) % n] = list[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    for _ in 0..<m {\n        let temp = list[n-1]\n        for i in (1...n-1).reversed() {\n            list[i] = list[i-1]\n        }\n        list[0] = temp\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmpg4hg35kd/tmpg4hg35kd.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af9e32ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af9e2fc3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af9e2fc3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af9e2fc27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4hg35kd                        0x000055e3b9d63731 <unavailable> + 5937\n5    libc.so.6                          0x00002af9e34b8460 __libc_start_main + 245\n6    tmpg4hg35kd                        0x000055e3b9d632b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmpg4hg35kd/tmpg4hg35kd.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af9e32ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af9e2fc3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af9e2fc3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af9e2fc27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4hg35kd                        0x000055e3b9d63731 <unavailable> + 5937\n5    libc.so.6                          0x00002af9e34b8460 __libc_start_main + 245\n6    tmpg4hg35kd                        0x000055e3b9d632b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        result.insert(result.removeLast(), at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    let n = list.count\n    var result = list\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmp7i84_3su/tmp7i84_3su.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aabeeb4ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aabee845b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aabee845988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aabee8447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7i84_3su                        0x0000555964f076d1 <unavailable> + 5841\n5    libc.so.6                          0x00002aabeed3a460 __libc_start_main + 245\n6    tmp7i84_3su                        0x0000555964f07259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var new_list = list\n    let n = list.count\n    for i in 0..<m {\n        let temp = new_list[n-1]\n        for j in (1...n-1).reversed() {\n            new_list[j] = new_list[j-1]\n        }\n        new_list[0] = temp\n    }\n    return new_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    let n = list.count\n    var result = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        result[(i + m) % n] = list[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let gcd = GCD(a: n, b: m)\n    for i in 0..<gcd {\n        var j = i\n        var temp = list[i]\n        while true {\n            let k = j + m\n            if k >= n {\n                list[j] = temp\n                break\n            } else {\n                list[j] = list[k]\n                j = k\n            }\n        }\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "/tmp/tmpr7u9h9we.swift:6:15: error: cannot find 'GCD' in scope\n    let gcd = GCD(a: n, b: m)\n              ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let m = m % n\n    list = list.reversed()\n    list = list[0..<m].reversed() + list[m..<n].reversed()\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "/tmp/tmp5x19rjmx.swift:8:16: error: ambiguous use of 'subscript(_:)'\n    list = list[0..<m].reversed() + list[m..<n].reversed()\n               ^\nSwift.Array:17:23: note: found this candidate\n    @inlinable public subscript(bounds: Range<Int>) -> ArraySlice<Element> { get set }\n                      ^\nSwift.Collection:2:23: note: found this candidate\n    @inlinable public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression, Self.Index == R.Bound { get }\n                      ^\nSwift.MutableCollection:2:23: note: found this candidate\n    @inlinable public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression, Self.Index == R.Bound { get set }\n                      ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmpg4hg35kd/tmpg4hg35kd.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af9e32ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af9e2fc3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af9e2fc3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af9e2fc27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4hg35kd                        0x000055e3b9d63731 <unavailable> + 5937\n5    libc.so.6                          0x00002af9e34b8460 __libc_start_main + 245\n6    tmpg4hg35kd                        0x000055e3b9d632b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        result.insert(result.removeLast(), at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmpxevnnbwh/tmpxevnnbwh.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd8274fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd82446b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd82446988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd824457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxevnnbwh                        0x000055581f78e731 <unavailable> + 5937\n5    libc.so.6                          0x00002afd8293b460 __libc_start_main + 245\n6    tmpxevnnbwh                        0x000055581f78e2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    let n = list.count\n    var result = list\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmp7i84_3su/tmp7i84_3su.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aabeeb4ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aabee845b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aabee845988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aabee8447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7i84_3su                        0x0000555964f076d1 <unavailable> + 5841\n5    libc.so.6                          0x00002aabeed3a460 __libc_start_main + 245\n6    tmp7i84_3su                        0x0000555964f07259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        result.insert(result.removeLast(), at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    let n = list.count\n    for i in 0..<n {\n        result[(i + m) % n] = list[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var new_list = list\n    for _ in 0..<m {\n        let last_item = new_list.removeLast()\n        new_list.insert(last_item, at: 0)\n    }\n    return new_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for i in 0..<m {\n        let temp = result.removeLast()\n        result.insert(temp, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "tmpgynha4xl/tmpgynha4xl.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab6d6638c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab6d632fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab6d632f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab6d632e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgynha4xl                        0x00005595d87b06d1 <unavailable> + 5841\n5    libc.so.6                          0x00002ab6d6824460 __libc_start_main + 245\n6    tmpgynha4xl                        0x00005595d87b0259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        result.insert(result.removeLast(), at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var new_list = list\n    for _ in 0..<m {\n        let last = new_list.removeLast()\n        new_list.insert(last, at: 0)\n    }\n    return new_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result: [Int] = []\n    let n = list.count\n    for i in 0..<n {\n        result.append(list[(i + m) % n])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "tmpvo6uwcwb/tmpvo6uwcwb.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b93cefb5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b93cecacb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b93cecac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b93cecab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvo6uwcwb                        0x000055e8a60766d1 <unavailable> + 5841\n5    libc.so.6                          0x00002b93cf1a1460 __libc_start_main + 245\n6    tmpvo6uwcwb                        0x000055e8a6076259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    var m = m\n    while m > 0 {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n        m -= 1\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    let n = list.count\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmppo8xa36s/tmppo8xa36s.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7872c05c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b78728fcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b78728fc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b78728fb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppo8xa36s                        0x000055a0205c36d1 <unavailable> + 5841\n5    libc.so.6                          0x00002b7872df1460 __libc_start_main + 245\n6    tmppo8xa36s                        0x000055a0205c3259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    for _ in 0..<m {\n        let last = list[n-1]\n        for j in stride(from: n-1, to: 0, by: -1) {\n            list[j] = list[j-1]\n        }\n        list[0] = last\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var new_list = list\n    for i in 0..<m {\n        let temp = new_list.removeLast()\n        new_list.insert(temp, at: 0)\n    }\n    return new_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let gcd = gcd_func(a: n, b: m)\n    for i in 0..<gcd {\n        let temp = list[n - i - 1]\n        var j = n - i - 1\n        while j != i {\n            list[j] = list[j - m]\n            j -= m\n        }\n        list[i] = temp\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "/tmp/tmpvuod_lkd.swift:6:15: error: cannot find 'gcd_func' in scope\n    let gcd = gcd_func(a: n, b: m)\n              ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    for _ in 0..<m {\n        let temp = list[n-1]\n        for i in (0..<n-1).reversed() {\n            list[i+1] = list[i]\n        }\n        list[0] = temp\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let gcd = gcd_func(a: n, b: m)\n    for i in 0..<gcd {\n        let temp = list[n - i - 1]\n        var j = n - i - 1\n        while j != i {\n            list[j] = list[j - m]\n            j -= m\n        }\n        list[i] = temp\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "/tmp/tmpvuod_lkd.swift:6:15: error: cannot find 'gcd_func' in scope\n    let gcd = gcd_func(a: n, b: m)\n              ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let m = m % n\n    let temp = list[n - m..<n]\n    list.removeSubrange(n - m..<n)\n    list.insert(contentsOf: temp, at: 0)\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var new_list = list\n    for _ in 0..<m {\n        let last = new_list.removeLast()\n        new_list.insert(last, at: 0)\n    }\n    return new_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let m = m % n\n    if m == 0 {\n        return list\n    }\n    var temp = list[n - 1]\n    for i in (0..<n).reversed() {\n        list[i] = list[i - 1]\n    }\n    list[0] = temp\n    return rotate_right(list: list, m: m - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b08d4ed3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b08d4bca561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b08d4bca286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b08d4bca13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b08d4bc9bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b08d49cae83 <unavailable> + 188035\n6    tmpfiju1pup                        0x000055660e8ba04a <unavailable> + 8266\n7    tmpfiju1pup                        0x000055660e8b9785 <unavailable> + 6021\n8    libc.so.6                          0x00002b08d50bf460 __libc_start_main + 245\n9    tmpfiju1pup                        0x000055660e8b9429 <unavailable> + 5161\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    let n = list.count\n    let m = m % n\n    if m == 0 {\n        return list\n    }\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var new_list = list\n    for _ in 0..<m {\n        let last = new_list.removeLast()\n        new_list.insert(last, at: 0)\n    }\n    return new_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var list = list\n    for _ in 0..<m {\n        let last = list.removeLast()\n        list.insert(last, at: 0)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "tmpgynha4xl/tmpgynha4xl.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab6d6638c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab6d632fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab6d632f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab6d632e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgynha4xl                        0x00005595d87b06d1 <unavailable> + 5841\n5    libc.so.6                          0x00002ab6d6824460 __libc_start_main + 245\n6    tmpgynha4xl                        0x00005595d87b0259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmpg4hg35kd/tmpg4hg35kd.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af9e32ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af9e2fc3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af9e2fc3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af9e2fc27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4hg35kd                        0x000055e3b9d63731 <unavailable> + 5937\n5    libc.so.6                          0x00002af9e34b8460 __libc_start_main + 245\n6    tmpg4hg35kd                        0x000055e3b9d632b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        result.insert(result.removeLast(), at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    let n = list.count\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmppo8xa36s/tmppo8xa36s.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7872c05c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b78728fcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b78728fc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b78728fb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppo8xa36s                        0x000055a0205c36d1 <unavailable> + 5841\n5    libc.so.6                          0x00002b7872df1460 __libc_start_main + 245\n6    tmppo8xa36s                        0x000055a0205c3259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    let n = list.count\n    var result = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        result[(i + m) % n] = list[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var new_list = list\n    for _ in 0..<m {\n        let last = new_list.removeLast()\n        new_list.insert(last, at: 0)\n    }\n    return new_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1666122615,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    let n = list.count\n    var result = list\n    for i in 0..<n {\n        result[i] = list[(i + m) % n]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmp7i84_3su/tmp7i84_3su.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aabeeb4ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aabee845b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aabee845988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aabee8447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7i84_3su                        0x0000555964f076d1 <unavailable> + 5841\n5    libc.so.6                          0x00002aabeed3a460 __libc_start_main + 245\n6    tmp7i84_3su                        0x0000555964f07259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list.count {\n        result.append(list[(i + m) % list.count])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "tmpg4hg35kd/tmpg4hg35kd.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af9e32ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af9e2fc3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af9e2fc3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af9e2fc27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4hg35kd                        0x000055e3b9d63731 <unavailable> + 5937\n5    libc.so.6                          0x00002af9e34b8460 __libc_start_main + 245\n6    tmpg4hg35kd                        0x000055e3b9d632b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n    var result = list\n    for _ in 0..<m {\n        let last = result.removeLast()\n        result.insert(last, at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\nassert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}