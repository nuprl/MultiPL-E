{
  "name": "mbpp_283_validate",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n: Int) -> Bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(validate(n: 1234) == true)\nassert(validate(n: 51241) == false)\nassert(validate(n: 321) == true)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var freq = [Int](count: 10, repeatedValue: 0)\n    for digit in digits {\n        freq[digit] += 1\n    }\n    for i in 0..<10 {\n        if freq[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var counts = [Int](repeating: 0, count: 10)\n    for digit in digits {\n        counts[digit] += 1\n    }\n    for i in 0..<10 {\n        if counts[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n = n / 10\n    }\n    var counts = [Int](repeating: 0, count: 10)\n    for digit in digits {\n        counts[digit] += 1\n    }\n    for i in 0..<10 {\n        if counts[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var freq = [Int](repeating: 0, count: 10)\n    for d in digits {\n        freq[d] += 1\n    }\n    for i in 0..<10 {\n        if freq[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int]()\n    var num = n\n    while num > 0 {\n        digits.append(num % 10)\n        num /= 10\n    }\n    var counts = [Int](repeating: 0, count: 10)\n    for digit in digits {\n        counts[digit] += 1\n    }\n    for digit in digits {\n        if counts[digit] > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var freq = [Int](repeating: 0, count: 10)\n    for digit in digits {\n        freq[digit] += 1\n    }\n    for i in 0..<10 {\n        if freq[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var counts = [Int](repeating: 0, count: 10)\n    for digit in digits {\n        counts[digit] += 1\n    }\n    for i in 0..<10 {\n        if counts[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var count = [Int](repeating: 0, count: 10)\n    var temp = n\n    while temp > 0 {\n        count[temp % 10] += 1\n        temp /= 10\n    }\n    temp = n\n    while temp > 0 {\n        if count[temp % 10] > temp % 10 {\n            return false\n        }\n        temp /= 10\n    }\n    return true",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var count = [Int](repeating: 0, count: 10)\n    for digit in digits {\n        count[digit] += 1\n    }\n    for (digit, freq) in zip(digits, count) {\n        if freq > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var freq = [Int](repeating: 0, count: 10)\n    for d in digits {\n        freq[d] += 1\n    }\n    for d in digits {\n        if freq[d] > d {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var freq = [Int](repeating: 0, count: 10)\n    for d in digits {\n        freq[d] += 1\n    }\n    for i in 0..<10 {\n        if freq[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int]()\n    var num = n\n    while num > 0 {\n        digits.append(num % 10)\n        num /= 10\n    }\n    var freq = [Int](repeating: 0, count: 10)\n    for digit in digits {\n        freq[digit] += 1\n    }\n    for digit in digits {\n        if freq[digit] > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var freq = [Int](repeating: 0, count: 10)\n    for d in digits {\n        freq[d] += 1\n    }\n    for i in 0..<10 {\n        if freq[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var freq = [Int](repeating: 0, count: 10)\n    for digit in digits {\n        freq[digit] += 1\n    }\n    for (digit, count) in zip(digits, freq) {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var num = n\n    while num > 0 {\n        let digit = num % 10\n        if let count = digits[digit] {\n            digits[digit] = count + 1\n        } else {\n            digits[digit] = 1\n        }\n        num /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var freq = [Int](repeating: 0, count: 10)\n    for d in digits {\n        freq[d] += 1\n    }\n    for d in digits {\n        if freq[d] > d {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = digits[digit] {\n            digits[digit] = count + 1\n        } else {\n            digits[digit] = 1\n        }\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var freq = [Int](repeating: 0, count: 10)\n    for digit in digits {\n        freq[digit] += 1\n    }\n    for i in 0..<10 {\n        if freq[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        digits[n % 10] += 1\n        n /= 10\n    }\n    for i in 1...9 {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true"
  ]
}