{
  "name": "mbpp_618_div_list",
  "language": "swift",
  "prompt": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var res = [Double]()\n    for i in 0..<nums1.count {\n        res.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for (index, num) in nums1.enumerated() {\n        result.append(Double(num) / Double(nums2[index]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    return zip(nums1, nums2).map { Double($0) / Double($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for (index, num) in nums1.enumerated() {\n        result.append(Double(num) / Double(nums2[index]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for (index, num) in nums1.enumerated() {\n        result.append(Double(num) / Double(nums2[index]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for (index, num) in nums1.enumerated() {\n        result.append(Double(num) / Double(nums2[index]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for (index, num) in nums1.enumerated() {\n        result.append(Double(num) / Double(nums2[index]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for (i, _) in nums1.enumerated() {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for (index, num) in nums1.enumerated() {\n        result.append(Double(num) / Double(nums2[index]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    return zip(nums1, nums2).map { Double($0) / Double($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for (i, _) in nums1.enumerated() {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for (index, num) in nums1.enumerated() {\n        result.append(Double(num) / Double(nums2[index]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for (index, num) in nums1.enumerated() {\n        result.append(Double(num) / Double(nums2[index]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    return zip(nums1, nums2).map { Double($0) / Double($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for (index, num) in nums1.enumerated() {\n        result.append(Double(num) / Double(nums2[index]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for (index, num) in nums1.enumerated() {\n        result.append(Double(num) / Double(nums2[index]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    return zip(nums1, nums2).map { Double($0) / Double($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for (index, num) in nums1.enumerated() {\n        result.append(Double(num) / Double(nums2[index]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for (index, num) in nums1.enumerated() {\n        result.append(Double(num) / Double(nums2[index]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for (i, num) in nums1.enumerated() {\n        result.append(Double(num) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for (index, num) in nums1.enumerated() {\n        result.append(Double(num) / Double(nums2[index]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for (index, num) in nums1.enumerated() {\n        result.append(Double(num) / Double(nums2[index]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for (index, num) in nums1.enumerated() {\n        result.append(Double(num) / Double(nums2[index]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    return zip(nums1, nums2).map { Double($0) / Double($1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for (i, _) in nums1.enumerated() {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    \n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var res = [Double]()\n    for i in 0..<nums1.count {\n        res.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for (i, _) in nums1.enumerated() {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for (i, num) in nums1.enumerated() {\n        result.append(Double(num) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for (index, num) in nums1.enumerated() {\n        result.append(Double(num) / Double(nums2[index]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for (index, num) in nums1.enumerated() {\n        result.append(Double(num) / Double(nums2[index]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for (index, num) in nums1.enumerated() {\n        result.append(Double(num) / Double(nums2[index]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for (i, j) in zip(nums1, nums2) {\n        result.append(Double(i) / Double(j))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for (index, num) in nums1.enumerated() {\n        result.append(Double(num) / Double(nums2[index]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1666122635,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result = [Double]()\n    for i in 0..<nums1.count {\n        result.append(Double(nums1[i]) / Double(nums2[i]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to divide two arrays element wise.\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n    var result: [Double] = []\n    for (index, num) in nums1.enumerated() {\n        result.append(Double(num) / Double(nums2[index]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])\nassert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])\nassert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])",
      "timestamp": 1665510126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}