{
  "name": "mbpp_392_get_max_sum",
  "language": "swift",
  "prompt": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var result = 0\n    for i in stride(from: n/5, to: 0, by: -1) {\n        result = max(result, get_max_sum(n: i))\n    }\n    for i in stride(from: n/4, to: 0, by: -1) {\n        result = max(result, get_max_sum(n: i))\n    }\n    for i in stride(from: n/3, to: 0, by: -1) {\n        result = max(result, get_max_sum(n: i))\n    }\n    for i in stride(from: n/2, to: 0, by: -1) {\n        result = max(result, get_max_sum(n: i))\n    }\n    return result + n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "tmpyyv2_1hz/tmpyyv2_1hz.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b89deb88c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b89de87fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b89de87f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b89de87e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyyv2_1hz                        0x00005597866654e5 <unavailable> + 5349\n5    libc.so.6                          0x00002b89ded74460 __libc_start_main + 245\n6    tmpyyv2_1hz                        0x0000559786665199 <unavailable> + 4505\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    return max(sum, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    return max(sum, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n-i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    return max(sum, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    return max(sum, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    let max_sum_1 = get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5)\n    if max_sum_1 > max_sum {\n        max_sum = max_sum_1\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i)\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    var sum = 0\n    sum = get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5)\n    if sum > n {\n        return sum\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var result = n\n    let divisors = [2, 3, 4, 5]\n    for divisor in divisors {\n        let temp = get_max_sum(n: n / divisor)\n        if temp > result {\n            result = temp\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "tmp8kwf78oq/tmp8kwf78oq.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aff0e855c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aff0e54cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aff0e54c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aff0e54b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8kwf78oq                        0x0000556b9eddf4b5 <unavailable> + 5301\n5    libc.so.6                          0x00002aff0ea41460 __libc_start_main + 245\n6    tmp8kwf78oq                        0x0000556b9eddf169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in 2...5 {\n        let sum = get_max_sum(n: n/i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "tmpztcg_5z8/tmpztcg_5z8.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b10b7fa5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b10b7c9cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b10b7c9c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b10b7c9b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpztcg_5z8                        0x00005560c6f5f335 <unavailable> + 4917\n5    libc.so.6                          0x00002b10b8191460 __libc_start_main + 245\n6    tmpztcg_5z8                        0x00005560c6f5efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    let a = get_max_sum(n: n/2)\n    let b = get_max_sum(n: n/3)\n    let c = get_max_sum(n: n/4)\n    let d = get_max_sum(n: n/5)\n    return max(n, a+b+c+d)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    var result = n\n    let divisors = [2, 3, 4, 5]\n    for divisor in divisors {\n        if n % divisor == 0 {\n            result = max(result, get_max_sum(n: n / divisor))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "tmpl0co63i1/tmpl0co63i1.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af6f20dec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af6f1dd5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af6f1dd5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af6f1dd47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl0co63i1                        0x0000560f4f6f5555 <unavailable> + 5461\n5    libc.so.6                          0x00002af6f22ca460 __libc_start_main + 245\n6    tmpl0co63i1                        0x0000560f4f6f5209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, through: n/5, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "tmp86ckn4_8/tmp86ckn4_8.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002addf2054c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002addf1d4bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002addf1d4b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002addf1d4a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp86ckn4_8                        0x000055877d537475 <unavailable> + 5237\n5    libc.so.6                          0x00002addf2240460 __libc_start_main + 245\n6    tmp86ckn4_8                        0x000055877d537129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    \n    if n <= 5 {\n        return n\n    }\n    \n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    var max_sum = n\n    for i in stride(from: n/2, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123017,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n / i)\n    }\n    return max(sum, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    let sum = get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5)\n    return max(sum, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    let sum1 = get_max_sum(n: n / 2) + get_max_sum(n: n / 3) + get_max_sum(n: n / 4) + get_max_sum(n: n / 5)\n    let sum2 = n\n    return max(sum1, sum2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/5, to: 0, by: -1) {\n        max_sum = max(max_sum, get_max_sum(n: i) + get_max_sum(n: n - i))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123017,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum = max(sum, get_max_sum(n: n/i))\n    }\n    return sum + n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpinzvw157/tmpinzvw157.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c1e2c8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c1dfbfb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c1dfbf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c1dfbe7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinzvw157                        0x00005618b96193c5 <unavailable> + 5061\n5    libc.so.6                          0x00002b9c1e4b4460 __libc_start_main + 245\n6    tmpinzvw157                        0x00005618b9619079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpfesj_cni/tmpfesj_cni.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cc8cd5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cc89ccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cc89cc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cc89cb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfesj_cni                        0x0000558d99b5d2d5 <unavailable> + 4821\n5    libc.so.6                          0x00002b7cc8ec1460 __libc_start_main + 245\n6    tmpfesj_cni                        0x0000558d99b5cf89 <unavailable> + 3977\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    var cache = [Int: Int]()\n    return get_max_sum_helper(n: n, cache: &cache)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "/tmp/tmpymy_pqgi.swift:5:12: error: cannot find 'get_max_sum_helper' in scope\n    return get_max_sum_helper(n: n, cache: &cache)\n           ^~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    let max_sum = max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n-1, to: 0, by: -1) {\n        let sum = get_max_sum(n: i/2) + get_max_sum(n: i/3) + get_max_sum(n: i/4) + get_max_sum(n: i/5)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpgrfhdj1p/tmpgrfhdj1p.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4330a76c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b433076db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b433076d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b433076c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgrfhdj1p                        0x0000560e3c518455 <unavailable> + 5205\n5    libc.so.6                          0x00002b4330c62460 __libc_start_main + 245\n6    tmpgrfhdj1p                        0x0000560e3c518109 <unavailable> + 4361\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    return max(n, sum)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    \n    var dp = [Int](repeating: 0, count: n+1)\n    dp[0] = 0\n    dp[1] = 1\n    \n    for i in 2...n {\n        dp[i] = max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i)\n    }\n    \n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var max_sum = n\n    let max_sum_1 = get_max_sum(n: n/2)\n    let max_sum_2 = get_max_sum(n: n/3)\n    let max_sum_3 = get_max_sum(n: n/4)\n    let max_sum_4 = get_max_sum(n: n/5)\n    let max_sum_5 = get_max_sum(n: n/6)\n    let max_sum_6 = get_max_sum(n: n/7)\n    let max_sum_7 = get_max_sum(n: n/8)\n    let max_sum_8 = get_max_sum(n: n/9)\n    let max_sum_9 = get_max_sum(n: n/10)\n    let max_sum_10 = get_max_sum(n: n/11)\n    let max_sum_11 = get_max_sum(n: n/12)\n    let max_sum_12 = get_max_sum(n: n/13)\n    let max_sum_13 = get_max_sum(n: n/14)\n    let max_sum_14 = get_max_sum(n: n/15)\n    let max_sum_15 = get_max_sum(n: n/16)\n    let max_sum_16 = get_max_sum(n: n/17)\n    let max_sum_17 = get_max_sum(n: n/18)\n    let max_sum_18 = get_max_sum(n: n/19)\n    let max_sum_19 = get_max_sum(n: n/20)\n    let max_sum_20 = get_max_sum(n: n/21)\n    let max_sum_21 = get_max_sum(n: n/22)\n    let max_sum_22 = get_max_sum(n: n/23)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "/tmp/tmpaqs2e07g.swift:13:9: warning: initialization of variable 'max_sum' was never used; consider replacing with assignment to '_' or removing it\n    var max_sum = n\n    ~~~~^~~~~~~\n    _\n/tmp/tmpaqs2e07g.swift:14:9: warning: initialization of immutable value 'max_sum_1' was never used; consider replacing with assignment to '_' or removing it\n    let max_sum_1 = get_max_sum(n: n/2)\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmpaqs2e07g.swift:15:9: warning: initialization of immutable value 'max_sum_2' was never used; consider replacing with assignment to '_' or removing it\n    let max_sum_2 = get_max_sum(n: n/3)\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmpaqs2e07g.swift:16:9: warning: initialization of immutable value 'max_sum_3' was never used; consider replacing with assignment to '_' or removing it\n    let max_sum_3 = get_max_sum(n: n/4)\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmpaqs2e07g.swift:17:9: warning: initialization of immutable value 'max_sum_4' was never used; consider replacing with assignment to '_' or removing it\n    let max_sum_4 = get_max_sum(n: n/5)\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmpaqs2e07g.swift:18:9: warning: initialization of immutable value 'max_sum_5' was never used; consider replacing with assignment to '_' or removing it\n    let max_sum_5 = get_max_sum(n: n/6)\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmpaqs2e07g.swift:19:9: warning: initialization of immutable value 'max_sum_6' was never used; consider replacing with assignment to '_' or removing it\n    let max_sum_6 = get_max_sum(n: n/7)\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmpaqs2e07g.swift:20:9: warning: initialization of immutable value 'max_sum_7' was never used; consider replacing with assignment to '_' or removing it\n    let max_sum_7 = get_max_sum(n: n/8)\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmpaqs2e07g.swift:21:9: warning: initialization of immutable value 'max_sum_8' was never used; consider replacing with assignment to '_' or removing it\n    let max_sum_8 = get_max_sum(n: n/9)\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmpaqs2e07g.swift:22:9: warning: initialization of immutable value 'max_sum_9' was ne",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    let sum = get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5)\n    return max(sum, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = 0\n    for i in 2...5 {\n        max_sum = max(max_sum, get_max_sum(n: n/i))\n    }\n    return max_sum + n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmplhz004ln/tmplhz004ln.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b31cb9a1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b31cb698b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b31cb698988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b31cb6977b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplhz004ln                        0x000055e411efa3c5 <unavailable> + 5061\n5    libc.so.6                          0x00002b31cbb8d460 __libc_start_main + 245\n6    tmplhz004ln                        0x000055e411efa079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    let n2 = get_max_sum(n: n/2)\n    let n3 = get_max_sum(n: n/3)\n    let n4 = get_max_sum(n: n/4)\n    let n5 = get_max_sum(n: n/5)\n    return max(n, n2 + n3 + n4 + n5)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5)\n    if max_sum < n {\n        max_sum = n\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var max_sum = n\n    for i in 2...5 {\n        if n % i == 0 {\n            max_sum = max(max_sum, get_max_sum(n: n / i))\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpu3_0fgkg/tmpu3_0fgkg.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2d06dddc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2d06ad4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2d06ad4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2d06ad37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu3_0fgkg                        0x0000557c820733c5 <unavailable> + 5061\n5    libc.so.6                          0x00002b2d06fc9460 __libc_start_main + 245\n6    tmpu3_0fgkg                        0x0000557c82073079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    var result = 0\n    result = max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var max_sum = [Int](repeating: 0, count: n+1)\n    max_sum[0] = 0\n    max_sum[1] = 1\n    for i in 2...n {\n        max_sum[i] = max(max_sum[i/2] + max_sum[i/3] + max_sum[i/4] + max_sum[i/5], i)\n    }\n    return max_sum[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    var cache = [Int](repeating: 0, count: n + 1)\n    return get_max_sum(n: n, cache: &cache)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "/tmp/tmps5y7z606.swift:5:37: error: extra argument 'cache' in call\n    return get_max_sum(n: n, cache: &cache)\n                      ~~~~~~~~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    \n    var sum = 0\n    for i in 2...5 {\n        sum = max(sum, get_max_sum(n: n / i))\n    }\n    return sum + n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpburpraa5/tmpburpraa5.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ac9b53c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ac984ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ac984a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ac98497b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpburpraa5                        0x0000558c68d1a3c5 <unavailable> + 5061\n5    libc.so.6                          0x00002b8ac9d3f460 __libc_start_main + 245\n6    tmpburpraa5                        0x0000558c68d1a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    \n    if n == 0 {\n        return 0\n    }\n    \n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in 2...5 {\n        let sum = get_max_sum(n: n/i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "tmpztcg_5z8/tmpztcg_5z8.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b10b7fa5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b10b7c9cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b10b7c9c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b10b7c9b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpztcg_5z8                        0x00005560c6f5f335 <unavailable> + 4917\n5    libc.so.6                          0x00002b10b8191460 __libc_start_main + 245\n6    tmpztcg_5z8                        0x00005560c6f5efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpfesj_cni/tmpfesj_cni.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cc8cd5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cc89ccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cc89cc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cc89cb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfesj_cni                        0x0000558d99b5d2d5 <unavailable> + 4821\n5    libc.so.6                          0x00002b7cc8ec1460 __libc_start_main + 245\n6    tmpfesj_cni                        0x0000558d99b5cf89 <unavailable> + 3977\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var dp = [Int](repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i)\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, through: n/5, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "tmp86ckn4_8/tmp86ckn4_8.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002addf2054c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002addf1d4bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002addf1d4b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002addf1d4a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp86ckn4_8                        0x000055877d537475 <unavailable> + 5237\n5    libc.so.6                          0x00002addf2240460 __libc_start_main + 245\n6    tmp86ckn4_8                        0x000055877d537129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpfesj_cni/tmpfesj_cni.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cc8cd5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cc89ccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cc89cc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cc89cb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfesj_cni                        0x0000558d99b5d2d5 <unavailable> + 4821\n5    libc.so.6                          0x00002b7cc8ec1460 __libc_start_main + 245\n6    tmpfesj_cni                        0x0000558d99b5cf89 <unavailable> + 3977\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 || n == 1 {\n        return n\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpfesj_cni/tmpfesj_cni.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cc8cd5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cc89ccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cc89cc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cc89cb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfesj_cni                        0x0000558d99b5d2d5 <unavailable> + 4821\n5    libc.so.6                          0x00002b7cc8ec1460 __libc_start_main + 245\n6    tmpfesj_cni                        0x0000558d99b5cf89 <unavailable> + 3977\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, through: n/5, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n-i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "tmpwise7mof/tmpwise7mof.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4f5a216c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4f59f0db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4f59f0d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4f59f0c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwise7mof                        0x00005573c386a475 <unavailable> + 5237\n5    libc.so.6                          0x00002b4f5a402460 __libc_start_main + 245\n6    tmpwise7mof                        0x00005573c386a129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in 2...5 {\n        max_sum = max(max_sum, get_max_sum(n: n/i) + get_max_sum(n: n%i))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpj7tr6ibt/tmpj7tr6ibt.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1efc7fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1ef976b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1ef976988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1ef9757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpj7tr6ibt                        0x0000557bbd31b3c5 <unavailable> + 5061\n5    libc.so.6                          0x00002ad1efe6b460 __libc_start_main + 245\n6    tmpj7tr6ibt                        0x0000557bbd31b079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    \n    let sum = max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    var max_sum = n\n    for i in 1...5 {\n        if n % i == 0 {\n            max_sum = max(max_sum, get_max_sum(n: n/i))\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum = max(sum, get_max_sum(n: n / i))\n    }\n    return sum + n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpkin08pj8/tmpkin08pj8.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adc472cfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adc46fc6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adc46fc6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adc46fc57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkin08pj8                        0x000055cbc0fcc3c5 <unavailable> + 5061\n5    libc.so.6                          0x00002adc474bb460 __libc_start_main + 245\n6    tmpkin08pj8                        0x000055cbc0fcc079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/5, through: 1, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123017,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var sum = 0\n    sum = max(sum, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n    sum = max(sum, n)\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, through: n/5, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "tmp86ckn4_8/tmp86ckn4_8.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002addf2054c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002addf1d4bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002addf1d4b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002addf1d4a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp86ckn4_8                        0x000055877d537475 <unavailable> + 5237\n5    libc.so.6                          0x00002addf2240460 __libc_start_main + 245\n6    tmp86ckn4_8                        0x000055877d537129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 12 {\n        return n\n    }\n    let a = get_max_sum(n: n / 2)\n    let b = get_max_sum(n: n / 3)\n    let c = get_max_sum(n: n / 4)\n    let d = get_max_sum(n: n / 5)\n    return max(n, a + b + c + d)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpip99cz3n/tmpip99cz3n.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac3ccddfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac3ccad6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac3ccad6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac3ccad57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpip99cz3n                        0x0000560da92852d5 <unavailable> + 4821\n5    libc.so.6                          0x00002ac3ccfcb460 __libc_start_main + 245\n6    tmpip99cz3n                        0x0000560da9284f89 <unavailable> + 3977\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in 2...5 {\n        max_sum = max(max_sum, get_max_sum(n: n/i) + get_max_sum(n: n%i))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpj7tr6ibt/tmpj7tr6ibt.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1efc7fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1ef976b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1ef976988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1ef9757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpj7tr6ibt                        0x0000557bbd31b3c5 <unavailable> + 5061\n5    libc.so.6                          0x00002ad1efe6b460 __libc_start_main + 245\n6    tmpj7tr6ibt                        0x0000557bbd31b079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n < 2 {\n        return n\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    var i = 1\n    while i <= 5 {\n        let sum = get_max_sum(n: n/i) + get_max_sum(n: n/(i+1))\n        if sum > max_sum {\n            max_sum = sum\n        }\n        i += 1\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in 2...5 {\n        let sum = get_max_sum(n: n/i)\n        if max_sum < sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "tmpmg_u2off/tmpmg_u2off.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b31e3088c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b31e2d7fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b31e2d7f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b31e2d7e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmg_u2off                        0x00005644ed10f335 <unavailable> + 4917\n5    libc.so.6                          0x00002b31e3274460 __libc_start_main + 245\n6    tmpmg_u2off                        0x00005644ed10efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    \n    if n == 1 {\n        return 1\n    }\n    \n    var sum = 0\n    for i in 2...5 {\n        sum = max(sum, get_max_sum(n: n/i))\n    }\n    \n    return max(n, sum)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "tmpbm_n49zh/tmpbm_n49zh.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b942f471c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b942f168b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b942f168988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b942f1677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbm_n49zh                        0x0000557ac411b3c5 <unavailable> + 5061\n5    libc.so.6                          0x00002b942f65d460 __libc_start_main + 245\n6    tmpbm_n49zh                        0x0000557ac411b079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var max_sum = n\n    var sum = 0\n    for i in stride(from: 2, through: 5, by: 1) {\n        sum = get_max_sum(n: n/i)\n        if max_sum < sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "tmp6v45jsrw/tmp6v45jsrw.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af6327b9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af6324b0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af6324b0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af6324af7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6v45jsrw                        0x00005598ac37e475 <unavailable> + 5237\n5    libc.so.6                          0x00002af6329a5460 __libc_start_main + 245\n6    tmp6v45jsrw                        0x00005598ac37e129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    let sum = max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in 2...5 {\n        let sum = get_max_sum(n: n/i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "tmpztcg_5z8/tmpztcg_5z8.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b10b7fa5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b10b7c9cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b10b7c9c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b10b7c9b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpztcg_5z8                        0x00005560c6f5f335 <unavailable> + 4917\n5    libc.so.6                          0x00002b10b8191460 __libc_start_main + 245\n6    tmpztcg_5z8                        0x00005560c6f5efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpfesj_cni/tmpfesj_cni.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cc8cd5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cc89ccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cc89cc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cc89cb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfesj_cni                        0x0000558d99b5d2d5 <unavailable> + 4821\n5    libc.so.6                          0x00002b7cc8ec1460 __libc_start_main + 245\n6    tmpfesj_cni                        0x0000558d99b5cf89 <unavailable> + 3977\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum = max(sum, get_max_sum(n: n/i))\n    }\n    return sum + n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "tmpikkcsz6t/tmpikkcsz6t.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b28729f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b28726eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b28726ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b28726e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpikkcsz6t                        0x000055697d0fb3c5 <unavailable> + 5061\n5    libc.so.6                          0x00002b2872bdf460 __libc_start_main + 245\n6    tmpikkcsz6t                        0x000055697d0fb079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var sum = get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5)\n    if sum < n {\n        sum = n\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var memo = [Int](repeating: 0, count: n + 1)\n    memo[0] = 0\n    memo[1] = 1\n    for i in 2...n {\n        memo[i] = max(memo[i/2] + memo[i/3] + memo[i/4] + memo[i/5], i)\n    }\n    return memo[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, through: n/5, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "tmp86ckn4_8/tmp86ckn4_8.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002addf2054c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002addf1d4bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002addf1d4b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002addf1d4a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp86ckn4_8                        0x000055877d537475 <unavailable> + 5237\n5    libc.so.6                          0x00002addf2240460 __libc_start_main + 245\n6    tmp86ckn4_8                        0x000055877d537129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    \n    var max_sum = n\n    for i in stride(from: n/2, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n-i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i)\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var result = n\n    for i in 2...5 {\n        result = max(result, get_max_sum(n: n/i) * i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "tmpua0agrod/tmpua0agrod.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aedc72eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aedc6fe1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aedc6fe1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aedc6fe07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpua0agrod                        0x000056332648b3c5 <unavailable> + 5061\n5    libc.so.6                          0x00002aedc74d6460 __libc_start_main + 245\n6    tmpua0agrod                        0x000056332648b079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    let sum = get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5)\n    return max(sum, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    var sum = 0\n    for i in 2...5 {\n        sum = get_max_sum(n: n/i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "tmpcdphq2cw/tmpcdphq2cw.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b38da9fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b38da6f2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b38da6f2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b38da6f17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcdphq2cw                        0x0000561105e50335 <unavailable> + 4917\n5    libc.so.6                          0x00002b38dabe7460 __libc_start_main + 245\n6    tmpcdphq2cw                        0x0000561105e4ffe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    var max_sum = max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpfesj_cni/tmpfesj_cni.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cc8cd5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cc89ccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cc89cc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cc89cb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfesj_cni                        0x0000558d99b5d2d5 <unavailable> + 4821\n5    libc.so.6                          0x00002b7cc8ec1460 __libc_start_main + 245\n6    tmpfesj_cni                        0x0000558d99b5cf89 <unavailable> + 3977\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    return max(n, sum)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var max_sum = n\n    let n_2 = n / 2\n    let n_3 = n / 3\n    let n_4 = n / 4\n    let n_5 = n / 5\n    let sum = get_max_sum(n: n_2) + get_max_sum(n: n_3) + get_max_sum(n: n_4) + get_max_sum(n: n_5)\n    if sum > max_sum {\n        max_sum = sum\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpfesj_cni/tmpfesj_cni.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cc8cd5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cc89ccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cc89cc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cc89cb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfesj_cni                        0x0000558d99b5d2d5 <unavailable> + 4821\n5    libc.so.6                          0x00002b7cc8ec1460 __libc_start_main + 245\n6    tmpfesj_cni                        0x0000558d99b5cf89 <unavailable> + 3977\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    var max_sum = 0\n    max_sum = max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    return max(n, sum)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = 0\n    for i in 2...5 {\n        max_sum = max(max_sum, get_max_sum(n: n/i))\n    }\n    return max_sum + n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmplhz004ln/tmplhz004ln.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b31cb9a1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b31cb698b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b31cb698988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b31cb6977b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplhz004ln                        0x000055e411efa3c5 <unavailable> + 5061\n5    libc.so.6                          0x00002b31cbb8d460 __libc_start_main + 245\n6    tmplhz004ln                        0x000055e411efa079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    \n    var max_sum = n\n    for i in stride(from: n/2, through: 1, by: -1) {\n        let sum = get_max_sum(n: i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "tmp5obtyy57/tmp5obtyy57.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b91d15f1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b91d12e8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b91d12e8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b91d12e77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5obtyy57                        0x00005579e6186475 <unavailable> + 5237\n5    libc.so.6                          0x00002b91d17dd460 __libc_start_main + 245\n6    tmp5obtyy57                        0x00005579e6186129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    let sum = get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5)\n    return max(sum, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var result = 0\n    for i in 2...5 {\n        result = max(result, get_max_sum(n: n / i))\n    }\n    return result + n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "tmpw1pmhyg9/tmpw1pmhyg9.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5fd1d7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5fceceb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5fcece988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5fcecd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw1pmhyg9                        0x0000562eeb93c3c5 <unavailable> + 5061\n5    libc.so.6                          0x00002ad5fd3c3460 __libc_start_main + 245\n6    tmpw1pmhyg9                        0x0000562eeb93c079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var cache = [Int](repeating: 0, count: n + 1)\n    cache[0] = 0\n    cache[1] = 1\n    for i in 2...n {\n        cache[i] = max(cache[i/2] + cache[i/3] + cache[i/4] + cache[i/5], i)\n    }\n    return cache[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var result = 0\n    result = max(result, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n    result = max(result, n)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var sum = [Int](repeating: 0, count: n + 1)\n    sum[0] = 0\n    sum[1] = 1\n    for i in 2...n {\n        sum[i] = max(sum[i/2] + sum[i/3] + sum[i/4] + sum[i/5], i)\n    }\n    return sum[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/5, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    \n    if n <= 5 {\n        return n\n    }\n    \n    var max_sum = 0\n    for i in 2...5 {\n        max_sum = max(max_sum, get_max_sum(n: n/i))\n    }\n    \n    return max(max_sum + n, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "tmpcfa7awn0/tmpcfa7awn0.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b42519b1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b42516a8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b42516a8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b42516a77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcfa7awn0                        0x000056338e2603c5 <unavailable> + 5061\n5    libc.so.6                          0x00002b4251b9d460 __libc_start_main + 245\n6    tmpcfa7awn0                        0x000056338e260079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(i, dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5])\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum = max(sum, get_max_sum(n: n/i))\n    }\n    return sum + n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "tmpikkcsz6t/tmpikkcsz6t.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b28729f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b28726eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b28726ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b28726e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpikkcsz6t                        0x000055697d0fb3c5 <unavailable> + 5061\n5    libc.so.6                          0x00002b2872bdf460 __libc_start_main + 245\n6    tmpikkcsz6t                        0x000055697d0fb079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var max_sum = n\n    for i in stride(from: n/2, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n-i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 6 {\n        return n\n    }\n    var sum = 0\n    for i in stride(from: n, to: 0, by: -1) {\n        sum = max(sum, get_max_sum(n: i/2) + get_max_sum(n: i/3) + get_max_sum(n: i/4) + get_max_sum(n: i/5))\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var max_sum = n\n    for i in stride(from: n/2, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n-i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    let sum = get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5)\n    return max(sum, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var max_sum = n\n    var sum = 0\n    for i in 2...5 {\n        sum = get_max_sum(n: n/i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "tmpada592kw/tmpada592kw.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2f0cd55c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2f0ca4cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2f0ca4c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2f0ca4b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpada592kw                        0x000056313fc42335 <unavailable> + 4917\n5    libc.so.6                          0x00002b2f0cf41460 __libc_start_main + 245\n6    tmpada592kw                        0x000056313fc41fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i)\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var max_sum = n\n    for i in stride(from: 1, to: n, by: 1) {\n        let sum = get_max_sum(n: i/2) + get_max_sum(n: i/3) + get_max_sum(n: i/4) + get_max_sum(n: i/5)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "tmpxxy9glek/tmpxxy9glek.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aab560a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aab55d9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aab55d9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aab55d9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxxy9glek                        0x0000560d3ff0d455 <unavailable> + 5205\n5    libc.so.6                          0x00002aab56294460 __libc_start_main + 245\n6    tmpxxy9glek                        0x0000560d3ff0d109 <unavailable> + 4361\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum = max(sum, get_max_sum(n: n/i))\n    }\n    return max(sum, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "tmpbfqy_2y6/tmpbfqy_2y6.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4c1cdbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4c19d2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4c19d2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4c19d17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbfqy_2y6                        0x00005560ff46a3c5 <unavailable> + 5061\n5    libc.so.6                          0x00002ae4c1ec7460 __libc_start_main + 245\n6    tmpbfqy_2y6                        0x00005560ff46a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpfesj_cni/tmpfesj_cni.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cc8cd5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cc89ccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cc89cc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cc89cb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfesj_cni                        0x0000558d99b5d2d5 <unavailable> + 4821\n5    libc.so.6                          0x00002b7cc8ec1460 __libc_start_main + 245\n6    tmpfesj_cni                        0x0000558d99b5cf89 <unavailable> + 3977\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpfesj_cni/tmpfesj_cni.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cc8cd5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cc89ccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cc89cc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cc89cb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfesj_cni                        0x0000558d99b5d2d5 <unavailable> + 4821\n5    libc.so.6                          0x00002b7cc8ec1460 __libc_start_main + 245\n6    tmpfesj_cni                        0x0000558d99b5cf89 <unavailable> + 3977\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n-1, through: n-5, by: -1) {\n        let sum = get_max_sum(n: i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var sum = 0\n    sum = max(sum, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n    sum = max(sum, n)\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    var memo = [Int](repeating: 0, count: n+1)\n    memo[0] = 0\n    memo[1] = 1\n    for i in 2...n {\n        memo[i] = max(memo[i/2] + memo[i/3] + memo[i/4] + memo[i/5], i)\n    }\n    return memo[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    var max_sum = 0\n    for i in 1...5 {\n        max_sum = max(max_sum, get_max_sum(n: n/i))\n    }\n    return max_sum + n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n+1)\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 3\n    dp[4] = 4\n    dp[5] = 5\n    for i in 6...n {\n        dp[i] = max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i)\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    return max(sum, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/5, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var max_sum = n\n    for i in stride(from: n/2, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    return max(sum, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}