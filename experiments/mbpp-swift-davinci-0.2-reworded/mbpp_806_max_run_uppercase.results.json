{
  "name": "mbpp_806_max_run_uppercase",
  "language": "swift",
  "prompt": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUpper {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmptwa6s3n6.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmptwa6s3n6.swift:7:17: error: value of type 'Character' has no member 'isUpper'\n        if char.isUpper {\n           ~~~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpt8qr28em.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var cur_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            cur_run += 1\n        } else {\n            max_run = max(max_run, cur_run)\n            cur_run = 0\n        }\n    }\n    return max(max_run, cur_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpkp0ogmpn.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n        } else {\n            max_run = max(max_run, run)\n            run = 0\n        }\n    }\n    return max(max_run, run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp9pu57yxb.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n            max_run = max(max_run, run)\n        } else {\n            run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpfovxp4nw.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var cur_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            cur_run += 1\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n        } else {\n            cur_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    max_run = max(max_run, current_run)\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmph3k05yxq.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var cur_run = 0\n    for c in test_str {\n        if c.isUppercase {\n            cur_run += 1\n        } else {\n            max_run = max(max_run, cur_run)\n            cur_run = 0\n        }\n    }\n    return max(max_run, cur_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str {\n        if char.isUppercase {\n            run += 1\n            if run > max_run {\n                max_run = run\n            }\n        } else {\n            run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpt8qr28em.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            current_run += 1\n        } else {\n            current_run = 0\n        }\n        if current_run > max_run {\n            max_run = current_run\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpb3mj61og.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    max_run = max(max_run, current_run)\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpc1dwfo7q.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n        } else {\n            max_run = max(run, max_run)\n            run = 0\n        }\n    }\n    max_run = max(run, max_run)\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpgu29zftp.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "tmpk_kxz2_y/tmpk_kxz2_y.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae3eca9dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae3ec794b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae3ec794988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae3ec7937b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk_kxz2_y                        0x00005617b56f841b <unavailable> + 5147\n5    libc.so.6                          0x00002ae3ecc89460 __libc_start_main + 245\n6    tmpk_kxz2_y                        0x00005617b56f7ff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n        } else {\n            run = 0\n        }\n        if run > max_run {\n            max_run = run\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpti31_xg_.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            current_run = 0\n        }\n        if current_run > max_run {\n            max_run = current_run\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp7v0_7zc2.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp1o47mlvz.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var curr_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            curr_run += 1\n        } else {\n            if curr_run > max_run {\n                max_run = curr_run\n            }\n            curr_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "tmpzruk0yzs/tmpzruk0yzs.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0e272dbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0e26fd2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0e26fd2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0e26fd17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzruk0yzs                        0x0000559d74bb641b <unavailable> + 5147\n5    libc.so.6                          0x00002b0e274c7460 __libc_start_main + 245\n6    tmpzruk0yzs                        0x0000559d74bb5ff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            current_run = 0\n        }\n        if current_run > max_run {\n            max_run = current_run\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp7v0_7zc2.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    \n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    \n    if current_run > max_run {\n        max_run = current_run\n    }\n    \n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n            max_run = max(max_run, run)\n        } else {\n            run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpfovxp4nw.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmph_v7zqq8.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    return max(max_run, current_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpi56qjnkz.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    return max(max_run, current_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    return max(max_run, current_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpi56qjnkz.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpt8qr28em.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n        } else {\n            run = 0\n        }\n        if run > max_run {\n            max_run = run\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpti31_xg_.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "tmpk_kxz2_y/tmpk_kxz2_y.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae3eca9dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae3ec794b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae3ec794988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae3ec7937b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk_kxz2_y                        0x00005617b56f841b <unavailable> + 5147\n5    libc.so.6                          0x00002ae3ecc89460 __libc_start_main + 245\n6    tmpk_kxz2_y                        0x00005617b56f7ff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var cur_run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            cur_run += 1\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n        } else {\n            cur_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpwp0n1q7h.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp1o47mlvz.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUpper {\n            run += 1\n            if run > max_run {\n                max_run = run\n            }\n        } else {\n            run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpl98ryy0h.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpl98ryy0h.swift:7:17: error: value of type 'Character' has no member 'isUpper'\n        if char.isUpper {\n           ~~~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpwin2cszx.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp1o47mlvz.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUpper {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpfiubnxgm.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpfiubnxgm.swift:7:17: error: value of type 'Character' has no member 'isUpper'\n        if char.isUpper {\n           ~~~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            run += 1\n        } else {\n            max_run = max(max_run, run)\n            run = 0\n        }\n    }\n    max_run = max(max_run, run)\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpyv6d8j0w.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpchn5czi0.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var cur_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            cur_run += 1\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n        } else {\n            cur_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n        } else {\n            max_run = max(max_run, run)\n            run = 0\n        }\n    }\n    return max(max_run, run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp9pu57yxb.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run: Int = 0\n    var current_run: Int = 0\n    for char in test_str.characters {\n        if char.isUpper {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpubs84dmr.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpubs84dmr.swift:7:17: error: value of type 'Character' has no member 'isUpper'\n        if char.isUpper {\n           ~~~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str {\n        if char.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "tmp6y6mf1bs/tmp6y6mf1bs.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b36d1b25c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b36d181cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b36d181c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b36d181b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6y6mf1bs                        0x000055cbf223541b <unavailable> + 5147\n5    libc.so.6                          0x00002b36d1d11460 __libc_start_main + 245\n6    tmp6y6mf1bs                        0x000055cbf2234ff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpo2y25p2s.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n            if run > max_run {\n                max_run = run\n            }\n        } else {\n            run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpi9ms5wpw.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    return max(max_run, current_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    return max(max_run, current_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpi56qjnkz.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpry8g8bny.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpwin2cszx.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpo2y25p2s.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "tmpk_kxz2_y/tmpk_kxz2_y.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae3eca9dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae3ec794b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae3ec794988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae3ec7937b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk_kxz2_y                        0x00005617b56f841b <unavailable> + 5147\n5    libc.so.6                          0x00002ae3ecc89460 __libc_start_main + 245\n6    tmpk_kxz2_y                        0x00005617b56f7ff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var cur_run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            cur_run += 1\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpvkl3i2oz.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    \n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    \n    if current_run > max_run {\n        max_run = current_run\n    }\n    \n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp5u9p7aks.swift:7:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    \n    for char in test_str.characters {\n        if char.isUpper {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    \n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpp0hno59j.swift:7:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpp0hno59j.swift:8:17: error: value of type 'Character' has no member 'isUpper'\n        if char.isUpper {\n           ~~~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var cur_run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            cur_run += 1\n        } else {\n            max_run = max(max_run, cur_run)\n            cur_run = 0\n        }\n    }\n    return max(max_run, cur_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp1u7_snpm.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var cur_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            cur_run += 1\n        } else {\n            cur_run = 0\n        }\n        if cur_run > max_run {\n            max_run = cur_run\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmptv9kkhq_.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    return max(max_run, current_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmph_v7zqq8.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    return max(max_run, current_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUpper {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    return max(max_run, current_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpvibwirkk.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpvibwirkk.swift:7:17: error: value of type 'Character' has no member 'isUpper'\n        if char.isUpper {\n           ~~~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp5gex48bo.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    \n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    \n    if current_run > max_run {\n        max_run = current_run\n    }\n    \n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var cur_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            cur_run += 1\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpt7ygi9jv.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpt8qr28em.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "tmpk_kxz2_y/tmpk_kxz2_y.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae3eca9dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae3ec794b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae3ec794988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae3ec7937b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk_kxz2_y                        0x00005617b56f841b <unavailable> + 5147\n5    libc.so.6                          0x00002ae3ecc89460 __libc_start_main + 245\n6    tmpk_kxz2_y                        0x00005617b56f7ff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var cur_run = 0\n    for c in test_str {\n        if c.isUppercase {\n            cur_run += 1\n        } else {\n            max_run = max(max_run, cur_run)\n            cur_run = 0\n        }\n    }\n    return max(max_run, cur_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run: Int = 0\n    var run: Int = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n            if run > max_run {\n                max_run = run\n            }\n        } else {\n            run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmprs__iku4.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    return max(max_run, current_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpi56qjnkz.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    return max(max_run, current_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpi56qjnkz.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpt8qr28em.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var count = 0\n    var max_count = 0\n    for char in test_str {\n        if char.isUppercase {\n            count += 1\n            if count > max_count {\n                max_count = count\n            }\n        } else {\n            count = 0\n        }\n    }\n    return max_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "tmpk_kxz2_y/tmpk_kxz2_y.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae3eca9dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae3ec794b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae3ec794988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae3ec7937b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk_kxz2_y                        0x00005617b56f841b <unavailable> + 5147\n5    libc.so.6                          0x00002ae3ecc89460 __libc_start_main + 245\n6    tmpk_kxz2_y                        0x00005617b56f7ff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "tmpk_kxz2_y/tmpk_kxz2_y.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae3eca9dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae3ec794b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae3ec794988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae3ec7937b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk_kxz2_y                        0x00005617b56f841b <unavailable> + 5147\n5    libc.so.6                          0x00002ae3ecc89460 __libc_start_main + 245\n6    tmpk_kxz2_y                        0x00005617b56f7ff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpt8qr28em.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpo2y25p2s.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpo2y25p2s.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var cur_run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            cur_run += 1\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpvkl3i2oz.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpt8qr28em.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_count = 0\n    var count = 0\n    for char in test_str {\n        if char.isUppercase {\n            count += 1\n        } else {\n            if count > max_count {\n                max_count = count\n            }\n            count = 0\n        }\n    }\n    if count > max_count {\n        max_count = count\n    }\n    return max_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n            max_run = max(run, max_run)\n        } else {\n            run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpvf6qto6z.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    return max(max_run, current_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpi56qjnkz.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str {\n        if char.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n            if run > max_run {\n                max_run = run\n            }\n        } else {\n            run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpi9ms5wpw.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    max_run = max(max_run, current_run)\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpc1dwfo7q.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUpper {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp524l8mfn.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp524l8mfn.swift:7:17: error: value of type 'Character' has no member 'isUpper'\n        if char.isUpper {\n           ~~~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str {\n        if char.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "tmp6y6mf1bs/tmp6y6mf1bs.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b36d1b25c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b36d181cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b36d181c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b36d181b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6y6mf1bs                        0x000055cbf223541b <unavailable> + 5147\n5    libc.so.6                          0x00002b36d1d11460 __libc_start_main + 245\n6    tmp6y6mf1bs                        0x000055cbf2234ff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str {\n        if char.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    \n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            current_run = 0\n        }\n        \n        if current_run > max_run {\n            max_run = current_run\n        }\n    }\n    \n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpt8qr28em.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var cur_run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            cur_run += 1\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpvkl3i2oz.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp5gex48bo.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    return max(max_run, current_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp1xkk9n8a.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            run += 1\n            if run > max_run {\n                max_run = run\n            }\n        } else {\n            run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpqdu_gerf.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    max_run = max(max_run, current_run)\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpc1dwfo7q.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var cur_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            cur_run += 1\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "tmptb8pvv6w/tmptb8pvv6w.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac267c03c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac2678fab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac2678fa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac2678f97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptb8pvv6w                        0x000056493fab841b <unavailable> + 5147\n5    libc.so.6                          0x00002ac267def460 __libc_start_main + 245\n6    tmptb8pvv6w                        0x000056493fab7ff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n        } else {\n            max_run = max(max_run, run)\n            run = 0\n        }\n    }\n    return max(max_run, run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp9pu57yxb.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var cur_run = 0\n    for c in test_str.characters {\n        if c.isUppercase() {\n            cur_run += 1\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp1izkefxy.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1izkefxy.swift:7:14: error: cannot call value of non-function type 'Bool'\n        if c.isUppercase() {\n             ^          ~~\n                        \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "tmpk_kxz2_y/tmpk_kxz2_y.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae3eca9dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae3ec794b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae3ec794988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae3ec7937b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk_kxz2_y                        0x00005617b56f841b <unavailable> + 5147\n5    libc.so.6                          0x00002ae3ecc89460 __libc_start_main + 245\n6    tmpk_kxz2_y                        0x00005617b56f7ff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpchn5czi0.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpt8qr28em.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for c in test_str.characters {\n        if c.isUppercase() {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpkne6hlq8.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpkne6hlq8.swift:7:14: error: cannot call value of non-function type 'Bool'\n        if c.isUppercase() {\n             ^          ~~\n                        \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "tmpk_kxz2_y/tmpk_kxz2_y.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae3eca9dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae3ec794b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae3ec794988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae3ec7937b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk_kxz2_y                        0x00005617b56f841b <unavailable> + 5147\n5    libc.so.6                          0x00002ae3ecc89460 __libc_start_main + 245\n6    tmpk_kxz2_y                        0x00005617b56f7ff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "tmpk_kxz2_y/tmpk_kxz2_y.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae3eca9dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae3ec794b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae3ec794988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae3ec7937b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk_kxz2_y                        0x00005617b56f841b <unavailable> + 5147\n5    libc.so.6                          0x00002ae3ecc89460 __libc_start_main + 245\n6    tmpk_kxz2_y                        0x00005617b56f7ff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "tmpk_kxz2_y/tmpk_kxz2_y.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae3eca9dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae3ec794b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae3ec794988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae3ec7937b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk_kxz2_y                        0x00005617b56f841b <unavailable> + 5147\n5    libc.so.6                          0x00002ae3ecc89460 __libc_start_main + 245\n6    tmpk_kxz2_y                        0x00005617b56f7ff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for c in test_str.unicodeScalars {\n        if c.isUppercase() {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpyl9f7tbp.swift:7:14: error: value of type 'Unicode.Scalar' has no member 'isUppercase'\n        if c.isUppercase() {\n           ~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    return max(max_run, current_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n        } else {\n            max_run = max(max_run, run)\n            run = 0\n        }\n    }\n    return max(max_run, run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp9pu57yxb.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            run += 1\n            if run > max_run {\n                max_run = run\n            }\n        } else {\n            run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpqdu_gerf.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "tmpk_kxz2_y/tmpk_kxz2_y.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae3eca9dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae3ec794b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae3ec794988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae3ec7937b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk_kxz2_y                        0x00005617b56f841b <unavailable> + 5147\n5    libc.so.6                          0x00002ae3ecc89460 __libc_start_main + 245\n6    tmpk_kxz2_y                        0x00005617b56f7ff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp1o47mlvz.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n        } else {\n            run = 0\n        }\n        if run > max_run {\n            max_run = run\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpti31_xg_.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUpper {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp8zpqrg6n.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp8zpqrg6n.swift:7:17: error: value of type 'Character' has no member 'isUpper'\n        if char.isUpper {\n           ~~~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str {\n        if char.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var cur_run = 0\n    for c in test_str.characters {\n        if c.isUpper {\n            cur_run += 1\n        } else {\n            cur_run = 0\n        }\n        if cur_run > max_run {\n            max_run = cur_run\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpfuz7h4ro.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpfuz7h4ro.swift:7:14: error: value of type 'Character' has no member 'isUpper'\n        if c.isUpper {\n           ~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    return max(max_run, current_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpi56qjnkz.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n            if run > max_run {\n                max_run = run\n            }\n        } else {\n            run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpi9ms5wpw.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpt8qr28em.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        }\n        else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "tmpdxqq22kc/tmpdxqq22kc.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6119848c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b611953fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b611953f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b611953e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdxqq22kc                        0x00005579d71a541b <unavailable> + 5147\n5    libc.so.6                          0x00002b6119a34460 __libc_start_main + 245\n6    tmpdxqq22kc                        0x00005579d71a4ff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var cur_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            cur_run += 1\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "tmptb8pvv6w/tmptb8pvv6w.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac267c03c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac2678fab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac2678fa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac2678f97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptb8pvv6w                        0x000056493fab841b <unavailable> + 5147\n5    libc.so.6                          0x00002ac267def460 __libc_start_main + 245\n6    tmptb8pvv6w                        0x000056493fab7ff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "tmpk_kxz2_y/tmpk_kxz2_y.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae3eca9dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae3ec794b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae3ec794988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae3ec7937b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk_kxz2_y                        0x00005617b56f841b <unavailable> + 5147\n5    libc.so.6                          0x00002ae3ecc89460 __libc_start_main + 245\n6    tmpk_kxz2_y                        0x00005617b56f7ff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var cur_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            cur_run += 1\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmptbkudm6j.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n            if run > max_run {\n                max_run = run\n            }\n        } else {\n            run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpi9ms5wpw.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str {\n        if char.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUpper {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp524l8mfn.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp524l8mfn.swift:7:17: error: value of type 'Character' has no member 'isUpper'\n        if char.isUpper {\n           ~~~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp1o47mlvz.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUpper {\n            run += 1\n        } else {\n            max_run = max(max_run, run)\n            run = 0\n        }\n    }\n    return max(max_run, run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp4e43bd5_.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp4e43bd5_.swift:7:17: error: value of type 'Character' has no member 'isUpper'\n        if char.isUpper {\n           ~~~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp1o47mlvz.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n            if run > max_run {\n                max_run = run\n            }\n        } else {\n            run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpi9ms5wpw.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "tmpk_kxz2_y/tmpk_kxz2_y.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae3eca9dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae3ec794b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae3ec794988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae3ec7937b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk_kxz2_y                        0x00005617b56f841b <unavailable> + 5147\n5    libc.so.6                          0x00002ae3ecc89460 __libc_start_main + 245\n6    tmpk_kxz2_y                        0x00005617b56f7ff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUpper {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmptwa6s3n6.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmptwa6s3n6.swift:7:17: error: value of type 'Character' has no member 'isUpper'\n        if char.isUpper {\n           ~~~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    return max(max_run, current_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpchn5czi0.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var curr_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            curr_run += 1\n        } else {\n            if curr_run > max_run {\n                max_run = curr_run\n            }\n            curr_run = 0\n        }\n    }\n    if curr_run > max_run {\n        max_run = curr_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp4scc0cav.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}