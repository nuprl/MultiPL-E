{
  "name": "mbpp_598_armstrong_number",
  "language": "swift",
  "prompt": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        sum += Int(pow(Double(temp % 10), Double(3)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "/tmp/tmpojmq5g_b.swift:7:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(temp % 10), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var digit = 0\n    while temp != 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var rem = 0\n    while temp > 0 {\n        rem = temp % 10\n        sum += rem * rem * rem\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp != 0 {\n        remainder = temp % 10\n        sum += Int(pow(Double(remainder), Double(3)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "/tmp/tmp76gyttyi.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var rem = 0\n    while temp > 0 {\n        rem = temp % 10\n        sum += rem * rem * rem\n        temp /= 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var r = 0\n    while temp > 0 {\n        r = temp % 10\n        sum = sum + r * r * r\n        temp = temp / 10\n    }\n    if sum == number {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var digits = [Int]()\n    var temp = number\n    while temp > 0 {\n        digits.append(temp % 10)\n        temp /= 10\n    }\n    var sum = 0\n    for digit in digits {\n        sum += Int(pow(Double(digit), Double(digits.count)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "/tmp/tmp6o8xj1d3.swift:12:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(digit), Double(digits.count)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var digit = 0\n    while num > 0 {\n        digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var rem = 0\n    while temp != 0 {\n        rem = temp % 10\n        sum += rem * rem * rem\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var rem = 0\n    while temp > 0 {\n        rem = temp % 10\n        sum += rem * rem * rem\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var digit = 0\n    while num > 0 {\n        digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp > 0 {\n        remainder = temp % 10\n        sum += Int(pow(Double(remainder), Double(3)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "/tmp/tmp7np3s1gz.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if sum == number {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp != 0 {\n        sum += Int(pow(Double(temp % 10), Double(3)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "/tmp/tmpwys5xbu8.swift:7:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(temp % 10), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_string = String(number)\n    let number_length = number_string.count\n    var sum = 0\n    for char in number_string {\n        let value = Int(String(char))!\n        sum += Int(pow(Double(value), Double(number_length)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "/tmp/tmplqp8vhy9.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(value), Double(number_length)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp > 0 {\n        remainder = temp % 10\n        sum += Int(pow(Double(remainder), Double(3)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "/tmp/tmp7np3s1gz.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp != 0 {\n        remainder = temp % 10\n        sum += Int(pow(Double(remainder), Double(3)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "/tmp/tmp76gyttyi.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var rem = 0\n    while temp != 0 {\n        rem = temp % 10\n        sum = sum + (rem * rem * rem)\n        temp = temp / 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var rem = 0\n    while temp > 0 {\n        rem = temp % 10\n        sum = sum + rem * rem * rem\n        temp = temp / 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let stringNumber = String(number)\n    var sum = 0\n    for char in stringNumber {\n        let intValue = Int(String(char))!\n        sum += intValue * intValue * intValue\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var rem = 0\n    var digits = 0\n    \n    while num != 0 {\n        num /= 10\n        digits += 1\n    }\n    \n    num = number\n    \n    while num != 0 {\n        rem = num % 10\n        sum += Int(pow(Double(rem), Double(digits)))\n        num /= 10\n    }\n    \n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "/tmp/tmpd_smnain.swift:18:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(rem), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var number = number\n    var sum = 0\n    var remainder = 0\n    var digits = 0\n    \n    while number != 0 {\n        number /= 10\n        digits += 1\n    }\n    \n    number = number\n    \n    while number != 0 {\n        remainder = number % 10\n        sum += Int(pow(Double(remainder), Double(digits)))\n        number /= 10\n    }\n    \n    if sum == number {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "/tmp/tmphkv2zxiw.swift:14:12: error: assigning a variable to itself\n    number = number\n    ~~~~~~ ^ ~~~~~~\n/tmp/tmphkv2zxiw.swift:18:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var temp = 0\n    while num > 0 {\n        temp = num % 10\n        sum += temp * temp * temp\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        sum += Int(pow(Double(temp % 10), 3))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "/tmp/tmpojowan3l.swift:7:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(temp % 10), 3))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var digit = 0\n    while num > 0 {\n        digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    var digits = 0\n    \n    while temp != 0 {\n        digits += 1\n        temp /= 10\n    }\n    \n    temp = number\n    while temp != 0 {\n        remainder = temp % 10\n        sum += Int(pow(Double(remainder), Double(digits)))\n        temp /= 10\n    }\n    \n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "/tmp/tmpg9la8sas.swift:17:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var digit = 0\n    while num > 0 {\n        digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    var digits = 0\n    \n    while temp != 0 {\n        temp /= 10\n        digits += 1\n    }\n    \n    temp = number\n    while temp != 0 {\n        remainder = temp % 10\n        sum += Int(pow(Double(remainder), Double(digits)))\n        temp /= 10\n    }\n    \n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "/tmp/tmp2zw6ebvp.swift:17:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    let digits = String(number).count\n    while temp > 0 {\n        let digit = temp % 10\n        sum += Int(pow(Double(digit), Double(digits)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "/tmp/tmphosmtvkr.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(digit), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp > 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var r = 0\n    while temp != 0 {\n        r = temp % 10\n        sum = sum + r * r * r\n        temp = temp / 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp != 0 {\n        let lastDigit = temp % 10\n        sum += lastDigit * lastDigit * lastDigit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var temp = 0\n    while num > 0 {\n        temp = num % 10\n        sum += temp * temp * temp\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var number = number\n    var sum = 0\n    var temp = 0\n    var remainder = 0\n    while number > 0 {\n        remainder = number % 10\n        temp = remainder * remainder * remainder\n        sum += temp\n        number /= 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "tmp__yrk4x0/tmp__yrk4x0.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afee31dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afee2ed1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afee2ed1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afee2ed07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp__yrk4x0                        0x000056546712b23e <unavailable> + 4670\n5    libc.so.6                          0x00002afee33c6460 __libc_start_main + 245\n6    tmp__yrk4x0                        0x000056546712aef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_string = String(number)\n    let number_length = number_string.count\n    var sum = 0\n    for char in number_string {\n        let char_int = Int(String(char))!\n        sum += Int(pow(Double(char_int), Double(number_length)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "/tmp/tmp1nfuoxkv.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(char_int), Double(number_length)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp != 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var rem = 0\n    var count = 0\n    var num = number\n    while num != 0 {\n        num = num / 10\n        count += 1\n    }\n    while temp != 0 {\n        rem = temp % 10\n        sum = sum + Int(pow(Double(rem), Double(count)))\n        temp = temp / 10\n    }\n    if sum == number {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "/tmp/tmpcfpd48ai.swift:15:25: error: cannot find 'pow' in scope\n        sum = sum + Int(pow(Double(rem), Double(count)))\n                        ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let reminder = temp % 10\n        sum += reminder * reminder * reminder\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var tempNumber = number\n    var digits = [Int]()\n    var sum = 0\n    while tempNumber > 0 {\n        digits.append(tempNumber % 10)\n        tempNumber /= 10\n    }\n    for digit in digits {\n        sum += Int(pow(Double(digit), Double(digits.count)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "/tmp/tmph7mchu0b.swift:12:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(digit), Double(digits.count)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var rem = 0\n    while temp > 0 {\n        rem = temp % 10\n        sum += rem * rem * rem\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let lastDigit = temp % 10\n        sum += lastDigit * lastDigit * lastDigit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_string = String(number)\n    var sum = 0\n    for char in number_string {\n        sum += Int(pow(Double(String(char))!, Double(number_string.count)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "/tmp/tmphahqgsq7.swift:7:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(String(char))!, Double(number_string.count)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var rem = 0\n    while temp > 0 {\n        rem = temp % 10\n        sum += rem * rem * rem\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp != 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var digits = 0\n    while num != 0 {\n        digits += 1\n        num /= 10\n    }\n    num = number\n    while num != 0 {\n        let digit = num % 10\n        sum += Int(pow(Double(digit), Double(digits)))\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "/tmp/tmp6tyo_4li.swift:14:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(digit), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var n = number\n    var sum = 0\n    var temp = 0\n    while n > 0 {\n        temp = n % 10\n        sum += temp * temp * temp\n        n /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var number = number\n    var sum = 0\n    var temp = 0\n    while number > 0 {\n        temp = number % 10\n        sum += temp * temp * temp\n        number /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "tmp0_o1o6tz/tmp0_o1o6tz.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9d22a6cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9d22763b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9d22763988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9d227627b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0_o1o6tz                        0x000055731380123e <unavailable> + 4670\n5    libc.so.6                          0x00002b9d22c58460 __libc_start_main + 245\n6    tmp0_o1o6tz                        0x0000557313800ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let lastDigit = temp % 10\n        sum += lastDigit * lastDigit * lastDigit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var digit = 0\n    while temp > 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    while num > 0 {\n        let digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_string = String(number)\n    let number_length = number_string.count\n    var sum = 0\n    for char in number_string {\n        let char_int = Int(String(char))!\n        sum += Int(pow(Double(char_int), Double(number_length)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "/tmp/tmp1nfuoxkv.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(char_int), Double(number_length)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let lastDigit = temp % 10\n        sum += lastDigit * lastDigit * lastDigit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    var digits = 0\n    \n    while temp != 0 {\n        digits += 1\n        temp /= 10\n    }\n    \n    temp = number\n    \n    while temp != 0 {\n        remainder = temp % 10\n        sum += Int(pow(Double(remainder), Double(digits)))\n        temp /= 10\n    }\n    \n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "/tmp/tmpo45sadi6.swift:18:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp != 0 {\n        sum += Int(pow(Double(temp % 10), Double(3)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "/tmp/tmpwys5xbu8.swift:7:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(temp % 10), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var rem = 0\n    while num != 0 {\n        rem = num % 10\n        sum += rem * rem * rem\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp != 0 {\n        remainder = temp % 10\n        sum += Int(pow(Double(remainder), Double(3)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "/tmp/tmp76gyttyi.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var armstrong = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        armstrong += digit * digit * digit\n        temp /= 10\n    }\n    return armstrong == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    var digits = 0\n    while temp > 0 {\n        digits += 1\n        temp /= 10\n    }\n    temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += Int(pow(Double(digit), Double(digits)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "/tmp/tmp3_drdl9c.swift:14:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(digit), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_string = String(number)\n    let number_string_length = number_string.count\n    var sum = 0\n    for char in number_string {\n        let char_int = Int(String(char))!\n        sum += Int(pow(Double(char_int), Double(number_string_length)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "/tmp/tmpob6p1icm.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(char_int), Double(number_string_length)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var r = 0\n    while temp != 0 {\n        r = temp % 10\n        sum = sum + r * r * r\n        temp = temp / 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var remainder = 0\n    while num > 0 {\n        remainder = num % 10\n        sum = sum + (remainder * remainder * remainder)\n        num = num / 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let digits = String(number).map { Int(String($0))! }\n    let sum = digits.reduce(0) { $0 + pow($1, digits.count) }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "/tmp/tmpltlf9bnr.swift:5:39: error: cannot find 'pow' in scope\n    let sum = digits.reduce(0) { $0 + pow($1, digits.count) }\n                                      ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp != 0 {\n        remainder = temp % 10\n        sum = sum + remainder * remainder * remainder\n        temp = temp / 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var digit = 0\n    while temp > 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var digit = 0\n    while temp > 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp > 0 {\n        remainder = temp % 10\n        sum += Int(pow(Double(remainder), Double(3)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "/tmp/tmp7np3s1gz.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp != 0 {\n        remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = temp / 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp > 0 {\n        remainder = temp % 10\n        sum += Int(pow(Double(remainder), Double(3)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "/tmp/tmp7np3s1gz.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        sum += Int(pow(Double(temp % 10), 3))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "/tmp/tmpojowan3l.swift:7:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(temp % 10), 3))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp != 0 {\n        sum += Int(pow(Double(temp % 10), Double(3)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "/tmp/tmpwys5xbu8.swift:7:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(temp % 10), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var rem = 0\n    while temp > 0 {\n        rem = temp % 10\n        sum = sum + (rem * rem * rem)\n        temp = temp / 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp != 0 {\n        sum += Int(pow(Double(temp % 10), 3))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "/tmp/tmpkfn3f4ll.swift:7:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(temp % 10), 3))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var rem = 0\n    var count = 0\n    var temp = num\n    while temp != 0 {\n        temp /= 10\n        count += 1\n    }\n    while num != 0 {\n        rem = num % 10\n        sum += Int(pow(Double(rem), Double(count)))\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "/tmp/tmp27mdfbbo.swift:15:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(rem), Double(count)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    var digits = 0\n    while temp != 0 {\n        temp /= 10\n        digits += 1\n    }\n    temp = number\n    while temp != 0 {\n        remainder = temp % 10\n        sum += Int(pow(Double(remainder), Double(digits)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "/tmp/tmp5legebdf.swift:15:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    while num > 0 {\n        let digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    while num > 0 {\n        let digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_string = String(number)\n    let number_length = number_string.count\n    var sum = 0\n    for char in number_string {\n        let char_int = Int(String(char))!\n        sum += Int(pow(Double(char_int), Double(number_length)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "/tmp/tmp1nfuoxkv.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(char_int), Double(number_length)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp != 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    while temp != 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    while temp != 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_string = String(number)\n    let number_length = number_string.count\n    var sum = 0\n    for char in number_string {\n        sum += Int(pow(Double(String(char))!, Double(number_length)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "/tmp/tmpuoc6t7j8.swift:8:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(String(char))!, Double(number_length)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum: Int = 0\n    var temp: Int = number\n    while temp > 0 {\n        let last_digit = temp % 10\n        sum += last_digit * last_digit * last_digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var rem = 0\n    while num != 0 {\n        rem = num % 10\n        sum += rem * rem * rem\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let lastDigit = temp % 10\n        sum += lastDigit * lastDigit * lastDigit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var digit = 0\n    while temp > 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp = temp / 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp != 0 {\n        let remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var number = number\n    var sum = 0\n    var remainder = 0\n    var digits = 0\n    \n    while number != 0 {\n        number /= 10\n        digits += 1\n    }\n    \n    number = number\n    \n    while number != 0 {\n        remainder = number % 10\n        sum += Int(pow(Double(remainder), Double(digits)))\n        number /= 10\n    }\n    \n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "/tmp/tmpqzmdxulu.swift:14:12: error: assigning a variable to itself\n    number = number\n    ~~~~~~ ^ ~~~~~~\n/tmp/tmpqzmdxulu.swift:18:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var rem = 0\n    while temp > 0 {\n        rem = temp % 10\n        sum = sum + (rem * rem * rem)\n        temp = temp / 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp != 0 {\n        sum += (temp % 10) * (temp % 10) * (temp % 10)\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let lastDigit = temp % 10\n        sum += lastDigit * lastDigit * lastDigit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp != 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    while num > 0 {\n        let digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let digits = String(number).compactMap { Int(String($0)) }\n    let sum = digits.reduce(0) { $0 + Int(pow(Double($1), Double(digits.count))) }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "/tmp/tmpjt_1larw.swift:5:43: error: cannot find 'pow' in scope\n    let sum = digits.reduce(0) { $0 + Int(pow(Double($1), Double(digits.count))) }\n                                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp != 0 {\n        sum += Int(pow(Double(temp % 10), Double(3)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "/tmp/tmpwys5xbu8.swift:7:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(temp % 10), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var originalNumber = number\n    var result = 0\n    var reminder = 0\n    while originalNumber != 0 {\n        reminder = originalNumber % 10\n        result += reminder * reminder * reminder\n        originalNumber /= 10\n    }\n    if result == number {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var armstrong = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        armstrong += digit * digit * digit\n        temp /= 10\n    }\n    return armstrong == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    var digits = 0\n    \n    while temp != 0 {\n        digits += 1\n        temp /= 10\n    }\n    \n    temp = number\n    \n    while temp != 0 {\n        remainder = temp % 10\n        sum += Int(pow(Double(remainder), Double(digits)))\n        temp /= 10\n    }\n    \n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "/tmp/tmpo45sadi6.swift:18:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        sum += Int(pow(Double(temp % 10), Double(3)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "/tmp/tmpojmq5g_b.swift:7:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(temp % 10), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var r = 0\n    while temp != 0 {\n        r = temp % 10\n        sum = sum + r * r * r\n        temp = temp / 10\n    }\n    if sum == number {\n        return true\n    }\n    else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        sum += Int(pow(Double(temp % 10), Double(3)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "/tmp/tmpojmq5g_b.swift:7:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(temp % 10), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp != 0 {\n        let lastDigit = temp % 10\n        sum += lastDigit * lastDigit * lastDigit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_string = String(number)\n    let number_length = number_string.count\n    var sum = 0\n    for char in number_string {\n        let char_int = Int(String(char))!\n        sum += Int(pow(Double(char_int), Double(number_length)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "/tmp/tmp1nfuoxkv.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(char_int), Double(number_length)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var rem = 0\n    while temp != 0 {\n        rem = temp % 10\n        sum += rem * rem * rem\n        temp /= 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var r = 0\n    while temp != 0 {\n        r = temp % 10\n        sum = sum + r * r * r\n        temp = temp / 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp != 0 {\n        sum += Int(pow(Double(temp % 10), Double(number.numberOfDigits())))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "/tmp/tmp3qkvv_zd.swift:7:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(temp % 10), Double(number.numberOfDigits())))\n                   ^~~\n/tmp/tmp3qkvv_zd.swift:7:57: error: value of type 'Int' has no member 'numberOfDigits'\n        sum += Int(pow(Double(temp % 10), Double(number.numberOfDigits())))\n                                                 ~~~~~~ ^~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    var digits = 0\n    \n    while temp != 0 {\n        digits += 1\n        temp /= 10\n    }\n    \n    temp = number\n    \n    while temp != 0 {\n        remainder = temp % 10\n        sum += Int(pow(Double(remainder), Double(digits)))\n        temp /= 10\n    }\n    \n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "/tmp/tmpo45sadi6.swift:18:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var n = number\n    var sum = 0\n    var temp = 0\n    while n > 0 {\n        temp = n % 10\n        sum += temp * temp * temp\n        n /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var digit = 0\n    while temp > 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var rem = 0\n    while temp != 0 {\n        rem = temp % 10\n        sum = sum + (rem * rem * rem)\n        temp = temp / 10\n    }\n    if sum == number {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var num = number\n    while num > 0 {\n        let digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var rem = 0\n    while temp > 0 {\n        rem = temp % 10\n        sum += rem * rem * rem\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp != 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var r = 0\n    while temp != 0 {\n        r = temp % 10\n        sum = sum + r * r * r\n        temp = temp / 10\n    }\n    if sum == number {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var digit = 0\n    while temp > 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var digit = 0\n    while num != 0 {\n        digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var num = number\n    while num > 0 {\n        let digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp != 0 {\n        sum += Int(pow(Double(temp % 10), Double(number.digits)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "/tmp/tmp3qyj1e6m.swift:7:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(temp % 10), Double(number.digits)))\n                   ^~~\n/tmp/tmp3qyj1e6m.swift:7:57: error: value of type 'Int' has no member 'digits'\n        sum += Int(pow(Double(temp % 10), Double(number.digits)))\n                                                 ~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var r = 0\n    while temp != 0 {\n        r = temp % 10\n        sum = sum + r * r * r\n        temp = temp / 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp != 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var digit = 0\n    while temp > 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var n = number\n    var sum = 0\n    var temp = 0\n    while n > 0 {\n        temp = n % 10\n        sum += temp * temp * temp\n        n /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var digit = 0\n    while num > 0 {\n        digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var digits = [Int]()\n    var sum = 0\n    while num > 0 {\n        digits.append(num % 10)\n        num /= 10\n    }\n    for digit in digits {\n        sum += Int(pow(Double(digit), Double(digits.count)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "/tmp/tmpvug0p7sh.swift:12:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(digit), Double(digits.count)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_string = String(number)\n    var sum = 0\n    for char in number_string {\n        let digit = Int(String(char))!\n        sum += digit * digit * digit\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var rem = 0\n    while num != 0 {\n        rem = num % 10\n        sum += rem * rem * rem\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_string = String(number)\n    let length = number_string.count\n    var sum = 0\n    for char in number_string {\n        let digit = Int(String(char))!\n        sum += Int(pow(Double(digit), Double(length)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "/tmp/tmph6af91z4.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(digit), Double(length)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var rem = 0\n    while num > 0 {\n        rem = num % 10\n        sum = sum + (rem * rem * rem)\n        num = num / 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_string = String(number)\n    var sum = 0\n    for char in number_string {\n        let char_int = Int(String(char))!\n        sum += Int(pow(Double(char_int), Double(number_string.count)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "/tmp/tmpkowb7i87.swift:8:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(char_int), Double(number_string.count)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var number = number\n    while number > 0 {\n        let digit = number % 10\n        sum += digit * digit * digit\n        number /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "tmpmaquw16v/tmpmaquw16v.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b88ca942c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b88ca639b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b88ca639988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b88ca6387b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmaquw16v                        0x00005633d2f7523e <unavailable> + 4670\n5    libc.so.6                          0x00002b88cab2e460 __libc_start_main + 245\n6    tmpmaquw16v                        0x00005633d2f74ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    var digits = 0\n    \n    while temp != 0 {\n        digits += 1\n        temp /= 10\n    }\n    \n    temp = number\n    \n    while temp != 0 {\n        remainder = temp % 10\n        sum += Int(pow(Double(remainder), Double(digits)))\n        temp /= 10\n    }\n    \n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "/tmp/tmpo45sadi6.swift:18:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var digit = 0\n    while temp > 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    var digits = 0\n    while temp != 0 {\n        digits += 1\n        temp /= 10\n    }\n    temp = number\n    while temp != 0 {\n        remainder = temp % 10\n        sum += Int(pow(Double(remainder), Double(digits)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "/tmp/tmps00ineal.swift:15:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}