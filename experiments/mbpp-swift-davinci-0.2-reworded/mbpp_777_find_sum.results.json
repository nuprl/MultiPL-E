{
  "name": "mbpp_777_find_sum",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpbpup8u66/tmpbpup8u66.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9fc331dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9fc3014b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9fc3014988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9fc30137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbpup8u66                        0x000055f115c317ce <unavailable> + 6094\n5    libc.so.6                          0x00002b9fc3509460 __libc_start_main + 245\n6    tmpbpup8u66                        0x000055f115c31409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpbpup8u66/tmpbpup8u66.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9fc331dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9fc3014b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9fc3014988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9fc30137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbpup8u66                        0x000055f115c317ce <unavailable> + 6094\n5    libc.so.6                          0x00002b9fc3509460 __libc_start_main + 245\n6    tmpbpup8u66                        0x000055f115c31409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var flag = true\n        for j in 0..<arr.count {\n            if i != j && arr[i] == arr[j] {\n                flag = false\n                break\n            }\n        }\n        if flag {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpx48yn0wo/tmpx48yn0wo.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba64fa23c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba64f71ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba64f71a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba64f7197b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx48yn0wo                        0x0000560d3f98e56e <unavailable> + 5486\n5    libc.so.6                          0x00002ba64fc0f460 __libc_start_main + 245\n6    tmpx48yn0wo                        0x0000560d3f98e1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var is_repeated = false\n        for j in 0..<arr.count {\n            if i != j && arr[i] == arr[j] {\n                is_repeated = true\n                break\n            }\n        }\n        if !is_repeated {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpy8raxapv/tmpy8raxapv.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7f337d2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7f334c9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7f334c9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7f334c87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy8raxapv                        0x000055d93090c56e <unavailable> + 5486\n5    libc.so.6                          0x00002b7f339be460 __libc_start_main + 245\n6    tmpy8raxapv                        0x000055d93090c1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if !arr.contains(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp7oodqhmb/tmp7oodqhmb.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9165b7fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9165876b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9165876988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b91658757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7oodqhmb                        0x000055b0733824fe <unavailable> + 5374\n5    libc.so.6                          0x00002b9165d6b460 __libc_start_main + 245\n6    tmp7oodqhmb                        0x000055b073382139 <unavailable> + 4409\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var seen = Set<Int>()\n    for i in arr {\n        if !seen.contains(i) {\n            sum += i\n            seen.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpbpup8u66/tmpbpup8u66.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9fc331dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9fc3014b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9fc3014988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9fc30137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbpup8u66                        0x000055f115c317ce <unavailable> + 6094\n5    libc.so.6                          0x00002b9fc3509460 __libc_start_main + 245\n6    tmpbpup8u66                        0x000055f115c31409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr_set = Set<Int>()\n    for i in arr {\n        if !arr_set.contains(i) {\n            sum += i\n            arr_set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if let _ = dict[i] {\n            dict[i] = dict[i]! + 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for i in dict {\n        if i.value == 1 {\n            sum += i.key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmpwn9ra3n5/tmpwn9ra3n5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ade722f0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ade71fe7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ade71fe7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ade71fe67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwn9ra3n5                        0x0000558c3b3f77ce <unavailable> + 6094\n5    libc.so.6                          0x00002ade724dc460 __libc_start_main + 245\n6    tmpwn9ra3n5                        0x0000558c3b3f7409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({ $0 == i }).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmp_7xrqk4x/tmp_7xrqk4x.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b27e8502c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b27e81f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b27e81f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b27e81f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_7xrqk4x                        0x0000560d0f28c5be <unavailable> + 5566\n5    libc.so.6                          0x00002b27e86ee460 __libc_start_main + 245\n6    tmp_7xrqk4x                        0x0000560d0f28c1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var flag = true\n        for j in 0..<arr.count {\n            if i != j && arr[i] == arr[j] {\n                flag = false\n                break\n            }\n        }\n        if flag {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpx48yn0wo/tmpx48yn0wo.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba64fa23c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba64f71ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba64f71a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba64f7197b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx48yn0wo                        0x0000560d3f98e56e <unavailable> + 5486\n5    libc.so.6                          0x00002ba64fc0f460 __libc_start_main + 245\n6    tmpx48yn0wo                        0x0000560d3f98e1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var is_repeated = false\n        for j in 0..<arr.count {\n            if i != j && arr[i] == arr[j] {\n                is_repeated = true\n                break\n            }\n        }\n        if !is_repeated {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpy8raxapv/tmpy8raxapv.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7f337d2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7f334c9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7f334c9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7f334c87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy8raxapv                        0x000055d93090c56e <unavailable> + 5486\n5    libc.so.6                          0x00002b7f339be460 __libc_start_main + 245\n6    tmpy8raxapv                        0x000055d93090c1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var flag = 0\n        for j in 0..<arr.count {\n            if arr[i] == arr[j] && i != j {\n                flag = 1\n                break\n            }\n        }\n        if flag == 0 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmpxhz525f3/tmpxhz525f3.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b52e8afac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b52e87f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b52e87f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b52e87f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxhz525f3                        0x000055891eb6a56e <unavailable> + 5486\n5    libc.so.6                          0x00002b52e8ce6460 __libc_start_main + 245\n6    tmpxhz525f3                        0x000055891eb6a1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpbpup8u66/tmpbpup8u66.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9fc331dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9fc3014b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9fc3014988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9fc30137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbpup8u66                        0x000055f115c317ce <unavailable> + 6094\n5    libc.so.6                          0x00002b9fc3509460 __libc_start_main + 245\n6    tmpbpup8u66                        0x000055f115c31409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var flag = 0\n        for j in 0..<i {\n            if arr[i] == arr[j] {\n                flag = 1\n                break\n            }\n        }\n        if flag == 0 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var set = Set<Int>()\n    var sum = 0\n    for i in arr {\n        if !set.contains(i) {\n            set.insert(i)\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    \n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if !arr.contains(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp7oodqhmb/tmp7oodqhmb.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9165b7fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9165876b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9165876988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b91658757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7oodqhmb                        0x000055b0733824fe <unavailable> + 5374\n5    libc.so.6                          0x00002b9165d6b460 __libc_start_main + 245\n6    tmp7oodqhmb                        0x000055b073382139 <unavailable> + 4409\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({ $0 == i }).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmp_7xrqk4x/tmp_7xrqk4x.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b27e8502c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b27e81f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b27e81f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b27e81f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_7xrqk4x                        0x0000560d0f28c5be <unavailable> + 5566\n5    libc.so.6                          0x00002b27e86ee460 __libc_start_main + 245\n6    tmp_7xrqk4x                        0x0000560d0f28c1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var seen = Set<Int>()\n    for i in arr {\n        if !seen.contains(i) {\n            sum += i\n            seen.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({ $0 == i }).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmp_7xrqk4x/tmp_7xrqk4x.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b27e8502c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b27e81f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b27e81f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b27e81f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_7xrqk4x                        0x0000560d0f28c5be <unavailable> + 5566\n5    libc.so.6                          0x00002b27e86ee460 __libc_start_main + 245\n6    tmp_7xrqk4x                        0x0000560d0f28c1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var is_repeated = false\n        for j in 0..<arr.count {\n            if i != j && arr[i] == arr[j] {\n                is_repeated = true\n                break\n            }\n        }\n        if !is_repeated {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpy8raxapv/tmpy8raxapv.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7f337d2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7f334c9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7f334c9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7f334c87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy8raxapv                        0x000055d93090c56e <unavailable> + 5486\n5    libc.so.6                          0x00002b7f339be460 __libc_start_main + 245\n6    tmpy8raxapv                        0x000055d93090c1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmp85bomwxo/tmp85bomwxo.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b60f2202c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b60f1ef9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b60f1ef9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b60f1ef87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp85bomwxo                        0x00005562d933581e <unavailable> + 6174\n5    libc.so.6                          0x00002b60f23ee460 __libc_start_main + 245\n6    tmp85bomwxo                        0x00005562d9335459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr_set = Set<Int>()\n    for i in arr {\n        if !arr_set.contains(i) {\n            sum += i\n            arr_set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var is_repeated = false\n        for j in 0..<arr.count {\n            if i != j && arr[i] == arr[j] {\n                is_repeated = true\n                break\n            }\n        }\n        if !is_repeated {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpy8raxapv/tmpy8raxapv.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7f337d2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7f334c9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7f334c9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7f334c87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy8raxapv                        0x000055d93090c56e <unavailable> + 5486\n5    libc.so.6                          0x00002b7f339be460 __libc_start_main + 245\n6    tmpy8raxapv                        0x000055d93090c1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var is_repeated = false\n        for j in 0..<arr.count {\n            if i != j && arr[i] == arr[j] {\n                is_repeated = true\n                break\n            }\n        }\n        if !is_repeated {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpy8raxapv/tmpy8raxapv.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7f337d2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7f334c9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7f334c9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7f334c87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy8raxapv                        0x000055d93090c56e <unavailable> + 5486\n5    libc.so.6                          0x00002b7f339be460 __libc_start_main + 245\n6    tmpy8raxapv                        0x000055d93090c1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int:Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr_set = Set<Int>()\n    for i in arr {\n        if !arr_set.contains(i) {\n            sum += i\n            arr_set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for i in dict {\n        if i.value == 1 {\n            sum += i.key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmp0mwlk0cl/tmp0mwlk0cl.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b069f593c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b069f28ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b069f28a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b069f2897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0mwlk0cl                        0x0000559fda0777ce <unavailable> + 6094\n5    libc.so.6                          0x00002b069f77f460 __libc_start_main + 245\n6    tmp0mwlk0cl                        0x0000559fda077409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmp85bomwxo/tmp85bomwxo.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b60f2202c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b60f1ef9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b60f1ef9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b60f1ef87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp85bomwxo                        0x00005562d933581e <unavailable> + 6174\n5    libc.so.6                          0x00002b60f23ee460 __libc_start_main + 245\n6    tmp85bomwxo                        0x00005562d9335459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if !arr.contains(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp7oodqhmb/tmp7oodqhmb.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9165b7fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9165876b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9165876988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b91658757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7oodqhmb                        0x000055b0733824fe <unavailable> + 5374\n5    libc.so.6                          0x00002b9165d6b460 __libc_start_main + 245\n6    tmp7oodqhmb                        0x000055b073382139 <unavailable> + 4409\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if !arr.contains(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp7oodqhmb/tmp7oodqhmb.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9165b7fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9165876b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9165876988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b91658757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7oodqhmb                        0x000055b0733824fe <unavailable> + 5374\n5    libc.so.6                          0x00002b9165d6b460 __libc_start_main + 245\n6    tmp7oodqhmb                        0x000055b073382139 <unavailable> + 4409\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if !arr.contains(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp7oodqhmb/tmp7oodqhmb.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9165b7fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9165876b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9165876988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b91658757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7oodqhmb                        0x000055b0733824fe <unavailable> + 5374\n5    libc.so.6                          0x00002b9165d6b460 __libc_start_main + 245\n6    tmp7oodqhmb                        0x000055b073382139 <unavailable> + 4409\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({ $0 == i }).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmp_7xrqk4x/tmp_7xrqk4x.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b27e8502c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b27e81f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b27e81f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b27e81f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_7xrqk4x                        0x0000560d0f28c5be <unavailable> + 5566\n5    libc.so.6                          0x00002b27e86ee460 __libc_start_main + 245\n6    tmp_7xrqk4x                        0x0000560d0f28c1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr = arr\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] == arr[j] {\n                arr[i] = 0\n                arr[j] = 0\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        sum += arr[i]\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmp2fpagulb/tmp2fpagulb.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b80e1a74c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b80e176bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b80e176b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b80e176a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2fpagulb                        0x000056339865c6b7 <unavailable> + 5815\n5    libc.so.6                          0x00002b80e1c60460 __libc_start_main + 245\n6    tmp2fpagulb                        0x000056339865c1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if !arr.contains(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp7oodqhmb/tmp7oodqhmb.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9165b7fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9165876b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9165876988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b91658757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7oodqhmb                        0x000055b0733824fe <unavailable> + 5374\n5    libc.so.6                          0x00002b9165d6b460 __libc_start_main + 245\n6    tmp7oodqhmb                        0x000055b073382139 <unavailable> + 4409\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] != nil {\n            dict[i]! += 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmp7eow13uk/tmp7eow13uk.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b455e651c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b455e348b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b455e348988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b455e3477b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7eow13uk                        0x00005631f0a2c81e <unavailable> + 6174\n5    libc.so.6                          0x00002b455e83d460 __libc_start_main + 245\n6    tmp7eow13uk                        0x00005631f0a2c459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpbpup8u66/tmpbpup8u66.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9fc331dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9fc3014b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9fc3014988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9fc30137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbpup8u66                        0x000055f115c317ce <unavailable> + 6094\n5    libc.so.6                          0x00002b9fc3509460 __libc_start_main + 245\n6    tmpbpup8u66                        0x000055f115c31409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for num in arr {\n        if !set.contains(num) {\n            sum += num\n            set.insert(num)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({ $0 == i }).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmp_7xrqk4x/tmp_7xrqk4x.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b27e8502c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b27e81f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b27e81f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b27e81f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_7xrqk4x                        0x0000560d0f28c5be <unavailable> + 5566\n5    libc.so.6                          0x00002b27e86ee460 __libc_start_main + 245\n6    tmp_7xrqk4x                        0x0000560d0f28c1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpbpup8u66/tmpbpup8u66.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9fc331dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9fc3014b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9fc3014988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9fc30137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbpup8u66                        0x000055f115c317ce <unavailable> + 6094\n5    libc.so.6                          0x00002b9fc3509460 __libc_start_main + 245\n6    tmpbpup8u66                        0x000055f115c31409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if !arr.contains(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp7oodqhmb/tmp7oodqhmb.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9165b7fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9165876b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9165876988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b91658757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7oodqhmb                        0x000055b0733824fe <unavailable> + 5374\n5    libc.so.6                          0x00002b9165d6b460 __libc_start_main + 245\n6    tmp7oodqhmb                        0x000055b073382139 <unavailable> + 4409\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict: [Int: Int] = [:]\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if set.contains(i) {\n            sum -= i\n        } else {\n            sum += i\n        }\n        set.insert(i)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmpbvlpkzdj/tmpbvlpkzdj.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2a9d1d6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2a9cecdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2a9cecd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2a9cecc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbvlpkzdj                        0x0000555b493955ee <unavailable> + 5614\n5    libc.so.6                          0x00002b2a9d3c2460 __libc_start_main + 245\n6    tmpbvlpkzdj                        0x0000555b49395229 <unavailable> + 4649\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var seen = [Int: Bool]()\n    for i in arr {\n        if seen[i] == nil {\n            sum += i\n            seen[i] = true\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict: [Int: Int] = [:]\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmp73aq4jty/tmp73aq4jty.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3b8b9aec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3b8b6a5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3b8b6a5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3b8b6a47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp73aq4jty                        0x0000562d284c77ee <unavailable> + 6126\n5    libc.so.6                          0x00002b3b8bb9a460 __libc_start_main + 245\n6    tmp73aq4jty                        0x0000562d284c7429 <unavailable> + 5161\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var flag = 0\n        for j in 0..<arr.count {\n            if arr[i] == arr[j] && i != j {\n                flag = 1\n                break\n            }\n        }\n        if flag == 0 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmpxhz525f3/tmpxhz525f3.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b52e8afac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b52e87f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b52e87f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b52e87f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxhz525f3                        0x000055891eb6a56e <unavailable> + 5486\n5    libc.so.6                          0x00002b52e8ce6460 __libc_start_main + 245\n6    tmpxhz525f3                        0x000055891eb6a1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        sum += i\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmpesedjsc4/tmpesedjsc4.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3c4e7d2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3c4e4c9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3c4e4c9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3c4e4c87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpesedjsc4                        0x000055a29990e49e <unavailable> + 5278\n5    libc.so.6                          0x00002b3c4e9be460 __libc_start_main + 245\n6    tmpesedjsc4                        0x000055a29990e0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr_set = Set<Int>()\n    for i in arr {\n        if !arr_set.contains(i) {\n            sum += i\n            arr_set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpbpup8u66/tmpbpup8u66.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9fc331dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9fc3014b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9fc3014988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9fc30137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbpup8u66                        0x000055f115c317ce <unavailable> + 6094\n5    libc.so.6                          0x00002b9fc3509460 __libc_start_main + 245\n6    tmpbpup8u66                        0x000055f115c31409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            set.insert(i)\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if let _ = dict[i] {\n            dict[i] = dict[i]! + 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmpfonrgdke/tmpfonrgdke.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3caa76bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3caa462b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3caa462988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3caa4617b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfonrgdke                        0x000055d17c3287ce <unavailable> + 6094\n5    libc.so.6                          0x00002b3caa957460 __libc_start_main + 245\n6    tmpfonrgdke                        0x000055d17c328409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if !arr.contains(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp7oodqhmb/tmp7oodqhmb.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9165b7fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9165876b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9165876988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b91658757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7oodqhmb                        0x000055b0733824fe <unavailable> + 5374\n5    libc.so.6                          0x00002b9165d6b460 __libc_start_main + 245\n6    tmp7oodqhmb                        0x000055b073382139 <unavailable> + 4409\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if let _ = dict[i] {\n            dict[i] = dict[i]! + 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmpfonrgdke/tmpfonrgdke.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3caa76bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3caa462b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3caa462988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3caa4617b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfonrgdke                        0x000055d17c3287ce <unavailable> + 6094\n5    libc.so.6                          0x00002b3caa957460 __libc_start_main + 245\n6    tmpfonrgdke                        0x000055d17c328409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr_set = Set<Int>()\n    for i in arr {\n        if !arr_set.contains(i) {\n            sum += i\n            arr_set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        var count = 0\n        for j in arr {\n            if i == j {\n                count += 1\n            }\n        }\n        if count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmp4j7kf3ia/tmp4j7kf3ia.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aab3fef2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aab3fbe9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aab3fbe9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aab3fbe87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4j7kf3ia                        0x000056156b87449e <unavailable> + 5278\n5    libc.so.6                          0x00002aab400de460 __libc_start_main + 245\n6    tmp4j7kf3ia                        0x000056156b8740d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpbpup8u66/tmpbpup8u66.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9fc331dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9fc3014b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9fc3014988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9fc30137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbpup8u66                        0x000055f115c317ce <unavailable> + 6094\n5    libc.so.6                          0x00002b9fc3509460 __libc_start_main + 245\n6    tmpbpup8u66                        0x000055f115c31409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict: [Int: Int] = [:]\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmpgjjt8k8g/tmpgjjt8k8g.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4de87d9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4de84d0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4de84d0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4de84cf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgjjt8k8g                        0x000055c2bddc283e <unavailable> + 6206\n5    libc.so.6                          0x00002b4de89c5460 __libc_start_main + 245\n6    tmpgjjt8k8g                        0x000055c2bddc2479 <unavailable> + 5241\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var flag = 0\n        for j in 0..<arr.count {\n            if i != j && arr[i] == arr[j] {\n                flag = 1\n                break\n            }\n        }\n        if flag == 0 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmpkvjluwq2/tmpkvjluwq2.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add54ab7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add547aeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add547ae988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add547ad7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkvjluwq2                        0x000056178bd7256e <unavailable> + 5486\n5    libc.so.6                          0x00002add54ca3460 __libc_start_main + 245\n6    tmpkvjluwq2                        0x000056178bd721a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if !arr.contains(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp7oodqhmb/tmp7oodqhmb.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9165b7fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9165876b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9165876988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b91658757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7oodqhmb                        0x000055b0733824fe <unavailable> + 5374\n5    libc.so.6                          0x00002b9165d6b460 __libc_start_main + 245\n6    tmp7oodqhmb                        0x000055b073382139 <unavailable> + 4409\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int:Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if !arr.contains(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp7oodqhmb/tmp7oodqhmb.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9165b7fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9165876b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9165876988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b91658757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7oodqhmb                        0x000055b0733824fe <unavailable> + 5374\n5    libc.so.6                          0x00002b9165d6b460 __libc_start_main + 245\n6    tmp7oodqhmb                        0x000055b073382139 <unavailable> + 4409\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({ $0 == i }).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmp_7xrqk4x/tmp_7xrqk4x.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b27e8502c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b27e81f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b27e81f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b27e81f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_7xrqk4x                        0x0000560d0f28c5be <unavailable> + 5566\n5    libc.so.6                          0x00002b27e86ee460 __libc_start_main + 245\n6    tmp_7xrqk4x                        0x0000560d0f28c1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpbpup8u66/tmpbpup8u66.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9fc331dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9fc3014b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9fc3014988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9fc30137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbpup8u66                        0x000055f115c317ce <unavailable> + 6094\n5    libc.so.6                          0x00002b9fc3509460 __libc_start_main + 245\n6    tmpbpup8u66                        0x000055f115c31409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmp85bomwxo/tmp85bomwxo.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b60f2202c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b60f1ef9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b60f1ef9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b60f1ef87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp85bomwxo                        0x00005562d933581e <unavailable> + 6174\n5    libc.so.6                          0x00002b60f23ee460 __libc_start_main + 245\n6    tmp85bomwxo                        0x00005562d9335459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var i = 0\n    while i < arr.count {\n        var j = i + 1\n        while j < arr.count {\n            if arr[i] == arr[j] {\n                break\n            }\n            j += 1\n        }\n        if j == arr.count {\n            sum += arr[i]\n        }\n        i += 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmp85bomwxo/tmp85bomwxo.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b60f2202c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b60f1ef9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b60f1ef9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b60f1ef87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp85bomwxo                        0x00005562d933581e <unavailable> + 6174\n5    libc.so.6                          0x00002b60f23ee460 __libc_start_main + 245\n6    tmp85bomwxo                        0x00005562d9335459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if !arr.contains(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp7oodqhmb/tmp7oodqhmb.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9165b7fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9165876b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9165876988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b91658757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7oodqhmb                        0x000055b0733824fe <unavailable> + 5374\n5    libc.so.6                          0x00002b9165d6b460 __libc_start_main + 245\n6    tmp7oodqhmb                        0x000055b073382139 <unavailable> + 4409\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr = arr\n    for i in 0..<arr.count {\n        var j = i + 1\n        while j < arr.count {\n            if arr[i] == arr[j] {\n                arr.remove(at: j)\n            } else {\n                j += 1\n            }\n        }\n        sum += arr[i]\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1a64cd1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1a649c8561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b1a649c8286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b1a649c813c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b1a649c7bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b1a647c8e83 <unavailable> + 188035\n6    tmpcfzink86                        0x0000562b2de57a8e <unavailable> + 6798\n7    tmpcfzink86                        0x0000562b2de57540 <unavailable> + 5440\n8    libc.so.6                          0x00002b1a64ebd460 __libc_start_main + 245\n9    tmpcfzink86                        0x0000562b2de571f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict: [Int: Int] = [:]\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmp73aq4jty/tmp73aq4jty.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3b8b9aec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3b8b6a5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3b8b6a5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3b8b6a47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp73aq4jty                        0x0000562d284c77ee <unavailable> + 6126\n5    libc.so.6                          0x00002b3b8bb9a460 __libc_start_main + 245\n6    tmp73aq4jty                        0x0000562d284c7429 <unavailable> + 5161\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for num in arr {\n        if !set.contains(num) {\n            sum += num\n            set.insert(num)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({ $0 == i }).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmp_7xrqk4x/tmp_7xrqk4x.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b27e8502c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b27e81f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b27e81f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b27e81f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_7xrqk4x                        0x0000560d0f28c5be <unavailable> + 5566\n5    libc.so.6                          0x00002b27e86ee460 __libc_start_main + 245\n6    tmp_7xrqk4x                        0x0000560d0f28c1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if !arr.contains(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp7oodqhmb/tmp7oodqhmb.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9165b7fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9165876b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9165876988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b91658757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7oodqhmb                        0x000055b0733824fe <unavailable> + 5374\n5    libc.so.6                          0x00002b9165d6b460 __libc_start_main + 245\n6    tmp7oodqhmb                        0x000055b073382139 <unavailable> + 4409\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if !arr.contains(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp7oodqhmb/tmp7oodqhmb.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9165b7fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9165876b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9165876988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b91658757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7oodqhmb                        0x000055b0733824fe <unavailable> + 5374\n5    libc.so.6                          0x00002b9165d6b460 __libc_start_main + 245\n6    tmp7oodqhmb                        0x000055b073382139 <unavailable> + 4409\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    for i in dict {\n        if i.value == 1 {\n            sum += i.key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmp0mwlk0cl/tmp0mwlk0cl.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b069f593c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b069f28ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b069f28a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b069f2897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0mwlk0cl                        0x0000559fda0777ce <unavailable> + 6094\n5    libc.so.6                          0x00002b069f77f460 __libc_start_main + 245\n6    tmp0mwlk0cl                        0x0000559fda077409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if !arr.contains(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp7oodqhmb/tmp7oodqhmb.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9165b7fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9165876b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9165876988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b91658757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7oodqhmb                        0x000055b0733824fe <unavailable> + 5374\n5    libc.so.6                          0x00002b9165d6b460 __libc_start_main + 245\n6    tmp7oodqhmb                        0x000055b073382139 <unavailable> + 4409\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var count = 0\n        for j in 0..<arr.count {\n            if arr[i] == arr[j] {\n                count += 1\n            }\n        }\n        if count == 1 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmptbdmwdsh/tmptbdmwdsh.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0df649cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0df6193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0df6193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0df61927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptbdmwdsh                        0x000055d104ba456e <unavailable> + 5486\n5    libc.so.6                          0x00002b0df6688460 __libc_start_main + 245\n6    tmptbdmwdsh                        0x000055d104ba41a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    \n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    \n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmpmamoy8rc/tmpmamoy8rc.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7b0dcacc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7b0d9a3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7b0d9a3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7b0d9a27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmamoy8rc                        0x000055b241e3f7ce <unavailable> + 6094\n5    libc.so.6                          0x00002b7b0de98460 __libc_start_main + 245\n6    tmpmamoy8rc                        0x000055b241e3f409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if !arr.contains(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp7oodqhmb/tmp7oodqhmb.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9165b7fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9165876b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9165876988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b91658757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7oodqhmb                        0x000055b0733824fe <unavailable> + 5374\n5    libc.so.6                          0x00002b9165d6b460 __libc_start_main + 245\n6    tmp7oodqhmb                        0x000055b073382139 <unavailable> + 4409\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr_set = Set<Int>()\n    for i in arr {\n        if !arr_set.contains(i) {\n            sum += i\n            arr_set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({ $0 == i }).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmp_7xrqk4x/tmp_7xrqk4x.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b27e8502c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b27e81f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b27e81f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b27e81f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_7xrqk4x                        0x0000560d0f28c5be <unavailable> + 5566\n5    libc.so.6                          0x00002b27e86ee460 __libc_start_main + 245\n6    tmp_7xrqk4x                        0x0000560d0f28c1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var is_repeated = false\n        for j in 0..<arr.count {\n            if i != j && arr[i] == arr[j] {\n                is_repeated = true\n                break\n            }\n        }\n        if !is_repeated {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpy8raxapv/tmpy8raxapv.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7f337d2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7f334c9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7f334c9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7f334c87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy8raxapv                        0x000055d93090c56e <unavailable> + 5486\n5    libc.so.6                          0x00002b7f339be460 __libc_start_main + 245\n6    tmpy8raxapv                        0x000055d93090c1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr_set = Set<Int>()\n    for i in arr {\n        if !arr_set.contains(i) {\n            sum += i\n            arr_set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({ $0 == i }).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmp_7xrqk4x/tmp_7xrqk4x.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b27e8502c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b27e81f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b27e81f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b27e81f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_7xrqk4x                        0x0000560d0f28c5be <unavailable> + 5566\n5    libc.so.6                          0x00002b27e86ee460 __libc_start_main + 245\n6    tmp_7xrqk4x                        0x0000560d0f28c1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if !arr.contains(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp7oodqhmb/tmp7oodqhmb.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9165b7fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9165876b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9165876988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b91658757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7oodqhmb                        0x000055b0733824fe <unavailable> + 5374\n5    libc.so.6                          0x00002b9165d6b460 __libc_start_main + 245\n6    tmp7oodqhmb                        0x000055b073382139 <unavailable> + 4409\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if let _ = dict[i] {\n            dict[i] = dict[i]! + 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            sum += key\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmpfonrgdke/tmpfonrgdke.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3caa76bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3caa462b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3caa462988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3caa4617b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfonrgdke                        0x000055d17c3287ce <unavailable> + 6094\n5    libc.so.6                          0x00002b3caa957460 __libc_start_main + 245\n6    tmpfonrgdke                        0x000055d17c328409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if set.contains(i) {\n            sum -= i\n        } else {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmp5bzpn_f4/tmp5bzpn_f4.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad8ed7c2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad8ed4b9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad8ed4b9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad8ed4b87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5bzpn_f4                        0x000055bb3d9435ee <unavailable> + 5614\n5    libc.so.6                          0x00002ad8ed9ae460 __libc_start_main + 245\n6    tmp5bzpn_f4                        0x000055bb3d943229 <unavailable> + 4649\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if !arr.contains(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp7oodqhmb/tmp7oodqhmb.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9165b7fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9165876b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9165876988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b91658757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7oodqhmb                        0x000055b0733824fe <unavailable> + 5374\n5    libc.so.6                          0x00002b9165d6b460 __libc_start_main + 245\n6    tmp7oodqhmb                        0x000055b073382139 <unavailable> + 4409\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var is_repeated = false\n        for j in 0..<arr.count {\n            if i != j && arr[i] == arr[j] {\n                is_repeated = true\n                break\n            }\n        }\n        if !is_repeated {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpy8raxapv/tmpy8raxapv.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7f337d2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7f334c9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7f334c9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7f334c87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy8raxapv                        0x000055d93090c56e <unavailable> + 5486\n5    libc.so.6                          0x00002b7f339be460 __libc_start_main + 245\n6    tmpy8raxapv                        0x000055d93090c1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in arr {\n        if dict[i] == nil {\n            dict[i] = 1\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var arr_set = Set<Int>()\n    for i in arr {\n        if !arr_set.contains(i) {\n            sum += i\n            arr_set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for num in arr {\n        if arr.filter({$0 == num}).count == 1 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmpy28xi_wc/tmpy28xi_wc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b86e54cbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b86e51c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b86e51c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b86e51c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy28xi_wc                        0x0000555a483855be <unavailable> + 5566\n5    libc.so.6                          0x00002b86e56b7460 __libc_start_main + 245\n6    tmpy28xi_wc                        0x0000555a483851f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if !arr.contains(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmp7oodqhmb/tmp7oodqhmb.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9165b7fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9165876b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9165876988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b91658757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7oodqhmb                        0x000055b0733824fe <unavailable> + 5374\n5    libc.so.6                          0x00002b9165d6b460 __libc_start_main + 245\n6    tmp7oodqhmb                        0x000055b073382139 <unavailable> + 4409\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.filter({$0 == i}).count == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "tmpt00k0j4j/tmpt00k0j4j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b901f83fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b901f536b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b901f536988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b901f5357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt00k0j4j                        0x00005567f88fe5be <unavailable> + 5566\n5    libc.so.6                          0x00002b901fa2b460 __libc_start_main + 245\n6    tmpt00k0j4j                        0x00005567f88fe1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var set = Set<Int>()\n    for i in arr {\n        if !set.contains(i) {\n            sum += i\n            set.insert(i)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1665509795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of non-repeated elements in a given array.\nfunc find_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var flag = 0\n        for j in 0..<arr.count {\n            if arr[i] == arr[j] {\n                flag += 1\n            }\n        }\n        if flag == 1 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)\nassert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)\nassert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "tmpm8azs3gp/tmpm8azs3gp.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afafc9cec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afafc6c5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afafc6c5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afafc6c47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm8azs3gp                        0x00005629a62aa56e <unavailable> + 5486\n5    libc.so.6                          0x00002afafcbba460 __libc_start_main + 245\n6    tmpm8azs3gp                        0x00005629a62aa1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}