{
  "name": "mbpp_733_find_first_occurrence",
  "language": "swift",
  "prompt": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var left = 0\n    var right = A.count - 1\n    var result = -1\n    while left <= right {\n        let mid = (left + right) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        \n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var left = 0\n    var right = A.count - 1\n    var result = -1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var left = 0\n    var right = A.count - 1\n    var result = -1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var start = 0\n    var end = A.count - 1\n    var result = -1\n    while start <= end {\n        let mid = start + (end - start) / 2\n        if A[mid] == x {\n            result = mid\n            end = mid - 1\n        } else if A[mid] > x {\n            end = mid - 1\n        } else {\n            start = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var left = 0\n    var right = A.count - 1\n    var result = -1\n    while left <= right {\n        let mid = (left + right) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var start = 0\n    var end = A.count - 1\n    var result = -1\n    while start <= end {\n        let mid = start + (end - start) / 2\n        if A[mid] == x {\n            result = mid\n            end = mid - 1\n        } else if A[mid] > x {\n            end = mid - 1\n        } else {\n            start = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var left = 0\n    var right = A.count - 1\n    var result = -1\n    \n    while left <= right {\n        let mid = left + (right - left) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var left = 0\n    var right = A.count - 1\n    var result = -1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var start = 0\n    var end = A.count - 1\n    var result = -1\n    while start <= end {\n        let mid = start + (end - start) / 2\n        if A[mid] == x {\n            result = mid\n            end = mid - 1\n        } else if A[mid] < x {\n            start = mid + 1\n        } else {\n            end = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if x == A[mid] {\n            result = mid\n            high = mid - 1\n        } else if x < A[mid] {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0, high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] < x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var left = 0\n    var right = A.count - 1\n    var result = -1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if x < A[mid] {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = (low + high) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var left = 0\n    var right = A.count - 1\n    var result = -1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var left = 0\n    var right = A.count - 1\n    var result = -1\n    \n    while left <= right {\n        let mid = left + (right - left) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0, high = A.count - 1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            }\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        \n        if x == A[mid] {\n            result = mid\n            high = mid - 1\n        } else if x < A[mid] {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var start = 0\n    var end = A.count - 1\n    var result = -1\n    while start <= end {\n        let mid = start + (end - start) / 2\n        if A[mid] == x {\n            result = mid\n            end = mid - 1\n        } else if A[mid] > x {\n            end = mid - 1\n        } else {\n            start = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = (low + high) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if x == A[mid] {\n            result = mid\n            high = mid - 1\n        } else if x < A[mid] {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if x == A[mid] {\n            result = mid\n            high = mid - 1\n        } else if x < A[mid] {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var left = 0\n    var right = A.count - 1\n    var result = -1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var left = 0\n    var right = A.count - 1\n    var result = -1\n    while left <= right {\n        let mid = (left + right) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        \n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var l = 0\n    var r = A.count - 1\n    while l <= r {\n        let m = (l + r) / 2\n        if A[m] == x {\n            if m == 0 || A[m - 1] != x {\n                return m\n            }\n            r = m - 1\n        } else if A[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if x == A[mid] {\n            result = mid\n            high = mid - 1\n        } else if x < A[mid] {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var left = 0\n    var right = A.count - 1\n    var result = -1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var start = 0\n    var end = A.count - 1\n    var result = -1\n    \n    while start <= end {\n        let mid = start + (end - start) / 2\n        if A[mid] == x {\n            result = mid\n            end = mid - 1\n        } else if A[mid] < x {\n            start = mid + 1\n        } else {\n            end = mid - 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if x < A[mid] {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var start = 0\n    var end = A.count - 1\n    var result = -1\n    while start <= end {\n        let mid = start + (end - start) / 2\n        if A[mid] == x {\n            result = mid\n            end = mid - 1\n        } else if A[mid] > x {\n            end = mid - 1\n        } else {\n            start = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var left = 0\n    var right = A.count - 1\n    var result = -1\n    \n    while left <= right {\n        let mid = left + (right - left) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var left = 0\n    var right = A.count - 1\n    var result = -1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var left = 0\n    var right = A.count - 1\n    var result = -1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        \n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if x < A[mid] {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = (low + high) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var left = 0\n    var right = A.count - 1\n    var result = -1\n    \n    while left <= right {\n        let mid = (left + right) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = (low + high) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var left = 0\n    var right = A.count - 1\n    var result = -1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if x < A[mid] {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var left = 0\n    var right = A.count - 1\n    var result = -1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var l = 0\n    var r = A.count - 1\n    var m = 0\n    \n    while l <= r {\n        m = l + (r - l) / 2\n        if A[m] == x {\n            if m == 0 || A[m - 1] != x {\n                return m\n            } else {\n                r = m - 1\n            }\n        } else if A[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    \n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = (low + high) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var left = 0\n    var right = A.count - 1\n    var result = -1\n    \n    while left <= right {\n        let mid = left + (right - left) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = (low + high) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var left = 0\n    var right = A.count - 1\n    var result = -1\n    \n    while left <= right {\n        let mid = left + (right - left) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var left = 0\n    var right = A.count - 1\n    var result = -1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = (low + high) / 2\n        \n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if x < A[mid] {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var mid = 0\n    var result = -1\n    while low <= high {\n        mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var left = 0\n    var right = A.count - 1\n    var result = -1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var left = 0\n    var right = A.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                right = mid - 1\n            }\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var left = 0\n    var right = A.count - 1\n    var result = -1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var left = 0\n    var right = A.count - 1\n    var result = -1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        \n        if x == A[mid] {\n            result = mid\n            high = mid - 1\n        } else if x < A[mid] {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var start = 0\n    var end = A.count - 1\n    var result = -1\n    \n    while start <= end {\n        let mid = start + (end - start) / 2\n        if A[mid] == x {\n            result = mid\n            end = mid - 1\n        } else if A[mid] < x {\n            start = mid + 1\n        } else {\n            end = mid - 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var left = 0\n    var right = A.count - 1\n    var result = -1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var left = 0\n    var right = A.count - 1\n    var result = -1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}