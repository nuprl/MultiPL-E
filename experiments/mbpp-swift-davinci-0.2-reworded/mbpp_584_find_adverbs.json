{
  "name": "mbpp_584_find_adverbs",
  "language": "swift",
  "prompt": "\n/// Write a function to find the first adverb ending with ly and its positions in a given string.\nfunc find_adverbs(text: String) -> String {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_adverbs(text: \"Clearly, he has no excuse for such behavior.\") == \"0-7: Clearly\")\nassert(find_adverbs(text: \"Please handle the situation carefuly\") == \"28-36: carefuly\")\nassert(find_adverbs(text: \"Complete the task quickly\") == \"18-25: quickly\")",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let words = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"\\(word) at \\(index) \"\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(adverbs_positions.first!)\"",
    "    let words = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"\\(word) at \\(index) \"\n        }\n    }\n    return result",
    "    let words = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"The first adverb is \\(word) at position \\(index)\"\n            break\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.isEmpty ? \"No adverbs found\" : adverbs.joined(separator: \", \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    var result = \"\"\n    for adverb in adverbs {\n        let index = text.range(of: adverb)!.lowerBound\n        result += \"Adverb: \\(adverb), position: \\(text.distance(from: text.startIndex, to: index))\\n\"\n    }\n    return result",
    "    let pattern = \"\\\\b[a-zA-Z]+ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"Found \\(text[range]) at \\(range.lowerBound) to \\(range.upperBound)\\n\"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    let words = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"\\(word) at index \\(index) \"\n        }\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n    let matches = regex.matches(in: text, options: [], range: range)\n    var result = \"\"\n    for match in matches {\n        let range = match.range(at: 0)\n        let start = text.index(text.startIndex, offsetBy: range.location)\n        let end = text.index(start, offsetBy: range.length)\n        result += String(text[start..<end]) + \" \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    var result = \"\"\n    for (index, adverb) in adverbs.enumerated() {\n        result += \"Adverb \\(index + 1): \\(adverb) - \\(text.range(of: adverb)!)\\n\"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w+ly\\\\b\", options: [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n    let matches = regex.matches(in: text, options: [], range: range)\n    let adverbs = matches.map { String(text[Range($0.range, in: text)!]) }\n    return adverbs.joined(separator: \", \")",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-zA-Z]+ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"Adverb: \\(text[range])\\n\"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    var result = \"\"\n    for adverb in adverbs {\n        result += \"\\(adverb) is at position \\(text.range(of: adverb)!.lowerBound) \\n\"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(adverbs_positions.first!)\"",
    "    let pattern = \"\\\\b\\\\w*ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) at \\(positions.first!)\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-zA-Z]*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += String(text[range]) + \" \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(adverbs_positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let pattern = \"\\\\b\\\\w*ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n    let matches = regex.matches(in: text, options: [], range: range)\n    var result = \"\"\n    for match in matches {\n        let range = match.range(at: 0)\n        let start = text.index(text.startIndex, offsetBy: range.location)\n        let end = text.index(start, offsetBy: range.length)\n        let adverb = text[start..<end]\n        result += \"\\(adverb) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return adverbs.isEmpty ? \"No adverbs found\" : \"\\(adverbs.first!) at \\(positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) at \\(positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverb = adverbs.first ?? \"\"\n    let positions = text.components(separatedBy: \" \").enumerated().filter { $0.element == adverb }.map { $0.offset }\n    return \"\\(adverb) \\(positions)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let pattern = \"\\\\b\\\\w*ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += String(text[range]) + \" \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(adverbs_positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(adverbs_positions.first!)\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w+ly\\\\b\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range, in: text)!])\n    }.joined(separator: \", \")",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return \"\\(adverbs)\"",
    "    let pattern = \"\\\\b\\\\w*ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += String(text[range]) + \" \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    let words = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"\\(word) at position \\(index) \"\n        }\n    }\n    return result",
    "    let words = text.components(separatedBy: \" \")\n    var adverbs = [String]()\n    var positions = [Int]()\n    var count = 0\n    for word in words {\n        if word.hasSuffix(\"ly\") {\n            adverbs.append(word)\n            positions.append(count)\n        }\n        count += 1\n    }\n    return \"Adverbs: \\(adverbs) \\nPositions: \\(positions)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \", \")",
    "    let words = text.components(separatedBy: \" \")\n    var adverbs = [String]()\n    var positions = [Int]()\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            adverbs.append(word)\n            positions.append(index)\n        }\n    }\n    return \"Adverbs: \\(adverbs) \\nPositions: \\(positions)\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += String(text[range]) + \" \"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    var result = \"\"\n    let words = text.components(separatedBy: \" \")\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result = \"The first adverb ending with ly is \\(word) and it is at position \\(index)\"\n            break\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    var result = \"\"\n    for match in matches {\n        result += \"\\(text[Range(match.range, in: text)!]) \"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-zA-Z]+ly\\\\b\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"(?<=\\\\s|^)(\\\\w+ly)(?=\\\\s|$)\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let word = (text as NSString).substring(with: match.range)\n        result += \"\\(word) \"\n    }\n    return result",
    "    var result = \"\"\n    let pattern = \"\\\\b[a-zA-Z]+ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += String(text[range]) + \" \"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)?.lowerBound.encodedOffset }\n    return \"\\(adverbs) \\(positions)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"The first adverb ending with ly is \\(adverbs[0]) and it's position is \\(adverbs_positions[0])\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    let adverbs_positions_str = adverbs_positions.map { String(text.distance(from: text.startIndex, to: $0)) }\n    return \"\\(adverbs.first!) \\(adverbs_positions_str.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { (word) -> Bool in\n        return word.hasSuffix(\"ly\")\n    }\n    return adverbs.joined(separator: \" \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs) \\(positions)\"",
    "    return \"\"",
    "    var result = \"\"\n    let words = text.components(separatedBy: \" \")\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"\\(word) \\(index) \"\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    var result = \"\"\n    for adverb in adverbs {\n        result += \"\\(adverb) \\(text.range(of: adverb)!)\\n\"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, adverb) in adverbs.enumerated() {\n        if adverb.hasSuffix(\"ly\") {\n            result += \"The adverb is \\(adverb) and its position is \\(index + 1)\\n\"\n        }\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverb = adverbs.first ?? \"\"\n    return \"\\(adverb) \\(text.range(of: adverb)!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return adverbs.isEmpty ? \"There are no adverbs in the text.\" : \"The first adverb is \\(adverbs[0]) and it starts at position \\(positions[0]).\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound.encodedOffset }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    let words = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"Word: \\(word), Position: \\(index)\\n\"\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    var result = \"\"\n    let words = text.components(separatedBy: \" \")\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result = \"The first adverb ending with ly is \\(word) at position \\(index + 1)\"\n            break\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs) \\(adverbs_positions)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbsWithPosition = adverbs.enumerated().map { \"\\($0.element) at position \\($0.offset)\" }\n    return adverbsWithPosition.joined(separator: \", \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(adverbs_positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [.caseInsensitive])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result.append(\"\\(text[range]) \")\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \", \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs) \\(adverbs_positions)\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n    let matches = regex.matches(in: text, options: [], range: range)\n    var result = \"\"\n    for match in matches {\n        let range = match.range(at: 0)\n        let start = text.index(text.startIndex, offsetBy: range.location)\n        let end = text.index(start, offsetBy: range.length)\n        let adverb = String(text[start..<end])\n        result += \"\\(adverb) \\(range.location) \"\n    }\n    return result",
    "    let words = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"The first adverb ending with ly is \\(word) at position \\(index + 1).\\n\"\n            break\n        }\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\w+ly\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let pattern = \"\\\\b\\\\w*ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs) \\(positions)\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"The first adverb is \\(adverbs[0]) and its position is \\(adverbs_positions[0])\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-zA-Z]+ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs) \\(positions)\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    var result = \"\"\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-zA-Z]+ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += String(text[range]) + \" \"\n    }\n    return result",
    "    let words = text.components(separatedBy: \" \")\n    var adverbs = [String]()\n    var positions = [Int]()\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            adverbs.append(word)\n            positions.append(index)\n        }\n    }\n    return \"Adverbs: \\(adverbs) \\nPositions: \\(positions)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \",\")",
    "    var result = \"\"\n    let words = text.components(separatedBy: \" \")\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result = \"The first adverb ending with ly is \\(word) and its position is \\(index)\"\n            break\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"Adverbs: \\(adverbs), positions: \\(adverbs_positions)\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n    let matches = regex.matches(in: text, options: [], range: range)\n    var result = \"\"\n    for match in matches {\n        let range = match.range(at: 0)\n        let start = text.index(text.startIndex, offsetBy: range.location)\n        let end = text.index(start, offsetBy: range.length)\n        result += String(text[start..<end]) + \" \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    guard let first = adverbs.first else { return \"No adverbs found\" }\n    let positions = text.components(separatedBy: \" \").enumerated().filter { $0.element == first }\n    return \"The first adverb is \\(first) and it is found at positions \\(positions)\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)?.lowerBound.encodedOffset }\n    return \"\\(adverbs) \\(positions)\"",
    "    let words = text.components(separatedBy: \" \")\n    var adverbs = [String]()\n    var positions = [Int]()\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            adverbs.append(word)\n            positions.append(index)\n        }\n    }\n    return \"Adverbs: \\(adverbs) \\nPositions: \\(positions)\"",
    "    var result = \"\"\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += String(text[range]) + \" \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    var result = \"\"\n    for adverb in adverbs {\n        result += \"\\(adverb) \\(text.range(of: adverb)!)\\n\"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs) \\(positions)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(adverbs_positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs) \\(positions)\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-zA-Z]*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) at \\(positions.first!)\"",
    "    let pattern = \"\\\\b\\\\w*ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += String(text[range]) + \" \"\n    }\n    return result",
    "    let words = text.components(separatedBy: \" \")\n    var adverbs = [String]()\n    var positions = [Int]()\n    var result = \"\"\n    \n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            adverbs.append(word)\n            positions.append(index)\n        }\n    }\n    \n    if adverbs.count > 0 {\n        result = \"The first adverb is \\(adverbs[0]) and its position is \\(positions[0])\"\n    } else {\n        result = \"There are no adverbs in the text.\"\n    }\n    \n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) at \\(positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w+ly\\\\b\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, adverb) in adverbs.enumerated() {\n        if adverb.hasSuffix(\"ly\") {\n            result = \"The first adverb ending with ly is \\(adverb) and its position is \\(index)\"\n            break\n        }\n    }\n    return result",
    "    let words = text.components(separatedBy: \" \")\n    var adverbs = [String]()\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            adverbs.append(\"\\(word) at position \\(index)\")\n        }\n    }\n    return adverbs.joined(separator: \", \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverb = adverbs.first ?? \"\"\n    let positions = text.components(separatedBy: \" \").enumerated().filter { $0.element == adverb }.map { $0.offset }\n    return \"Adverb: \\(adverb), Positions: \\(positions)\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \", \")",
    "    var result = \"\"\n    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return adverbs.isEmpty ? \"No adverbs found\" : \"\\(adverbs.first!) is at position \\(positions.first!)\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"Found \\(text[range]) at \\(range.lowerBound) - \\(range.upperBound)\\n\"\n    }\n    return result",
    "    var result = \"\"\n    let words = text.components(separatedBy: \" \")\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result = \"\\(word) at position \\(index)\"\n            break\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    let words = text.components(separatedBy: \" \")\n    var adverbs = [String]()\n    var positions = [Int]()\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            adverbs.append(word)\n            positions.append(index)\n        }\n    }\n    return \"The adverbs are \\(adverbs) and their positions are \\(positions)\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let pattern = \"\\\\b\\\\w*ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"Found \\(text[range]) at \\(range.lowerBound) to \\(range.upperBound)\\n\"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs) \\(adverbs_positions)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let result = adverbs.map { \"\\($0) at position \\(text.range(of: $0)?.lowerBound ?? text.startIndex)\" }\n    return result.joined(separator: \", \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \", \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let pattern = \"\\\\b\\\\w*ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        result += (text as NSString).substring(with: match.range) + \" \"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        result += (text as NSString).substring(with: match.range) + \" \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let pattern = \"\\\\b\\\\w*ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let words = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result = \"The first adverb ending with ly is \\(word) at position \\(index)\"\n            break\n        }\n    }\n    return result",
    "    let pattern = \"\\\\b[a-zA-Z]*ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let words = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result = \"\\(word) \\(index)\"\n            break\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    var result = \"\"\n    for adverb in adverbs {\n        result += \"\\(adverb) \\(text.range(of: adverb)!)\\n\"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b[a-zA-Z]+ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    let result = matches.map {\n        return (text as NSString).substring(with: $0.range)\n    }.joined(separator: \" \")\n    return result",
    "    var result = \"\"\n    let words = text.components(separatedBy: \" \")\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"\\(word) \\(index) \"\n        }\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    let words = text.components(separatedBy: \" \")\n    var adverbs = [String]()\n    var positions = [Int]()\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            adverbs.append(word)\n            positions.append(index)\n        }\n    }\n    return \"The first adverb ending with ly is \\(adverbs[0]) and its position is \\(positions[0])\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"Adverbs: \\(adverbs)\\nPositions: \\(adverbs_positions)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)?.lowerBound.encodedOffset }\n    return \"\\(adverbs) \\(adverbs_positions)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound.encodedOffset }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return adverbs.isEmpty ? \"No adverbs found\" : \"\\(adverbs.joined(separator: \", \")) at \\(positions.map { text.distance(from: text.startIndex, to: $0) }.joined(separator: \", \"))\"",
    "    var result = \"\"\n    let adverbs = text.components(separatedBy: \" \")\n    for adverb in adverbs {\n        if adverb.hasSuffix(\"ly\") {\n            result = adverb\n            break\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \", \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"Adverbs: \\(adverbs.joined(separator: \", \"))\\nPositions: \\(adverbs_positions)\"",
    "    let pattern = \"\\\\b[a-zA-Z]+ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += String(text[range]) + \" \"\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let words = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"\\(word) at \\(index) \"\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) at \\(positions.first!)\"",
    "    let words = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result = \"The first adverb ending with ly is \\(word) and it is at position \\(index)\"\n            break\n        }\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w+ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        result += (text as NSString).substring(with: match.range) + \" \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverb = adverbs.first ?? \"\"\n    let index = text.range(of: adverb)?.lowerBound ?? text.startIndex\n    return \"The first adverb ending with ly is \\(adverb) and its position is \\(text.distance(from: text.startIndex, to: index))\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0) }\n    return \"\\(adverbs.first!) \\(adverbs_positions.first!.lowerBound)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let adverbs_positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs) \\(adverbs_positions)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let pattern = \"\\\\b\\\\w*ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        result += (text as NSString).substring(with: match.range) + \" \"\n    }\n    return result",
    "    var result = \"\"\n    let words = text.components(separatedBy: \" \")\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"Adverb: \\(word) at position \\(index)\"\n            break\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += String(text[range]) + \" \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) at \\(positions.first!)\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let words = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"The first adverb ending with ly is \\(word) and its position is \\(index + 1)\\n\"\n            break\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"Adverbs: \\(adverbs)\\nPositions: \\(positions)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.isEmpty ? \"No adverbs found\" : \"\\(adverbs.first!) at position \\(text.range(of: adverbs.first!)!.lowerBound)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")",
    "    let words = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"The first adverb ending with ly is \\(word) at position \\(index)\"\n            break\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let result = adverbs.map { \"\\($0) - \\(text.range(of: $0)?.lowerBound ?? text.startIndex)\" }\n    return result.joined(separator: \", \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return adverbs.isEmpty ? \"No adverbs found\" : \"\\(adverbs.joined(separator: \", \")) at \\(positions.map { text.distance(from: text.startIndex, to: $0) }.joined(separator: \", \"))\"",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let words = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"Word: \\(word), Position: \\(index)\\n\"\n        }\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w+ly\\\\b\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range, in: text)!])\n    }.joined(separator: \" \")",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    var result = \"\"\n    for adverb in adverbs {\n        result += \"Adverb: \\(adverb) Position: \\(text.range(of: adverb)!)\\n\"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    var result = \"\"\n    let words = text.components(separatedBy: \" \")\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"The adverb is: \\(word) and it is at position \\(index + 1) \\n\"\n        }\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b[A-Za-z]*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    var result = \"\"\n    for match in matches {\n        result += (text as NSString).substring(with: match.range) + \" \"\n    }\n    return result",
    "    var result = \"\"\n    let words = text.components(separatedBy: \" \")\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"The first adverb ending with ly is \\(word) at position \\(index + 1)\\n\"\n            break\n        }\n    }\n    return result",
    "    let pattern = \"\\\\b\\\\w*ly\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += \"\\(text[range]) \"\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs) \\(positions)\"",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    let positions = adverbs.map { text.range(of: $0)!.lowerBound }\n    return \"\\(adverbs.first!) \\(positions.first!)\"",
    "    let words = text.components(separatedBy: \" \")\n    var adverbs = [String]()\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            adverbs.append(\"\\(word) at position \\(index)\")\n        }\n    }\n    return adverbs.joined(separator: \", \")",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b\\\\w*ly\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range, in: text)!])\n    }.joined(separator: \" \")",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\w+ly\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    var result = \"\"\n    for match in matches {\n        let range = Range(match.range, in: text)!\n        result += String(text[range]) + \" \"\n    }\n    return result",
    "    let words = text.components(separatedBy: \" \")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if word.hasSuffix(\"ly\") {\n            result += \"The adverb \\\"\\(word)\\\" is at position \\(index + 1) in the text.\\n\"\n        }\n    }\n    return result",
    "    let adverbs = text.components(separatedBy: \" \").filter { $0.hasSuffix(\"ly\") }\n    return adverbs.joined(separator: \" \")"
  ]
}