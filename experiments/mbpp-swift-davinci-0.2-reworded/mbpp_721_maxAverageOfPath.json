{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "swift",
  "prompt": "\n/// Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunc maxAverageOfPath(cost: [[Int]]) -> Double {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(maxAverageOfPath(cost: [[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\nassert(maxAverageOfPath(cost: [[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\nassert(maxAverageOfPath(cost: [[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\nassert(maxAverageOfPath(cost: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let n = cost.count\n    var dp = [[Double]](repeating: [Double](repeating: 0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(n + n - 1)",
    "    var maxAverage = 0.0\n    var sum = 0\n    var count = 0\n    var i = 0\n    var j = 0\n    var visited = Array(repeating: Array(repeating: false, count: cost.count), count: cost.count)\n    maxAverage = Double(cost[0][0])\n    maxAveragePath(cost: cost, i: &i, j: &j, sum: &sum, count: &count, visited: &visited, maxAverage: &maxAverage)\n    return maxAverage",
    "    guard cost.count > 0 else {\n        return 0\n    }\n    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    dp[0][0] = cost[0][0]\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        }\n    }\n    return Double(dp[n - 1][n - 1]) / Double(2 * n - 1)",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i-1][0]\n    }\n    for i in 1..<cost[0].count {\n        dp[0][i] += dp[0][i-1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i-1][j], dp[i][j-1])\n        }\n    }\n    return Double(dp[cost.count-1][cost[0].count-1]) / Double(cost.count + cost[0].count - 1)",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i - 1][0]\n    }\n    for j in 1..<cost[0].count {\n        dp[0][j] += dp[0][j - 1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    return Double(dp[cost.count - 1][cost[0].count - 1]) / Double(cost.count + cost[0].count - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(n * 2 - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    dp[0][0] = cost[0][0]\n    for i in 1..<n {\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        }\n    }\n    return Double(dp[n - 1][n - 1]) / Double(2 * n - 1)",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i-1][0]\n    }\n    for i in 1..<cost[0].count {\n        dp[0][i] += dp[0][i-1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i-1][j], dp[i][j-1])\n        }\n    }\n    return Double(dp[cost.count-1][cost[0].count-1]) / Double(cost.count + cost[0].count - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n - 1)",
    "    var cache = Array(repeating: Array(repeating: -1, count: cost[0].count), count: cost.count)\n    return maxAverageOfPath(cost: cost, row: 0, col: 0, cache: &cache)",
    "    var dp = Array(repeating: Array(repeating: 0.0, count: cost[0].count), count: cost.count)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<cost.count {\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for j in 1..<cost[0].count {\n        dp[0][j] = dp[0][j - 1] + Double(cost[0][j])\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[cost.count - 1][cost[0].count - 1] / Double(cost.count + cost[0].count - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    let m = cost[0].count\n    \n    var dp = Array(repeating: Array(repeating: 0.0, count: m), count: n)\n    dp[0][0] = Double(cost[0][0])\n    \n    for i in 1..<n {\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    \n    for j in 1..<m {\n        dp[0][j] = dp[0][j-1] + Double(cost[0][j])\n    }\n    \n    for i in 1..<n {\n        for j in 1..<m {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    \n    return dp[n-1][m-1] / Double(n+m-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    \n    for i in 1..<n {\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n    }\n    \n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    \n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(n*n)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i - 1][0]\n    }\n    for j in 1..<cost[0].count {\n        dp[0][j] += dp[0][j - 1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    return Double(dp[cost.count - 1][cost[0].count - 1]) / Double((cost.count + cost[0].count - 1))",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for j in 1..<n {\n        dp[0][j] = dp[0][j - 1] + Double(cost[0][j])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(n * n)",
    "    let n = cost.count\n    var dp = cost\n    for i in 1..<n {\n        dp[i][0] += dp[i - 1][0]\n        dp[0][i] += dp[0][i - 1]\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] += max(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    return Double(dp[n - 1][n - 1]) / Double(2 * n - 1)",
    "    guard cost.count > 0 else { return 0.0 }\n    let n = cost.count\n    var dp = cost\n    for i in 1..<n {\n        dp[i][0] += dp[i-1][0]\n        dp[0][i] += dp[0][i-1]\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] += max(dp[i-1][j], dp[i][j-1])\n        }\n    }\n    return Double(dp[n-1][n-1]) / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    var maxAvg = 0.0\n    var dp = cost\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += min(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    maxAvg = Double(dp[cost.count - 1][cost[0].count - 1]) / Double(cost.count + cost[0].count - 1)\n    return maxAvg",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i - 1][0]\n    }\n    for j in 1..<cost[0].count {\n        dp[0][j] += dp[0][j - 1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    return Double(dp[cost.count - 1][cost[0].count - 1]) / Double(cost.count + cost[0].count - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    guard cost.count > 0 else { return 0 }\n    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    dp[0][0] = cost[0][0]\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n        }\n    }\n    return Double(dp[n-1][n-1]) / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    guard cost.count > 0 else { return 0 }\n    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i-1][0]\n    }\n    for j in 1..<cost.count {\n        dp[0][j] += dp[0][j-1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost.count {\n            dp[i][j] += max(dp[i-1][j], dp[i][j-1])\n        }\n    }\n    return Double(dp[cost.count-1][cost.count-1]) / Double(cost.count * 2 - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    var maxAverage = 0.0\n    var sum = 0\n    var count = 0\n    var row = 0\n    var col = 0\n    var path = [Int]()\n    \n    maxAverageOfPathHelper(cost: cost, row: row, col: col, sum: &sum, count: &count, path: &path, maxAverage: &maxAverage)\n    \n    return maxAverage",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i-1][0]\n    }\n    for i in 1..<cost[0].count {\n        dp[0][i] += dp[0][i-1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i-1][j], dp[i][j-1])\n        }\n    }\n    return Double(dp[cost.count-1][cost[0].count-1]) / Double(cost.count + cost[0].count - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    dp[0][0] = cost[0][0]\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        }\n    }\n    return Double(dp[n - 1][n - 1]) / Double(2 * n - 1)",
    "    var dp = Array(repeating: Array(repeating: 0, count: cost.count), count: cost.count)\n    dp[0][0] = cost[0][0]\n    for i in 1..<cost.count {\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost.count {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        }\n    }\n    return Double(dp[cost.count - 1][cost.count - 1]) / Double(cost.count * 2 - 1)",
    "    var sum = 0\n    var count = 0\n    var i = 0\n    var j = 0\n    while i < cost.count && j < cost[0].count {\n        sum += cost[i][j]\n        count += 1\n        if i == cost.count - 1 {\n            j += 1\n        } else if j == cost[0].count - 1 {\n            i += 1\n        } else {\n            if cost[i+1][j] > cost[i][j+1] {\n                i += 1\n            } else {\n                j += 1\n            }\n        }\n    }\n    return Double(sum) / Double(count)",
    "    let n = cost.count\n    var dp = [[Double]](repeating: [Double](repeating: 0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(n*n)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for j in 1..<n {\n        dp[0][j] = dp[0][j-1] + Double(cost[0][j])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(n*n)",
    "    var dp = [[Double]](repeating: [Double](repeating: 0, count: cost.count), count: cost.count)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<cost.count {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost.count {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[cost.count - 1][cost.count - 1] / Double(cost.count * 2 - 1)",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i - 1][0]\n    }\n    for i in 1..<cost[0].count {\n        dp[0][i] += dp[0][i - 1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    return Double(dp[cost.count - 1][cost[0].count - 1]) / Double(cost.count + cost[0].count - 1)",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i-1][0]\n    }\n    for j in 1..<cost[0].count {\n        dp[0][j] += dp[0][j-1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i-1][j], dp[i][j-1])\n        }\n    }\n    return Double(dp[cost.count-1][cost[0].count-1]) / Double((cost.count + cost[0].count - 1))",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(n * n)",
    "    var maxAverage = 0.0\n    var maxPath = [Int]()\n    var maxPaths = [[Int]]()\n    var path = [Int]()\n    var paths = [[Int]]()\n    var total = 0\n    var count = 0\n    var average = 0.0\n    var max = 0\n    var maxCount = 0\n    var maxTotal = 0\n    var maxAveragePath = [Int]()\n    var maxAveragePaths = [[Int]]()\n    var maxAverageTotal = 0\n    var maxAverageCount = 0\n    var maxAverageAverage = 0.0\n    var maxAverageMax = 0\n    var maxAverageMaxCount = 0\n    var maxAverageMaxTotal = 0\n    var maxAverageMaxAverage = 0.0\n    var maxAverageMaxAveragePath = [Int]()\n    var maxAverageMaxAveragePaths = [[Int]]()\n    var maxAverageMaxAverageTotal = 0\n    var maxAverageMaxAverageCount = 0\n    var maxAverageMaxAverageAverage = 0.0\n    var maxAverageMaxAverageMax = 0\n    var maxAverageMaxAverageMaxCount = 0\n    var maxAverageMaxAverageMaxTotal = 0\n    var maxAverageMaxAverageMaxAverage = 0.0\n    var maxAverageMaxAverageMaxAveragePath = [Int]()\n    var maxAverageMaxAverageMaxAveragePaths = [[Int]]()\n    var maxAverageMaxAverageMaxAverageTotal = 0\n    var maxAverageMaxAverageMaxAverageCount = 0\n    var maxAverageMaxAverageMaxAverageAverage = 0.0\n    var maxAverageMaxAverageMaxAverageMax = 0\n    var maxAverageMaxAverageMaxAverageMaxCount = 0\n    var maxAverageMaxAverageMaxAverageMaxTotal = 0\n    var maxAverageMaxAverageMaxAverageMaxAverage = 0.0\n    var maxAverageMaxAverageMaxAverageMaxAveragePath = [Int]()\n    var maxAverageMaxAverageMaxAverageMaxAveragePaths = [[Int]]()\n    var maxAverageMaxAverageMaxAverageMaxAverageTotal = 0\n    var maxAverageMaxAverageMaxAverageMaxAverageCount = 0\n    var maxAverageMaxAverageMaxAverageMaxAverageAverage = 0.0\n    var maxAverageMaxAverageMaxAverageMaxAverageMax = 0\n    var maxAverageMaxAverageMaxAverageMaxAverageMaxCount = 0\n    var max",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(n*n)",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i - 1][0]\n    }\n    for j in 1..<cost[0].count {\n        dp[0][j] += dp[0][j - 1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    return Double(dp[cost.count - 1][cost[0].count - 1]) / Double(cost.count + cost[0].count - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i - 1][0]\n    }\n    for j in 1..<cost[0].count {\n        dp[0][j] += dp[0][j - 1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    return Double(dp[cost.count - 1][cost[0].count - 1]) / Double((cost.count + cost[0].count - 1))",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    guard cost.count > 0 else { return 0 }\n    guard cost.count == cost[0].count else { return 0 }\n    \n    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    dp[0][0] = cost[0][0]\n    \n    for i in 1..<n {\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    }\n    \n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n        }\n    }\n    \n    return Double(dp[n-1][n-1]) / Double(2*n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i - 1][0]\n    }\n    for i in 1..<cost[0].count {\n        dp[0][i] += dp[0][i - 1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    return Double(dp[cost.count - 1][cost[0].count - 1]) / Double(cost.count + cost[0].count - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i - 1][0]\n    }\n    for j in 1..<cost[0].count {\n        dp[0][j] += dp[0][j - 1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    return Double(dp[cost.count - 1][cost[0].count - 1]) / Double(cost.count + cost[0].count - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i - 1][0]\n    }\n    for i in 1..<cost[0].count {\n        dp[0][i] += dp[0][i - 1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    return Double(dp[cost.count - 1][cost[0].count - 1]) / Double(cost.count + cost[0].count - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i - 1][0]\n    }\n    for j in 1..<cost[0].count {\n        dp[0][j] += dp[0][j - 1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    return Double(dp[cost.count - 1][cost[0].count - 1]) / Double(cost.count + cost[0].count - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    var dp = cost\n    for i in 1..<dp.count {\n        dp[i][0] += dp[i-1][0]\n    }\n    for j in 1..<dp[0].count {\n        dp[0][j] += dp[0][j-1]\n    }\n    for i in 1..<dp.count {\n        for j in 1..<dp[0].count {\n            dp[i][j] += max(dp[i-1][j], dp[i][j-1])\n        }\n    }\n    return Double(dp[dp.count-1][dp[0].count-1]) / Double((dp.count + dp[0].count - 1))",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i - 1][0]\n    }\n    for j in 1..<cost[0].count {\n        dp[0][j] += dp[0][j - 1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    return Double(dp[cost.count - 1][cost[0].count - 1]) / Double(cost.count + cost[0].count - 1)",
    "    var dp = Array(repeating: Array(repeating: 0.0, count: cost[0].count), count: cost.count)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<cost.count {\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for j in 1..<cost[0].count {\n        dp[0][j] = dp[0][j-1] + Double(cost[0][j])\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[cost.count-1][cost[0].count-1] / Double(cost.count + cost[0].count - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i - 1][0]\n    }\n    for j in 1..<cost[0].count {\n        dp[0][j] += dp[0][j - 1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    return Double(dp[cost.count - 1][cost[0].count - 1]) / Double(cost.count + cost[0].count - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    \n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    \n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    \n    return dp[n-1][n-1] / Double(2*n - 1)",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i - 1][0]\n    }\n    for j in 1..<cost[0].count {\n        dp[0][j] += dp[0][j - 1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    return Double(dp[cost.count - 1][cost[0].count - 1]) / Double(cost.count + cost[0].count - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(n * n)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i - 1][0]\n    }\n    for j in 1..<cost[0].count {\n        dp[0][j] += dp[0][j - 1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    return Double(dp[cost.count - 1][cost[0].count - 1]) / Double(cost.count + cost[0].count - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(n + n - 1)",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i - 1][0]\n    }\n    for j in 1..<cost[0].count {\n        dp[0][j] += dp[0][j - 1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    return Double(dp[cost.count - 1][cost[0].count - 1]) / Double(cost.count + cost[0].count - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    var maxAvg = 0.0\n    var sum = 0\n    var count = 0\n    var i = 0\n    var j = 0\n    var visited = [[Bool]](repeating: [Bool](repeating: false, count: cost[0].count), count: cost.count)\n    var path = [Int]()\n    var stack = Stack<Int>()\n    stack.push(i)\n    stack.push(j)\n    while !stack.isEmpty {\n        j = stack.pop()!\n        i = stack.pop()!\n        if i == cost.count - 1 && j == cost[0].count - 1 {\n            count += 1\n            sum += cost[i][j]\n            if maxAvg < Double(sum) / Double(count) {\n                maxAvg = Double(sum) / Double(count)\n            }\n            count -= 1\n            sum -= cost[i][j]\n            continue\n        }\n        if i < cost.count - 1 && !visited[i + 1][j] {\n            stack.push(i + 1)\n            stack.push(j)\n        }\n        if j < cost[0].count - 1 && !visited[i][j + 1] {\n            stack.push(i)\n            stack.push(j + 1)\n        }\n        count += 1\n        sum += cost[i][j]\n        visited[i][j] = true\n    }\n    return maxAvg",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i - 1][0]\n    }\n    for j in 1..<cost.count {\n        dp[0][j] += dp[0][j - 1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost.count {\n            dp[i][j] += max(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    return Double(dp[cost.count - 1][cost.count - 1]) / Double(2 * cost.count - 1)",
    "    let n = cost.count\n    guard n > 0 else { return 0 }\n    guard n > 1 else { return Double(cost[0][0]) }\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i - 1][0]\n    }\n    for j in 1..<cost[0].count {\n        dp[0][j] += dp[0][j - 1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    return Double(dp[cost.count - 1][cost[0].count - 1]) / Double(cost.count + cost[0].count - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    dp[0][0] = cost[0][0]\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n        }\n    }\n    return Double(dp[n-1][n-1]) / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(n * n)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i - 1][0]\n    }\n    for j in 1..<cost[0].count {\n        dp[0][j] += dp[0][j - 1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    return Double(dp[cost.count - 1][cost[0].count - 1]) / Double(cost.count + cost[0].count - 1)",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i - 1][0]\n    }\n    for j in 1..<cost[0].count {\n        dp[0][j] += dp[0][j - 1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    return Double(dp[cost.count - 1][cost[0].count - 1]) / Double(cost.count + cost[0].count - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = cost\n    for i in 1..<n {\n        dp[i][0] += dp[i - 1][0]\n        dp[0][i] += dp[0][i - 1]\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] += max(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    return Double(dp[n - 1][n - 1]) / Double(2 * n - 1)",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i - 1][0]\n    }\n    for j in 1..<cost[0].count {\n        dp[0][j] += dp[0][j - 1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    return Double(dp[cost.count - 1][cost[0].count - 1]) / Double((cost.count + cost[0].count - 1))",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let rows = cost.count\n    let cols = cost[0].count\n    var dp = Array(repeating: Array(repeating: 0.0, count: cols), count: rows)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<rows {\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for j in 1..<cols {\n        dp[0][j] = dp[0][j - 1] + Double(cost[0][j])\n    }\n    for i in 1..<rows {\n        for j in 1..<cols {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[rows - 1][cols - 1] / Double(rows + cols - 1)",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i-1][0]\n    }\n    for j in 1..<cost[0].count {\n        dp[0][j] += dp[0][j-1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i-1][j], dp[i][j-1])\n        }\n    }\n    return Double(dp[cost.count-1][cost[0].count-1]) / Double((cost.count + cost[0].count - 1))",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    var dp = cost\n    for i in 1..<dp.count {\n        dp[i][0] += dp[i-1][0]\n    }\n    for i in 1..<dp[0].count {\n        dp[0][i] += dp[0][i-1]\n    }\n    for i in 1..<dp.count {\n        for j in 1..<dp[0].count {\n            dp[i][j] += max(dp[i-1][j], dp[i][j-1])\n        }\n    }\n    return Double(dp[dp.count-1][dp[0].count-1]) / Double(dp.count + dp[0].count - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i-1][0]\n    }\n    for j in 1..<cost.count {\n        dp[0][j] += dp[0][j-1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost.count {\n            dp[i][j] += max(dp[i-1][j], dp[i][j-1])\n        }\n    }\n    return Double(dp[cost.count-1][cost.count-1]) / Double(cost.count * 2 - 1)",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i - 1][0]\n    }\n    for j in 1..<cost[0].count {\n        dp[0][j] += dp[0][j - 1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    return Double(dp[cost.count - 1][cost[0].count - 1]) / Double(cost.count + cost[0].count - 1)",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i-1][0]\n    }\n    for j in 1..<cost[0].count {\n        dp[0][j] += dp[0][j-1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i-1][j], dp[i][j-1])\n        }\n    }\n    return Double(dp[cost.count-1][cost[0].count-1]) / Double(cost.count + cost[0].count - 1)",
    "    guard cost.count > 0 else { return 0 }\n    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    dp[0][0] = cost[0][0]\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n        }\n    }\n    return Double(dp[n-1][n-1]) / Double(2*n - 1)",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i - 1][0]\n    }\n    for i in 1..<cost[0].count {\n        dp[0][i] += dp[0][i - 1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    return Double(dp[cost.count - 1][cost[0].count - 1]) / Double(cost.count + cost[0].count - 1)",
    "    guard cost.count > 0 else { return 0 }\n    guard cost.count == cost[0].count else { return 0 }\n    \n    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    dp[0][0] = cost[0][0]\n    \n    for i in 1..<n {\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n    }\n    \n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        }\n    }\n    \n    return Double(dp[n - 1][n - 1]) / Double(n * n)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    let m = cost[0].count\n    var dp = [[Double]](repeating: [Double](repeating: 0, count: m), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for j in 1..<m {\n        dp[0][j] = dp[0][j-1] + Double(cost[0][j])\n    }\n    for i in 1..<n {\n        for j in 1..<m {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][m-1] / Double(n+m-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    let m = cost[0].count\n    var dp = Array(repeating: Array(repeating: 0, count: m), count: n)\n    dp[0][0] = cost[0][0]\n    for i in 1..<n {\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    }\n    for j in 1..<m {\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    }\n    for i in 1..<n {\n        for j in 1..<m {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        }\n    }\n    return Double(dp[n - 1][m - 1]) / Double(n + m - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = cost\n    for i in 1..<n {\n        dp[i][0] += dp[i - 1][0]\n        dp[0][i] += dp[0][i - 1]\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] += max(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    return Double(dp[n - 1][n - 1]) / Double(2 * n - 1)",
    "    guard cost.count > 0 else {\n        return 0\n    }\n    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(n * n)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(n*n)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    dp[0][0] = cost[0][0]\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n        }\n    }\n    return Double(dp[n-1][n-1]) / Double(2*n-1)",
    "    guard cost.count > 0 else {\n        return 0\n    }\n    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i-1][0]\n    }\n    for j in 1..<cost[0].count {\n        dp[0][j] += dp[0][j-1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i-1][j], dp[i][j-1])\n        }\n    }\n    return Double(dp[cost.count-1][cost[0].count-1]) / Double((cost.count + cost[0].count - 1))",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i - 1][0]\n    }\n    for j in 1..<cost[0].count {\n        dp[0][j] += dp[0][j - 1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    return Double(dp[cost.count - 1][cost[0].count - 1]) / Double(cost.count + cost[0].count - 1)",
    "    guard cost.count > 0 else {\n        return 0\n    }\n    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    var dp = cost\n    for i in 1..<cost.count {\n        dp[i][0] += dp[i-1][0]\n    }\n    for j in 1..<cost[0].count {\n        dp[0][j] += dp[0][j-1]\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i-1][j], dp[i][j-1])\n        }\n    }\n    return Double(dp[cost.count-1][cost[0].count-1]) / Double(cost.count + cost[0].count - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    guard cost.count > 0 else {\n        return 0\n    }\n    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    dp[0][0] = cost[0][0]\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        }\n    }\n    return Double(dp[n - 1][n - 1]) / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = cost\n    for i in 1..<n {\n        dp[i][0] += dp[i - 1][0]\n        dp[0][i] += dp[0][i - 1]\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] += max(dp[i - 1][j], dp[i][j - 1])\n        }\n    }\n    return Double(dp[n - 1][n - 1]) / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    var dp = cost\n    for i in 1..<cost.count {\n        for j in 1..<cost[0].count {\n            dp[i][j] += max(dp[i-1][j], dp[i][j-1])\n        }\n    }\n    return Double(dp[cost.count-1][cost[0].count-1]) / Double(cost.count + cost[0].count - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(n*n)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    let m = cost[0].count\n    var dp = Array(repeating: Array(repeating: 0.0, count: m), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for j in 1..<m {\n        dp[0][j] = dp[0][j-1] + Double(cost[0][j])\n    }\n    for i in 1..<n {\n        for j in 1..<m {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][m-1] / Double(n+m-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = [[Double]](repeating: [Double](repeating: 0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(n*n)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = cost\n    for i in 1..<n {\n        dp[i][0] += dp[i-1][0]\n        dp[0][i] += dp[0][i-1]\n    }\n    \n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] += max(dp[i-1][j], dp[i][j-1])\n        }\n    }\n    \n    return Double(dp[n-1][n-1]) / Double(2*n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for j in 1..<n {\n        dp[0][j] = dp[0][j - 1] + Double(cost[0][j])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    dp[0][0] = cost[0][0]\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        }\n    }\n    return Double(dp[n - 1][n - 1]) / Double(2 * n - 1)",
    "    let rows = cost.count\n    let cols = cost[0].count\n    var dp = Array(repeating: Array(repeating: 0, count: cols), count: rows)\n    dp[0][0] = cost[0][0]\n    for i in 1..<rows {\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    }\n    for j in 1..<cols {\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    }\n    for i in 1..<rows {\n        for j in 1..<cols {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        }\n    }\n    return Double(dp[rows - 1][cols - 1]) / Double(rows + cols - 1)",
    "    var dp = Array(repeating: Array(repeating: 0.0, count: cost.count), count: cost.count)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<cost.count {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<cost.count {\n        for j in 1..<cost.count {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[cost.count-1][cost.count-1] / Double(cost.count*2-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    guard n > 0 else { return 0 }\n    guard n > 1 else { return Double(cost[0][0]) }\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    dp[0][0] = cost[0][0]\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n        }\n    }\n    return Double(dp[n-1][n-1]) / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n-1][n-1] / Double(2*n-1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i - 1] + Double(cost[0][i])\n        dp[i][0] = dp[i - 1][0] + Double(cost[i][0])\n    }\n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + Double(cost[i][j])\n        }\n    }\n    return dp[n - 1][n - 1] / Double(2 * n - 1)",
    "    let n = cost.count\n    var dp = Array(repeating: Array(repeating: 0.0, count: n), count: n)\n    dp[0][0] = Double(cost[0][0])\n    for i in 1..<n {\n        dp[0][i] = dp[0][i-1] + Double(cost[0][i])\n        dp[i][0] = dp[i-1][0] + Double(cost[i][0])\n    }\n    \n    for i in 1..<n {\n        for j in 1..<n {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + Double(cost[i][j])\n        }\n    }\n    \n    return dp[n-1][n-1] / Double(2*n - 1)"
  ]
}