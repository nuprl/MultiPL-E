{
  "name": "mbpp_784_mul_even_odd",
  "language": "swift",
  "prompt": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if even == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if odd == 0 {\n                odd = i\n                count += 1\n            }\n        }\n        if count == 2 {\n            break\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even_num = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd_num = i\n                count += 1\n            }\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpswy_s2kk/tmpswy_s2kk.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b075196ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0751661b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0751661988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b07516607b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpswy_s2kk                        0x00005638b5eec62f <unavailable> + 5679\n5    libc.so.6                          0x00002b0751b56460 __libc_start_main + 245\n6    tmpswy_s2kk                        0x00005638b5eec169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                count += 1\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpt385dfoa/tmpt385dfoa.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b97c7492c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b97c7189b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b97c7189988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b97c71887b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt385dfoa                        0x000055e048aea62f <unavailable> + 5679\n5    libc.so.6                          0x00002b97c767e460 __libc_start_main + 245\n6    tmpt385dfoa                        0x000055e048aea169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while even == 0 || odd == 0 {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n        } else {\n            odd = list1[i]\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpd3r9xwdy/tmpd3r9xwdy.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4db4025c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4db3d1cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4db3d1c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4db3d1b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpd3r9xwdy                        0x000055c261afb41e <unavailable> + 5150\n5    libc.so.6                          0x00002b4db4211460 __libc_start_main + 245\n6    tmpd3r9xwdy                        0x000055c261afb059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = even * list1[i]\n        } else {\n            odd = odd * list1[i]\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmp4uy2ozh6/tmp4uy2ozh6.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ec559bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ec5292b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ec5292988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ec52917b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4uy2ozh6                        0x000055c31c6ab47e <unavailable> + 5246\n5    libc.so.6                          0x00002b7ec5787460 __libc_start_main + 245\n6    tmp4uy2ozh6                        0x000055c31c6ab0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = even * list1[i]\n        } else {\n            odd = odd * list1[i]\n        }\n        i = i + 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpqzkbmjzz/tmpqzkbmjzz.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba31bb3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba318aab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba318aa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba318a97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqzkbmjzz                        0x000055a358d3447e <unavailable> + 5246\n5    libc.so.6                          0x00002aba31d9f460 __libc_start_main + 245\n6    tmpqzkbmjzz                        0x000055a358d340b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                count += 1\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpt385dfoa/tmpt385dfoa.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b97c7492c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b97c7189b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b97c7189988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b97c71887b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt385dfoa                        0x000055e048aea62f <unavailable> + 5679\n5    libc.so.6                          0x00002b97c767e460 __libc_start_main + 245\n6    tmpt385dfoa                        0x000055e048aea169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even_num = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd_num = i\n                break\n            }\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpye_d4_2t/tmpye_d4_2t.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae65775ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae657451b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae657451988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae6574507b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpye_d4_2t                        0x000055caa6fbd62f <unavailable> + 5679\n5    libc.so.6                          0x00002ae657946460 __libc_start_main + 245\n6    tmpye_d4_2t                        0x000055caa6fbd169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    var j = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for j in list1 {\n        if j % 2 != 0 {\n            odd = j\n            break\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd = i\n                count += 1\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpsl6l28xz/tmpsl6l28xz.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d39582c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d39279b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d39279988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d392787b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsl6l28xz                        0x00005578bfb4d62f <unavailable> + 5679\n5    libc.so.6                          0x00002b6d3976e460 __libc_start_main + 245\n6    tmpsl6l28xz                        0x00005578bfb4d169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd = i\n                count += 1\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpsl6l28xz/tmpsl6l28xz.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d39582c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d39279b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d39279988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d392787b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsl6l28xz                        0x00005578bfb4d62f <unavailable> + 5679\n5    libc.so.6                          0x00002b6d3976e460 __libc_start_main + 245\n6    tmpsl6l28xz                        0x00005578bfb4d169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd = i\n                count += 1\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpsl6l28xz/tmpsl6l28xz.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d39582c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d39279b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d39279988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d392787b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsl6l28xz                        0x00005578bfb4d62f <unavailable> + 5679\n5    libc.so.6                          0x00002b6d3976e460 __libc_start_main + 245\n6    tmpsl6l28xz                        0x00005578bfb4d169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmp4dekf3m4/tmp4dekf3m4.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc9be09c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc9bb00b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc9bb00988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc9baff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4dekf3m4                        0x00005601224a262f <unavailable> + 5679\n5    libc.so.6                          0x00002acc9bff5460 __libc_start_main + 245\n6    tmp4dekf3m4                        0x00005601224a2169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even = even * list1[i]\n        } else {\n            odd = odd * list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmp75y5gy9w/tmp75y5gy9w.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b550b713c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b550b40ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b550b40a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b550b4097b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp75y5gy9w                        0x000055691064b56e <unavailable> + 5486\n5    libc.so.6                          0x00002b550b8ff460 __libc_start_main + 245\n6    tmp75y5gy9w                        0x000055691064b1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = even * list1[i]\n            i += 1\n        } else {\n            odd = odd * list1[i]\n            i += 1\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpurotne6z/tmpurotne6z.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae459453c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae45914ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae45914a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4591497b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpurotne6z                        0x000055f25d76b47e <unavailable> + 5246\n5    libc.so.6                          0x00002ae45963f460 __libc_start_main + 245\n6    tmpurotne6z                        0x000055f25d76b0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even * odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in list1 {\n        if i % 2 == 0 {\n            even *= i\n        } else {\n            odd *= i\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmprxr50ojo/tmprxr50ojo.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9086213c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9085f0ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9085f0a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9085f097b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprxr50ojo                        0x000055c12e28d52e <unavailable> + 5422\n5    libc.so.6                          0x00002b90863ff460 __libc_start_main + 245\n6    tmprxr50ojo                        0x000055c12e28d169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var count = 0\n    for i in list1 {\n        if (i % 2 == 0) {\n            even = even * i\n            count += 1\n            if (count == 2) {\n                break\n            }\n        }\n    }\n    count = 0\n    for i in list1 {\n        if (i % 2 != 0) {\n            odd = odd * i\n            count += 1\n            if (count == 2) {\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpab55es0u/tmpab55es0u.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3779c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3779908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3779908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b37799077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpab55es0u                        0x000056189a77652e <unavailable> + 5422\n5    libc.so.6                          0x00002b3779dfd460 __libc_start_main + 245\n6    tmpab55es0u                        0x000056189a776169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even_num = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd_num = i\n                count += 1\n            }\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpswy_s2kk/tmpswy_s2kk.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b075196ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0751661b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0751661988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b07516607b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpswy_s2kk                        0x00005638b5eec62f <unavailable> + 5679\n5    libc.so.6                          0x00002b0751b56460 __libc_start_main + 245\n6    tmpswy_s2kk                        0x00005638b5eec169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even_num = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    count = 0\n    for i in list1 {\n        if i % 2 != 0 {\n            odd_num = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpdodnmn4m/tmpdodnmn4m.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af8f076ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af8f0461b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af8f0461988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af8f04607b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdodnmn4m                        0x00005626bdbdb52e <unavailable> + 5422\n5    libc.so.6                          0x00002af8f0956460 __libc_start_main + 245\n6    tmpdodnmn4m                        0x00005626bdbdb169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var product = 0\n    for i in 0..<list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n    }\n    for i in 0..<list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n    }\n    product = even * odd\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even_num = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd_num = i\n                break\n            }\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpye_d4_2t/tmpye_d4_2t.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae65775ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae657451b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae657451988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae6574507b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpye_d4_2t                        0x000055caa6fbd62f <unavailable> + 5679\n5    libc.so.6                          0x00002ae657946460 __libc_start_main + 245\n6    tmpye_d4_2t                        0x000055caa6fbd169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even_num = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    count = 0\n    for i in list1 {\n        if i % 2 != 0 {\n            odd_num = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpdodnmn4m/tmpdodnmn4m.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af8f076ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af8f0461b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af8f0461988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af8f04607b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdodnmn4m                        0x00005626bdbdb52e <unavailable> + 5422\n5    libc.so.6                          0x00002af8f0956460 __libc_start_main + 245\n6    tmpdodnmn4m                        0x00005626bdbdb169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_odd_mul = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even_odd_mul *= list1[i]\n        }\n    }\n    return even_odd_mul\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmp4b4si5we/tmp4b4si5we.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b28da1bdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b28d9eb4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b28d9eb4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b28d9eb37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4b4si5we                        0x000055ac6f85056e <unavailable> + 5486\n5    libc.so.6                          0x00002b28da3a9460 __libc_start_main + 245\n6    tmp4b4si5we                        0x000055ac6f8501a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in list1 {\n        if i % 2 == 0 {\n            even *= i\n        } else {\n            odd *= i\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmprxr50ojo/tmprxr50ojo.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9086213c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9085f0ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9085f0a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9085f097b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprxr50ojo                        0x000055c12e28d52e <unavailable> + 5422\n5    libc.so.6                          0x00002b90863ff460 __libc_start_main + 245\n6    tmprxr50ojo                        0x000055c12e28d169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    var j = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    while j < list1.count {\n        if list1[j] % 2 != 0 {\n            odd = list1[j]\n            break\n        }\n        j += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even * odd\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even_num = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd_num = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in list1 {\n        if i % 2 == 0 {\n            even *= i\n        } else {\n            odd *= i\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmprxr50ojo/tmprxr50ojo.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9086213c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9085f0ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9085f0a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9085f097b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprxr50ojo                        0x000055c12e28d52e <unavailable> + 5422\n5    libc.so.6                          0x00002b90863ff460 __libc_start_main + 245\n6    tmprxr50ojo                        0x000055c12e28d169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    count = 0\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpl2qxq9j5/tmpl2qxq9j5.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8fb15c5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8fb12bcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8fb12bc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8fb12bb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl2qxq9j5                        0x00005620a557152e <unavailable> + 5422\n5    libc.so.6                          0x00002b8fb17b1460 __libc_start_main + 245\n6    tmpl2qxq9j5                        0x00005620a5571169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if list1[i] % 2 == 0 {\n            even = even * list1[i]\n        }\n        else {\n            odd = odd * list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpqbxero2t/tmpqbxero2t.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba52e373c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba52e06ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba52e06a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba52e0697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbxero2t                        0x000055b60552b56e <unavailable> + 5486\n5    libc.so.6                          0x00002ba52e55f460 __libc_start_main + 245\n6    tmpqbxero2t                        0x000055b60552b1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    var j = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            i += 1\n            break\n        }\n        i += 1\n    }\n    while j < list1.count {\n        if list1[j] % 2 != 0 {\n            odd = list1[j]\n            j += 1\n            break\n        }\n        j += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in 0..<list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n    }\n    for i in 0..<list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even_num = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd_num = i\n                count += 1\n            }\n        }\n        if count == 2 {\n            break\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpsgu2c7t8/tmpsgu2c7t8.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ade12da7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ade12a9eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ade12a9e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ade12a9d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsgu2c7t8                        0x00005650a55b262f <unavailable> + 5679\n5    libc.so.6                          0x00002ade12f93460 __libc_start_main + 245\n6    tmpsgu2c7t8                        0x00005650a55b2169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    count = 0\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpl2qxq9j5/tmpl2qxq9j5.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8fb15c5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8fb12bcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8fb12bc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8fb12bb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl2qxq9j5                        0x00005620a557152e <unavailable> + 5422\n5    libc.so.6                          0x00002b8fb17b1460 __libc_start_main + 245\n6    tmpl2qxq9j5                        0x00005620a5571169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = even * i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    count = 0\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = odd * i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpyiuncoo1/tmpyiuncoo1.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b557c21dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b557bf14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b557bf14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b557bf137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyiuncoo1                        0x000055a4a445c52e <unavailable> + 5422\n5    libc.so.6                          0x00002b557c409460 __libc_start_main + 245\n6    tmpyiuncoo1                        0x000055a4a445c169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = even * list1[i]\n        } else {\n            odd = odd * list1[i]\n        }\n        i = i + 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpqzkbmjzz/tmpqzkbmjzz.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba31bb3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba318aab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba318aa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba318a97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqzkbmjzz                        0x000055a358d3447e <unavailable> + 5246\n5    libc.so.6                          0x00002aba31d9f460 __libc_start_main + 245\n6    tmpqzkbmjzz                        0x000055a358d340b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    count = 0\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpl2qxq9j5/tmpl2qxq9j5.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8fb15c5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8fb12bcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8fb12bc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8fb12bb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl2qxq9j5                        0x00005620a557152e <unavailable> + 5422\n5    libc.so.6                          0x00002b8fb17b1460 __libc_start_main + 245\n6    tmpl2qxq9j5                        0x00005620a5571169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmp4dekf3m4/tmp4dekf3m4.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc9be09c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc9bb00b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc9bb00988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc9baff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4dekf3m4                        0x00005601224a262f <unavailable> + 5679\n5    libc.so.6                          0x00002acc9bff5460 __libc_start_main + 245\n6    tmp4dekf3m4                        0x00005601224a2169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even = even * list1[i]\n        }\n        else {\n            odd = odd * list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpjygxgzxu/tmpjygxgzxu.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7b11edbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7b11bd2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7b11bd2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7b11bd17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjygxgzxu                        0x00005639285f556e <unavailable> + 5486\n5    libc.so.6                          0x00002b7b120c7460 __libc_start_main + 245\n6    tmpjygxgzxu                        0x00005639285f51a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    count = 0\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpl2qxq9j5/tmpl2qxq9j5.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8fb15c5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8fb12bcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8fb12bc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8fb12bb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl2qxq9j5                        0x00005620a557152e <unavailable> + 5422\n5    libc.so.6                          0x00002b8fb17b1460 __libc_start_main + 245\n6    tmpl2qxq9j5                        0x00005620a5571169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even = even * list1[i]\n        } else {\n            odd = odd * list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmp75y5gy9w/tmp75y5gy9w.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b550b713c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b550b40ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b550b40a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b550b4097b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp75y5gy9w                        0x000055691064b56e <unavailable> + 5486\n5    libc.so.6                          0x00002b550b8ff460 __libc_start_main + 245\n6    tmp75y5gy9w                        0x000055691064b1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_odd_mul = 1\n    var even_count = 0\n    var odd_count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even_count += 1\n            if even_count == 1 {\n                even_odd_mul *= i\n            }\n        }\n        else {\n            odd_count += 1\n            if odd_count == 1 {\n                even_odd_mul *= i\n            }\n        }\n    }\n    return even_odd_mul\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count_even = 0\n    var count_odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count_even == 0 {\n                even = i\n                count_even += 1\n            }\n        }\n        else {\n            if count_odd == 0 {\n                odd = i\n                count_odd += 1\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in list1 {\n        if i % 2 == 0 {\n            even = even * i\n        } else {\n            odd = odd * i\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpgbpuzeq6/tmpgbpuzeq6.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b20b6560c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b20b6257b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b20b6257988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b20b62567b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgbpuzeq6                        0x00005652af22352e <unavailable> + 5422\n5    libc.so.6                          0x00002b20b674c460 __libc_start_main + 245\n6    tmpgbpuzeq6                        0x00005652af223169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if even == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if odd == 0 {\n                odd = i\n                count += 1\n            }\n        }\n        if count == 2 {\n            break\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even * odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even * odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    var j = 0\n    while i < list1.count && j < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            i += 1\n            break\n        }\n        i += 1\n    }\n    while j < list1.count && i < list1.count {\n        if list1[j] % 2 != 0 {\n            odd = list1[j]\n            j += 1\n            break\n        }\n        j += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmp187nfizw/tmp187nfizw.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2800e7dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2800b74b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2800b74988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2800b737b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp187nfizw                        0x000056291a2b665f <unavailable> + 5727\n5    libc.so.6                          0x00002b2801069460 __libc_start_main + 245\n6    tmp187nfizw                        0x000056291a2b60b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    count = 0\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpl2qxq9j5/tmpl2qxq9j5.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8fb15c5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8fb12bcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8fb12bc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8fb12bb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl2qxq9j5                        0x00005620a557152e <unavailable> + 5422\n5    libc.so.6                          0x00002b8fb17b1460 __libc_start_main + 245\n6    tmpl2qxq9j5                        0x00005620a5571169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmp4dekf3m4/tmp4dekf3m4.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc9be09c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc9bb00b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc9bb00988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc9baff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4dekf3m4                        0x00005601224a262f <unavailable> + 5679\n5    libc.so.6                          0x00002acc9bff5460 __libc_start_main + 245\n6    tmp4dekf3m4                        0x00005601224a2169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmp4dekf3m4/tmp4dekf3m4.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc9be09c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc9bb00b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc9bb00988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc9baff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4dekf3m4                        0x00005601224a262f <unavailable> + 5679\n5    libc.so.6                          0x00002acc9bff5460 __libc_start_main + 245\n6    tmp4dekf3m4                        0x00005601224a2169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_index = 0\n    var odd_index = 0\n    var even_flag = false\n    var odd_flag = false\n    var even_num = 0\n    var odd_num = 0\n    for (index, num) in list1.enumerated() {\n        if num % 2 == 0 && !even_flag {\n            even_index = index\n            even_num = num\n            even_flag = true\n        }\n        if num % 2 != 0 && !odd_flag {\n            odd_index = index\n            odd_num = num\n            odd_flag = true\n        }\n        if even_flag && odd_flag {\n            break\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count_even = 0\n    var count_odd = 0\n    for num in list1 {\n        if num % 2 == 0 {\n            if count_even == 0 {\n                even_num = num\n                count_even += 1\n            }\n        }\n        else {\n            if count_odd == 0 {\n                odd_num = num\n                count_odd += 1\n            }\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        }\n        else {\n            if flag == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpl3nng0zk/tmpl3nng0zk.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5ed752fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5ed7226b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5ed7226988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5ed72257b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl3nng0zk                        0x000056409f24162f <unavailable> + 5679\n5    libc.so.6                          0x00002b5ed771b460 __libc_start_main + 245\n6    tmpl3nng0zk                        0x000056409f241169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    for i in 0..<list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n    }\n    for i in 0..<list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmp7a0wyj_x/tmp7a0wyj_x.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf52995c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf5268cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf5268c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf5268b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7a0wyj_x                        0x0000560a40ada62f <unavailable> + 5679\n5    libc.so.6                          0x00002abf52b81460 __libc_start_main + 245\n6    tmp7a0wyj_x                        0x0000560a40ada169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even * odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_index = 0\n    var odd_index = 0\n    var even_flag = true\n    var odd_flag = true\n    var even_num = 0\n    var odd_num = 0\n    for i in 0..<list1.count {\n        if list1[i] % 2 == 0 && even_flag {\n            even_num = list1[i]\n            even_flag = false\n        }\n        if list1[i] % 2 != 0 && odd_flag {\n            odd_num = list1[i]\n            odd_flag = false\n        }\n        if !even_flag && !odd_flag {\n            break\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmp4dekf3m4/tmp4dekf3m4.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc9be09c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc9bb00b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc9bb00988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc9baff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4dekf3m4                        0x00005601224a262f <unavailable> + 5679\n5    libc.so.6                          0x00002acc9bff5460 __libc_start_main + 245\n6    tmp4dekf3m4                        0x00005601224a2169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    for i in 0..<list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n    }\n    for i in 0..<list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmp4dekf3m4/tmp4dekf3m4.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc9be09c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc9bb00b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc9bb00988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc9baff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4dekf3m4                        0x00005601224a262f <unavailable> + 5679\n5    libc.so.6                          0x00002acc9bff5460 __libc_start_main + 245\n6    tmp4dekf3m4                        0x00005601224a2169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    var j = 0\n    while i < list1.count && j < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            i += 1\n            break\n        }\n        i += 1\n    }\n    while j < list1.count && i < list1.count {\n        if list1[j] % 2 != 0 {\n            odd = list1[j]\n            j += 1\n            break\n        }\n        j += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmp187nfizw/tmp187nfizw.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2800e7dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2800b74b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2800b74988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2800b737b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp187nfizw                        0x000056291a2b665f <unavailable> + 5727\n5    libc.so.6                          0x00002b2801069460 __libc_start_main + 245\n6    tmp187nfizw                        0x000056291a2b60b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 1\n    var odd_num = 1\n    for i in list1 {\n        if i % 2 == 0 {\n            even_num *= i\n        } else {\n            odd_num *= i\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpqnu7rw3p/tmpqnu7rw3p.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba30ee4ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba30eb45b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba30eb45988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba30eb447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqnu7rw3p                        0x000055a4ca2e052e <unavailable> + 5422\n5    libc.so.6                          0x00002ba30f03a460 __libc_start_main + 245\n6    tmpqnu7rw3p                        0x000055a4ca2e0169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmp7a0wyj_x/tmp7a0wyj_x.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf52995c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf5268cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf5268c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf5268b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7a0wyj_x                        0x0000560a40ada62f <unavailable> + 5679\n5    libc.so.6                          0x00002abf52b81460 __libc_start_main + 245\n6    tmp7a0wyj_x                        0x0000560a40ada169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even * odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmp4dekf3m4/tmp4dekf3m4.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc9be09c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc9bb00b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc9bb00988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc9baff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4dekf3m4                        0x00005601224a262f <unavailable> + 5679\n5    libc.so.6                          0x00002acc9bff5460 __libc_start_main + 245\n6    tmp4dekf3m4                        0x00005601224a2169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpefi_0z5b/tmpefi_0z5b.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abaea5bdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abaea2b4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abaea2b4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abaea2b37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpefi_0z5b                        0x000055b13d31b47e <unavailable> + 5246\n5    libc.so.6                          0x00002abaea7a9460 __libc_start_main + 245\n6    tmpefi_0z5b                        0x000055b13d31b0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = even * list1[i]\n        } else {\n            odd = odd * list1[i]\n        }\n        i = i + 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpqzkbmjzz/tmpqzkbmjzz.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba31bb3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba318aab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba318aa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba318a97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqzkbmjzz                        0x000055a358d3447e <unavailable> + 5246\n5    libc.so.6                          0x00002aba31d9f460 __libc_start_main + 245\n6    tmpqzkbmjzz                        0x000055a358d340b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmp4dekf3m4/tmp4dekf3m4.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc9be09c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc9bb00b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc9bb00988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc9baff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4dekf3m4                        0x00005601224a262f <unavailable> + 5679\n5    libc.so.6                          0x00002acc9bff5460 __libc_start_main + 245\n6    tmp4dekf3m4                        0x00005601224a2169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmp4dekf3m4/tmp4dekf3m4.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc9be09c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc9bb00b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc9bb00988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc9baff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4dekf3m4                        0x00005601224a262f <unavailable> + 5679\n5    libc.so.6                          0x00002acc9bff5460 __libc_start_main + 245\n6    tmp4dekf3m4                        0x00005601224a2169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = even * list1[i]\n        } else {\n            odd = odd * list1[i]\n        }\n        i = i + 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpqzkbmjzz/tmpqzkbmjzz.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba31bb3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba318aab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba318aa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba318a97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqzkbmjzz                        0x000055a358d3447e <unavailable> + 5246\n5    libc.so.6                          0x00002aba31d9f460 __libc_start_main + 245\n6    tmpqzkbmjzz                        0x000055a358d340b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var mul = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even_num = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd_num = i\n            break\n        }\n    }\n    mul = even_num * odd_num\n    return mul\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = even * list1[i]\n        } else {\n            odd = odd * list1[i]\n        }\n        i = i + 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpqzkbmjzz/tmpqzkbmjzz.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba31bb3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba318aab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba318aa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba318a97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqzkbmjzz                        0x000055a358d3447e <unavailable> + 5246\n5    libc.so.6                          0x00002aba31d9f460 __libc_start_main + 245\n6    tmpqzkbmjzz                        0x000055a358d340b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    count = 0\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpl2qxq9j5/tmpl2qxq9j5.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8fb15c5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8fb12bcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8fb12bc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8fb12bb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl2qxq9j5                        0x00005620a557152e <unavailable> + 5422\n5    libc.so.6                          0x00002b8fb17b1460 __libc_start_main + 245\n6    tmpl2qxq9j5                        0x00005620a5571169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    var j = 0\n    while i < list1.count && even == 0 {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n        }\n        i += 1\n    }\n    while j < list1.count && odd == 0 {\n        if list1[j] % 2 != 0 {\n            odd = list1[j]\n        }\n        j += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmp7a0wyj_x/tmp7a0wyj_x.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf52995c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf5268cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf5268c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf5268b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7a0wyj_x                        0x0000560a40ada62f <unavailable> + 5679\n5    libc.so.6                          0x00002abf52b81460 __libc_start_main + 245\n6    tmp7a0wyj_x                        0x0000560a40ada169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even * odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in list1 {\n        if i % 2 == 0 {\n            even = even * i\n        }\n        else {\n            odd = odd * i\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpqp_yjo0h/tmpqp_yjo0h.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5b1942c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5b1639b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5b1639988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5b16387b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqp_yjo0h                        0x0000557a2a14d52e <unavailable> + 5422\n5    libc.so.6                          0x00002ab5b1b2e460 __libc_start_main + 245\n6    tmpqp_yjo0h                        0x0000557a2a14d169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmp4dekf3m4/tmp4dekf3m4.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc9be09c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc9bb00b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc9bb00988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc9baff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4dekf3m4                        0x00005601224a262f <unavailable> + 5679\n5    libc.so.6                          0x00002acc9bff5460 __libc_start_main + 245\n6    tmp4dekf3m4                        0x00005601224a2169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmp7a0wyj_x/tmp7a0wyj_x.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf52995c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf5268cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf5268c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf5268b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7a0wyj_x                        0x0000560a40ada62f <unavailable> + 5679\n5    libc.so.6                          0x00002abf52b81460 __libc_start_main + 245\n6    tmp7a0wyj_x                        0x0000560a40ada169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if list1[i] % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmp97syc7dp/tmp97syc7dp.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ada5124ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ada50f45b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ada50f45988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ada50f447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp97syc7dp                        0x000056523429f56e <unavailable> + 5486\n5    libc.so.6                          0x00002ada5143a460 __libc_start_main + 245\n6    tmp97syc7dp                        0x000056523429f1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count_even = 0\n    var count_odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count_even == 0 {\n                even = i\n                count_even += 1\n            }\n        }\n        else {\n            if count_odd == 0 {\n                odd = i\n                count_odd += 1\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even * odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    var j = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    while j < list1.count {\n        if list1[j] % 2 != 0 {\n            odd = list1[j]\n            break\n        }\n        j += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in list1 {\n        if i % 2 == 0 {\n            even *= i\n        } else {\n            odd *= i\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmprxr50ojo/tmprxr50ojo.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9086213c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9085f0ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9085f0a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9085f097b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprxr50ojo                        0x000055c12e28d52e <unavailable> + 5422\n5    libc.so.6                          0x00002b90863ff460 __libc_start_main + 245\n6    tmprxr50ojo                        0x000055c12e28d169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even * odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    count = 0\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpl2qxq9j5/tmpl2qxq9j5.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8fb15c5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8fb12bcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8fb12bc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8fb12bb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl2qxq9j5                        0x00005620a557152e <unavailable> + 5422\n5    libc.so.6                          0x00002b8fb17b1460 __libc_start_main + 245\n6    tmpl2qxq9j5                        0x00005620a5571169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in list1 {\n        if i % 2 == 0 {\n            even = even * i\n        } else {\n            odd = odd * i\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpgbpuzeq6/tmpgbpuzeq6.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b20b6560c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b20b6257b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b20b6257988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b20b62567b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgbpuzeq6                        0x00005652af22352e <unavailable> + 5422\n5    libc.so.6                          0x00002b20b674c460 __libc_start_main + 245\n6    tmpgbpuzeq6                        0x00005652af223169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    count = 0\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpl2qxq9j5/tmpl2qxq9j5.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8fb15c5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8fb12bcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8fb12bc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8fb12bb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl2qxq9j5                        0x00005620a557152e <unavailable> + 5422\n5    libc.so.6                          0x00002b8fb17b1460 __libc_start_main + 245\n6    tmpl2qxq9j5                        0x00005620a5571169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        }\n        else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpqs1s5izt/tmpqs1s5izt.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac78d831c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac78d528b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac78d528988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac78d5277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqs1s5izt                        0x0000558da329456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac78da1d460 __libc_start_main + 245\n6    tmpqs1s5izt                        0x0000558da32941a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = even * list1[i]\n        } else {\n            odd = odd * list1[i]\n        }\n        i = i + 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpqzkbmjzz/tmpqzkbmjzz.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba31bb3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba318aab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba318aa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba318a97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqzkbmjzz                        0x000055a358d3447e <unavailable> + 5246\n5    libc.so.6                          0x00002aba31d9f460 __libc_start_main + 245\n6    tmpqzkbmjzz                        0x000055a358d340b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in list1 {\n        if i % 2 == 0 {\n            even = even * i\n        } else {\n            odd = odd * i\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpgbpuzeq6/tmpgbpuzeq6.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b20b6560c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b20b6257b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b20b6257988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b20b62567b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgbpuzeq6                        0x00005652af22352e <unavailable> + 5422\n5    libc.so.6                          0x00002b20b674c460 __libc_start_main + 245\n6    tmpgbpuzeq6                        0x00005652af223169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpefi_0z5b/tmpefi_0z5b.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abaea5bdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abaea2b4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abaea2b4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abaea2b37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpefi_0z5b                        0x000055b13d31b47e <unavailable> + 5246\n5    libc.so.6                          0x00002abaea7a9460 __libc_start_main + 245\n6    tmpefi_0z5b                        0x000055b13d31b0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var i = 0\n    while i < list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpa0fjioma/tmpa0fjioma.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6ca4d06c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6ca49fdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6ca49fd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6ca49fc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa0fjioma                        0x00005579897ae47e <unavailable> + 5246\n5    libc.so.6                          0x00002b6ca4ef2460 __libc_start_main + 245\n6    tmpa0fjioma                        0x00005579897ae0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in 0..<list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n    }\n    for i in 0..<list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    var j = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            i += 1\n            break\n        }\n        i += 1\n    }\n    while j < list1.count {\n        if list1[j] % 2 != 0 {\n            odd = list1[j]\n            j += 1\n            break\n        }\n        j += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even_num = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd_num = i\n                count += 1\n            }\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpswy_s2kk/tmpswy_s2kk.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b075196ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0751661b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0751661988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b07516607b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpswy_s2kk                        0x00005638b5eec62f <unavailable> + 5679\n5    libc.so.6                          0x00002b0751b56460 __libc_start_main + 245\n6    tmpswy_s2kk                        0x00005638b5eec169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even_num = i\n                flag = 1\n            }\n        }\n        else {\n            if flag == 1 {\n                odd_num = i\n                break\n            }\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmp26cw5hze/tmp26cw5hze.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b54fe9afc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b54fe6a6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b54fe6a6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b54fe6a57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp26cw5hze                        0x0000560e65d8062f <unavailable> + 5679\n5    libc.so.6                          0x00002b54feb9b460 __libc_start_main + 245\n6    tmp26cw5hze                        0x0000560e65d80169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var even_flag = false\n    var odd_flag = false\n    for i in list1 {\n        if i % 2 == 0 {\n            if even_flag == false {\n                even = i\n                even_flag = true\n            }\n        }\n        else {\n            if odd_flag == false {\n                odd = i\n                odd_flag = true\n            }\n        }\n        if even_flag == true && odd_flag == true {\n            break\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    count = 0\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpl2qxq9j5/tmpl2qxq9j5.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8fb15c5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8fb12bcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8fb12bc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8fb12bb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl2qxq9j5                        0x00005620a557152e <unavailable> + 5422\n5    libc.so.6                          0x00002b8fb17b1460 __libc_start_main + 245\n6    tmpl2qxq9j5                        0x00005620a5571169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmp4dekf3m4/tmp4dekf3m4.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc9be09c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc9bb00b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc9bb00988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc9baff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4dekf3m4                        0x00005601224a262f <unavailable> + 5679\n5    libc.so.6                          0x00002acc9bff5460 __libc_start_main + 245\n6    tmp4dekf3m4                        0x00005601224a2169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpefi_0z5b/tmpefi_0z5b.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abaea5bdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abaea2b4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abaea2b4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abaea2b37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpefi_0z5b                        0x000055b13d31b47e <unavailable> + 5246\n5    libc.so.6                          0x00002abaea7a9460 __libc_start_main + 245\n6    tmpefi_0z5b                        0x000055b13d31b0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even * odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                count += 1\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpt385dfoa/tmpt385dfoa.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b97c7492c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b97c7189b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b97c7189988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b97c71887b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt385dfoa                        0x000055e048aea62f <unavailable> + 5679\n5    libc.so.6                          0x00002b97c767e460 __libc_start_main + 245\n6    tmpt385dfoa                        0x000055e048aea169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    var j = 0\n    while i < list1.count && j < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            i += 1\n            break\n        }\n        i += 1\n    }\n    while j < list1.count && i < list1.count {\n        if list1[j] % 2 != 0 {\n            odd = list1[j]\n            j += 1\n            break\n        }\n        j += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmp187nfizw/tmp187nfizw.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2800e7dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2800b74b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2800b74988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2800b737b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp187nfizw                        0x000056291a2b665f <unavailable> + 5727\n5    libc.so.6                          0x00002b2801069460 __libc_start_main + 245\n6    tmp187nfizw                        0x000056291a2b60b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmp4dekf3m4/tmp4dekf3m4.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc9be09c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc9bb00b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc9bb00988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc9baff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4dekf3m4                        0x00005601224a262f <unavailable> + 5679\n5    libc.so.6                          0x00002acc9bff5460 __libc_start_main + 245\n6    tmp4dekf3m4                        0x00005601224a2169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even_num = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd_num = i\n                break\n            }\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpye_d4_2t/tmpye_d4_2t.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae65775ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae657451b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae657451988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae6574507b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpye_d4_2t                        0x000055caa6fbd62f <unavailable> + 5679\n5    libc.so.6                          0x00002ae657946460 __libc_start_main + 245\n6    tmpye_d4_2t                        0x000055caa6fbd169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmp4dekf3m4/tmp4dekf3m4.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc9be09c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc9bb00b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc9bb00988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc9baff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4dekf3m4                        0x00005601224a262f <unavailable> + 5679\n5    libc.so.6                          0x00002acc9bff5460 __libc_start_main + 245\n6    tmp4dekf3m4                        0x00005601224a2169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmp7a0wyj_x/tmp7a0wyj_x.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf52995c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf5268cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf5268c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf5268b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7a0wyj_x                        0x0000560a40ada62f <unavailable> + 5679\n5    libc.so.6                          0x00002abf52b81460 __libc_start_main + 245\n6    tmp7a0wyj_x                        0x0000560a40ada169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in list1 {\n        if i % 2 == 0 {\n            even *= i\n        } else {\n            odd *= i\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmprxr50ojo/tmprxr50ojo.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9086213c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9085f0ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9085f0a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9085f097b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprxr50ojo                        0x000055c12e28d52e <unavailable> + 5422\n5    libc.so.6                          0x00002b90863ff460 __libc_start_main + 245\n6    tmprxr50ojo                        0x000055c12e28d169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even_num = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd_num = i\n                count += 1\n            }\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpswy_s2kk/tmpswy_s2kk.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b075196ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0751661b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0751661988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b07516607b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpswy_s2kk                        0x00005638b5eec62f <unavailable> + 5679\n5    libc.so.6                          0x00002b0751b56460 __libc_start_main + 245\n6    tmpswy_s2kk                        0x00005638b5eec169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        }\n        else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpqs1s5izt/tmpqs1s5izt.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac78d831c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac78d528b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac78d528988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac78d5277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqs1s5izt                        0x0000558da329456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac78da1d460 __libc_start_main + 245\n6    tmpqs1s5izt                        0x0000558da32941a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if list1[i] % 2 == 0 {\n            even = even * list1[i]\n        } else {\n            odd = odd * list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmp1lapf59v/tmp1lapf59v.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af7a85e2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af7a82d9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af7a82d9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af7a82d87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1lapf59v                        0x0000558f7a39356e <unavailable> + 5486\n5    libc.so.6                          0x00002af7a87ce460 __libc_start_main + 245\n6    tmp1lapf59v                        0x0000558f7a3931a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even * odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpytfl6gs3/tmpytfl6gs3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9b3a8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac9b3786b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac9b3786988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9b37857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpytfl6gs3                        0x000055c6ed82456e <unavailable> + 5486\n5    libc.so.6                          0x00002ac9b3c7b460 __libc_start_main + 245\n6    tmpytfl6gs3                        0x000055c6ed8241a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                count += 1\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpt385dfoa/tmpt385dfoa.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b97c7492c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b97c7189b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b97c7189988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b97c71887b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt385dfoa                        0x000055e048aea62f <unavailable> + 5679\n5    libc.so.6                          0x00002b97c767e460 __libc_start_main + 245\n6    tmpt385dfoa                        0x000055e048aea169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given array.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                count += 1\n            }\n        }\n        if count == 2 {\n            break\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "tmpwq1ouuob/tmpwq1ouuob.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab33827ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab337f71b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab337f71988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab337f707b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwq1ouuob                        0x000056374c9aa62f <unavailable> + 5679\n5    libc.so.6                          0x00002ab338466460 __libc_start_main + 245\n6    tmpwq1ouuob                        0x000056374c9aa169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}