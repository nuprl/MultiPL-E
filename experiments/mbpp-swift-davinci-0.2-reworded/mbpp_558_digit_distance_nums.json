{
  "name": "mbpp_558_digit_distance_nums",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum",
    "    return 0",
    "    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum",
    "    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum",
    "    return 0",
    "    var sum = 0\n    for i in 0...9 {\n        sum += abs(count_digits(n1, digit: i) - count_digits(n2, digit: i))\n    }\n    return sum",
    "    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum",
    "    return 0",
    "    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum",
    "    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum",
    "    return 0",
    "    let n1_digits = n1.digits()\n    let n2_digits = n2.digits()\n    var sum = 0\n    for i in 0..<n1_digits.count {\n        sum += abs(n1_digits[i] - n2_digits[i])\n    }\n    return sum",
    "    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum",
    "    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        sum += abs((n1 % 10) - (n2 % 10))\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum",
    "    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum",
    "    let n1_digits = String(n1).characters.map { Int(String($0))! }\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n    let n1_digits_count = n1_digits.count\n    let n2_digits_count = n2_digits.count\n    let max_digits_count = max(n1_digits_count, n2_digits_count)\n    var sum = 0\n    for i in 0..<max_digits_count {\n        let n1_digit = i < n1_digits_count ? n1_digits[i] : 0\n        let n2_digit = i < n2_digits_count ? n2_digits[i] : 0\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum",
    "    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum",
    "    return 0",
    "    var sum = 0\n    for i in 0..<n1.digits.count {\n        sum += abs(n1.digits[i] - n2.digits[i])\n    }\n    return sum",
    "    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum"
  ]
}