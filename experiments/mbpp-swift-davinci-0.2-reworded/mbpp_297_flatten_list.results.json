{
  "name": "mbpp_297_flatten_list",
  "language": "swift",
  "prompt": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpz7ewdruh.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpz7ewdruh.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpz7ewdruh.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpz7ewdruh.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpy1jwrten.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpy1jwrten.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpy1jwrten.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpy1jwrten.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp4z7fexho.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp4z7fexho.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp4z7fexho.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp4z7fexho.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2 = [Int]()\n    for element in list1 as! [AnyHashable] {\n        if element is Int {\n            list2.append(element as! Int)\n        } else {\n            list2.append(contentsOf: flatten_list(list1: element))\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpt4j3xbsj.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpt4j3xbsj.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpt4j3xbsj.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpt4j3xbsj.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2: [Int] = []\n    for item in list1 as! [AnyHashable] {\n        if item is Int {\n            list2.append(item as! Int)\n        } else {\n            list2 += flatten_list(list1: item)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpa6_rbrpw.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpa6_rbrpw.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpa6_rbrpw.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpa6_rbrpw.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let list2 = item as? [AnyHashable] {\n                result += flatten_list(list1: list2)\n            } else {\n                result.append(item as! Int)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpwvt0jsge.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpwvt0jsge.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpwvt0jsge.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpwvt0jsge.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2 = [Int]()\n    for item in list1 as! [AnyHashable] {\n        if item is Int {\n            list2.append(item as! Int)\n        } else {\n            list2.append(contentsOf: flatten_list(list1: item))\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpe92l69su.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpe92l69su.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpe92l69su.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpe92l69su.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            } else {\n                result.append(item as! Int)\n            }\n        }\n    } else {\n        result.append(list1 as! Int)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpx3ldh1_j.swift:32:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpx3ldh1_j.swift:32:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpx3ldh1_j.swift:32:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpx3ldh1_j.swift:32:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            list2.append(contentsOf: flatten_list(list1: item))\n        }\n    } else {\n        list2.append(list1 as! Int)\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmprl4msqud.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmprl4msqud.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmprl4msqud.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmprl4msqud.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpmsnrrxw9.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpmsnrrxw9.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpmsnrrxw9.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpmsnrrxw9.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                list2.append(item)\n            } else if let item = item as? [AnyHashable] {\n                list2.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpun518_2c.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpun518_2c.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpun518_2c.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpun518_2c.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp_zuau276.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp_zuau276.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp_zuau276.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp_zuau276.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            } else if let item = item as? Int {\n                result.append(item)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpwcf2ikg9.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpwcf2ikg9.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpwcf2ikg9.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpwcf2ikg9.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmptat17gd1.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmptat17gd1.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmptat17gd1.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmptat17gd1.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                list2.append(item)\n            } else if let item = item as? [AnyHashable] {\n                list2 += flatten_list(list1: item)\n            }\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp7u53wvtn.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp7u53wvtn.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp7u53wvtn.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp7u53wvtn.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp74qfmjh9.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp74qfmjh9.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp74qfmjh9.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp74qfmjh9.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? [AnyHashable] {\n                list2.append(contentsOf: flatten_list(list1: item))\n            } else {\n                list2.append(item as! Int)\n            }\n        }\n    } else {\n        list2.append(list1 as! Int)\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp6cbyjtsf.swift:32:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp6cbyjtsf.swift:32:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp6cbyjtsf.swift:32:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp6cbyjtsf.swift:32:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp_zuau276.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp_zuau276.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp_zuau276.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp_zuau276.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            if let item2 = item as? Int {\n                list.append(item2)\n            } else if let item2 = item as? [AnyHashable] {\n                list.append(contentsOf: flatten_list(list1: item2))\n            }\n        }\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpcmjahf43.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpcmjahf43.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpcmjahf43.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpcmjahf43.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result += flatten_list(list1: item)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpab7dlqx_.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpab7dlqx_.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpab7dlqx_.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpab7dlqx_.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var flatList: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                flatList.append(item)\n            }\n            else if let item = item as? [AnyHashable] {\n                flatList.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return flatList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpz4utlv0s.swift:31:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpz4utlv0s.swift:31:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpz4utlv0s.swift:31:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpz4utlv0s.swift:31:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = list1 as! [AnyHashable]\n    var result = [Int]()\n    for item in list {\n        if let item = item as? Int {\n            result.append(item)\n        } else {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp5jrh73jn.swift:29:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp5jrh73jn.swift:29:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp5jrh73jn.swift:29:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp5jrh73jn.swift:29:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n/tmp/tmp5jrh73jn.swift:4:9: warning: variable 'list' was never mutated; consider changing to 'let' constant\n    var list = list1 as! [AnyHashable]\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp4z7fexho.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp4z7fexho.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp4z7fexho.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp4z7fexho.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp4z7fexho.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp4z7fexho.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp4z7fexho.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp4z7fexho.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp_zuau276.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp_zuau276.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp_zuau276.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp_zuau276.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpy1jwrten.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpy1jwrten.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpy1jwrten.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpy1jwrten.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp_zuau276.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp_zuau276.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp_zuau276.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp_zuau276.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp74qfmjh9.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp74qfmjh9.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp74qfmjh9.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp74qfmjh9.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else {\n        list.append(list1 as! Int)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp8ka79ott.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp8ka79ott.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp8ka79ott.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp8ka79ott.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = list1 as! [AnyHashable]\n    var result = [Int]()\n    for item in list {\n        if let item = item as? Int {\n            result.append(item)\n        } else {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp5jrh73jn.swift:29:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp5jrh73jn.swift:29:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp5jrh73jn.swift:29:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp5jrh73jn.swift:29:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n/tmp/tmp5jrh73jn.swift:4:9: warning: variable 'list' was never mutated; consider changing to 'let' constant\n    var list = list1 as! [AnyHashable]\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp_zuau276.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp_zuau276.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp_zuau276.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp_zuau276.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpz7ewdruh.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpz7ewdruh.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpz7ewdruh.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpz7ewdruh.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            if let item2 = item as? Int {\n                list.append(item2)\n            } else {\n                list.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpoe8t4uxl.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpoe8t4uxl.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpoe8t4uxl.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpoe8t4uxl.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2: [Int] = []\n    if let list3 = list1 as? [AnyHashable] {\n        for item in list3 {\n            if let item2 = item as? Int {\n                list2.append(item2)\n            } else if let item2 = item as? [AnyHashable] {\n                list2.append(contentsOf: flatten_list(list1: item2))\n            }\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpygiei9zg.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpygiei9zg.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpygiei9zg.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpygiei9zg.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = list1 as! [AnyHashable]\n    var result = [Int]()\n    for item in list {\n        if let item = item as? [AnyHashable] {\n            result += flatten_list(list1: item)\n        } else {\n            result.append(item as! Int)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpnhjpjydn.swift:29:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpnhjpjydn.swift:29:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpnhjpjydn.swift:29:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpnhjpjydn.swift:29:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n/tmp/tmpnhjpjydn.swift:4:9: warning: variable 'list' was never mutated; consider changing to 'let' constant\n    var list = list1 as! [AnyHashable]\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp_zuau276.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp_zuau276.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp_zuau276.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp_zuau276.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            } else if let item = item as? Int {\n                result.append(item)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpwcf2ikg9.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpwcf2ikg9.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpwcf2ikg9.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpwcf2ikg9.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = list1 as! [AnyHashable]\n    var result = [Int]()\n    for item in list {\n        if item is Int {\n            result.append(item as! Int)\n        } else {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp7gv0g0t9.swift:29:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp7gv0g0t9.swift:29:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp7gv0g0t9.swift:29:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp7gv0g0t9.swift:29:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n/tmp/tmp7gv0g0t9.swift:4:9: warning: variable 'list' was never mutated; consider changing to 'let' constant\n    var list = list1 as! [AnyHashable]\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            } else {\n                result.append(item as! Int)\n            }\n        }\n    } else {\n        result.append(list1 as! Int)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpx3ldh1_j.swift:32:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpx3ldh1_j.swift:32:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpx3ldh1_j.swift:32:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpx3ldh1_j.swift:32:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp74qfmjh9.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp74qfmjh9.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp74qfmjh9.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp74qfmjh9.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result += flatten_list(list1: item)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp3fahp2dl.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp3fahp2dl.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp3fahp2dl.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp3fahp2dl.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpz7ewdruh.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpz7ewdruh.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpz7ewdruh.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpz7ewdruh.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list1 = list1 as? [AnyHashable] {\n        for item in list1 {\n            if let item = item as? [AnyHashable] {\n                list.append(contentsOf: flatten_list(list1: item))\n            } else {\n                list.append(item as! Int)\n            }\n        }\n    } else {\n        list.append(list1 as! Int)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp3jf3cjzf.swift:32:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp3jf3cjzf.swift:32:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp3jf3cjzf.swift:32:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp3jf3cjzf.swift:32:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpz7ewdruh.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpz7ewdruh.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpz7ewdruh.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpz7ewdruh.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmptat17gd1.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmptat17gd1.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmptat17gd1.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmptat17gd1.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for element in list {\n            result += flatten_list(list1: element)\n        }\n    } else if let element = list1 as? Int {\n        result.append(element)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpbpklyij_.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpbpklyij_.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpbpklyij_.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpbpklyij_.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            list2.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list2.append(item)\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp1m9r8cwp.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp1m9r8cwp.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp1m9r8cwp.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp1m9r8cwp.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result += flatten_list(list1: item)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp3fahp2dl.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp3fahp2dl.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp3fahp2dl.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp3fahp2dl.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp_zuau276.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp_zuau276.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp_zuau276.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp_zuau276.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpy1jwrten.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpy1jwrten.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpy1jwrten.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpy1jwrten.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            list2 += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        list2.append(item)\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp93_2jg9b.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp93_2jg9b.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp93_2jg9b.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp93_2jg9b.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpz7ewdruh.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpz7ewdruh.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpz7ewdruh.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpz7ewdruh.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            list2 += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        list2.append(item)\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp93_2jg9b.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp93_2jg9b.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp93_2jg9b.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp93_2jg9b.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpmsnrrxw9.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpmsnrrxw9.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpmsnrrxw9.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpmsnrrxw9.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp74qfmjh9.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp74qfmjh9.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp74qfmjh9.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp74qfmjh9.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            list2.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list2.append(item)\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp1m9r8cwp.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp1m9r8cwp.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp1m9r8cwp.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp1m9r8cwp.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp_zuau276.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp_zuau276.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp_zuau276.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp_zuau276.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp89xh29_o.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp89xh29_o.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp89xh29_o.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp89xh29_o.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpmsnrrxw9.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpmsnrrxw9.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpmsnrrxw9.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpmsnrrxw9.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            list2.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list2.append(item)\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpmbzg3_9m.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpmbzg3_9m.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpmbzg3_9m.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpmbzg3_9m.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            if let item2 = item as? Int {\n                list.append(item2)\n            } else if let item2 = item as? [AnyHashable] {\n                list.append(contentsOf: flatten_list(list1: item2))\n            }\n        }\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpcmjahf43.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpcmjahf43.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpcmjahf43.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpcmjahf43.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp_zuau276.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp_zuau276.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp_zuau276.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp_zuau276.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let l = list1 as? [AnyHashable] {\n        for item in l {\n            if let i = item as? Int {\n                list.append(i)\n            } else if let i = item as? [AnyHashable] {\n                list.append(contentsOf: flatten_list(list1: i))\n            }\n        }\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpjaowm3yu.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpjaowm3yu.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpjaowm3yu.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpjaowm3yu.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp_zuau276.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp_zuau276.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp_zuau276.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp_zuau276.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpz7ewdruh.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpz7ewdruh.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpz7ewdruh.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpz7ewdruh.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpz7ewdruh.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpz7ewdruh.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpz7ewdruh.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpz7ewdruh.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp74qfmjh9.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp74qfmjh9.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp74qfmjh9.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp74qfmjh9.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            list2.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list2.append(item)\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp1m9r8cwp.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp1m9r8cwp.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp1m9r8cwp.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp1m9r8cwp.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp74qfmjh9.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp74qfmjh9.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp74qfmjh9.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp74qfmjh9.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for element in list {\n            list2.append(contentsOf: flatten_list(list1: element))\n        }\n    } else if let number = list1 as? Int {\n        list2.append(number)\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpocw3hugu.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpocw3hugu.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpocw3hugu.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpocw3hugu.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = list1 as! [AnyHashable]\n    var result = [Int]()\n    for i in list {\n        if let i = i as? Int {\n            result.append(i)\n        } else {\n            result += flatten_list(list1: i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpiwap6pa0.swift:29:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpiwap6pa0.swift:29:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpiwap6pa0.swift:29:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpiwap6pa0.swift:29:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n/tmp/tmpiwap6pa0.swift:4:9: warning: variable 'list' was never mutated; consider changing to 'let' constant\n    var list = list1 as! [AnyHashable]\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = list1 as! [AnyHashable]\n    var result = [Int]()\n    for item in list {\n        if let item = item as? Int {\n            result.append(item)\n        } else {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp5jrh73jn.swift:29:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp5jrh73jn.swift:29:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp5jrh73jn.swift:29:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp5jrh73jn.swift:29:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n/tmp/tmp5jrh73jn.swift:4:9: warning: variable 'list' was never mutated; consider changing to 'let' constant\n    var list = list1 as! [AnyHashable]\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp74qfmjh9.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp74qfmjh9.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp74qfmjh9.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp74qfmjh9.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            list2.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list2.append(item)\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp1m9r8cwp.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp1m9r8cwp.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp1m9r8cwp.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp1m9r8cwp.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp74qfmjh9.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp74qfmjh9.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp74qfmjh9.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp74qfmjh9.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp_zuau276.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp_zuau276.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp_zuau276.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp_zuau276.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp_zuau276.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp_zuau276.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp_zuau276.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp_zuau276.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2 = [Int]()\n    for item in list1 {\n        if let item = item as? Int {\n            list2.append(item)\n        } else if let item = item as? [AnyHashable] {\n            list2.append(contentsOf: flatten_list(list1: item))\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpg4g2wdhu.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpg4g2wdhu.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpg4g2wdhu.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpg4g2wdhu.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n/tmp/tmpg4g2wdhu.swift:5:17: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for item in list1 {\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for element in list {\n            result.append(contentsOf: flatten_list(list1: element))\n        }\n    } else if let element = list1 as? Int {\n        result.append(element)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpqrl69nrh.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpqrl69nrh.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpqrl69nrh.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpqrl69nrh.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2: [Int] = []\n    if let list1 = list1 as? [AnyHashable] {\n        for item in list1 {\n            if let item = item as? Int {\n                list2.append(item)\n            } else if let item = item as? [AnyHashable] {\n                list2.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp_mwf9hwn.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp_mwf9hwn.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp_mwf9hwn.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp_mwf9hwn.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            list2.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list2.append(item)\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpmbzg3_9m.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpmbzg3_9m.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpmbzg3_9m.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpmbzg3_9m.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp_zuau276.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp_zuau276.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp_zuau276.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp_zuau276.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp_zuau276.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp_zuau276.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp_zuau276.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp_zuau276.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp74qfmjh9.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp74qfmjh9.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp74qfmjh9.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp74qfmjh9.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmptat17gd1.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmptat17gd1.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmptat17gd1.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmptat17gd1.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp_zuau276.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp_zuau276.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp_zuau276.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp_zuau276.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            } else {\n                result.append(item as! Int)\n            }\n        }\n    } else {\n        result.append(list1 as! Int)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpx3ldh1_j.swift:32:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpx3ldh1_j.swift:32:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpx3ldh1_j.swift:32:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpx3ldh1_j.swift:32:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result += flatten_list(list1: item)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp3fahp2dl.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp3fahp2dl.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp3fahp2dl.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp3fahp2dl.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp74qfmjh9.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp74qfmjh9.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp74qfmjh9.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp74qfmjh9.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            if let item2 = item as? Int {\n                list.append(item2)\n            } else if let item2 = item as? [AnyHashable] {\n                list.append(contentsOf: flatten_list(list1: item2))\n            }\n        }\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpcmjahf43.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpcmjahf43.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpcmjahf43.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpcmjahf43.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpmsnrrxw9.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpmsnrrxw9.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpmsnrrxw9.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpmsnrrxw9.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp_zuau276.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp_zuau276.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp_zuau276.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp_zuau276.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp74qfmjh9.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp74qfmjh9.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp74qfmjh9.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp74qfmjh9.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            list2.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list2.append(item)\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpmbzg3_9m.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpmbzg3_9m.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpmbzg3_9m.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpmbzg3_9m.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for element in list {\n            result.append(contentsOf: flatten_list(list1: element))\n        }\n    } else if let number = list1 as? Int {\n        result.append(number)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpxgw8i_b9.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpxgw8i_b9.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpxgw8i_b9.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpxgw8i_b9.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = list1 as! [AnyHashable]\n    var result = [Int]()\n    for item in list {\n        if let item = item as? Int {\n            result.append(item)\n        } else {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp5jrh73jn.swift:29:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp5jrh73jn.swift:29:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp5jrh73jn.swift:29:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp5jrh73jn.swift:29:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n/tmp/tmp5jrh73jn.swift:4:9: warning: variable 'list' was never mutated; consider changing to 'let' constant\n    var list = list1 as! [AnyHashable]\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list1 = list1 as? [AnyHashable] {\n        for item in list1 {\n            if let item = item as? Int {\n                list.append(item)\n            } else if let item = item as? [AnyHashable] {\n                list.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpqbyefgtr.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpqbyefgtr.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpqbyefgtr.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpqbyefgtr.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp4z7fexho.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp4z7fexho.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp4z7fexho.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp4z7fexho.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            list2.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list2.append(item)\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp1m9r8cwp.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp1m9r8cwp.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp1m9r8cwp.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp1m9r8cwp.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp4z7fexho.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp4z7fexho.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp4z7fexho.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp4z7fexho.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            } else if let item = item as? Int {\n                result.append(item)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpp6nnsf88.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpp6nnsf88.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpp6nnsf88.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpp6nnsf88.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2: [Int] = []\n    if let list1 = list1 as? [AnyHashable] {\n        for item in list1 {\n            if let item = item as? Int {\n                list2.append(item)\n            } else if let item = item as? [AnyHashable] {\n                list2 += flatten_list(list1: item)\n            }\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpl6_uux7m.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpl6_uux7m.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpl6_uux7m.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpl6_uux7m.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = list1 as! [AnyHashable]\n    var result = [Int]()\n    for item in list {\n        if let item = item as? Int {\n            result.append(item)\n        } else {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp5jrh73jn.swift:29:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp5jrh73jn.swift:29:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp5jrh73jn.swift:29:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp5jrh73jn.swift:29:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n/tmp/tmp5jrh73jn.swift:4:9: warning: variable 'list' was never mutated; consider changing to 'let' constant\n    var list = list1 as! [AnyHashable]\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2 = [Int]()\n    if let list1 = list1 as? [AnyHashable] {\n        for item in list1 {\n            if let item = item as? Int {\n                list2.append(item)\n            } else if let item = item as? [AnyHashable] {\n                list2 += flatten_list(list1: item)\n            }\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpqcvn50l0.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpqcvn50l0.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpqcvn50l0.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpqcvn50l0.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpy1jwrten.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpy1jwrten.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpy1jwrten.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpy1jwrten.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp_zuau276.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp_zuau276.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp_zuau276.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp_zuau276.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp74qfmjh9.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp74qfmjh9.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp74qfmjh9.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp74qfmjh9.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpy1jwrten.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpy1jwrten.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpy1jwrten.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpy1jwrten.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = list1 as! [AnyHashable]\n    var result = [Int]()\n    for item in list {\n        if let item = item as? Int {\n            result.append(item)\n        } else if let item = item as? [AnyHashable] {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmppx93tgrp.swift:29:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmppx93tgrp.swift:29:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmppx93tgrp.swift:29:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmppx93tgrp.swift:29:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n/tmp/tmppx93tgrp.swift:4:9: warning: variable 'list' was never mutated; consider changing to 'let' constant\n    var list = list1 as! [AnyHashable]\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2 = [Int]()\n    if let list1 = list1 as? [AnyHashable] {\n        for item in list1 {\n            if let item = item as? [AnyHashable] {\n                list2.append(contentsOf: flatten_list(list1: item))\n            } else if let item = item as? Int {\n                list2.append(item)\n            }\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpizenbr77.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpizenbr77.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpizenbr77.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpizenbr77.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpz7ewdruh.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpz7ewdruh.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpz7ewdruh.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpz7ewdruh.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result += flatten_list(list1: item)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpab7dlqx_.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpab7dlqx_.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpab7dlqx_.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpab7dlqx_.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp74qfmjh9.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp74qfmjh9.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp74qfmjh9.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp74qfmjh9.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp_zuau276.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp_zuau276.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp_zuau276.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp_zuau276.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            list2.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list2.append(item)\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp1m9r8cwp.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp1m9r8cwp.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp1m9r8cwp.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp1m9r8cwp.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpy1jwrten.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpy1jwrten.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpy1jwrten.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpy1jwrten.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmptat17gd1.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmptat17gd1.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmptat17gd1.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmptat17gd1.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp_zuau276.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp_zuau276.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp_zuau276.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp_zuau276.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp74qfmjh9.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp74qfmjh9.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp74qfmjh9.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp74qfmjh9.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result += flatten_list(list1: item)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp3fahp2dl.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp3fahp2dl.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp3fahp2dl.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp3fahp2dl.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp74qfmjh9.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp74qfmjh9.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp74qfmjh9.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp74qfmjh9.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2 = [Int]()\n    for item in list1 as! [AnyHashable] {\n        if item is Int {\n            list2.append(item as! Int)\n        } else {\n            list2.append(contentsOf: flatten_list(list1: item))\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpe92l69su.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpe92l69su.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpe92l69su.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpe92l69su.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let number = list1 as? Int {\n        result.append(number)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpuxynvp0m.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpuxynvp0m.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpuxynvp0m.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpuxynvp0m.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpjdsy59dd.swift:32:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpjdsy59dd.swift:32:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpjdsy59dd.swift:32:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpjdsy59dd.swift:32:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmptat17gd1.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmptat17gd1.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmptat17gd1.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmptat17gd1.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpz7ewdruh.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpz7ewdruh.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpz7ewdruh.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpz7ewdruh.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let array = list1 as? [AnyHashable] {\n        for element in array {\n            list.append(contentsOf: flatten_list(list1: element))\n        }\n    } else if let number = list1 as? Int {\n        list.append(number)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmppriqm2fe.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmppriqm2fe.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmppriqm2fe.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmppriqm2fe.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpmsnrrxw9.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpmsnrrxw9.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpmsnrrxw9.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpmsnrrxw9.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            list2.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list2.append(item)\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp1m9r8cwp.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp1m9r8cwp.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp1m9r8cwp.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp1m9r8cwp.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = list1 as! [AnyHashable]\n    var result = [Int]()\n    for i in list {\n        if i is Int {\n            result.append(i as! Int)\n        } else {\n            result += flatten_list(list1: i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpswyaenty.swift:29:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpswyaenty.swift:29:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpswyaenty.swift:29:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpswyaenty.swift:29:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n/tmp/tmpswyaenty.swift:4:9: warning: variable 'list' was never mutated; consider changing to 'let' constant\n    var list = list1 as! [AnyHashable]\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let number = list1 as? Int {\n        result.append(number)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpphz8jpcp.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpphz8jpcp.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpphz8jpcp.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpphz8jpcp.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpy1jwrten.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpy1jwrten.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpy1jwrten.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpy1jwrten.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp74qfmjh9.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp74qfmjh9.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp74qfmjh9.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp74qfmjh9.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = list1 as! [AnyHashable]\n    var result = [Int]()\n    for item in list {\n        if let item = item as? Int {\n            result.append(item)\n        } else {\n            result += flatten_list(list1: item)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpw983lo4s.swift:29:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpw983lo4s.swift:29:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpw983lo4s.swift:29:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpw983lo4s.swift:29:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n/tmp/tmpw983lo4s.swift:4:9: warning: variable 'list' was never mutated; consider changing to 'let' constant\n    var list = list1 as! [AnyHashable]\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            list2.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list2.append(item)\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp1m9r8cwp.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp1m9r8cwp.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp1m9r8cwp.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp1m9r8cwp.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            list2.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let num = list1 as? Int {\n        list2.append(num)\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpsvu5ctbk.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpsvu5ctbk.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpsvu5ctbk.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpsvu5ctbk.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp74qfmjh9.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp74qfmjh9.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp74qfmjh9.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp74qfmjh9.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp_zuau276.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp_zuau276.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp_zuau276.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp_zuau276.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = list1 as! [AnyHashable]\n    var result = [Int]()\n    for item in list {\n        if let item = item as? Int {\n            result.append(item)\n        } else {\n            result += flatten_list(list1: item)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpw983lo4s.swift:29:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpw983lo4s.swift:29:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpw983lo4s.swift:29:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpw983lo4s.swift:29:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n/tmp/tmpw983lo4s.swift:4:9: warning: variable 'list' was never mutated; consider changing to 'let' constant\n    var list = list1 as! [AnyHashable]\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpy1jwrten.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpy1jwrten.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpy1jwrten.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpy1jwrten.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = list1 as! [AnyHashable]\n    var result = [Int]()\n    for item in list {\n        if let item = item as? Int {\n            result.append(item)\n        } else {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp5jrh73jn.swift:29:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp5jrh73jn.swift:29:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp5jrh73jn.swift:29:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp5jrh73jn.swift:29:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n/tmp/tmp5jrh73jn.swift:4:9: warning: variable 'list' was never mutated; consider changing to 'let' constant\n    var list = list1 as! [AnyHashable]\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let num = list1 as? Int {\n        result.append(num)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpoml26exc.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpoml26exc.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpoml26exc.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpoml26exc.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp74qfmjh9.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp74qfmjh9.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp74qfmjh9.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp74qfmjh9.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list1 = list1 as? [AnyHashable] {\n        for item in list1 {\n            if let item = item as? Int {\n                list.append(item)\n            } else if let item = item as? [AnyHashable] {\n                list.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpqbyefgtr.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpqbyefgtr.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpqbyefgtr.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpqbyefgtr.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                list2.append(item)\n            } else {\n                list2.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpwrg01gt5.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpwrg01gt5.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpwrg01gt5.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpwrg01gt5.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            list2.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list2.append(item)\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp1m9r8cwp.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp1m9r8cwp.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp1m9r8cwp.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp1m9r8cwp.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let list = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: list))\n            } else if let item = item as? Int {\n                result.append(item)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp4onlcjfv.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp4onlcjfv.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp4onlcjfv.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp4onlcjfv.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            list2.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let number = list1 as? Int {\n        list2.append(number)\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp4v0yocnr.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp4v0yocnr.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp4v0yocnr.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp4v0yocnr.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result += flatten_list(list1: item)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpab7dlqx_.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpab7dlqx_.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpab7dlqx_.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpab7dlqx_.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpy1jwrten.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpy1jwrten.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpy1jwrten.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpy1jwrten.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpmsnrrxw9.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpmsnrrxw9.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpmsnrrxw9.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpmsnrrxw9.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            } else {\n                result.append(item as! Int)\n            }\n        }\n    } else {\n        result.append(list1 as! Int)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpx3ldh1_j.swift:32:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpx3ldh1_j.swift:32:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpx3ldh1_j.swift:32:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpx3ldh1_j.swift:32:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                list2.append(item)\n            } else if let item = item as? [AnyHashable] {\n                list2.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpun518_2c.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpun518_2c.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpun518_2c.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpun518_2c.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpy1jwrten.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpy1jwrten.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpy1jwrten.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpy1jwrten.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2: [Int] = []\n    if let list1 = list1 as? [AnyHashable] {\n        for item in list1 {\n            if let item = item as? [AnyHashable] {\n                list2.append(contentsOf: flatten_list(list1: item))\n            } else {\n                list2.append(item as! Int)\n            }\n        }\n    } else {\n        list2.append(list1 as! Int)\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp_xmpdila.swift:32:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp_xmpdila.swift:32:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp_xmpdila.swift:32:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp_xmpdila.swift:32:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                list2.append(item)\n            } else if let item = item as? [AnyHashable] {\n                list2.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpun518_2c.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpun518_2c.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpun518_2c.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpun518_2c.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let value = list1 as? Int {\n        result.append(value)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmpx7bmd0el.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpx7bmd0el.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpx7bmd0el.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpx7bmd0el.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp74qfmjh9.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp74qfmjh9.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp74qfmjh9.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp74qfmjh9.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp_zuau276.swift:30:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp_zuau276.swift:30:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp_zuau276.swift:30:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp_zuau276.swift:30:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpz7ewdruh.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmpz7ewdruh.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmpz7ewdruh.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmpz7ewdruh.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            list2.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list2.append(item)\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp1m9r8cwp.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp1m9r8cwp.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp1m9r8cwp.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp1m9r8cwp.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp4z7fexho.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp4z7fexho.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp4z7fexho.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp4z7fexho.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            list2.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list2.append(item)\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "/tmp/tmp1m9r8cwp.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp1m9r8cwp.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp1m9r8cwp.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp1m9r8cwp.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp35ie9faf.swift:28:29: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                            ^\n/tmp/tmp35ie9faf.swift:28:32: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                               ^\n/tmp/tmp35ie9faf.swift:28:46: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                             ^\n/tmp/tmp35ie9faf.swift:28:50: error: cannot convert value of type 'Int' to expected element type '[Int]'\nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n                                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}