{
  "name": "mbpp_752_jacobsthal_num",
  "language": "swift",
  "prompt": "\n/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_752_jacobsthal_num.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(jacobsthal_num(n: 5) == 11)\nassert(jacobsthal_num(n: 2) == 1)\nassert(jacobsthal_num(n: 4) == 5)\nassert(jacobsthal_num(n: 13) == 2731)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }",
    "    var a = 0\n    var b = 1\n    var c = 0\n    for _ in 0..<n {\n        c = a + 2 * b\n        a = b\n        b = c\n    }\n    return a",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    var a = 0\n    var b = 1\n    var c = 0\n    if n == 0 {\n        return a\n    }\n    if n == 1 {\n        return b\n    }\n    for _ in 2...n {\n        c = 2 * b + a\n        a = b\n        b = c\n    }\n    return c",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2 * jacobsthal_num(n: n-2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2 * jacobsthal_num(n: n-2)",
    "    var a = 0\n    var b = 1\n    var c = 0\n    if n == 0 {\n        return a\n    }\n    if n == 1 {\n        return b\n    }\n    for _ in 2...n {\n        c = 2 * b + a\n        a = b\n        b = c\n    }\n    return c",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }",
    "    var a = 0, b = 1\n    for _ in 0..<n {\n        let c = a + 2 * b\n        a = b\n        b = c\n    }\n    return a",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2 * jacobsthal_num(n: n-2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2*jacobsthal_num(n: n-2)",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2 * jacobsthal_num(n: n-2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2 * jacobsthal_num(n: n-2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2 * jacobsthal_num(n: n-2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n-1) + 2*jacobsthal_num(n: n-2)\n    }",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    var a = 0\n    var b = 1\n    var c = 0\n    for _ in 0..<n {\n        c = 2 * b + a\n        a = b\n        b = c\n    }\n    return a",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2 * jacobsthal_num(n: n-2)",
    "    if n == 0 { return 0 }\n    if n == 1 { return 1 }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    var a = 0\n    var b = 1\n    var c = 0\n    if n == 0 {\n        return a\n    }\n    if n == 1 {\n        return b\n    }\n    for _ in 2...n {\n        c = 2 * b + a\n        a = b\n        b = c\n    }\n    return c",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n-1) + 2 * jacobsthal_num(n: n-2)\n    }",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2 * jacobsthal_num(n: n-2)",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var jacobsthal_nums = [0, 1]\n    for i in 2...n {\n        jacobsthal_nums.append(jacobsthal_nums[i - 1] + 2 * jacobsthal_nums[i - 2])\n    }\n    return jacobsthal_nums[n]",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    }\n    var a = 0\n    var b = 1\n    var c = 0\n    for _ in 2...n {\n        c = 2 * b + a\n        a = b\n        b = c\n    }\n    return c",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2*jacobsthal_num(n: n-2)",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }",
    "    var a = 0\n    var b = 1\n    var c = 0\n    for _ in 0..<n {\n        c = a + 2 * b\n        a = b\n        b = c\n    }\n    return a",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n-1) + 2 * jacobsthal_num(n: n-2)\n    }",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }",
    "    if n == 0 { return 0 }\n    if n == 1 { return 1 }\n    return jacobsthal_num(n: n-1) + 2 * jacobsthal_num(n: n-2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }",
    "    if n < 2 {\n        return n\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }",
    "    if n == 0 { return 0 }\n    if n == 1 { return 1 }\n    return jacobsthal_num(n: n-1) + 2 * jacobsthal_num(n: n-2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2 * jacobsthal_num(n: n-2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 || n == 1 {\n        return n\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2 * jacobsthal_num(n: n-2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2*jacobsthal_num(n: n-2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2*jacobsthal_num(n: n-2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2*jacobsthal_num(n: n-2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    var a = 0, b = 1\n    for _ in 0..<n {\n        let c = a + 2 * b\n        a = b\n        b = c\n    }\n    return a",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    var a = 0\n    var b = 1\n    var c = 0\n    for _ in 0..<n {\n        c = a + 2 * b\n        a = b\n        b = c\n    }\n    return a",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)\n    }",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    var a = 0\n    var b = 1\n    var c = 0\n    for _ in 0..<n {\n        c = 2 * b + a\n        a = b\n        b = c\n    }\n    return a",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n-1) + 2*jacobsthal_num(n: n-2)",
    "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return jacobsthal_num(n: n-1) + 2*jacobsthal_num(n: n-2)\n    }",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return jacobsthal_num(n: n - 1) + 2 * jacobsthal_num(n: n - 2)"
  ]
}