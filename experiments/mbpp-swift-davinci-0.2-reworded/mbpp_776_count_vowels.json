{
  "name": "mbpp_776_count_vowels",
  "language": "swift",
  "prompt": "\n/// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str: String) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_vowels(test_str: \"bestinstareels\") == 7)\nassert(count_vowels(test_str: \"partofthejourneyistheend\") == 12)\nassert(count_vowels(test_str: \"amazonprime\") == 5)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = String(test_str[index])\n        if vowels.contains(char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = String(test_str[next_index])\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = String(test_str[index])\n        if vowels.contains(char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = String(test_str[next_index])\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if is_vowel(char: char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if is_vowel(char: prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if is_vowel(char: next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i == 0 {\n                if test_str.count > 1 {\n                    let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                    let next_char = test_str[next_index]\n                    if next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                        count += 1\n                    }\n                }\n            } else if i == test_str.count - 1 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" {\n                    count += 1\n                }\n            } else {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" || next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]) {\n                count += 1\n            }\n        } else {\n            if is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]) || is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        if test_str[index] == \"a\" || test_str[index] == \"e\" || test_str[index] == \"i\" || test_str[index] == \"o\" || test_str[index] == \"u\" {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                if test_str[prev_index] == \"a\" || test_str[prev_index] == \"e\" || test_str[prev_index] == \"i\" || test_str[prev_index] == \"o\" || test_str[prev_index] == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                if test_str[next_index] == \"a\" || test_str[next_index] == \"e\" || test_str[next_index] == \"i\" || test_str[next_index] == \"o\" || test_str[next_index] == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        if test_str[index] == \"a\" || test_str[index] == \"e\" || test_str[index] == \"i\" || test_str[index] == \"o\" || test_str[index] == \"u\" {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                if test_str[prev_index] == \"a\" || test_str[prev_index] == \"e\" || test_str[prev_index] == \"i\" || test_str[prev_index] == \"o\" || test_str[prev_index] == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                if test_str[next_index] == \"a\" || test_str[next_index] == \"e\" || test_str[next_index] == \"i\" || test_str[next_index] == \"o\" || test_str[next_index] == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if (index < test_str.count - 1) && (vowels.contains(char) || vowels.contains(test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)])) {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        if test_str[index] == \"a\" || test_str[index] == \"e\" || test_str[index] == \"i\" || test_str[index] == \"o\" || test_str[index] == \"u\" {\n            if i > 0 {\n                let index_prev = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                if test_str[index_prev] == \"a\" || test_str[index_prev] == \"e\" || test_str[index_prev] == \"i\" || test_str[index_prev] == \"o\" || test_str[index_prev] == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let index_next = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                if test_str[index_next] == \"a\" || test_str[index_next] == \"e\" || test_str[index_next] == \"i\" || test_str[index_next] == \"o\" || test_str[index_next] == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if is_vowel(char: test_str[test_str.index(after: test_str.startIndex)]) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if is_vowel(char: test_str[test_str.index(before: test_str.endIndex)]) {\n                count += 1\n            }\n        } else {\n            if is_vowel(char: test_str[test_str.index(after: test_str.startIndex)]) || is_vowel(char: test_str[test_str.index(before: test_str.endIndex)]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = String(test_str[index])\n        if vowels.contains(char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = String(test_str[next_index])\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)])) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)])) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)])) || vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)])) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(test_str[test_str.index(after: test_str.startIndex)]) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(test_str[test_str.index(before: test_str.endIndex)]) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(test_str[test_str.index(after: test_str.index(after: test_str.startIndex))]) || vowels.contains(test_str[test_str.index(before: test_str.index(before: test_str.endIndex))]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        if i == 0 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"u\" {\n                    count += 1\n                }\n            }\n        } else if i == test_str.count - 1 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: i - 1)] == \"a\" || test_str",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(String(test_str[test_str.index(after: test_str.startIndex)])) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(String(test_str[test_str.index(before: test_str.endIndex)])) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(String(test_str[test_str.index(after: test_str.index(after: test_str.startIndex))])) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var char_array = Array(test_str)\n    for i in 0..<char_array.count {\n        if i == 0 {\n            if is_vowel(char: char_array[i]) && is_vowel(char: char_array[i+1]) {\n                count += 1\n            }\n        } else if i == char_array.count - 1 {\n            if is_vowel(char: char_array[i]) && is_vowel(char: char_array[i-1]) {\n                count += 1\n            }\n        } else {\n            if is_vowel(char: char_array[i]) && (is_vowel(char: char_array[i-1]) || is_vowel(char: char_array[i+1])) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = String(test_str[index])\n        if vowels.contains(char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = String(test_str[next_index])\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i > 0 {\n                let index_prev = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let char_prev = test_str[index_prev]\n                if char_prev == \"a\" || char_prev == \"e\" || char_prev == \"i\" || char_prev == \"o\" || char_prev == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let index_next = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let char_next = test_str[index_next]\n                if char_next == \"a\" || char_next == \"e\" || char_next == \"i\" || char_next == \"o\" || char_next == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if is_vowel(char: char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if is_vowel(char: prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if is_vowel(char: next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        if i == 0 && vowels.contains(test_str[test_str.index(test_str.startIndex, offsetBy: i)]) {\n            count += 1\n        } else if i == test_str.count - 1 && vowels.contains(test_str[test_str.index(test_str.startIndex, offsetBy: i)]) {\n            count += 1\n        } else if vowels.contains(test_str[test_str.index(test_str.startIndex, offsetBy: i)]) && vowels.contains(test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)]) {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        if i == 0 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"u\" {\n                    count += 1\n                }\n            }\n        } else if i == test_str.count - 1 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: i - 1)] == \"a\" || test_str",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: 1)])) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)])) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)])) || vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)])) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        if i == 0 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"u\" {\n                    count += 1\n                }\n            }\n        } else if i == test_str.count - 1 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: i - 1)] == \"a\" || test_str",
    "    var count = 0\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (i, c) in test_str.enumerated() {\n        if i > 0 && vowels.contains(test_str[test_str.index(test_str.startIndex, offsetBy: i - 1)]) {\n            count += 1\n        }\n        if i < test_str.count - 1 && vowels.contains(test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)]) {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: 1)]) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]) {\n                count += 1\n            }\n        } else {\n            if is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]) || is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(test_str[test_str.index(after: test_str.startIndex)]) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(test_str[test_str.index(before: test_str.endIndex)]) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(test_str[test_str.index(after: test_str.index(after: test_str.startIndex))]) || vowels.contains(test_str[test_str.index(before: test_str.index(before: test_str.endIndex))]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let character = test_str[index]\n        if character == \"a\" || character == \"e\" || character == \"i\" || character == \"o\" || character == \"u\" {\n            if i > 0 {\n                let index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let character = test_str[index]\n                if character == \"a\" || character == \"e\" || character == \"i\" || character == \"o\" || character == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let character = test_str[index]\n                if character == \"a\" || character == \"e\" || character == \"i\" || character == \"o\" || character == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if is_vowel(char: test_str[test_str.index(after: test_str.startIndex)]) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if is_vowel(char: test_str[test_str.index(before: test_str.endIndex)]) {\n                count += 1\n            }\n        } else {\n            if is_vowel(char: test_str[test_str.index(after: test_str.index(after: test_str.startIndex, offsetBy: index))]) || is_vowel(char: test_str[test_str.index(before: test_str.index(before: test_str.endIndex, offsetBy: index))]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(char) && vowels.contains(test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(char) && vowels.contains(test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(char) && vowels.contains(test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]) && vowels.contains(test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        if test_str[index] == \"a\" || test_str[index] == \"e\" || test_str[index] == \"i\" || test_str[index] == \"o\" || test_str[index] == \"u\" {\n            if i > 0 {\n                let index_prev = test_str.index(test_str.startIndex, offsetBy: i-1)\n                if test_str[index_prev] == \"a\" || test_str[index_prev] == \"e\" || test_str[index_prev] == \"i\" || test_str[index_prev] == \"o\" || test_str[index_prev] == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count-1 {\n                let index_next = test_str.index(test_str.startIndex, offsetBy: i+1)\n                if test_str[index_next] == \"a\" || test_str[index_next] == \"e\" || test_str[index_next] == \"i\" || test_str[index_next] == \"o\" || test_str[index_next] == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.characters.enumerated() {\n        if index == 0 {\n            if vowels.contains(String(test_str.characters.suffix(test_str.characters.count - 1))) {\n                count += 1\n            }\n        } else if index == test_str.characters.count - 1 {\n            if vowels.contains(String(test_str.characters.prefix(test_str.characters.count - 1))) {\n                count += 1\n            }\n        } else {\n            let left = String(test_str.characters.prefix(index))\n            let right = String(test_str.characters.suffix(test_str.characters.count - index - 1))\n            if vowels.contains(left) || vowels.contains(right) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let currentChar = test_str[index]\n        if (i > 0) {\n            let previousIndex = test_str.index(test_str.startIndex, offsetBy: i - 1)\n            let previousChar = test_str[previousIndex]\n            if (isVowel(char: previousChar)) {\n                count += 1\n            }\n        }\n        if (i < test_str.count - 1) {\n            let nextIndex = test_str.index(test_str.startIndex, offsetBy: i + 1)\n            let nextChar = test_str[nextIndex]\n            if (isVowel(char: nextChar)) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = String(test_str[index])\n        if vowels.contains(char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = String(test_str[next_index])\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(test_str[test_str.index(after: test_str.startIndex)]) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(test_str[test_str.index(before: test_str.endIndex)]) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(test_str[test_str.index(after: test_str.index(after: test_str.startIndex))]) || vowels.contains(test_str[test_str.index(before: test_str.index(before: test_str.endIndex))]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let current_char = test_str[index]\n        if current_char == \"a\" || current_char == \"e\" || current_char == \"i\" || current_char == \"o\" || current_char == \"u\" {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        if i == 0 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"u\" {\n                    count += 1\n                }\n            }\n        } else if i == test_str.count - 1 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: i-1)] == \"a\" || test_str",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if (char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\") {\n            if (i > 0) {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if (prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\") {\n                    count += 1\n                }\n            }\n            if (i < test_str.count - 1) {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if (next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\") {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if char.isVowel() && test_str[test_str.index(after: test_str.startIndex)].isVowel() {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if char.isVowel() && test_str[test_str.index(before: test_str.endIndex)].isVowel() {\n                count += 1\n            }\n        } else {\n            if char.isVowel() && test_str[test_str.index(after: test_str.index(after: test_str.startIndex))].isVowel() {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]) {\n                count += 1\n            }\n        } else {\n            if is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]) || is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(test_str[test_str.index(after: test_str.startIndex)]) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(test_str[test_str.index(before: test_str.endIndex)]) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(test_str[test_str.index(after: test_str.index(after: test_str.startIndex))]) || vowels.contains(test_str[test_str.index(before: test_str.index(before: test_str.endIndex))]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(String(test_str[test_str.index(after: test_str.startIndex)])) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(String(test_str[test_str.index(before: test_str.endIndex)])) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(String(test_str[test_str.index(after: test_str.index(after: test_str.startIndex))])) || vowels.contains(String(test_str[test_str.index(before: test_str.index(before: test_str.endIndex))])) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i > 0 {\n                let index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let char = test_str[index]\n                if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let char = test_str[index]\n                if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = String(test_str[index])\n        if vowels.contains(char) {\n            if i == 0 {\n                let index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let char = String(test_str[index])\n                if vowels.contains(char) {\n                    count += 1\n                }\n            } else if i == test_str.count - 1 {\n                let index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let char = String(test_str[index])\n                if vowels.contains(char) {\n                    count += 1\n                }\n            } else {\n                let index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let char = String(test_str[index])\n                if vowels.contains(char) {\n                    count += 1\n                }\n                let index2 = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let char2 = String(test_str[index2])\n                if vowels.contains(char2) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let current_char = String(test_str[index])\n        if vowels.contains(current_char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = String(test_str[next_index])\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index > 0 && index < test_str.count - 1 {\n            let prev = test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]\n            let next = test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]\n            if vowels.contains(prev) || vowels.contains(next) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        if i == 0 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"u\" {\n                    count += 1\n                }\n            }\n        } else if i == test_str.count - 1 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: i - 1)] == \"a\" || test_str",
    "    var count = 0\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                if test_str[test_str.index(after: test_str.startIndex)] == \"a\" || test_str[test_str.index(after: test_str.startIndex)] == \"e\" || test_str[test_str.index(after: test_str.startIndex)] == \"i\" || test_str[test_str.index(after: test_str.startIndex)] == \"o\" || test_str[test_str.index(after: test_str.startIndex)] == \"u\" {\n                    count += 1\n                }\n            }\n        } else if index == test_str.count - 1 {\n            if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                if test_str[test_str.index(before: test_str.endIndex)] == \"a\" || test_str[test_str.index(before: test_str.endIndex)] == \"e\" || test_str[test_str.index(before: test_str.endIndex)] == \"i\" || test_str[test_str.index(before: test_str.endIndex)] == \"o\" || test_str[test_str.index(before: test_str.endIndex)] == \"u\" {\n                    count += 1\n                }\n            }\n        } else {\n            if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                if test_str[test_str.index(after: test_str.startIndex)] == \"a\" || test_str[test_str.index(after: test_str.startIndex)] == \"e\" || test_str[test_str.index(after: test_str.startIndex)] == \"i\" || test_str[test_str.index(after: test_str.startIndex)]",
    "    var count = 0\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        if vowels.contains(test_str[index]) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                if vowels.contains(test_str[prev_index]) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                if vowels.contains(test_str[next_index]) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i > 0 {\n                let index_prev = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let char_prev = test_str[index_prev]\n                if char_prev == \"a\" || char_prev == \"e\" || char_prev == \"i\" || char_prev == \"o\" || char_prev == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let index_next = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let char_next = test_str[index_next]\n                if char_next == \"a\" || char_next == \"e\" || char_next == \"i\" || char_next == \"o\" || char_next == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for (index, char) in test_str.characters.enumerated() {\n        if index == 0 {\n            if is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]) {\n                count += 1\n            }\n        } else if index == test_str.characters.count - 1 {\n            if is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]) {\n                count += 1\n            }\n        } else {\n            if is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]) || is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = String(test_str[index])\n        if vowels.contains(char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i-1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i+1)\n                let next_char = String(test_str[next_index])\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(String(char)) && vowels.contains(String(test_str[test_str.index(after: test_str.startIndex)])) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(String(char)) && vowels.contains(String(test_str[test_str.index(before: test_str.endIndex)])) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(String(char)) && vowels.contains(String(test_str[test_str.index(before: test_str.index(after: test_str.startIndex))])) && vowels.contains(String(test_str[test_str.index(after: test_str.index(after: test_str.startIndex))])) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if (char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\") {\n            if (i > 0) {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if (prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\") {\n                    count += 1\n                }\n            }\n            if (i < test_str.count - 1) {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if (next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\") {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i-1)\n                let prev_char = test_str[prev_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count-1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i+1)\n                let next_char = test_str[next_index]\n                if next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count += 1\n            }\n        } else if i == test_str.count - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count += 1\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        if i == 0 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"u\" {\n                    count += 1\n                }\n            }\n        } else if i == test_str.count-1 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: i-1)] == \"a\" || test_str",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i > 0 {\n                let index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let char = test_str[index]\n                if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let char = test_str[index]\n                if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        if i == 0 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"u\" {\n                    count += 1\n                }\n            }\n        } else if i == test_str.count - 1 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: i-1)] == \"a\" || test_str",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i == 0 {\n                if test_str.count > 1 {\n                    let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                    let next_char = test_str[next_index]\n                    if next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                        count += 1\n                    }\n                }\n            } else if i == test_str.count - 1 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" {\n                    count += 1\n                }\n            } else {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" || next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        if i == 0 {\n            if is_vowel(char: test_str[i]) && is_vowel(char: test_str[i + 1]) {\n                count += 1\n            }\n        } else if i == test_str.count - 1 {\n            if is_vowel(char: test_str[i]) && is_vowel(char: test_str[i - 1]) {\n                count += 1\n            }\n        } else {\n            if is_vowel(char: test_str[i]) && is_vowel(char: test_str[i - 1]) && is_vowel(char: test_str[i + 1]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = \"aeiou\"\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if vowels.contains(char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = String(test_str[index])\n        if vowels.contains(char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = String(test_str[next_index])\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index < test_str.count - 1 {\n            let next_char = test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]\n            if vowels.contains(char) && vowels.contains(next_char) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        if i == 0 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"a\" ||\n                test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"e\" ||\n                test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"i\" ||\n                test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"o\" ||\n                test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"u\" {\n                count += 1\n            }\n        } else if i == test_str.count - 1 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i - 1)] == \"a\" ||\n                test_str[test_str.index(test_str.startIndex, offsetBy: i - 1)] == \"e\" ||\n                test_str[test_str.index(test_str.startIndex, offsetBy: i - 1)] == \"i\" ||\n                test_str[test_str.index(test_str.startIndex, offsetBy: i - 1)] == \"o\" ||\n                test_str[test_str.index(test_str.startIndex, offsetBy: i - 1)] == \"u\" {\n                count += 1\n            }\n        } else {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"a\" ||\n                test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"e\" ||\n                test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"i\" ||\n                test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"o\" ||\n                test_str[test_str.index(",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        if test_str[index].isVowel() {\n            if i > 0 {\n                let index_prev = test_str.index(test_str.startIndex, offsetBy: i-1)\n                if test_str[index_prev].isVowel() {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let index_next = test_str.index(test_str.startIndex, offsetBy: i+1)\n                if test_str[index_next].isVowel() {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        if vowels.contains(String(test_str[index])) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                if vowels.contains(String(test_str[prev_index])) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                if vowels.contains(String(test_str[next_index])) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i != 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" {\n                    count += 1\n                }\n            }\n            if i != test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        if i == 0 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"u\" {\n                    count += 1\n                }\n            }\n        } else if i == test_str.count-1 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: i-1)] == \"a\" || test_str",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = String(test_str[index])\n        if vowels.contains(char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = String(test_str[next_index])\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(test_str[test_str.index(after: test_str.startIndex)]) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(test_str[test_str.index(before: test_str.endIndex)]) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(test_str[test_str.index(after: test_str.index(after: test_str.startIndex))]) || vowels.contains(test_str[test_str.index(before: test_str.index(before: test_str.endIndex))]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let current_char = String(test_str[index])\n        if vowels.contains(current_char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = String(test_str[next_index])\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(String(test_str[test_str.index(after: test_str.startIndex)])) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(String(test_str[test_str.index(before: test_str.endIndex)])) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(String(test_str[test_str.index(after: test_str.index(after: test_str.startIndex))])) || vowels.contains(String(test_str[test_str.index(before: test_str.index(before: test_str.endIndex))])) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        if i == 0 {\n            if test_str[i] == \"a\" || test_str[i] == \"e\" || test_str[i] == \"i\" || test_str[i] == \"o\" || test_str[i] == \"u\" {\n                if test_str[i+1] == \"a\" || test_str[i+1] == \"e\" || test_str[i+1] == \"i\" || test_str[i+1] == \"o\" || test_str[i+1] == \"u\" {\n                    count += 1\n                }\n            }\n        } else if i == test_str.count - 1 {\n            if test_str[i] == \"a\" || test_str[i] == \"e\" || test_str[i] == \"i\" || test_str[i] == \"o\" || test_str[i] == \"u\" {\n                if test_str[i-1] == \"a\" || test_str[i-1] == \"e\" || test_str[i-1] == \"i\" || test_str[i-1] == \"o\" || test_str[i-1] == \"u\" {\n                    count += 1\n                }\n            }\n        } else {\n            if test_str[i] == \"a\" || test_str[i] == \"e\" || test_str[i] == \"i\" || test_str[i] == \"o\" || test_str[i] == \"u\" {\n                if test_str[i+1] == \"a\" || test_str[i+1] == \"e\" || test_str[i+1] == \"i\" || test_str[i+1] == \"o\" || test_str[i+1] == \"u\" {\n                    count += 1\n                }\n                if test_str[i-1] == \"a\" || test_str[i-1] == \"e\" || test_str[i-1] == \"i\" || test_str[i-1] == \"o\" || test_",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(String(test_str[test_str.index(after: test_str.startIndex)])) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(String(test_str[test_str.index(before: test_str.endIndex)])) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(String(test_str[test_str.index(after: test_str.index(after: test_str.startIndex))])) || vowels.contains(String(test_str[test_str.index(before: test_str.index(before: test_str.endIndex))])) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for char in test_str {\n        if vowels.contains(String(char)) {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if is_vowel(char: char) {\n            if i > 0 {\n                let index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let char = test_str[index]\n                if is_vowel(char: char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let char = test_str[index]\n                if is_vowel(char: char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = String(test_str[index])\n        if vowels.contains(char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i-1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count-1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i+1)\n                let next_char = String(test_str[next_index])\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = String(test_str[index])\n        if vowels.contains(char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = String(test_str[next_index])\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(test_str[test_str.index(after: test_str.startIndex)]) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(test_str[test_str.index(before: test_str.endIndex)]) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(test_str[test_str.index(after: test_str.startIndex)]) || vowels.contains(test_str[test_str.index(before: test_str.endIndex)]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if (char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\") {\n            if (i > 0 && i < test_str.count - 1) {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let prev_char = test_str[prev_index]\n                let next_char = test_str[next_index]\n                if (prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" || next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\") {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = \"aeiou\"\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if vowels.contains(char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                if test_str[test_str.index(after: test_str.startIndex)] == \"a\" || test_str[test_str.index(after: test_str.startIndex)] == \"e\" || test_str[test_str.index(after: test_str.startIndex)] == \"i\" || test_str[test_str.index(after: test_str.startIndex)] == \"o\" || test_str[test_str.index(after: test_str.startIndex)] == \"u\" {\n                    count += 1\n                }\n            }\n        } else if index == test_str.count - 1 {\n            if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                if test_str[test_str.index(before: test_str.endIndex)] == \"a\" || test_str[test_str.index(before: test_str.endIndex)] == \"e\" || test_str[test_str.index(before: test_str.endIndex)] == \"i\" || test_str[test_str.index(before: test_str.endIndex)] == \"o\" || test_str[test_str.index(before: test_str.endIndex)] == \"u\" {\n                    count += 1\n                }\n            }\n        } else {\n            if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                if test_str[test_str.index(after: test_str.index(after: test_str.startIndex, offsetBy: index))] == \"a\" || test_str[test_str.index(after: test_str.index(after: test_str.startIndex, offsetBy: index))] == \"e\" || test_str[test_str.index(after: test_str",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        if test_str[index] == \"a\" || test_str[index] == \"e\" || test_str[index] == \"i\" || test_str[index] == \"o\" || test_str[index] == \"u\" {\n            if i > 0 {\n                let index_pre = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                if test_str[index_pre] == \"a\" || test_str[index_pre] == \"e\" || test_str[index_pre] == \"i\" || test_str[index_pre] == \"o\" || test_str[index_pre] == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let index_next = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                if test_str[index_next] == \"a\" || test_str[index_next] == \"e\" || test_str[index_next] == \"i\" || test_str[index_next] == \"o\" || test_str[index_next] == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.characters.enumerated() {\n        if index > 0 && index < test_str.characters.count - 1 {\n            let prev_char = test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]\n            let next_char = test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]\n            if vowels.contains(String(prev_char)) || vowels.contains(String(next_char)) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = \"aeiou\"\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        if vowels.contains(test_str[index]) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                if vowels.contains(test_str[prev_index]) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                if vowels.contains(test_str[next_index]) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if isVowel(char: char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if isVowel(char: prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if isVowel(char: next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        if test_str[index].isVowel() {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                if test_str[prev_index].isVowel() {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                if test_str[next_index].isVowel() {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(test_str[test_str.index(after: test_str.startIndex)]) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(test_str[test_str.index(before: test_str.endIndex)]) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(test_str[test_str.index(after: test_str.index(after: test_str.startIndex, offsetBy: index))]) || vowels.contains(test_str[test_str.index(before: test_str.index(before: test_str.endIndex, offsetBy: index))]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for index in 0..<test_str.count {\n        let char = test_str[test_str.index(test_str.startIndex, offsetBy: index)]\n        let next_char = test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let str_arr = Array(test_str)\n    for i in 0..<str_arr.count {\n        if i == 0 {\n            if vowels.contains(str_arr[i]) && vowels.contains(str_arr[i+1]) {\n                count += 1\n            }\n        } else if i == str_arr.count - 1 {\n            if vowels.contains(str_arr[i]) && vowels.contains(str_arr[i-1]) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(str_arr[i]) && (vowels.contains(str_arr[i-1]) || vowels.contains(str_arr[i+1])) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]) {\n                count += 1\n            }\n        } else {\n            if is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]) || is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index != 0 && index != test_str.count - 1 {\n            if vowels.contains(String(char)) && vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)])) && vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)])) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(test_str[test_str.index(after: test_str.startIndex)]) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(test_str[test_str.index(before: test_str.endIndex)]) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(test_str[test_str.index(after: test_str.index(after: test_str.startIndex))]) || vowels.contains(test_str[test_str.index(before: test_str.index(before: test_str.endIndex))]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i == 0 {\n                if test_str.count > 1 {\n                    let index2 = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                    let char2 = test_str[index2]\n                    if char2 == \"a\" || char2 == \"e\" || char2 == \"i\" || char2 == \"o\" || char2 == \"u\" {\n                        count += 1\n                    }\n                }\n            } else if i == test_str.count - 1 {\n                let index2 = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let char2 = test_str[index2]\n                if char2 == \"a\" || char2 == \"e\" || char2 == \"i\" || char2 == \"o\" || char2 == \"u\" {\n                    count += 1\n                }\n            } else {\n                let index2 = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let char2 = test_str[index2]\n                let index3 = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let char3 = test_str[index3]\n                if char2 == \"a\" || char2 == \"e\" || char2 == \"i\" || char2 == \"o\" || char2 == \"u\" || char3 == \"a\" || char3 == \"e\" || char3 == \"i\" || char3 == \"o\" || char3 == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let character = String(test_str[index])\n        if vowels.contains(character) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_character = String(test_str[prev_index])\n                if vowels.contains(prev_character) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_character = String(test_str[next_index])\n                if vowels.contains(next_character) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if is_vowel(char: char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if is_vowel(char: prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if is_vowel(char: next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if (char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\") {\n            if (i > 0 && i < test_str.count - 1) {\n                let index_prev = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let index_next = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let char_prev = test_str[index_prev]\n                let char_next = test_str[index_next]\n                if (char_prev == \"a\" || char_prev == \"e\" || char_prev == \"i\" || char_prev == \"o\" || char_prev == \"u\" ||\n                    char_next == \"a\" || char_next == \"e\" || char_next == \"i\" || char_next == \"o\" || char_next == \"u\") {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.characters.enumerated() {\n        if index > 0 && index < test_str.characters.count - 1 {\n            let prev = test_str.characters[test_str.index(test_str.startIndex, offsetBy: index - 1)]\n            let next = test_str.characters[test_str.index(test_str.startIndex, offsetBy: index + 1)]\n            if vowels.contains(String(char)) && (vowels.contains(String(prev)) || vowels.contains(String(next))) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        if vowels.contains(String(test_str[index])) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                if vowels.contains(String(test_str[prev_index])) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                if vowels.contains(String(test_str[next_index])) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        if test_str[index].isVowel() {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                if test_str[prev_index].isVowel() {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                if test_str[next_index].isVowel() {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = String(test_str[index])\n        if vowels.contains(char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = String(test_str[next_index])\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = String(test_str[index])\n        if vowels.contains(char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = String(test_str[next_index])\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        if i == 0 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"a\" ||\n                test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"e\" ||\n                test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"i\" ||\n                test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"o\" ||\n                test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"u\" {\n                count += 1\n            }\n        } else if i == test_str.count - 1 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i-1)] == \"a\" ||\n                test_str[test_str.index(test_str.startIndex, offsetBy: i-1)] == \"e\" ||\n                test_str[test_str.index(test_str.startIndex, offsetBy: i-1)] == \"i\" ||\n                test_str[test_str.index(test_str.startIndex, offsetBy: i-1)] == \"o\" ||\n                test_str[test_str.index(test_str.startIndex, offsetBy: i-1)] == \"u\" {\n                count += 1\n            }\n        } else {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"a\" ||\n                test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"e\" ||\n                test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"i\" ||\n                test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"o\" ||\n                test_str[test_str.index(",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i-1)\n                let prev_char = test_str[prev_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count-1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i+1)\n                let next_char = test_str[next_index]\n                if next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                count += 1\n            }\n        } else {\n            if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                let prev_char = test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]\n                let next_char = test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" || next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.characters.enumerated() {\n        if index == 0 {\n            if vowels.contains(String(test_str.characters.suffix(test_str.characters.count - index - 1).prefix(1))) {\n                count += 1\n            }\n        } else if index == test_str.characters.count - 1 {\n            if vowels.contains(String(test_str.characters.prefix(index).suffix(1))) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(String(test_str.characters.prefix(index).suffix(1))) || vowels.contains(String(test_str.characters.suffix(test_str.characters.count - index - 1).prefix(1))) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = String(test_str[index])\n        if vowels.contains(char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = String(test_str[next_index])\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 && vowels.contains(char) {\n            count += 1\n        } else if index == test_str.count - 1 && vowels.contains(char) {\n            count += 1\n        } else if index > 0 && index < test_str.count - 1 && vowels.contains(char) && vowels.contains(test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]) {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = \"aeiou\"\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let current_char = test_str[index]\n        if vowels.contains(current_char) {\n            if i > 0 {\n                let previous_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let previous_char = test_str[previous_index]\n                if vowels.contains(previous_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i == 0 {\n                if test_str.count > 1 {\n                    let nextIndex = test_str.index(test_str.startIndex, offsetBy: i+1)\n                    let nextChar = test_str[nextIndex]\n                    if nextChar == \"a\" || nextChar == \"e\" || nextChar == \"i\" || nextChar == \"o\" || nextChar == \"u\" {\n                        count += 1\n                    }\n                }\n            } else if i == test_str.count - 1 {\n                let prevIndex = test_str.index(test_str.startIndex, offsetBy: i-1)\n                let prevChar = test_str[prevIndex]\n                if prevChar == \"a\" || prevChar == \"e\" || prevChar == \"i\" || prevChar == \"o\" || prevChar == \"u\" {\n                    count += 1\n                }\n            } else {\n                let prevIndex = test_str.index(test_str.startIndex, offsetBy: i-1)\n                let prevChar = test_str[prevIndex]\n                let nextIndex = test_str.index(test_str.startIndex, offsetBy: i+1)\n                let nextChar = test_str[nextIndex]\n                if prevChar == \"a\" || prevChar == \"e\" || prevChar == \"i\" || prevChar == \"o\" || prevChar == \"u\" || nextChar == \"a\" || nextChar == \"e\" || nextChar == \"i\" || nextChar == \"o\" || nextChar == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        if i == 0 {\n            if is_vowel(test_str[test_str.index(test_str.startIndex, offsetBy: i)]) && is_vowel(test_str[test_str.index(test_str.startIndex, offsetBy: i+1)]) {\n                count += 1\n            }\n        } else if i == test_str.count - 1 {\n            if is_vowel(test_str[test_str.index(test_str.startIndex, offsetBy: i)]) && is_vowel(test_str[test_str.index(test_str.startIndex, offsetBy: i-1)]) {\n                count += 1\n            }\n        } else {\n            if is_vowel(test_str[test_str.index(test_str.startIndex, offsetBy: i)]) && (is_vowel(test_str[test_str.index(test_str.startIndex, offsetBy: i+1)]) || is_vowel(test_str[test_str.index(test_str.startIndex, offsetBy: i-1)])) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = String(test_str[index])\n        if vowels.contains(char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = String(test_str[next_index])\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for (index, char) in test_str.enumerated() {\n        if index == test_str.count - 1 {\n            if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                count += 1\n            }\n        } else {\n            if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                if test_str[index + 1] == \"a\" || test_str[index + 1] == \"e\" || test_str[index + 1] == \"i\" || test_str[index + 1] == \"o\" || test_str[index + 1] == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = String(test_str[index])\n        if vowels.contains(char) {\n            if i == 0 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = String(test_str[next_index])\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            } else if i == test_str.count - 1 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            } else {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = String(test_str[next_index])\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(next_char) || vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: 1)])) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: test_str.count - 2)])) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)])) || vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)])) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count += 1\n            }\n        } else if i == test_str.count - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count += 1\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = String(test_str[index])\n        if vowels.contains(char) {\n            if i > 0 {\n                let prevIndex = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prevChar = String(test_str[prevIndex])\n                if vowels.contains(prevChar) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let nextIndex = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let nextChar = String(test_str[nextIndex])\n                if vowels.contains(nextChar) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: 1)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: 1)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: 1)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: 1)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: 1)] == \"u\" {\n                    count += 1\n                }\n            }\n        } else if index == test_str.count - 1 {\n            if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)] == \"u\" {\n                    count += 1\n                }\n            }\n        } else {\n            if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: index -",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(String(test_str[test_str.index(after: test_str.startIndex)])) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(String(test_str[test_str.index(before: test_str.endIndex)])) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(String(test_str[test_str.index(after: test_str.startIndex)])) || vowels.contains(String(test_str[test_str.index(before: test_str.endIndex)])) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = \"aeiou\"\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        if vowels.contains(test_str[index]) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i-1)\n                if vowels.contains(test_str[prev_index]) {\n                    count += 1\n                }\n            }\n            if i < test_str.count-1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i+1)\n                if vowels.contains(test_str[next_index]) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i != 0 {\n                let previous_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let previous_char = test_str[previous_index]\n                if previous_char == \"a\" || previous_char == \"e\" || previous_char == \"i\" || previous_char == \"o\" || previous_char == \"u\" {\n                    count += 1\n                }\n            }\n            if i != test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        if i == 0 {\n            if vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: i)])) && vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: i+1)])) {\n                count += 1\n            }\n        } else if i == test_str.count - 1 {\n            if vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: i)])) && vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: i-1)])) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: i)])) && vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: i-1)])) && vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: i+1)])) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    let vowels = \"aeiou\"\n    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        if vowels.contains(test_str[index]) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                if vowels.contains(test_str[prev_index]) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                if vowels.contains(test_str[next_index]) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count: Int = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        if i == 0 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"u\" {\n                    count += 1\n                }\n            }\n        }\n        else if i == test_str.count - 1 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: i-1)] == \"a\" || test",
    "    var count = 0\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)] == \"u\" {\n                    count += 1\n                }\n            }\n        } else if index == test_str.count - 1 {\n            if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)] == \"u\" {\n                    count += 1\n                }\n            }\n        } else {\n            if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)] == \"a\" || test_str[test_str.index(test_",
    "    var count = 0\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(test_str[test_str.index(after: test_str.startIndex)]) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(test_str[test_str.index(before: test_str.endIndex)]) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(test_str[test_str.index(after: test_str.index(after: test_str.startIndex))]) || vowels.contains(test_str[test_str.index(before: test_str.index(before: test_str.endIndex))]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: 1)]) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: test_str.count - 2)]) {\n                count += 1\n            }\n        } else {\n            if is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]) || is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let chars = Array(test_str)\n    for i in 0..<chars.count {\n        if i == 0 {\n            if vowels.contains(String(chars[i + 1])) {\n                count += 1\n            }\n        } else if i == chars.count - 1 {\n            if vowels.contains(String(chars[i - 1])) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(String(chars[i - 1])) || vowels.contains(String(chars[i + 1])) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i != 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" {\n                    count += 1\n                }\n            }\n            if i != test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = String(test_str[index])\n        if vowels.contains(char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = String(test_str[next_index])\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let c = String(test_str[index])\n        if vowels.contains(c) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_c = String(test_str[prev_index])\n                if vowels.contains(prev_c) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_c = String(test_str[next_index])\n                if vowels.contains(next_c) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i == 0 {\n                if test_str.count > 1 {\n                    let index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                    let char = test_str[index]\n                    if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                        count += 1\n                    }\n                }\n            } else if i == test_str.count - 1 {\n                let index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let char = test_str[index]\n                if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                    count += 1\n                }\n            } else {\n                let index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let char = test_str[index]\n                if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                    count += 1\n                }\n                let index2 = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let char2 = test_str[index2]\n                if char2 == \"a\" || char2 == \"e\" || char2 == \"i\" || char2 == \"o\" || char2 == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count - 1 {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let nextIndex = test_str.index(test_str.startIndex, offsetBy: i + 1)\n        if is_vowel(c: test_str[index]) && is_vowel(c: test_str[nextIndex]) {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.characters.enumerated() {\n        if index == 0 {\n            if vowels.contains(String(test_str.characters[test_str.characters.index(after: test_str.characters.startIndex)])) {\n                count += 1\n            }\n        } else if index == test_str.characters.count - 1 {\n            if vowels.contains(String(test_str.characters[test_str.characters.index(before: test_str.characters.endIndex)])) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(String(test_str.characters[test_str.characters.index(after: test_str.characters.index(after: test_str.characters.startIndex))])) || vowels.contains(String(test_str.characters[test_str.characters.index(before: test_str.characters.index(before: test_str.characters.endIndex))])) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = String(test_str[index])\n        if vowels.contains(char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = String(test_str[next_index])\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]) {\n                count += 1\n            }\n        } else {\n            if is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]) || is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var chars = Array(test_str)\n    for i in 0..<chars.count {\n        if i > 0 && vowels.contains(String(chars[i-1])) {\n            count += 1\n        }\n        if i < chars.count - 1 && vowels.contains(String(chars[i+1])) {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        if test_str[index] == \"a\" || test_str[index] == \"e\" || test_str[index] == \"i\" || test_str[index] == \"o\" || test_str[index] == \"u\" {\n            if i != 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                if test_str[prev_index] == \"a\" || test_str[prev_index] == \"e\" || test_str[prev_index] == \"i\" || test_str[prev_index] == \"o\" || test_str[prev_index] == \"u\" {\n                    count += 1\n                }\n            }\n            if i != test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                if test_str[next_index] == \"a\" || test_str[next_index] == \"e\" || test_str[next_index] == \"i\" || test_str[next_index] == \"o\" || test_str[next_index] == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(test_str[test_str.index(after: test_str.startIndex)]) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(test_str[test_str.index(before: test_str.endIndex)]) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(test_str[test_str.index(after: test_str.index(after: test_str.startIndex))]) || vowels.contains(test_str[test_str.index(before: test_str.index(before: test_str.endIndex))]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var vowels = Set<Character>()\n    vowels.insert(\"a\")\n    vowels.insert(\"e\")\n    vowels.insert(\"i\")\n    vowels.insert(\"o\")\n    vowels.insert(\"u\")\n    vowels.insert(\"A\")\n    vowels.insert(\"E\")\n    vowels.insert(\"I\")\n    vowels.insert(\"O\")\n    vowels.insert(\"U\")\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        if vowels.contains(test_str[index]) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i-1)\n                if vowels.contains(test_str[prev_index]) {\n                    count += 1\n                }\n            }\n            if i < test_str.count-1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i+1)\n                if vowels.contains(test_str[next_index]) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        if i == 0 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"u\" {\n                    count += 1\n                }\n            }\n        } else if i == test_str.count - 1 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: i-1)] == \"a\" || test_str",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = String(test_str[index])\n        if vowels.contains(char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = String(test_str[next_index])\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i == 0 {\n                let nextIndex = test_str.index(test_str.startIndex, offsetBy: i+1)\n                let nextChar = test_str[nextIndex]\n                if nextChar == \"a\" || nextChar == \"e\" || nextChar == \"i\" || nextChar == \"o\" || nextChar == \"u\" {\n                    count += 1\n                }\n            } else if i == test_str.count - 1 {\n                let prevIndex = test_str.index(test_str.startIndex, offsetBy: i-1)\n                let prevChar = test_str[prevIndex]\n                if prevChar == \"a\" || prevChar == \"e\" || prevChar == \"i\" || prevChar == \"o\" || prevChar == \"u\" {\n                    count += 1\n                }\n            } else {\n                let prevIndex = test_str.index(test_str.startIndex, offsetBy: i-1)\n                let prevChar = test_str[prevIndex]\n                let nextIndex = test_str.index(test_str.startIndex, offsetBy: i+1)\n                let nextChar = test_str[nextIndex]\n                if prevChar == \"a\" || prevChar == \"e\" || prevChar == \"i\" || prevChar == \"o\" || prevChar == \"u\" || nextChar == \"a\" || nextChar == \"e\" || nextChar == \"i\" || nextChar == \"o\" || nextChar == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(String(test_str[test_str.index(after: test_str.startIndex)])) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(String(test_str[test_str.index(before: test_str.endIndex)])) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(String(test_str[test_str.index(after: test_str.index(after: test_str.startIndex))])) || vowels.contains(String(test_str[test_str.index(before: test_str.index(before: test_str.endIndex))])) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = \"aeiou\"\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        if vowels.contains(test_str[index]) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                if vowels.contains(test_str[prev_index]) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                if vowels.contains(test_str[next_index]) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        if vowels.contains(String(test_str[index])) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                if vowels.contains(String(test_str[prev_index])) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                if vowels.contains(String(test_str[next_index])) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = String(test_str[index])\n        if vowels.contains(char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = String(test_str[next_index])\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(String(test_str[test_str.index(after: test_str.startIndex)])) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(String(test_str[test_str.index(before: test_str.endIndex)])) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(String(test_str[test_str.index(after: test_str.index(after: test_str.startIndex))])) || vowels.contains(String(test_str[test_str.index(before: test_str.index(before: test_str.endIndex))])) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.characters.enumerated() {\n        if index > 0 && index < test_str.characters.count - 1 {\n            let prev_char = test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]\n            let next_char = test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]\n            if vowels.contains(String(prev_char)) || vowels.contains(String(next_char)) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(String(test_str[test_str.index(after: test_str.startIndex)])) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(String(test_str[test_str.index(before: test_str.endIndex)])) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(String(test_str[test_str.index(after: test_str.index(after: test_str.startIndex))])) || vowels.contains(String(test_str[test_str.index(before: test_str.index(before: test_str.endIndex))])) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                count += 1\n            }\n        } else {\n            let prev_char = test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]\n            let next_char = test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]\n            if (char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\") && (prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" || next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\") {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(char) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(test_str[test_str.index(before: test_str.endIndex)]) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(test_str[test_str.index(after: test_str.startIndex)]) || vowels.contains(test_str[test_str.index(before: test_str.endIndex)]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        if vowels.contains(String(test_str[index])) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i-1)\n                if vowels.contains(String(test_str[prev_index])) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i+1)\n                if vowels.contains(String(test_str[next_index])) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if is_vowel(char: char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if is_vowel(char: prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if is_vowel(char: next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = String(test_str[index])\n        if vowels.contains(char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = String(test_str[next_index])\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let current_char = test_str[index]\n        if is_vowel(char: current_char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if is_vowel(char: prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if is_vowel(char: next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if vowels.contains(char) {\n            if index > 0 && vowels.contains(test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]) {\n                count += 1\n            }\n            if index < test_str.count - 1 && vowels.contains(test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for (i, c) in test_str.characters.enumerated() {\n        if i == 0 {\n            if test_str.characters[test_str.characters.index(after: test_str.characters.startIndex)] == \"a\" ||\n                test_str.characters[test_str.characters.index(after: test_str.characters.startIndex)] == \"e\" ||\n                test_str.characters[test_str.characters.index(after: test_str.characters.startIndex)] == \"i\" ||\n                test_str.characters[test_str.characters.index(after: test_str.characters.startIndex)] == \"o\" ||\n                test_str.characters[test_str.characters.index(after: test_str.characters.startIndex)] == \"u\" {\n                count += 1\n            }\n        } else if i == test_str.characters.count - 1 {\n            if test_str.characters[test_str.characters.index(before: test_str.characters.endIndex)] == \"a\" ||\n                test_str.characters[test_str.characters.index(before: test_str.characters.endIndex)] == \"e\" ||\n                test_str.characters[test_str.characters.index(before: test_str.characters.endIndex)] == \"i\" ||\n                test_str.characters[test_str.characters.index(before: test_str.characters.endIndex)] == \"o\" ||\n                test_str.characters[test_str.characters.index(before: test_str.characters.endIndex)] == \"u\" {\n                count += 1\n            }\n        } else {\n            if test_str.characters[test_str.characters.index(after: test_str.characters.startIndex)] == \"a\" ||\n                test_str.characters[test_str.characters.index(after: test_str.characters.startIndex)] == \"e\" ||\n                test_str.characters[test_str.characters.",
    "    var count = 0\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index != 0 && index != test_str.count - 1 {\n            if vowels.contains(char) && vowels.contains(test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]) {\n                count += 1\n            }\n            if vowels.contains(char) && vowels.contains(test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        if i == 0 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i+1)] == \"u\" {\n                    count += 1\n                }\n            }\n        } else if i == test_str.count-1 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: i-1)] == \"a\" || test_str",
    "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = String(test_str[index])\n        if vowels.contains(char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i-1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i+1)\n                let next_char = String(test_str[next_index])\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(char) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(char) {\n                count += 1\n            }\n        } else {\n            let prev = test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]\n            let next = test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]\n            if vowels.contains(char) && (vowels.contains(prev) || vowels.contains(next)) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for (index, char) in test_str.characters.enumerated() {\n        if index == 0 {\n            if is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]) {\n                count += 1\n            }\n        } else if index == test_str.characters.count - 1 {\n            if is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]) {\n                count += 1\n            }\n        } else {\n            if is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]) || is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index > 0 && index < test_str.count - 1 {\n            let prev_char = test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]\n            let next_char = test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]\n            if vowels.contains(String(prev_char)) || vowels.contains(String(next_char)) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let str_arr = Array(test_str)\n    for i in 0..<str_arr.count {\n        if i == 0 {\n            if vowels.contains(str_arr[i]) && vowels.contains(str_arr[i+1]) {\n                count += 1\n            }\n        } else if i == str_arr.count - 1 {\n            if vowels.contains(str_arr[i]) && vowels.contains(str_arr[i-1]) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(str_arr[i]) && (vowels.contains(str_arr[i-1]) || vowels.contains(str_arr[i+1])) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if (char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\") {\n            if (i > 0) {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if (prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\") {\n                    count += 1\n                }\n            }\n            if (i < test_str.count - 1) {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if (next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\") {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i > 0 {\n                let index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let char = test_str[index]\n                if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let char = test_str[index]\n                if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        if test_str[index] == \"a\" || test_str[index] == \"e\" || test_str[index] == \"i\" || test_str[index] == \"o\" || test_str[index] == \"u\" {\n            if i > 0 {\n                let index_prev = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                if test_str[index_prev] == \"a\" || test_str[index_prev] == \"e\" || test_str[index_prev] == \"i\" || test_str[index_prev] == \"o\" || test_str[index_prev] == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let index_next = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                if test_str[index_next] == \"a\" || test_str[index_next] == \"e\" || test_str[index_next] == \"i\" || test_str[index_next] == \"o\" || test_str[index_next] == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(String(test_str[test_str.index(after: test_str.startIndex)])) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(String(test_str[test_str.index(before: test_str.endIndex)])) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(String(test_str[test_str.index(after: test_str.index(after: test_str.startIndex))])) || vowels.contains(String(test_str[test_str.index(before: test_str.index(before: test_str.endIndex))])) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(String(test_str[test_str.index(after: test_str.startIndex)])) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(String(test_str[test_str.index(before: test_str.endIndex)])) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(String(test_str[test_str.index(after: test_str.index(after: test_str.startIndex))])) || vowels.contains(String(test_str[test_str.index(before: test_str.index(before: test_str.endIndex))])) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = String(test_str[index])\n        if vowels.contains(char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = String(test_str[next_index])\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.characters.enumerated() {\n        if index > 0 && index < test_str.characters.count - 1 {\n            let prev = test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]\n            let next = test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]\n            if vowels.contains(String(prev)) || vowels.contains(String(next)) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for (i, c) in test_str.characters.enumerated() {\n        if i == 0 {\n            if is_vowel(c: test_str.characters[test_str.characters.index(after: test_str.characters.startIndex)]) {\n                count += 1\n            }\n        } else if i == test_str.characters.count - 1 {\n            if is_vowel(c: test_str.characters[test_str.characters.index(before: test_str.characters.endIndex)]) {\n                count += 1\n            }\n        } else {\n            if is_vowel(c: test_str.characters[test_str.characters.index(after: test_str.characters.index(after: test_str.characters.startIndex))]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        if test_str[index] == \"a\" || test_str[index] == \"e\" || test_str[index] == \"i\" || test_str[index] == \"o\" || test_str[index] == \"u\" {\n            if i == 0 {\n                if test_str[test_str.index(after: index)] == \"a\" || test_str[test_str.index(after: index)] == \"e\" || test_str[test_str.index(after: index)] == \"i\" || test_str[test_str.index(after: index)] == \"o\" || test_str[test_str.index(after: index)] == \"u\" {\n                    count += 1\n                }\n            }\n            else if i == test_str.count - 1 {\n                if test_str[test_str.index(before: index)] == \"a\" || test_str[test_str.index(before: index)] == \"e\" || test_str[test_str.index(before: index)] == \"i\" || test_str[test_str.index(before: index)] == \"o\" || test_str[test_str.index(before: index)] == \"u\" {\n                    count += 1\n                }\n            }\n            else {\n                if test_str[test_str.index(before: index)] == \"a\" || test_str[test_str.index(before: index)] == \"e\" || test_str[test_str.index(before: index)] == \"i\" || test_str[test_str.index(before: index)] == \"o\" || test_str[test_str.index(before: index)] == \"u\" || test_str[test_str.index(after: index)] == \"a\" || test_str[test_str.index(after: index)] == \"e\" || test_str[test_str.index(after: index)] == \"i\" || test_str[test_str.index(after: index",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i-1)\n                let prev_char = test_str[prev_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count-1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i+1)\n                let next_char = test_str[next_index]\n                if next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        if i == 0 && is_vowel(test_str[i]) {\n            count += 1\n        } else if i == test_str.count - 1 && is_vowel(test_str[i]) {\n            count += 1\n        } else if is_vowel(test_str[i]) && (is_vowel(test_str[i - 1]) || is_vowel(test_str[i + 1])) {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(test_str[test_str.index(after: test_str.startIndex)]) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(test_str[test_str.index(before: test_str.endIndex)]) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(test_str[test_str.index(after: test_str.index(after: test_str.startIndex))]) || vowels.contains(test_str[test_str.index(before: test_str.index(before: test_str.endIndex))]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i > 0 {\n                let index_prev = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let char_prev = test_str[index_prev]\n                if char_prev == \"a\" || char_prev == \"e\" || char_prev == \"i\" || char_prev == \"o\" || char_prev == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let index_next = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let char_next = test_str[index_next]\n                if char_next == \"a\" || char_next == \"e\" || char_next == \"i\" || char_next == \"o\" || char_next == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var count = 0\n    for i in 0..<test_str.count {\n        if i == 0 {\n            if vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)])) {\n                count += 1\n            }\n        } else if i == test_str.count - 1 {\n            if vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: i - 1)])) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: i - 1)])) || vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)])) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i > 0 {\n                let index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let char = test_str[index]\n                if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let char = test_str[index]\n                if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: 1)])) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)])) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)])) || vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)])) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let current_char = test_str[index]\n        if i == 0 {\n            let next_char = test_str[test_str.index(after: index)]\n            if is_vowel(char: next_char) {\n                count += 1\n            }\n        } else if i == test_str.count - 1 {\n            let prev_char = test_str[test_str.index(before: index)]\n            if is_vowel(char: prev_char) {\n                count += 1\n            }\n        } else {\n            let prev_char = test_str[test_str.index(before: index)]\n            let next_char = test_str[test_str.index(after: index)]\n            if is_vowel(char: prev_char) || is_vowel(char: next_char) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let current_char = String(test_str[index])\n        if vowels.contains(current_char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = String(test_str[next_index])\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        if i == 0 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)].isVowel {\n                count += 1\n            }\n        } else if i == test_str.count - 1 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i - 1)].isVowel {\n                count += 1\n            }\n        } else {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i - 1)].isVowel || test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)].isVowel {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let test_str_arr = Array(test_str)\n    for i in 0..<test_str_arr.count {\n        if i == 0 {\n            if vowels.contains(String(test_str_arr[i])) && vowels.contains(String(test_str_arr[i + 1])) {\n                count += 1\n            }\n        } else if i == test_str_arr.count - 1 {\n            if vowels.contains(String(test_str_arr[i])) && vowels.contains(String(test_str_arr[i - 1])) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(String(test_str_arr[i])) && vowels.contains(String(test_str_arr[i - 1])) && vowels.contains(String(test_str_arr[i + 1])) {\n                count += 1\n            }\n        }\n    }\n    return count"
  ]
}