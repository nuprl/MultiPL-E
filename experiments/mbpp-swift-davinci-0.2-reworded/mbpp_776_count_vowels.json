{
  "name": "mbpp_776_count_vowels",
  "language": "swift",
  "prompt": "\n/// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str: String) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_vowels(test_str: \"bestinstareels\") == 7)\nassert(count_vowels(test_str: \"partofthejourneyistheend\") == 12)\nassert(count_vowels(test_str: \"amazonprime\") == 5)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = String(test_str[index])\n        if vowels.contains(char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = String(test_str[next_index])\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = String(test_str[index])\n        if vowels.contains(char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = String(test_str[next_index])\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if is_vowel(char: char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if is_vowel(char: prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if is_vowel(char: next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i == 0 {\n                if test_str.count > 1 {\n                    let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                    let next_char = test_str[next_index]\n                    if next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                        count += 1\n                    }\n                }\n            } else if i == test_str.count - 1 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" {\n                    count += 1\n                }\n            } else {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" || next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]) {\n                count += 1\n            }\n        } else {\n            if is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)]) || is_vowel(char: test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        if test_str[index] == \"a\" || test_str[index] == \"e\" || test_str[index] == \"i\" || test_str[index] == \"o\" || test_str[index] == \"u\" {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                if test_str[prev_index] == \"a\" || test_str[prev_index] == \"e\" || test_str[prev_index] == \"i\" || test_str[prev_index] == \"o\" || test_str[prev_index] == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                if test_str[next_index] == \"a\" || test_str[next_index] == \"e\" || test_str[next_index] == \"i\" || test_str[next_index] == \"o\" || test_str[next_index] == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        if test_str[index] == \"a\" || test_str[index] == \"e\" || test_str[index] == \"i\" || test_str[index] == \"o\" || test_str[index] == \"u\" {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                if test_str[prev_index] == \"a\" || test_str[prev_index] == \"e\" || test_str[prev_index] == \"i\" || test_str[prev_index] == \"o\" || test_str[prev_index] == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                if test_str[next_index] == \"a\" || test_str[next_index] == \"e\" || test_str[next_index] == \"i\" || test_str[next_index] == \"o\" || test_str[next_index] == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if (index < test_str.count - 1) && (vowels.contains(char) || vowels.contains(test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)])) {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        if test_str[index] == \"a\" || test_str[index] == \"e\" || test_str[index] == \"i\" || test_str[index] == \"o\" || test_str[index] == \"u\" {\n            if i > 0 {\n                let index_prev = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                if test_str[index_prev] == \"a\" || test_str[index_prev] == \"e\" || test_str[index_prev] == \"i\" || test_str[index_prev] == \"o\" || test_str[index_prev] == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let index_next = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                if test_str[index_next] == \"a\" || test_str[index_next] == \"e\" || test_str[index_next] == \"i\" || test_str[index_next] == \"o\" || test_str[index_next] == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if is_vowel(char: test_str[test_str.index(after: test_str.startIndex)]) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if is_vowel(char: test_str[test_str.index(before: test_str.endIndex)]) {\n                count += 1\n            }\n        } else {\n            if is_vowel(char: test_str[test_str.index(after: test_str.startIndex)]) || is_vowel(char: test_str[test_str.index(before: test_str.endIndex)]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = String(test_str[index])\n        if vowels.contains(char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = String(test_str[next_index])\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)])) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)])) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: index - 1)])) || vowels.contains(String(test_str[test_str.index(test_str.startIndex, offsetBy: index + 1)])) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(test_str[test_str.index(after: test_str.startIndex)]) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(test_str[test_str.index(before: test_str.endIndex)]) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(test_str[test_str.index(after: test_str.index(after: test_str.startIndex))]) || vowels.contains(test_str[test_str.index(before: test_str.index(before: test_str.endIndex))]) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = test_str[index]\n        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = test_str[prev_index]\n                if prev_char == \"a\" || prev_char == \"e\" || prev_char == \"i\" || prev_char == \"o\" || prev_char == \"u\" {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = test_str[next_index]\n                if next_char == \"a\" || next_char == \"e\" || next_char == \"i\" || next_char == \"o\" || next_char == \"u\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<test_str.count {\n        if i == 0 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i + 1)] == \"u\" {\n                    count += 1\n                }\n            }\n        } else if i == test_str.count - 1 {\n            if test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"a\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"e\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"i\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"o\" || test_str[test_str.index(test_str.startIndex, offsetBy: i)] == \"u\" {\n                if test_str[test_str.index(test_str.startIndex, offsetBy: i - 1)] == \"a\" || test_str",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for (index, char) in test_str.enumerated() {\n        if index == 0 {\n            if vowels.contains(String(test_str[test_str.index(after: test_str.startIndex)])) {\n                count += 1\n            }\n        } else if index == test_str.count - 1 {\n            if vowels.contains(String(test_str[test_str.index(before: test_str.endIndex)])) {\n                count += 1\n            }\n        } else {\n            if vowels.contains(String(test_str[test_str.index(after: test_str.index(after: test_str.startIndex))])) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    var char_array = Array(test_str)\n    for i in 0..<char_array.count {\n        if i == 0 {\n            if is_vowel(char: char_array[i]) && is_vowel(char: char_array[i+1]) {\n                count += 1\n            }\n        } else if i == char_array.count - 1 {\n            if is_vowel(char: char_array[i]) && is_vowel(char: char_array[i-1]) {\n                count += 1\n            }\n        } else {\n            if is_vowel(char: char_array[i]) && (is_vowel(char: char_array[i-1]) || is_vowel(char: char_array[i+1])) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in 0..<test_str.count {\n        let index = test_str.index(test_str.startIndex, offsetBy: i)\n        let char = String(test_str[index])\n        if vowels.contains(char) {\n            if i > 0 {\n                let prev_index = test_str.index(test_str.startIndex, offsetBy: i - 1)\n                let prev_char = String(test_str[prev_index])\n                if vowels.contains(prev_char) {\n                    count += 1\n                }\n            }\n            if i < test_str.count - 1 {\n                let next_index = test_str.index(test_str.startIndex, offsetBy: i + 1)\n                let next_char = String(test_str[next_index])\n                if vowels.contains(next_char) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count"
  ]
}