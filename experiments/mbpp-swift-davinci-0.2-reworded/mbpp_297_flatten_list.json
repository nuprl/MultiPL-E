{
  "name": "mbpp_297_flatten_list",
  "language": "swift",
  "prompt": "\n/// Write a function to flatten a given nested array structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list2 = [Int]()\n    for element in list1 as! [AnyHashable] {\n        if element is Int {\n            list2.append(element as! Int)\n        } else {\n            list2.append(contentsOf: flatten_list(list1: element))\n        }\n    }\n    return list2",
    "    var list2: [Int] = []\n    for item in list1 as! [AnyHashable] {\n        if item is Int {\n            list2.append(item as! Int)\n        } else {\n            list2 += flatten_list(list1: item)\n        }\n    }\n    return list2",
    "    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let list2 = item as? [AnyHashable] {\n                result += flatten_list(list1: list2)\n            } else {\n                result.append(item as! Int)\n            }\n        }\n    }\n    return result",
    "    var list2 = [Int]()\n    for item in list1 as! [AnyHashable] {\n        if item is Int {\n            list2.append(item as! Int)\n        } else {\n            list2.append(contentsOf: flatten_list(list1: item))\n        }\n    }\n    return list2",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            } else {\n                result.append(item as! Int)\n            }\n        }\n    } else {\n        result.append(list1 as! Int)\n    }\n    return result",
    "    var list2: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            list2.append(contentsOf: flatten_list(list1: item))\n        }\n    } else {\n        list2.append(list1 as! Int)\n    }\n    return list2",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result",
    "    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                list2.append(item)\n            } else if let item = item as? [AnyHashable] {\n                list2.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return list2",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            } else if let item = item as? Int {\n                result.append(item)\n            }\n        }\n    }\n    return result",
    "    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list",
    "    var list2: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                list2.append(item)\n            } else if let item = item as? [AnyHashable] {\n                list2 += flatten_list(list1: item)\n            }\n        }\n    }\n    return list2",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? [AnyHashable] {\n                list2.append(contentsOf: flatten_list(list1: item))\n            } else {\n                list2.append(item as! Int)\n            }\n        }\n    } else {\n        list2.append(list1 as! Int)\n    }\n    return list2",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result",
    "    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            if let item2 = item as? Int {\n                list.append(item2)\n            } else if let item2 = item as? [AnyHashable] {\n                list.append(contentsOf: flatten_list(list1: item2))\n            }\n        }\n    }\n    return list"
  ]
}