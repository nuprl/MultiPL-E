{
  "name": "mbpp_606_radian_degree",
  "language": "swift",
  "prompt": "\n/// Write a function to convert degrees to radians.\nfunc radian_degree(degree: Int) -> Double {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_606_radian_degree.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(radian_degree(degree: 90) == 1.5707963267948966)\nassert(radian_degree(degree: 60) == 1.0471975511965976)\nassert(radian_degree(degree: 120) == 2.0943951023931953)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    return Double(degree) * Double.pi / 180.0",
    "    return Double(degree) * Double.pi / 180",
    "    return Double(degree) * (Double.pi / 180)",
    "    return Double(degree) * Double.pi / 180",
    "    return Double(degree) * Double.pi / 180",
    "    return Double(degree) * Double.pi / 180",
    "    return Double(degree) * Double.pi / 180",
    "    return Double(degree) * Double.pi / 180",
    "    return Double(degree) * Double.pi / 180",
    "    return Double(degree) * Double.pi / 180",
    "    return Double(degree) * Double.pi / 180",
    "    return Double(degree) * (M_PI / 180)",
    "    return Double(degree) * Double.pi / 180",
    "    return Double(degree) * Double.pi / 180",
    "    return Double(degree) * Double.pi / 180",
    "    return Double(degree) * Double.pi / 180",
    "    return Double(degree) * Double.pi / 180",
    "    return Double(degree) * (Double.pi / 180)",
    "    return Double(degree) * Double.pi / 180",
    "    return Double(degree) * Double.pi / 180"
  ]
}