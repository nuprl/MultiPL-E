{
  "name": "mbpp_430_parabola_directrix",
  "language": "swift",
  "prompt": "\n/// Write a function to find the directrix of a parabola.\nfunc parabola_directrix(a: Int, b: Int, c: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(parabola_directrix(a: 5, b: 3, c: 2) == -198)\nassert(parabola_directrix(a: 9, b: 8, c: 4) == -2336)\nassert(parabola_directrix(a: 2, b: 4, c: 6) == -130)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    return -4 * a * c / b",
    "    return -c / b",
    "    return -c / b",
    "    return -(c - b * b / (4 * a)) / a",
    "    return -(4 * a * c) / (b * b)",
    "    return -(4 * a * c) / b",
    "    return -c / b",
    "    return -c / b",
    "    return -(4 * a * c) / (b * b)",
    "    return -c / b",
    "    return -4 * a * c / b",
    "    return -c / b",
    "    return -c / b",
    "    return -4 * a * c / b",
    "    return -c / b",
    "    return -4 * a * c / b",
    "    return -(b / (2 * a))",
    "    return -c / b",
    "    return -(4 * a * c) / (b * b)",
    "    return -c / b"
  ]
}