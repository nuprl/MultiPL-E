{
  "name": "mbpp_291_count_no_of_ways",
  "language": "swift",
  "prompt": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = k\n    dp[1] = k * k\n    \n    for i in 2..<n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    \n    return dp[n - 1]",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 2...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0, diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = k\n    dp[1] = k * k\n    \n    for i in 2..<n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    \n    return dp[n - 1]",
    "    var same = 0\n    var diff = k\n    for _ in 2...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = k\n    dp[1] = k * k\n    for i in 2..<n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n - 1]",
    "    var same = 0\n    var diff = k\n    var total = same + diff\n    for _ in 1..<n {\n        same = diff\n        diff = total * (k - 1)\n        total = same + diff\n    }\n    return total",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = k\n    dp[1] = k*k\n    for i in 2..<n {\n        dp[i] = (k-1)*(dp[i-1]+dp[i-2])\n    }\n    return dp[n-1]",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var total = k\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        same = diff\n        diff = total * (k - 1)\n        total = same + diff\n    }\n    return total",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 || k == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0, diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = k\n    dp[1] = k * k\n    for i in 2..<n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n - 1]",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    \n    if n == 1 {\n        return k\n    }\n    \n    var same = k\n    var diff = k * (k - 1)\n    \n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    \n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = k\n    dp[1] = k * k\n    for i in 2..<n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n - 1]",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 || k == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 || k == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 || k == 0 {\n        return 0\n    }\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    guard n > 0, k > 0 else {\n        return 0\n    }\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = k\n    dp[1] = k * k\n    for i in 2..<n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n - 1]",
    "    var same = 0\n    var diff = k\n    for _ in 2...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    guard n > 0, k > 0 else {\n        return 0\n    }\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 2...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    var total = k\n    for _ in 2...n {\n        same = diff\n        diff = total * (k - 1)\n        total = same + diff\n    }\n    return total",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 2...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    var total = same + diff\n    for _ in 2...n {\n        same = diff\n        diff = total * (k - 1)\n        total = same + diff\n    }\n    return total",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 2...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 || k == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = k\n    dp[1] = k * k\n    for i in 2..<n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n - 1]",
    "    var total = k\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        same = diff\n        diff = total * (k - 1)\n        total = same + diff\n    }\n    return total",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    \n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    \n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = k\n    dp[1] = k * k\n    \n    for i in 2..<n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    \n    return dp[n - 1]",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = k\n    dp[1] = k * k\n    for i in 2..<n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n - 1]",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = k\n    dp[1] = k * k\n    for i in 2..<n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n - 1]",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var dp = [Int](repeating: 0, count: n)\n    dp[0] = k\n    dp[1] = k * k\n    for i in 2..<n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n - 1]",
    "    var total = k\n    var same = 0\n    var diff = k\n    for _ in 2...n {\n        same = diff\n        diff = total * (k - 1)\n        total = same + diff\n    }\n    return total",
    "    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = k\n    dp[1] = k * k\n    for i in 2..<n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n - 1]",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    \n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    \n    return same + diff",
    "    if n <= 0 {\n        return 0\n    }\n    \n    if n == 1 {\n        return k\n    }\n    \n    var same = k\n    var diff = k * (k - 1)\n    \n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    \n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var dp = Array(repeating: 0, count: n + 1)\n    dp[1] = k\n    dp[2] = k * k\n    for i in 3...n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n]",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = k\n    dp[1] = k * k\n    for i in 2..<n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n - 1]",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = k\n    dp[1] = k * k\n    for i in 2..<n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n - 1]",
    "    var same = 0\n    var diff = k\n    for _ in 2...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var dp = [Int](repeating: 0, count: n+1)\n    dp[1] = k\n    dp[2] = k*k\n    for i in 3...n {\n        dp[i] = (k-1)*(dp[i-1] + dp[i-2])\n    }\n    return dp[n]",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var dp = Array(repeating: 0, count: n + 1)\n    dp[1] = k\n    dp[2] = k * k\n    for i in 3...n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n]",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff"
  ]
}