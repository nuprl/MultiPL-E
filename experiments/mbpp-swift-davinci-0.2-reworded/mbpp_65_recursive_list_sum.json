{
  "name": "mbpp_65_recursive_list_sum",
  "language": "swift",
  "prompt": "\nextension [Int]: Error {}\n        \n/// Write a function to flatten an array and sum all of its elements.\nfunc recursive_list_sum(data_list: [Result<Int, [Int]>]) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_65_recursive_list_sum.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(recursive_list_sum(data_list: [.success(1), .success(2), .failure([3, 4]), .failure([5, 6])]) == 21)\nassert(recursive_list_sum(data_list: [.success(7), .success(10), .failure([15, 14]), .failure([19, 41])]) == 106)\nassert(recursive_list_sum(data_list: [.success(10), .success(20), .failure([30, 40]), .failure([50, 60])]) == 210)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { Result<Int, [Int]>.success($0) })\n        }\n    }\n    return sum",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    var sum = 0\n    for i in data_list {\n        switch i {\n        case .success(let value):\n            sum += value\n        case .failure(let error):\n            sum += recursive_list_sum(data_list: error.map(Result.success))\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (result, element) in\n        switch element {\n        case .success(let value):\n            return result + value\n        case .failure(let value):\n            return result + recursive_list_sum(data_list: value)\n        }\n    }",
    "    return data_list.reduce(0) { (acc, curr) -> Int in\n        switch curr {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value)\n        }\n    }",
    "    return data_list.reduce(0) { (acc, element) -> Int in\n        switch element {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value.map { Result.failure($0) })\n        }\n    }",
    "    return data_list.reduce(0) { (acc, x) -> Int in\n        switch x {\n        case .success(let x):\n            return acc + x\n        case .failure(let x):\n            return acc + recursive_list_sum(data_list: x.map(Result.failure))\n        }\n    }",
    "    return data_list.reduce(0) { (result, element) in\n        switch element {\n        case .success(let value):\n            return result + value\n        case .failure(let value):\n            return result + recursive_list_sum(data_list: value)\n        }\n    }",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { Result<Int, [Int]>.success($0) })\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (acc, element) -> Int in\n        switch element {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value.map(Result.success))\n        }\n    }",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case let .success(value):\n            sum += value\n        case let .failure(value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    var sum = 0\n    for element in data_list {\n        switch element {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (sum, element) -> Int in\n        switch element {\n        case .success(let value):\n            return sum + value\n        case .failure(let error):\n            return sum + recursive_list_sum(data_list: error)\n        }\n    }",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { Result.success($0) })\n        }\n    }\n    return sum",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map(Result.success))\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (acc, item) -> Int in\n        switch item {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value)\n        }\n    }",
    "    return data_list.reduce(0) { (acc, value) -> Int in\n        switch value {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value.map(Result.success))\n        }\n    }",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map(Result.success))\n        }\n    }\n    return sum",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { Result<Int, [Int]>.success($0) })\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (acc, item) -> Int in\n        switch item {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value)\n        }\n    }",
    "    return data_list.reduce(0) { (acc, x) -> Int in\n        switch x {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value.map { .failure($0) })\n        }\n    }",
    "    return data_list.reduce(0) { (acc, elem) -> Int in\n        switch elem {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value.map { Result<Int, [Int]>.failure($0) })\n        }\n    }",
    "    return data_list.reduce(0) { (acc, elem) -> Int in\n        switch elem {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value)\n        }\n    }",
    "    var sum = 0\n    for element in data_list {\n        switch element {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { Result.success($0) })\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (result, element) -> Int in\n        switch element {\n        case .success(let value):\n            return result + value\n        case .failure(let value):\n            return result + recursive_list_sum(data_list: value.map(Result.success))\n        }\n    }",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case let .success(value):\n            sum += value\n        case let .failure(error):\n            sum += recursive_list_sum(data_list: error)\n        }\n    }\n    return sum",
    "    return data_list.reduce(0, { (acc, x) -> Int in\n        switch x {\n        case .success(let x):\n            return acc + x\n        case .failure(let x):\n            return acc + recursive_list_sum(data_list: x.map(Result.failure))\n        }\n    })",
    "    var sum = 0\n    for element in data_list {\n        switch element {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { Result<Int, [Int]>.success($0) })\n        }\n    }\n    return sum",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map(Result.failure))\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (acc, curr) -> Int in\n        switch curr {\n        case let .success(value):\n            return acc + value\n        case let .failure(value):\n            return acc + recursive_list_sum(data_list: value)\n        }\n    }",
    "    return data_list.reduce(0) {\n        switch $1 {\n        case .success(let value):\n            return $0 + value\n        case .failure(let value):\n            return $0 + recursive_list_sum(data_list: value)\n        }\n    }",
    "    return data_list.reduce(0) { (acc, item) -> Int in\n        switch item {\n        case let .success(value):\n            return acc + value\n        case let .failure(value):\n            return acc + recursive_list_sum(data_list: value)\n        }\n    }",
    "    return data_list.reduce(0) { (sum, element) -> Int in\n        switch element {\n        case .success(let value):\n            return sum + value\n        case .failure(let value):\n            return sum + recursive_list_sum(data_list: value.map { Result<Int, [Int]>.success($0) })\n        }\n    }",
    "    var result = 0\n    for data in data_list {\n        switch data {\n        case let .success(value):\n            result += value\n        case let .failure(error):\n            result += recursive_list_sum(data_list: error)\n        }\n    }\n    return result",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let error):\n            sum += recursive_list_sum(data_list: error)\n        }\n    }\n    return sum",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case let .success(value):\n            sum += value\n        case let .failure(value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) {\n        switch $1 {\n        case .success(let value):\n            return $0 + value\n        case .failure(let value):\n            return $0 + recursive_list_sum(data_list: value)\n        }\n    }",
    "    var sum = 0\n    for element in data_list {\n        switch element {\n        case .success(let value):\n            sum += value\n        case .failure(let error):\n            sum += recursive_list_sum(data_list: error)\n        }\n    }\n    return sum",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { .failure($0) })\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (acc, x) in\n        switch x {\n        case .success(let x):\n            return acc + x\n        case .failure(let x):\n            return acc + recursive_list_sum(data_list: x.map(Result.success))\n        }\n    }",
    "    return data_list.reduce(0) { (acc, item) -> Int in\n        switch item {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value.map { Result<Int, [Int]>.failure($0) })\n        }\n    }",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map(Result.success))\n        }\n    }\n    return sum",
    "    var sum = 0\n    for element in data_list {\n        switch element {\n        case .success(let value):\n            sum += value\n        case .failure(let error):\n            sum += recursive_list_sum(data_list: error)\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (sum, element) -> Int in\n        switch element {\n        case let .success(value):\n            return sum + value\n        case let .failure(value):\n            return sum + recursive_list_sum(data_list: value)\n        }\n    }",
    "    return data_list.reduce(0) { (sum, item) -> Int in\n        switch item {\n        case .success(let value):\n            return sum + value\n        case .failure(let error):\n            return sum + recursive_list_sum(data_list: error)\n        }\n    }",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { Result<Int, [Int]>.success($0) })\n        }\n    }\n    return sum",
    "    var sum = 0\n    for element in data_list {\n        switch element {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (acc, next) -> Int in\n        switch next {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value.map { Result<Int, [Int]>.failure($0) })\n        }\n    }",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { Result<Int, [Int]>.success($0) })\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (result, element) -> Int in\n        switch element {\n        case .success(let value):\n            return result + value\n        case .failure(let value):\n            return result + recursive_list_sum(data_list: value)\n        }\n    }",
    "    var result = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            result += value\n        case .failure(let value):\n            result += recursive_list_sum(data_list: value.map { Result<Int, [Int]>.success($0) })\n        }\n    }\n    return result",
    "    var sum = 0\n    for element in data_list {\n        switch element {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (acc, x) -> Int in\n        switch x {\n        case .success(let x):\n            return acc + x\n        case .failure(let x):\n            return acc + recursive_list_sum(data_list: x.map(Result.success))\n        }\n    }",
    "    return data_list.reduce(0) {\n        switch $1 {\n        case .success(let value):\n            return $0 + value\n        case .failure(let value):\n            return $0 + recursive_list_sum(data_list: value.map(Result.success))\n        }\n    }",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { Result<Int, [Int]>.success($0) })\n        }\n    }\n    return sum",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { .failure($0) })\n        }\n    }\n    return sum",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { Result<Int, [Int]>.success($0) })\n        }\n    }\n    return sum",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map(Result.success))\n        }\n    }\n    return sum",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { Result<Int, [Int]>.success($0) })\n        }\n    }\n    return sum",
    "    return 0",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { Result<Int, [Int]>.success($0) })\n        }\n    }\n    return sum",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map(Result.success))\n        }\n    }\n    return sum",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { Result<Int, [Int]>.success($0) })\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) {\n        switch $1 {\n        case .success(let value):\n            return $0 + value\n        case .failure(let value):\n            return $0 + recursive_list_sum(data_list: value)\n        }\n    }",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (result, element) -> Int in\n        switch element {\n        case .success(let value):\n            return result + value\n        case .failure(let value):\n            return result + recursive_list_sum(data_list: value)\n        }\n    }",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let error):\n            sum += recursive_list_sum(data_list: error)\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (result, element) -> Int in\n        switch element {\n        case .success(let value):\n            return result + value\n        case .failure(let value):\n            return result + recursive_list_sum(data_list: value.map { Result<Int, [Int]>.failure($0) })\n        }\n    }",
    "    var sum = 0\n    for element in data_list {\n        switch element {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map(Result.failure))\n        }\n    }\n    return sum",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let array):\n            sum += recursive_list_sum(data_list: array.map { Result<Int, [Int]>.failure($0) })\n        }\n    }\n    return sum",
    "    var sum = 0\n    for element in data_list {\n        switch element {\n        case let .success(value):\n            sum += value\n        case let .failure(value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (acc, item) -> Int in\n        switch item {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value)\n        }\n    }",
    "    return data_list.reduce(0) { (acc, x) -> Int in\n        switch x {\n        case .success(let x):\n            return acc + x\n        case .failure(let x):\n            return acc + recursive_list_sum(data_list: x.map(Result.success))\n        }\n    }",
    "    return data_list.reduce(0) { (acc, element) -> Int in\n        switch element {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value)\n        }\n    }",
    "    return data_list.reduce(0) { (sum, element) -> Int in\n        switch element {\n        case .success(let value):\n            return sum + value\n        case .failure(let value):\n            return sum + recursive_list_sum(data_list: value)\n        }\n    }",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case let .success(value):\n            sum += value\n        case let .failure(value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map(Result.success))\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (acc, curr) -> Int in\n        switch curr {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value.map { .failure($0) })\n        }\n    }",
    "    return data_list.reduce(0) { (result, element) in\n        switch element {\n        case .success(let value):\n            return result + value\n        case .failure(let error):\n            return result + recursive_list_sum(data_list: error)\n        }\n    }",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let error):\n            sum += recursive_list_sum(data_list: error)\n        }\n    }\n    return sum",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case let .success(value):\n            sum += value\n        case let .failure(value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    return data_list.reduce(0, { (sum, item) -> Int in\n        switch item {\n        case .success(let value):\n            return sum + value\n        case .failure(let value):\n            return sum + recursive_list_sum(data_list: value.map { Result<Int, [Int]>.failure($0) })\n        }\n    })",
    "    return data_list.reduce(0) { (total, element) in\n        switch element {\n        case .success(let value):\n            return total + value\n        case .failure(let error):\n            return total + recursive_list_sum(data_list: error)\n        }\n    }",
    "    return data_list.reduce(0, { (result, element) -> Int in\n        switch element {\n        case .success(let value):\n            return result + value\n        case .failure(let error):\n            return result + recursive_list_sum(data_list: error)\n        }\n    })",
    "    return data_list.reduce(0) { (sum, element) -> Int in\n        switch element {\n        case .success(let value):\n            return sum + value\n        case .failure(let error):\n            return sum + recursive_list_sum(data_list: error)\n        }\n    }",
    "    return data_list.reduce(0) { (acc, curr) -> Int in\n        switch curr {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value)\n        }\n    }",
    "    var sum = 0\n    for element in data_list {\n        switch element {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let error):\n            sum += recursive_list_sum(data_list: error.map(Result.success))\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (sum, element) -> Int in\n        switch element {\n        case .success(let value):\n            return sum + value\n        case .failure(let value):\n            return sum + recursive_list_sum(data_list: value)\n        }\n    }",
    "    return data_list.reduce(0) { (acc, element) -> Int in\n        switch element {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value.map { Result<Int, [Int]>.failure($0) })\n        }\n    }",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let array):\n            sum += recursive_list_sum(data_list: array.map { Result<Int, [Int]>.failure($0) })\n        }\n    }\n    return sum",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case let .success(value):\n            sum += value\n        case let .failure(value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case let .success(value):\n            sum += value\n        case let .failure(value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    var sum = 0\n    for element in data_list {\n        switch element {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (acc, curr) -> Int in\n        switch curr {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value.map { Result<Int, [Int]>.failure($0) })\n        }\n    }",
    "    return data_list.reduce(0) { (sum, element) -> Int in\n        switch element {\n        case .success(let value):\n            return sum + value\n        case .failure(let value):\n            return sum + recursive_list_sum(data_list: value)\n        }\n    }",
    "    return data_list.reduce(0) { (acc, item) -> Int in\n        switch item {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value.map(Result.success))\n        }\n    }",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map(Result.failure))\n        }\n    }\n    return sum",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { Result<Int, [Int]>.success($0) })\n        }\n    }\n    return sum",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let error):\n            sum += recursive_list_sum(data_list: error)\n        }\n    }\n    return sum",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { Result<Int, [Int]>.success($0) })\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (sum, element) -> Int in\n        switch element {\n        case .success(let value):\n            return sum + value\n        case .failure(let error):\n            return sum + recursive_list_sum(data_list: error)\n        }\n    }",
    "    return data_list.reduce(0) { (result, item) -> Int in\n        switch item {\n        case .success(let value):\n            return result + value\n        case .failure(let error):\n            return result + recursive_list_sum(data_list: error)\n        }\n    }",
    "    return data_list.reduce(0) { (acc, x) in\n        switch x {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value)\n        }\n    }",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map(Result.success))\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (result, element) -> Int in\n        switch element {\n        case .success(let value):\n            return result + value\n        case .failure(let value):\n            return result + recursive_list_sum(data_list: value)\n        }\n    }",
    "    return data_list.reduce(0) { (sum, element) -> Int in\n        switch element {\n        case .success(let value):\n            return sum + value\n        case .failure(let value):\n            return sum + recursive_list_sum(data_list: value)\n        }\n    }",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (acc, value) -> Int in\n        switch value {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value.map { Result<Int, [Int]>.failure($0) })\n        }\n    }",
    "    return data_list.reduce(0) { (acc, x) -> Int in\n        switch x {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value.map { Result<Int, [Int]>.success($0) })\n        }\n    }",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { Result<Int, [Int]>.success($0) })\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (result, element) -> Int in\n        switch element {\n        case .success(let value):\n            return result + value\n        case .failure(let error):\n            return result + recursive_list_sum(data_list: error)\n        }\n    }",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { Result<Int, [Int]>.success($0) })\n        }\n    }\n    return sum",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { .failure($0) })\n        }\n    }\n    return sum",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let error):\n            sum += recursive_list_sum(data_list: error)\n        }\n    }\n    return sum",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let error):\n            sum += recursive_list_sum(data_list: error.map(Result.success))\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (acc, elem) -> Int in\n        switch elem {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value)\n        }\n    }",
    "    var sum = 0\n    for element in data_list {\n        switch element {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    var sum = 0\n    for element in data_list {\n        switch element {\n        case .success(let value):\n            sum += value\n        case .failure(let error):\n            sum += recursive_list_sum(data_list: error)\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (result, data) in\n        switch data {\n        case .success(let value):\n            return result + value\n        case .failure(let value):\n            return result + recursive_list_sum(data_list: value)\n        }\n    }",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { Result<Int, [Int]>.success($0) })\n        }\n    }\n    return sum",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let error):\n            sum += recursive_list_sum(data_list: error)\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (acc, curr) -> Int in\n        switch curr {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value.map { Result<Int, [Int]>.failure($0) })\n        }\n    }",
    "    return data_list.reduce(0) { (sum, element) -> Int in\n        switch element {\n        case .success(let value):\n            return sum + value\n        case .failure(let value):\n            return sum + recursive_list_sum(data_list: value)\n        }\n    }",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { Result<Int, [Int]>.failure($0) })\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (sum, element) -> Int in\n        switch element {\n        case .success(let value):\n            return sum + value\n        case .failure(let value):\n            return sum + recursive_list_sum(data_list: value)\n        }\n    }",
    "    var sum = 0\n    for element in data_list {\n        switch element {\n        case .success(let value):\n            sum += value\n        case .failure(let error):\n            sum += recursive_list_sum(data_list: error)\n        }\n    }\n    return sum",
    "    var result = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            result += value\n        case .failure(let value):\n            result += recursive_list_sum(data_list: value)\n        }\n    }\n    return result",
    "    return data_list.reduce(0) { (acc, item) -> Int in\n        switch item {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value.map(Result.failure))\n        }\n    }",
    "    return data_list.reduce(0) {\n        switch $1 {\n        case .success(let value):\n            return $0 + value\n        case .failure(let value):\n            return $0 + recursive_list_sum(data_list: value.map(Result.success))\n        }\n    }",
    "    return data_list.reduce(0) { (result, element) -> Int in\n        switch element {\n        case .success(let value):\n            return result + value\n        case .failure(let value):\n            return result + recursive_list_sum(data_list: value)\n        }\n    }",
    "    return data_list.reduce(0) { (acc, x) -> Int in\n        switch x {\n        case let .success(value):\n            return acc + value\n        case let .failure(value):\n            return acc + recursive_list_sum(data_list: value)\n        }\n    }",
    "    return data_list.reduce(0) { (sum, element) -> Int in\n        switch element {\n        case .success(let value):\n            return sum + value\n        case .failure(let value):\n            return sum + recursive_list_sum(data_list: value)\n        }\n    }",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { Result.success($0) })\n        }\n    }\n    return sum",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { Result.success($0) })\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (result, element) -> Int in\n        switch element {\n        case .success(let value):\n            return result + value\n        case .failure(let error):\n            return result + recursive_list_sum(data_list: error)\n        }\n    }",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let error):\n            sum += recursive_list_sum(data_list: error)\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (acc, curr) -> Int in\n        switch curr {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value)\n        }\n    }",
    "    return data_list.reduce(0, { (acc, element) -> Int in\n        switch element {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value.map { Result<Int, [Int]>.failure($0) })\n        }\n    })",
    "    return data_list.reduce(0) { (sum, element) -> Int in\n        switch element {\n        case .success(let value):\n            return sum + value\n        case .failure(let value):\n            return sum + recursive_list_sum(data_list: value)\n        }\n    }",
    "    return data_list.reduce(0) { (acc, curr) -> Int in\n        switch curr {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value)\n        }\n    }",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map(Result.failure))\n        }\n    }\n    return sum",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { Result<Int, [Int]>.success($0) })\n        }\n    }\n    return sum",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { Result<Int, [Int]>.success($0) })\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (acc, value) -> Int in\n        switch value {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value)\n        }\n    }",
    "    return data_list.reduce(0) { (acc, element) -> Int in\n        switch element {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value.map { Result<Int, [Int]>.failure($0) })\n        }\n    }",
    "    return data_list.reduce(0) { (acc, item) -> Int in\n        switch item {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value.map(Result.success))\n        }\n    }",
    "    return data_list.reduce(0) { (sum, result) -> Int in\n        switch result {\n        case .success(let value):\n            return sum + value\n        case .failure(let value):\n            return sum + recursive_list_sum(data_list: value)\n        }\n    }",
    "    return data_list.reduce(0) { (acc, element) -> Int in\n        switch element {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value.map { Result<Int, [Int]>.failure($0) })\n        }\n    }",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map{Result<Int, [Int]>.failure($0)})\n        }\n    }\n    return sum",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case let .success(value):\n            sum += value\n        case let .failure(value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    var sum = 0\n    for element in data_list {\n        switch element {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (acc, elem) -> Int in\n        switch elem {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value)\n        }\n    }",
    "    var sum = 0\n    for element in data_list {\n        switch element {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { .failure($0) })\n        }\n    }\n    return sum",
    "    var sum = 0\n    for element in data_list {\n        switch element {\n        case .success(let value):\n            sum += value\n        case .failure(let error):\n            sum += recursive_list_sum(data_list: error)\n        }\n    }\n    return sum",
    "    var result = 0\n    for data in data_list {\n        switch data {\n        case let .success(value):\n            result += value\n        case let .failure(error):\n            result += recursive_list_sum(data_list: error)\n        }\n    }\n    return result",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { Result.success($0) })\n        }\n    }\n    return sum",
    "    var sum = 0\n    for element in data_list {\n        switch element {\n        case .success(let value):\n            sum += value\n        case .failure(let error):\n            sum += recursive_list_sum(data_list: error)\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (sum, element) -> Int in\n        switch element {\n        case .success(let value):\n            return sum + value\n        case .failure(let value):\n            return sum + recursive_list_sum(data_list: value)\n        }\n    }",
    "    return data_list.reduce(0) { (sum, element) -> Int in\n        switch element {\n        case .success(let value):\n            return sum + value\n        case .failure(let value):\n            return sum + recursive_list_sum(data_list: value)\n        }\n    }",
    "    return data_list.reduce(0) { (result, element) -> Int in\n        switch element {\n        case .success(let value):\n            return result + value\n        case .failure(let error):\n            return result + recursive_list_sum(data_list: error)\n        }\n    }",
    "    return data_list.reduce(0) { (acc, x) -> Int in\n        switch x {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value.map(Result.success))\n        }\n    }",
    "    return data_list.reduce(0) { (acc, element) -> Int in\n        switch element {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value.map(Result.success))\n        }\n    }",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { Result<Int, [Int]>.success($0) })\n        }\n    }\n    return sum",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (acc, x) in\n        switch x {\n        case .success(let x):\n            return acc + x\n        case .failure(let x):\n            return acc + recursive_list_sum(data_list: x)\n        }\n    }",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { Result<Int, [Int]>.success($0) })\n        }\n    }\n    return sum",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { Result<Int, [Int]>.success($0) })\n        }\n    }\n    return sum",
    "    var sum = 0\n    for element in data_list {\n        switch element {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value)\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (acc, elem) -> Int in\n        switch elem {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value)\n        }\n    }",
    "    return data_list.reduce(0) { (acc, x) in\n        switch x {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value)\n        }\n    }",
    "    return data_list.reduce(0) { (acc, element) -> Int in\n        switch element {\n        case .success(let value):\n            return acc + value\n        case .failure(let error):\n            return acc + recursive_list_sum(data_list: error)\n        }\n    }",
    "    var result = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            result += value\n        case .failure(let value):\n            result += recursive_list_sum(data_list: value.map(Result.success))\n        }\n    }\n    return result",
    "    return data_list.reduce(0) { (result, element) -> Int in\n        switch element {\n        case .success(let value):\n            return result + value\n        case .failure(let value):\n            return result + recursive_list_sum(data_list: value)\n        }\n    }",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let error):\n            sum += recursive_list_sum(data_list: error)\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (result, element) -> Int in\n        switch element {\n        case .success(let value):\n            return result + value\n        case .failure(let value):\n            return result + recursive_list_sum(data_list: value)\n        }\n    }",
    "    return data_list.reduce(0) { (sum, element) in\n        switch element {\n        case .success(let value):\n            return sum + value\n        case .failure(let value):\n            return sum + recursive_list_sum(data_list: value)\n        }\n    }",
    "    var sum = 0\n    for element in data_list {\n        switch element {\n        case .success(let value):\n            sum += value\n        case .failure(let error):\n            sum += recursive_list_sum(data_list: error)\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (sum, result) -> Int in\n        switch result {\n        case let .success(value):\n            return sum + value\n        case let .failure(value):\n            return sum + recursive_list_sum(data_list: value)\n        }\n    }",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { Result<Int, [Int]>.success($0) })\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (acc, curr) -> Int in\n        switch curr {\n        case let .success(value):\n            return acc + value\n        case let .failure(value):\n            return acc + recursive_list_sum(data_list: value)\n        }\n    }",
    "    var sum = 0\n    for item in data_list {\n        switch item {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map { Result<Int, [Int]>.success($0) })\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (sum, value) -> Int in\n        switch value {\n        case .success(let value):\n            return sum + value\n        case .failure(let value):\n            return sum + recursive_list_sum(data_list: value.map(Result.success))\n        }\n    }",
    "    var sum = 0\n    for data in data_list {\n        switch data {\n        case .success(let value):\n            sum += value\n        case .failure(let value):\n            sum += recursive_list_sum(data_list: value.map(Result.success))\n        }\n    }\n    return sum",
    "    return data_list.reduce(0) { (acc, x) -> Int in\n        switch x {\n        case .success(let x):\n            return acc + x\n        case .failure(let x):\n            return acc + recursive_list_sum(data_list: x.map { Result<Int, [Int]>.failure($0) })\n        }\n    }",
    "    return data_list.reduce(0) { (acc, curr) -> Int in\n        switch curr {\n        case .success(let value):\n            return acc + value\n        case .failure(let value):\n            return acc + recursive_list_sum(data_list: value)\n        }\n    }"
  ]
}