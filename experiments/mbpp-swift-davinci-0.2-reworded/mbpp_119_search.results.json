{
  "name": "mbpp_119_search",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == 0 {\n            if arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        } else if i == arr.count - 1 {\n            if arr[i] != arr[i-1] {\n                return arr[i]\n            }\n        } else {\n            if arr[i] != arr[i-1] && arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        }\n        i += 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var low = 0\n    var high = arr.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid]\n        }\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else {\n                high = mid - 2\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abc15a95c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abc1578c561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002abc1578c286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002abc1578c13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002abc1578bbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002abc1558ce83 <unavailable> + 188035\n6    tmpy2uk1tos                        0x000055ba40d4c88b <unavailable> + 6283\n7    tmpy2uk1tos                        0x000055ba40d4c3e4 <unavailable> + 5092\n8    libc.so.6                          0x00002abc15c81460 __libc_start_main + 245\n9    tmpy2uk1tos                        0x000055ba40d4c0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if mid % 2 == 0 {\n                right = mid - 2\n            } else {\n                left = mid + 1\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] == arr[i + 1] {\n            i += 2\n        } else {\n            return arr[i]\n        }\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == 0 {\n            if arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        } else if i == arr.count - 1 {\n            if arr[i] != arr[i-1] {\n                return arr[i]\n            }\n        } else {\n            if arr[i] != arr[i-1] && arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        }\n        i += 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    \n    while left < right {\n        let mid = (left + right) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                left = mid + 2\n            } else {\n                right = mid\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                left = mid + 1\n            } else {\n                right = mid - 1\n            }\n        }\n    }\n    \n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == arr.count - 1 {\n            return arr[i]\n        }\n        if arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid]\n        }\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1 - left) % 2 == 0 {\n                right = mid - 2\n            } else {\n                left = mid + 1\n            }\n        } else {\n            if (right - mid - 1) % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba931fffc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba931cf6561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ba931cf6286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ba931cf613c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ba931cf5bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ba931af6e83 <unavailable> + 188035\n6    tmptd85jw89                        0x000055f3847fd797 <unavailable> + 6039\n7    tmptd85jw89                        0x000055f3847fd3e4 <unavailable> + 5092\n8    libc.so.6                          0x00002ba9321eb460 __libc_start_main + 245\n9    tmptd85jw89                        0x000055f3847fd0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for i in 0..<arr.count {\n        result ^= arr[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == 0 && arr[i] != arr[i+1] {\n            return arr[i]\n        }\n        if i == arr.count - 1 && arr[i] != arr[i-1] {\n            return arr[i]\n        }\n        if arr[i] != arr[i-1] && arr[i] != arr[i+1] {\n            return arr[i]\n        }\n        i += 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3cef540c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3cef237561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b3cef237286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b3cef23713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b3cef236bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b3cef037e83 <unavailable> + 188035\n6    tmpjzmsbx_4                        0x000055896cbf1825 <unavailable> + 6181\n7    tmpjzmsbx_4                        0x000055896cbf1344 <unavailable> + 4932\n8    libc.so.6                          0x00002b3cef72c460 __libc_start_main + 245\n9    tmpjzmsbx_4                        0x000055896cbf1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == 0 {\n            if arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        } else if i == arr.count - 1 {\n            if arr[i] != arr[i-1] {\n                return arr[i]\n            }\n        } else {\n            if arr[i] != arr[i-1] && arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        }\n        i += 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if mid % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 1\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                right = mid - 1\n            } else {\n                left = mid + 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba093638c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba09332f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ba09332f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ba09332f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ba09332ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ba09312fe83 <unavailable> + 188035\n6    tmpk7wzcavp                        0x000055f19ddd178b <unavailable> + 6027\n7    tmpk7wzcavp                        0x000055f19ddd13e4 <unavailable> + 5092\n8    libc.so.6                          0x00002ba093824460 __libc_start_main + 245\n9    tmpk7wzcavp                        0x000055f19ddd10b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3c1403dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3c13d34561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b3c13d34286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b3c13d3413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b3c13d33bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b3c13b34e83 <unavailable> + 188035\n6    tmp8co4b9m8                        0x0000558975ef495a <unavailable> + 6490\n7    tmp8co4b9m8                        0x0000558975ef43e4 <unavailable> + 5092\n8    libc.so.6                          0x00002b3c14229460 __libc_start_main + 245\n9    tmp8co4b9m8                        0x0000558975ef40b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                right = mid - 2\n            } else {\n                left = mid + 1\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmpu9bbcb1i/tmpu9bbcb1i.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8659a77c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b865976eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b865976e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b865976d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu9bbcb1i                        0x000055810e1ac56b <unavailable> + 5483\n5    libc.so.6                          0x00002b8659c63460 __libc_start_main + 245\n6    tmpu9bbcb1i                        0x000055810e1ac0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == arr.count - 1 {\n            return arr[i]\n        }\n        if arr[i] == arr[i + 1] {\n            i += 2\n        } else {\n            return arr[i]\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                right = mid - 2\n            } else {\n                left = mid + 1\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmpu9bbcb1i/tmpu9bbcb1i.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8659a77c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b865976eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b865976e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b865976d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu9bbcb1i                        0x000055810e1ac56b <unavailable> + 5483\n5    libc.so.6                          0x00002b8659c63460 __libc_start_main + 245\n6    tmpu9bbcb1i                        0x000055810e1ac0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for i in 0..<arr.count {\n        if i == 0 {\n            if arr[i] != arr[i+1] {\n                result = arr[i]\n                break\n            }\n        } else if i == arr.count - 1 {\n            if arr[i] != arr[i-1] {\n                result = arr[i]\n                break\n            }\n        } else {\n            if arr[i] != arr[i-1] && arr[i] != arr[i+1] {\n                result = arr[i]\n                break\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] == arr[i + 1] {\n            i += 2\n        } else {\n            return arr[i]\n        }\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var low = 0\n    var high = arr.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else {\n                high = mid - 1\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return arr[low]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b669c8cbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b669c5c2561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b669c5c2286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b669c5c213c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b669c5c1bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b669c3c2e83 <unavailable> + 188035\n6    tmpksfy6ui4                        0x000055e54047a888 <unavailable> + 6280\n7    tmpksfy6ui4                        0x000055e54047a3e4 <unavailable> + 5092\n8    libc.so.6                          0x00002b669cab7460 __libc_start_main + 245\n9    tmpksfy6ui4                        0x000055e54047a0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] == arr[i + 1] {\n            i += 2\n        } else {\n            return arr[i]\n        }\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return arr[arr.count - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for i in 0..<arr.count {\n        result = result ^ arr[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] != arr[i+1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                right = mid - 2\n            } else {\n                left = mid + 1\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmpu9bbcb1i/tmpu9bbcb1i.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8659a77c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b865976eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b865976e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b865976d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu9bbcb1i                        0x000055810e1ac56b <unavailable> + 5483\n5    libc.so.6                          0x00002b8659c63460 __libc_start_main + 245\n6    tmpu9bbcb1i                        0x000055810e1ac0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if mid % 2 == 0 {\n                right = mid - 2\n            } else {\n                left = mid + 1\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for i in 0..<arr.count {\n        result ^= arr[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for i in 0..<arr.count {\n        if i == 0 {\n            if arr[i] != arr[i+1] {\n                result = arr[i]\n                break\n            }\n        } else if i == arr.count - 1 {\n            if arr[i] != arr[i-1] {\n                result = arr[i]\n                break\n            }\n        } else if arr[i] != arr[i-1] && arr[i] != arr[i+1] {\n            result = arr[i]\n            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if mid == 0 || mid == arr.count - 1 {\n            return arr[mid]\n        }\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid]\n        }\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else {\n            if (mid + 1) % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "tmp_jsv1bxh/tmp_jsv1bxh.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7f9e187c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7f9de7eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7f9de7e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7f9de7d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_jsv1bxh                        0x0000562f97415462 <unavailable> + 5218\n5    libc.so.6                          0x00002b7f9e373460 __libc_start_main + 245\n6    tmp_jsv1bxh                        0x0000562f974150b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                right = mid - 2\n            } else {\n                left = mid + 1\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                right = mid - 1\n            } else {\n                left = mid + 2\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b11cb70ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b11cb405561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b11cb405286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b11cb40513c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b11cb404bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b11cb205e83 <unavailable> + 188035\n6    tmpqy4v8pav                        0x000055bd8ee4978b <unavailable> + 6027\n7    tmpqy4v8pav                        0x000055bd8ee493e4 <unavailable> + 5092\n8    libc.so.6                          0x00002b11cb8fa460 __libc_start_main + 245\n9    tmpqy4v8pav                        0x000055bd8ee490b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var low = 0\n    var high = arr.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else {\n                high = mid - 1\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return arr[mid]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b17f9bf4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b17f98eb561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b17f98eb286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b17f98eb13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b17f98eabb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b17f96ebe83 <unavailable> + 188035\n6    tmpqinftwcz                        0x00005632a5bfb890 <unavailable> + 6288\n7    tmpqinftwcz                        0x00005632a5bfb3e4 <unavailable> + 5092\n8    libc.so.6                          0x00002b17f9de0460 __libc_start_main + 245\n9    tmpqinftwcz                        0x00005632a5bfb0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for (index, element) in arr.enumerated() {\n        if index % 2 == 0 {\n            result ^= element\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "tmp37w92ccp/tmp37w92ccp.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab8fc58cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab8fc283b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab8fc283988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab8fc2827b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp37w92ccp                        0x00005567ff4f25c2 <unavailable> + 5570\n5    libc.so.6                          0x00002ab8fc778460 __libc_start_main + 245\n6    tmp37w92ccp                        0x00005567ff4f2219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var low = 0\n    var high = arr.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else {\n                high = mid - 1\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return arr[low]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b669c8cbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b669c5c2561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b669c5c2286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b669c5c213c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b669c5c1bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b669c3c2e83 <unavailable> + 188035\n6    tmpksfy6ui4                        0x000055e54047a888 <unavailable> + 6280\n7    tmpksfy6ui4                        0x000055e54047a3e4 <unavailable> + 5092\n8    libc.so.6                          0x00002b669cab7460 __libc_start_main + 245\n9    tmpksfy6ui4                        0x000055e54047a0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    var j = arr.count - 1\n    while i < j {\n        let mid = (i + j) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                i = mid + 1\n            } else {\n                j = mid - 2\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if (mid + 1) % 2 == 0 {\n                i = mid + 2\n            } else {\n                j = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad29e3cdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad29e0c4561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ad29e0c4286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ad29e0c413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ad29e0c3bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ad29dec4e83 <unavailable> + 188035\n6    tmpr9f6f09g                        0x000055587012d78b <unavailable> + 6027\n7    tmpr9f6f09g                        0x000055587012d3e4 <unavailable> + 5092\n8    libc.so.6                          0x00002ad29e5b9460 __libc_start_main + 245\n9    tmpr9f6f09g                        0x000055587012d0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for i in 0..<arr.count {\n        result ^= arr[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    var j = arr.count - 1\n    \n    while i < j {\n        let mid = (i + j) / 2\n        if arr[mid] == arr[mid - 1] {\n            j = mid - 2\n        } else if arr[mid] == arr[mid + 1] {\n            i = mid + 2\n        } else {\n            return arr[mid]\n        }\n    }\n    \n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "tmppbvg01b6/tmppbvg01b6.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8e660ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8e65dc3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8e65dc3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8e65dc27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppbvg01b6                        0x000055fdb914156b <unavailable> + 5483\n5    libc.so.6                          0x00002b8e662b8460 __libc_start_main + 245\n6    tmppbvg01b6                        0x000055fdb91410b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] == arr[i + 1] {\n            i += 2\n        } else {\n            return arr[i]\n        }\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    \n    while left < right {\n        let mid = (left + right) / 2\n        \n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    \n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                right = mid - 2\n            } else {\n                left = mid + 1\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                right = mid - 1\n            } else {\n                left = mid + 2\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b11cb70ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b11cb405561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b11cb405286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b11cb40513c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b11cb404bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b11cb205e83 <unavailable> + 188035\n6    tmpqy4v8pav                        0x000055bd8ee4978b <unavailable> + 6027\n7    tmpqy4v8pav                        0x000055bd8ee493e4 <unavailable> + 5092\n8    libc.so.6                          0x00002b11cb8fa460 __libc_start_main + 245\n9    tmpqy4v8pav                        0x000055bd8ee490b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1 - left) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if (right - mid - 1) % 2 == 0 {\n                right = mid - 1\n            } else {\n                left = mid + 2\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if mid == 0 || mid == arr.count - 1 {\n            return arr[mid]\n        }\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid]\n        }\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else {\n            if (mid - 1) % 2 == 0 {\n                right = mid - 1\n            } else {\n                left = mid + 2\n            }\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] == arr[i + 1] {\n            i += 2\n        } else {\n            return arr[i]\n        }\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    var j = arr.count - 1\n    while i < j {\n        let mid = (i + j) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                i = mid + 1\n            } else {\n                j = mid - 2\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                i = mid + 2\n            } else {\n                j = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for i in arr {\n        result = result ^ i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var lo = 0\n    var hi = arr.count - 1\n    while lo < hi {\n        let mid = lo + (hi - lo) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                hi = mid - 2\n            } else {\n                lo = mid + 1\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if (mid + 1) % 2 == 0 {\n                lo = mid + 2\n            } else {\n                hi = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[lo]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b16406c3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b16403ba561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b16403ba286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b16403ba13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b16403b9bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b16401bae83 <unavailable> + 188035\n6    tmpb9oi7b8j                        0x000055815cb9c7af <unavailable> + 6063\n7    tmpb9oi7b8j                        0x000055815cb9c3e4 <unavailable> + 5092\n8    libc.so.6                          0x00002b16408af460 __libc_start_main + 245\n9    tmpb9oi7b8j                        0x000055815cb9c0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for (index, element) in arr.enumerated() {\n        if index == 0 {\n            result = element\n        } else {\n            result = result ^ element\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var low = 0\n    var high = arr.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else {\n                high = mid\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return arr[low]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b99cb3cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b99cb0c1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b99cb0c1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b99cb0c113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b99cb0c0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b99caec1e83 <unavailable> + 188035\n6    tmpfeopl8dt                        0x000055ca246e1888 <unavailable> + 6280\n7    tmpfeopl8dt                        0x000055ca246e13e4 <unavailable> + 5092\n8    libc.so.6                          0x00002b99cb5b6460 __libc_start_main + 245\n9    tmpfeopl8dt                        0x000055ca246e10b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == arr.count - 1 {\n            return arr[i]\n        }\n        if arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == arr.count - 1 {\n            return arr[i]\n        }\n        if arr[i] != arr[i+1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                left = mid + 2\n            } else {\n                right = mid\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                left = mid + 1\n            } else {\n                right = mid - 1\n            }\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] == arr[i + 1] {\n            i += 2\n        } else {\n            return arr[i]\n        }\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                right = mid - 2\n            } else {\n                left = mid + 1\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmpu9bbcb1i/tmpu9bbcb1i.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8659a77c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b865976eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b865976e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b865976d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu9bbcb1i                        0x000055810e1ac56b <unavailable> + 5483\n5    libc.so.6                          0x00002b8659c63460 __libc_start_main + 245\n6    tmpu9bbcb1i                        0x000055810e1ac0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var low = 0\n    var high = arr.count - 1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if mid % 2 == 0 {\n            if mid + 1 < arr.count && arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else {\n                return arr[mid]\n            }\n        } else {\n            if mid - 1 >= 0 && arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                return arr[mid]\n            }\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "tmpbwnd5ew2/tmpbwnd5ew2.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b97419bdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b97416b4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b97416b4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b97416b37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbwnd5ew2                        0x000055dab34ef65b <unavailable> + 5723\n5    libc.so.6                          0x00002b9741ba9460 __libc_start_main + 245\n6    tmpbwnd5ew2                        0x000055dab34ef0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var start = 0\n    var end = arr.count - 1\n    while start <= end {\n        let mid = (start + end) / 2\n        if mid == 0 {\n            if arr[mid] != arr[mid + 1] {\n                return arr[mid]\n            } else {\n                start = mid + 1\n            }\n        } else if mid == arr.count - 1 {\n            if arr[mid] != arr[mid - 1] {\n                return arr[mid]\n            } else {\n                end = mid - 1\n            }\n        } else {\n            if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n                return arr[mid]\n            } else if arr[mid] == arr[mid - 1] {\n                end = mid - 2\n            } else {\n                start = mid + 2\n            }\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "tmpfm7bmor0/tmpfm7bmor0.swift:47: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b28ea529c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b28ea220b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b28ea220988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b28ea21f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfm7bmor0                        0x000055b232fe656b <unavailable> + 5483\n5    libc.so.6                          0x00002b28ea715460 __libc_start_main + 245\n6    tmpfm7bmor0                        0x000055b232fe60b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3c1403dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3c13d34561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b3c13d34286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b3c13d3413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b3c13d33bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b3c13b34e83 <unavailable> + 188035\n6    tmp8co4b9m8                        0x0000558975ef495a <unavailable> + 6490\n7    tmp8co4b9m8                        0x0000558975ef43e4 <unavailable> + 5092\n8    libc.so.6                          0x00002b3c14229460 __libc_start_main + 245\n9    tmp8co4b9m8                        0x0000558975ef40b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    \n    while left < right {\n        let mid = (left + right) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                left = mid + 2\n            } else {\n                right = mid\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                left = mid + 1\n            } else {\n                right = mid - 1\n            }\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if mid == 0 || mid == arr.count - 1 {\n            return arr[mid]\n        }\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid]\n        }\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else {\n            if (mid - 1) % 2 == 0 {\n                right = mid - 1\n            } else {\n                left = mid + 2\n            }\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == 0 {\n            if arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        } else if i == arr.count - 1 {\n            if arr[i] != arr[i-1] {\n                return arr[i]\n            }\n        } else {\n            if arr[i] != arr[i-1] && arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        }\n        i += 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for i in 0..<arr.count {\n        result ^= arr[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] == arr[i + 1] {\n            i += 2\n        } else {\n            return arr[i]\n        }\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                left = mid + 2\n            } else {\n                right = mid\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                left = mid + 1\n            } else {\n                right = mid - 1\n            }\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == arr.count - 1 {\n            return arr[i]\n        }\n        if arr[i] != arr[i+1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                left = mid + 2\n            } else {\n                right = mid\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                left = mid + 1\n            } else {\n                right = mid - 1\n            }\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7bfb612c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7bfb309561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b7bfb309286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b7bfb30913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b7bfb308bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b7bfb109e83 <unavailable> + 188035\n6    tmp1qgzh46w                        0x000055b7921bf888 <unavailable> + 6280\n7    tmp1qgzh46w                        0x000055b7921bf3e4 <unavailable> + 5092\n8    libc.so.6                          0x00002b7bfb7fe460 __libc_start_main + 245\n9    tmp1qgzh46w                        0x000055b7921bf0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    \n    while left < right {\n        let mid = (left + right) / 2\n        \n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    \n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for i in 0..<arr.count {\n        if i % 2 == 0 {\n            result = result ^ arr[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "tmplt8h2mzn/tmplt8h2mzn.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae2abc6ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae2ab961b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae2ab961988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae2ab9607b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplt8h2mzn                        0x000055ee3ac96552 <unavailable> + 5458\n5    libc.so.6                          0x00002ae2abe56460 __libc_start_main + 245\n6    tmplt8h2mzn                        0x000055ee3ac961a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var start = 0\n    var end = arr.count - 1\n    var mid = 0\n    while start <= end {\n        mid = (start + end) / 2\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid]\n        }\n        if arr[mid] == arr[mid - 1] {\n            if mid % 2 == 0 {\n                end = mid - 2\n            } else {\n                start = mid + 1\n            }\n        } else {\n            if mid % 2 == 0 {\n                start = mid + 2\n            } else {\n                end = mid - 1\n            }\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b158255bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1582252561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b1582252286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b158225213c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b1582251bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b1582052e83 <unavailable> + 188035\n6    tmp7tblz1os                        0x00005559709ae87c <unavailable> + 6268\n7    tmp7tblz1os                        0x00005559709ae3e4 <unavailable> + 5092\n8    libc.so.6                          0x00002b1582747460 __libc_start_main + 245\n9    tmp7tblz1os                        0x00005559709ae0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] == arr[i + 1] {\n            i += 2\n        } else {\n            return arr[i]\n        }\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var low = 0\n    var high = arr.count - 1\n    var mid = 0\n    \n    while low <= high {\n        mid = (low + high) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else {\n                high = mid - 1\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    \n    return arr[mid]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2f17de2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2f17ad9561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2f17ad9286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2f17ad913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2f17ad8bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b2f178d9e83 <unavailable> + 188035\n6    tmpjrn4zsyy                        0x00005573bc415890 <unavailable> + 6288\n7    tmpjrn4zsyy                        0x00005573bc4153e4 <unavailable> + 5092\n8    libc.so.6                          0x00002b2f17fce460 __libc_start_main + 245\n9    tmpjrn4zsyy                        0x00005573bc4150b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] == arr[i + 1] {\n            i += 2\n        } else {\n            return arr[i]\n        }\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == arr.count - 1 {\n            return arr[i]\n        }\n        if arr[i] == arr[i + 1] {\n            i += 2\n        } else {\n            return arr[i]\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == 0 && arr[i] != arr[i + 1] {\n            return arr[i]\n        } else if i == arr.count - 1 && arr[i] != arr[i - 1] {\n            return arr[i]\n        } else if arr[i] != arr[i - 1] && arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a50934c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a5062b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b9a5062b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b9a5062b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b9a5062abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b9a5042be83 <unavailable> + 188035\n6    tmpb63yppbo                        0x000055e113769825 <unavailable> + 6181\n7    tmpb63yppbo                        0x000055e113769344 <unavailable> + 4932\n8    libc.so.6                          0x00002b9a50b20460 __libc_start_main + 245\n9    tmpb63yppbo                        0x000055e113769019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                left = mid + 2\n            } else {\n                right = mid\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                left = mid + 1\n            } else {\n                right = mid - 1\n            }\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == 0 {\n            if arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        } else if i == arr.count - 1 {\n            if arr[i] != arr[i-1] {\n                return arr[i]\n            }\n        } else {\n            if arr[i] != arr[i-1] && arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        }\n        i += 1\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == arr.count - 1 {\n            return arr[i]\n        }\n        if arr[i] != arr[i+1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var low = 0\n    var high = arr.count - 1\n    \n    while low <= high {\n        let mid = (low + high) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else {\n                high = mid\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return arr[low]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba52d012c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba52cd09561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ba52cd09286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ba52cd0913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ba52cd08bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ba52cb09e83 <unavailable> + 188035\n6    tmpup262kyu                        0x000055c8c1ba9888 <unavailable> + 6280\n7    tmpup262kyu                        0x000055c8c1ba93e4 <unavailable> + 5092\n8    libc.so.6                          0x00002ba52d1fe460 __libc_start_main + 245\n9    tmpup262kyu                        0x000055c8c1ba90b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var start = 0\n    var end = arr.count - 1\n    while start <= end {\n        let mid = (start + end) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                start = mid + 2\n            } else {\n                end = mid - 1\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                start = mid + 1\n            } else {\n                end = mid - 1\n            }\n        }\n    }\n    return arr[start]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5fe8c2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5fe5b9561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ad5fe5b9286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ad5fe5b913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ad5fe5b8bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ad5fe3b9e83 <unavailable> + 188035\n6    tmp4ud_2s36                        0x000055d53686b888 <unavailable> + 6280\n7    tmp4ud_2s36                        0x000055d53686b3e4 <unavailable> + 5092\n8    libc.so.6                          0x00002ad5feaae460 __libc_start_main + 245\n9    tmp4ud_2s36                        0x000055d53686b0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for i in arr {\n        result ^= i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for i in 0..<arr.count {\n        result = result ^ arr[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    \n    while left < right {\n        let mid = (left + right) / 2\n        \n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    \n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == arr.count - 1 {\n            return arr[i]\n        }\n        if arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                right = mid - 2\n            } else {\n                left = mid + 1\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmpu9bbcb1i/tmpu9bbcb1i.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8659a77c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b865976eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b865976e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b865976d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu9bbcb1i                        0x000055810e1ac56b <unavailable> + 5483\n5    libc.so.6                          0x00002b8659c63460 __libc_start_main + 245\n6    tmpu9bbcb1i                        0x000055810e1ac0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] == arr[i + 1] {\n            i += 2\n        } else {\n            return arr[i]\n        }\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var low = 0\n    var high = arr.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else {\n                high = mid - 1\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return arr[low]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b669c8cbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b669c5c2561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b669c5c2286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b669c5c213c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b669c5c1bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b669c3c2e83 <unavailable> + 188035\n6    tmpksfy6ui4                        0x000055e54047a888 <unavailable> + 6280\n7    tmpksfy6ui4                        0x000055e54047a3e4 <unavailable> + 5092\n8    libc.so.6                          0x00002b669cab7460 __libc_start_main + 245\n9    tmpksfy6ui4                        0x000055e54047a0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == 0 && arr[i] != arr[i+1] {\n            return arr[i]\n        } else if i == arr.count-1 && arr[i] != arr[i-1] {\n            return arr[i]\n        } else if arr[i] != arr[i-1] && arr[i] != arr[i+1] {\n            return arr[i]\n        }\n        i += 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeee9e31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeee9b28561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aeee9b28286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aeee9b2813c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aeee9b27bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002aeee9928e83 <unavailable> + 188035\n6    tmp6m4ooje3                        0x000056496e7da825 <unavailable> + 6181\n7    tmp6m4ooje3                        0x000056496e7da344 <unavailable> + 4932\n8    libc.so.6                          0x00002aeeea01d460 __libc_start_main + 245\n9    tmp6m4ooje3                        0x000056496e7da019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var start = 0\n    var end = arr.count - 1\n    var mid = 0\n    \n    while start <= end {\n        mid = (start + end) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                start = mid + 2\n            } else {\n                end = mid\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                start = mid + 1\n            } else {\n                end = mid - 1\n            }\n        }\n    }\n    return arr[start]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2602880c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2602577561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2602577286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b260257713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2602576bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b2602377e83 <unavailable> + 188035\n6    tmparjryfa5                        0x000056245d03d890 <unavailable> + 6288\n7    tmparjryfa5                        0x000056245d03d3e4 <unavailable> + 5092\n8    libc.so.6                          0x00002b2602a6c460 __libc_start_main + 245\n9    tmparjryfa5                        0x000056245d03d0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == arr.count - 1 {\n            return arr[i]\n        }\n        if arr[i] != arr[i+1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for i in 0..<arr.count {\n        if i == 0 {\n            result = arr[i]\n        } else if i % 2 == 0 {\n            result = result ^ arr[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "tmpwpve9nxv/tmpwpve9nxv.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3f9f44bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3f9f142b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3f9f142988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3f9f1417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwpve9nxv                        0x0000559ff4300552 <unavailable> + 5458\n5    libc.so.6                          0x00002b3f9f637460 __libc_start_main + 245\n6    tmpwpve9nxv                        0x0000559ff43001a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == 0 {\n            if arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        } else if i == arr.count - 1 {\n            if arr[i] != arr[i-1] {\n                return arr[i]\n            }\n        } else {\n            if arr[i] != arr[i-1] && arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        }\n        i += 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for (index, element) in arr.enumerated() {\n        if index % 2 == 0 {\n            result = result ^ element\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "tmpk4b0ks32/tmpk4b0ks32.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b448624bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4485f42b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4485f42988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4485f417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk4b0ks32                        0x00005555f377b5c2 <unavailable> + 5570\n5    libc.so.6                          0x00002b4486437460 __libc_start_main + 245\n6    tmpk4b0ks32                        0x00005555f377b219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var low = 0\n    var high = arr.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if mid % 2 == 0 {\n            if mid + 1 < arr.count && arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else if mid - 1 >= 0 && arr[mid] == arr[mid - 1] {\n                high = mid - 2\n            } else {\n                return arr[mid]\n            }\n        } else {\n            if mid + 1 < arr.count && arr[mid] == arr[mid + 1] {\n                high = mid - 1\n            } else if mid - 1 >= 0 && arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                return arr[mid]\n            }\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] == arr[i + 1] {\n            i += 2\n        } else {\n            return arr[i]\n        }\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for i in 0..<arr.count {\n        result ^= arr[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return arr[arr.count - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var low = 0\n    var high = arr.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else {\n                high = mid - 1\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return arr[low]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b669c8cbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b669c5c2561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b669c5c2286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b669c5c213c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b669c5c1bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b669c3c2e83 <unavailable> + 188035\n6    tmpksfy6ui4                        0x000055e54047a888 <unavailable> + 6280\n7    tmpksfy6ui4                        0x000055e54047a3e4 <unavailable> + 5092\n8    libc.so.6                          0x00002b669cab7460 __libc_start_main + 245\n9    tmpksfy6ui4                        0x000055e54047a0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var low = 0\n    var high = arr.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else {\n                high = mid\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return arr[low]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b99cb3cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b99cb0c1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b99cb0c1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b99cb0c113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b99cb0c0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b99caec1e83 <unavailable> + 188035\n6    tmpfeopl8dt                        0x000055ca246e1888 <unavailable> + 6280\n7    tmpfeopl8dt                        0x000055ca246e13e4 <unavailable> + 5092\n8    libc.so.6                          0x00002b99cb5b6460 __libc_start_main + 245\n9    tmpfeopl8dt                        0x000055ca246e10b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for i in 0..<arr.count {\n        if i == 0 {\n            if arr[i] != arr[i+1] {\n                result = arr[i]\n                break\n            }\n        } else if i == arr.count - 1 {\n            if arr[i] != arr[i-1] {\n                result = arr[i]\n                break\n            }\n        } else {\n            if arr[i] != arr[i-1] && arr[i] != arr[i+1] {\n                result = arr[i]\n                break\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == 0 && arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        if i == arr.count - 1 && arr[i] != arr[i - 1] {\n            return arr[i]\n        }\n        if arr[i] != arr[i - 1] && arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1216b4ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1216841561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b1216841286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b121684113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b1216840bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b1216641e83 <unavailable> + 188035\n6    tmprv_mv53h                        0x00005599ea116825 <unavailable> + 6181\n7    tmprv_mv53h                        0x00005599ea116344 <unavailable> + 4932\n8    libc.so.6                          0x00002b1216d36460 __libc_start_main + 245\n9    tmprv_mv53h                        0x00005599ea116019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    \n    while left <= right {\n        let mid = (left + right) / 2\n        \n        if mid == 0 || mid == arr.count - 1 {\n            return arr[mid]\n        }\n        \n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid]\n        }\n        \n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else {\n            if (mid - 1) % 2 == 0 {\n                right = mid - 1\n            } else {\n                left = mid + 2\n            }\n        }\n    }\n    \n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == arr.count - 1 {\n            return arr[i]\n        }\n        if arr[i] == arr[i + 1] {\n            i += 2\n        } else {\n            return arr[i]\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == 0 {\n            if arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        } else if i == arr.count - 1 {\n            if arr[i] != arr[i-1] {\n                return arr[i]\n            }\n        } else {\n            if arr[i] != arr[i-1] && arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        }\n        i += 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var low = 0\n    var high = arr.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid]\n        }\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else {\n                high = mid - 2\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad16aebac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad16abb1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ad16abb1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ad16abb113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ad16abb0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ad16a9b1e83 <unavailable> + 188035\n6    tmpexqkw3bv                        0x000056433b431883 <unavailable> + 6275\n7    tmpexqkw3bv                        0x000056433b4313e4 <unavailable> + 5092\n8    libc.so.6                          0x00002ad16b0a6460 __libc_start_main + 245\n9    tmpexqkw3bv                        0x000056433b4310b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == 0 && arr[i] != arr[i + 1] {\n            return arr[i]\n        } else if i == arr.count - 1 && arr[i] != arr[i - 1] {\n            return arr[i]\n        } else if arr[i] != arr[i - 1] && arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a50934c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a5062b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b9a5062b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b9a5062b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b9a5062abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b9a5042be83 <unavailable> + 188035\n6    tmpb63yppbo                        0x000055e113769825 <unavailable> + 6181\n7    tmpb63yppbo                        0x000055e113769344 <unavailable> + 4932\n8    libc.so.6                          0x00002b9a50b20460 __libc_start_main + 245\n9    tmpb63yppbo                        0x000055e113769019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    \n    while left < right {\n        let mid = (left + right) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                left = mid + 2\n            } else {\n                right = mid\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                left = mid + 1\n            } else {\n                right = mid - 1\n            }\n        }\n    }\n    \n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == arr.count - 1 {\n            return arr[i]\n        }\n        if arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == arr.count - 1 {\n            return arr[i]\n        }\n        if arr[i] == arr[i + 1] {\n            i += 2\n        } else {\n            return arr[i]\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for i in 0..<arr.count {\n        if i % 2 == 0 {\n            result ^= arr[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "tmp9i07ml_7/tmp9i07ml_7.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2636bd3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b26368cab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b26368ca988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b26368c97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9i07ml_7                        0x00005556e58e1552 <unavailable> + 5458\n5    libc.so.6                          0x00002b2636dbf460 __libc_start_main + 245\n6    tmp9i07ml_7                        0x00005556e58e11a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1 - left) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if (right - mid - 1) % 2 == 0 {\n                right = mid - 1\n            } else {\n                left = mid + 2\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == arr.count - 1 {\n            return arr[i]\n        }\n        if arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var low = 0\n    var high = arr.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else {\n                high = mid\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return arr[low]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b99cb3cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b99cb0c1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b99cb0c1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b99cb0c113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b99cb0c0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b99caec1e83 <unavailable> + 188035\n6    tmpfeopl8dt                        0x000055ca246e1888 <unavailable> + 6280\n7    tmpfeopl8dt                        0x000055ca246e13e4 <unavailable> + 5092\n8    libc.so.6                          0x00002b99cb5b6460 __libc_start_main + 245\n9    tmpfeopl8dt                        0x000055ca246e10b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if mid == 0 || mid == arr.count - 1 {\n            return arr[mid]\n        }\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid]\n        }\n        if arr[mid] == arr[mid - 1] {\n            if mid % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 1\n            }\n        } else {\n            if mid % 2 == 0 {\n                right = mid - 1\n            } else {\n                left = mid + 1\n            }\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "tmpq72w_7oq/tmpq72w_7oq.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba295098c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba294d8fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba294d8f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba294d8e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpq72w_7oq                        0x0000563d3e0f6462 <unavailable> + 5218\n5    libc.so.6                          0x00002ba295284460 __libc_start_main + 245\n6    tmpq72w_7oq                        0x0000563d3e0f60b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for i in 0..<arr.count {\n        if i == 0 {\n            if arr[i] != arr[i+1] {\n                result = arr[i]\n                break\n            }\n        } else if i == arr.count - 1 {\n            if arr[i] != arr[i-1] {\n                result = arr[i]\n                break\n            }\n        } else {\n            if arr[i] != arr[i-1] && arr[i] != arr[i+1] {\n                result = arr[i]\n                break\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var low = 0\n    var high = arr.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid]\n        }\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else {\n                high = mid - 2\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad16aebac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad16abb1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ad16abb1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ad16abb113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ad16abb0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ad16a9b1e83 <unavailable> + 188035\n6    tmpexqkw3bv                        0x000056433b431883 <unavailable> + 6275\n7    tmpexqkw3bv                        0x000056433b4313e4 <unavailable> + 5092\n8    libc.so.6                          0x00002ad16b0a6460 __libc_start_main + 245\n9    tmpexqkw3bv                        0x000056433b4310b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] == arr[i + 1] {\n            i += 2\n        } else {\n            return arr[i]\n        }\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == 0 && arr[i] != arr[i+1] {\n            return arr[i]\n        }\n        if i == arr.count - 1 && arr[i] != arr[i-1] {\n            return arr[i]\n        }\n        if arr[i] != arr[i-1] && arr[i] != arr[i+1] {\n            return arr[i]\n        }\n        i += 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3cef540c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3cef237561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b3cef237286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b3cef23713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b3cef236bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b3cef037e83 <unavailable> + 188035\n6    tmpjzmsbx_4                        0x000055896cbf1825 <unavailable> + 6181\n7    tmpjzmsbx_4                        0x000055896cbf1344 <unavailable> + 4932\n8    libc.so.6                          0x00002b3cef72c460 __libc_start_main + 245\n9    tmpjzmsbx_4                        0x000055896cbf1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == arr.count - 1 {\n            return arr[i]\n        }\n        if arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    var j = arr.count - 1\n    while i < j {\n        let mid = (i + j) / 2\n        if arr[mid] == arr[mid - 1] {\n            i = mid + 1\n        } else if arr[mid] == arr[mid + 1] {\n            j = mid - 1\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b652dc00c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b652d8f7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b652d8f7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b652d8f713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b652d8f6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b652d6f7e83 <unavailable> + 188035\n6    tmp7jjt4q_5                        0x00005652f597178b <unavailable> + 6027\n7    tmp7jjt4q_5                        0x00005652f59713e4 <unavailable> + 5092\n8    libc.so.6                          0x00002b652ddec460 __libc_start_main + 245\n9    tmp7jjt4q_5                        0x00005652f59710b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    \n    while left < right {\n        let mid = (left + right) / 2\n        \n        if arr[mid] == arr[mid + 1] {\n            if (mid - left) % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else if arr[mid] == arr[mid - 1] {\n            if (right - mid) % 2 == 0 {\n                right = mid - 2\n            } else {\n                left = mid + 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    \n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == arr.count - 1 {\n            return arr[i]\n        }\n        if arr[i] == arr[i + 1] {\n            i += 2\n        } else {\n            return arr[i]\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for i in 0..<arr.count {\n        result ^= arr[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == arr.count - 1 {\n            return arr[i]\n        }\n        if arr[i] == arr[i+1] {\n            i += 2\n        } else {\n            return arr[i]\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for i in 0..<arr.count {\n        if i == 0 {\n            result = arr[i]\n        } else if i % 2 == 0 {\n            result = result ^ arr[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "tmpwpve9nxv/tmpwpve9nxv.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3f9f44bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3f9f142b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3f9f142988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3f9f1417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwpve9nxv                        0x0000559ff4300552 <unavailable> + 5458\n5    libc.so.6                          0x00002b3f9f637460 __libc_start_main + 245\n6    tmpwpve9nxv                        0x0000559ff43001a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == arr.count - 1 {\n            return arr[i]\n        }\n        if arr[i] == arr[i+1] {\n            i += 2\n        } else {\n            return arr[i]\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for i in 0..<arr.count {\n        if i == 0 {\n            if arr[i] != arr[i+1] {\n                result = arr[i]\n            }\n        } else if i == arr.count - 1 {\n            if arr[i] != arr[i-1] {\n                result = arr[i]\n            }\n        } else {\n            if arr[i] != arr[i-1] && arr[i] != arr[i+1] {\n                result = arr[i]\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                right = mid - 2\n            } else {\n                left = mid + 1\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "tmpu9bbcb1i/tmpu9bbcb1i.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8659a77c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b865976eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b865976e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b865976d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu9bbcb1i                        0x000055810e1ac56b <unavailable> + 5483\n5    libc.so.6                          0x00002b8659c63460 __libc_start_main + 245\n6    tmpu9bbcb1i                        0x000055810e1ac0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    var j = arr.count - 1\n    while i < j {\n        let mid = (i + j) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                j = mid - 2\n            } else {\n                i = mid + 1\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                j = mid - 1\n            } else {\n                i = mid + 2\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abe5cfa9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abe5cca0561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002abe5cca0286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002abe5cca013c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002abe5cc9fbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002abe5caa0e83 <unavailable> + 188035\n6    tmp3gef8jr0                        0x0000558acc22e78b <unavailable> + 6027\n7    tmp3gef8jr0                        0x0000558acc22e3e4 <unavailable> + 5092\n8    libc.so.6                          0x00002abe5d195460 __libc_start_main + 245\n9    tmp3gef8jr0                        0x0000558acc22e0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for i in 0..<arr.count {\n        if i == 0 {\n            result = arr[i]\n        } else if i == arr.count - 1 {\n            result = arr[i]\n        } else if arr[i] != arr[i - 1] && arr[i] != arr[i + 1] {\n            result = arr[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "tmp_d1rsgaq/tmp_d1rsgaq.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0906c85c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b090697cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b090697c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b090697b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_d1rsgaq                        0x000056289f28174b <unavailable> + 5963\n5    libc.so.6                          0x00002b0906e71460 __libc_start_main + 245\n6    tmp_d1rsgaq                        0x000056289f2811a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var start = 0\n    var end = arr.count - 1\n    while start <= end {\n        let mid = (start + end) / 2\n        if mid == 0 || mid == arr.count - 1 {\n            return arr[mid]\n        }\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid]\n        }\n        if arr[mid] == arr[mid - 1] {\n            if mid % 2 == 0 {\n                start = mid + 1\n            } else {\n                end = mid - 1\n            }\n        } else {\n            if mid % 2 == 0 {\n                end = mid - 1\n            } else {\n                start = mid + 1\n            }\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "tmpvbv03mza/tmpvbv03mza.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aca380fec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aca37df5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aca37df5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aca37df47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvbv03mza                        0x0000556a36904462 <unavailable> + 5218\n5    libc.so.6                          0x00002aca382ea460 __libc_start_main + 245\n6    tmpvbv03mza                        0x0000556a369040b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid + 1] {\n            if (mid - left) % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else if arr[mid] == arr[mid - 1] {\n            if (right - mid) % 2 == 0 {\n                right = mid - 2\n            } else {\n                left = mid + 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for i in 0..<arr.count {\n        result ^= arr[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var low = 0\n    var high = arr.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else {\n                high = mid - 1\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return arr[low]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b669c8cbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b669c5c2561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b669c5c2286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b669c5c213c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b669c5c1bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b669c3c2e83 <unavailable> + 188035\n6    tmpksfy6ui4                        0x000055e54047a888 <unavailable> + 6280\n7    tmpksfy6ui4                        0x000055e54047a3e4 <unavailable> + 5092\n8    libc.so.6                          0x00002b669cab7460 __libc_start_main + 245\n9    tmpksfy6ui4                        0x000055e54047a0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for i in 0..<arr.count {\n        result ^= arr[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for i in 0..<arr.count {\n        if i % 2 == 0 {\n            result ^= arr[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "tmp9i07ml_7/tmp9i07ml_7.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2636bd3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b26368cab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b26368ca988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b26368c97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9i07ml_7                        0x00005556e58e1552 <unavailable> + 5458\n5    libc.so.6                          0x00002b2636dbf460 __libc_start_main + 245\n6    tmp9i07ml_7                        0x00005556e58e11a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return arr[arr.count - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                left = mid + 2\n            } else {\n                right = mid\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                left = mid + 1\n            } else {\n                right = mid - 1\n            }\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] == arr[i + 1] {\n            i += 2\n        } else {\n            return arr[i]\n        }\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] == arr[i + 1] {\n            i += 2\n        } else {\n            return arr[i]\n        }\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for i in 0..<arr.count {\n        result ^= arr[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var start = 0\n    var end = arr.count - 1\n    while start <= end {\n        let mid = (start + end) / 2\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid]\n        }\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                start = mid + 2\n            } else {\n                end = mid - 2\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                start = mid + 1\n            } else {\n                end = mid - 1\n            }\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b69c1e37c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b69c1b2e561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b69c1b2e286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b69c1b2e13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b69c1b2dbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b69c192ee83 <unavailable> + 188035\n6    tmpwktsnogr                        0x000055ce26856883 <unavailable> + 6275\n7    tmpwktsnogr                        0x000055ce268563e4 <unavailable> + 5092\n8    libc.so.6                          0x00002b69c2023460 __libc_start_main + 245\n9    tmpwktsnogr                        0x000055ce268560b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == 0 {\n            if arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        } else if i == arr.count - 1 {\n            if arr[i] != arr[i-1] {\n                return arr[i]\n            }\n        } else {\n            if arr[i] != arr[i-1] && arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        }\n        i += 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == 0 {\n            if arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        } else if i == arr.count - 1 {\n            if arr[i] != arr[i-1] {\n                return arr[i]\n            }\n        } else if arr[i] != arr[i-1] && arr[i] != arr[i+1] {\n            return arr[i]\n        }\n        i += 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var low = 0\n    var high = arr.count - 1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else {\n                high = mid\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return arr[low]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7c87b37c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7c8782e561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b7c8782e286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b7c8782e13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b7c8782dbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b7c8762ee83 <unavailable> + 188035\n6    tmpkhk7x80m                        0x0000560bc4fb38af <unavailable> + 6319\n7    tmpkhk7x80m                        0x0000560bc4fb33e4 <unavailable> + 5092\n8    libc.so.6                          0x00002b7c87d23460 __libc_start_main + 245\n9    tmpkhk7x80m                        0x0000560bc4fb30b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var low = 0\n    var high = arr.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid % 2 == 0) {\n                high = mid - 2\n            } else {\n                low = mid + 1\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if (mid % 2 == 0) {\n                low = mid + 2\n            } else {\n                high = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae6f64abc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae6f61a2561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae6f61a2286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae6f61a213c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae6f61a1bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae6f5fa4e83 <unavailable> + 188035\n6    tmp82g0agf3                        0x0000564df6ab4943 <unavailable> + 6467\n7    tmp82g0agf3                        0x0000564df6ab43e4 <unavailable> + 5092\n8    libc.so.6                          0x00002ae6f6697460 __libc_start_main + 245\n9    tmp82g0agf3                        0x0000564df6ab40b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == arr.count - 1 {\n            return arr[i]\n        }\n        if arr[i] == arr[i + 1] {\n            i += 2\n        } else {\n            return arr[i]\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == 0 && arr[i] != arr[i+1] {\n            return arr[i]\n        } else if i == arr.count - 1 && arr[i] != arr[i-1] {\n            return arr[i]\n        } else if arr[i] != arr[i-1] && arr[i] != arr[i+1] {\n            return arr[i]\n        }\n        i += 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6c60607c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6c602fe561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b6c602fe286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b6c602fe13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b6c602fdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b6c600fee83 <unavailable> + 188035\n6    tmppv2npac_                        0x000055722eede825 <unavailable> + 6181\n7    tmppv2npac_                        0x000055722eede344 <unavailable> + 4932\n8    libc.so.6                          0x00002b6c607f3460 __libc_start_main + 245\n9    tmppv2npac_                        0x000055722eede019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = left + (right - left) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var low = 0\n    var high = arr.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else {\n                high = mid - 1\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return arr[low]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b669c8cbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b669c5c2561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b669c5c2286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b669c5c213c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b669c5c1bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b669c3c2e83 <unavailable> + 188035\n6    tmpksfy6ui4                        0x000055e54047a888 <unavailable> + 6280\n7    tmpksfy6ui4                        0x000055e54047a3e4 <unavailable> + 5092\n8    libc.so.6                          0x00002b669cab7460 __libc_start_main + 245\n9    tmpksfy6ui4                        0x000055e54047a0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] != arr[i + 1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] == arr[i + 1] {\n            i += 2\n        } else {\n            return arr[i]\n        }\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == 0 {\n            if arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        } else if i == arr.count - 1 {\n            if arr[i] != arr[i-1] {\n                return arr[i]\n            }\n        } else {\n            if arr[i] != arr[i-1] && arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        }\n        i += 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if mid == 0 || mid == arr.count - 1 {\n            return arr[mid]\n        }\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid]\n        }\n        if arr[mid] == arr[mid - 1] {\n            if mid % 2 == 0 {\n                right = mid - 2\n            } else {\n                left = mid + 1\n            }\n        } else {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for i in 0..<arr.count {\n        if i == 0 {\n            result = arr[i]\n        } else if i % 2 == 0 {\n            result = result ^ arr[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "tmpwpve9nxv/tmpwpve9nxv.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3f9f44bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3f9f142b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3f9f142988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3f9f1417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwpve9nxv                        0x0000559ff4300552 <unavailable> + 5458\n5    libc.so.6                          0x00002b3f9f637460 __libc_start_main + 245\n6    tmpwpve9nxv                        0x0000559ff43001a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                left = mid + 2\n            } else {\n                right = mid\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                left = mid + 1\n            } else {\n                right = mid - 1\n            }\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7bfb612c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7bfb309561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b7bfb309286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b7bfb30913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b7bfb308bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b7bfb109e83 <unavailable> + 188035\n6    tmp1qgzh46w                        0x000055b7921bf888 <unavailable> + 6280\n7    tmp1qgzh46w                        0x000055b7921bf3e4 <unavailable> + 5092\n8    libc.so.6                          0x00002b7bfb7fe460 __libc_start_main + 245\n9    tmp1qgzh46w                        0x000055b7921bf0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    var j = arr.count - 1\n    while i < j {\n        let mid = (i + j) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                i = mid + 1\n            } else {\n                j = mid - 2\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                i = mid + 2\n            } else {\n                j = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    \n    while left <= right {\n        let mid = (left + right) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                left = mid + 2\n            } else {\n                right = mid\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                left = mid + 1\n            } else {\n                right = mid - 1\n            }\n        }\n    }\n    \n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5050cebc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50509e2561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b50509e2286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b50509e213c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b50509e1bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b50507e2e83 <unavailable> + 188035\n6    tmpyop5q0i1                        0x000055ba3b654888 <unavailable> + 6280\n7    tmpyop5q0i1                        0x000055ba3b6543e4 <unavailable> + 5092\n8    libc.so.6                          0x00002b5050ed7460 __libc_start_main + 245\n9    tmpyop5q0i1                        0x000055ba3b6540b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for i in 0..<arr.count {\n        result ^= arr[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                right = mid - 2\n            } else {\n                left = mid + 1\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                right = mid - 1\n            } else {\n                left = mid + 2\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b11cb70ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b11cb405561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b11cb405286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b11cb40513c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b11cb404bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b11cb205e83 <unavailable> + 188035\n6    tmpqy4v8pav                        0x000055bd8ee4978b <unavailable> + 6027\n7    tmpqy4v8pav                        0x000055bd8ee493e4 <unavailable> + 5092\n8    libc.so.6                          0x00002b11cb8fa460 __libc_start_main + 245\n9    tmpqy4v8pav                        0x000055bd8ee490b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid + 1] {\n            left = mid + 2\n        } else if arr[mid] == arr[mid - 1] {\n            right = mid - 2\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "tmpvib9d8hu/tmpvib9d8hu.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0ae5e12c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0ae5b09b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0ae5b09988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0ae5b087b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvib9d8hu                        0x00005631ec51956b <unavailable> + 5483\n5    libc.so.6                          0x00002b0ae5ffe460 __libc_start_main + 245\n6    tmpvib9d8hu                        0x00005631ec5190b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var low = 0\n    var high = arr.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid]\n        } else if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                high = mid - 2\n            } else {\n                low = mid + 1\n            }\n        } else {\n            if (mid + 1) % 2 == 0 {\n                low = mid + 2\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abb04cc3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abb049ba561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002abb049ba286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002abb049ba13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002abb049b9bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002abb047bae83 <unavailable> + 188035\n6    tmpg6aqkz6c                        0x000056508ebe6799 <unavailable> + 6041\n7    tmpg6aqkz6c                        0x000056508ebe63e4 <unavailable> + 5092\n8    libc.so.6                          0x00002abb04eaf460 __libc_start_main + 245\n9    tmpg6aqkz6c                        0x000056508ebe60b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    \n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                right = mid - 2\n            } else {\n                left = mid + 1\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    \n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "tmpyy7rlcv3/tmpyy7rlcv3.swift:43: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b251d898c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b251d58fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b251d58f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b251d58e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyy7rlcv3                        0x000055a8fdb8a56b <unavailable> + 5483\n5    libc.so.6                          0x00002b251da84460 __libc_start_main + 245\n6    tmpyy7rlcv3                        0x000055a8fdb8a0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var low = 0\n    var high = arr.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else {\n                high = mid\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return arr[low]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b99cb3cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b99cb0c1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b99cb0c1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b99cb0c113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b99cb0c0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b99caec1e83 <unavailable> + 188035\n6    tmpfeopl8dt                        0x000055ca246e1888 <unavailable> + 6280\n7    tmpfeopl8dt                        0x000055ca246e13e4 <unavailable> + 5092\n8    libc.so.6                          0x00002b99cb5b6460 __libc_start_main + 245\n9    tmpfeopl8dt                        0x000055ca246e10b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var low = 0\n    var high = arr.count - 1\n    \n    while low <= high {\n        let mid = (low + high) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else {\n                high = mid\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return arr[low]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba52d012c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba52cd09561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ba52cd09286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ba52cd0913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ba52cd08bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ba52cb09e83 <unavailable> + 188035\n6    tmpup262kyu                        0x000055c8c1ba9888 <unavailable> + 6280\n7    tmpup262kyu                        0x000055c8c1ba93e4 <unavailable> + 5092\n8    libc.so.6                          0x00002ba52d1fe460 __libc_start_main + 245\n9    tmpup262kyu                        0x000055c8c1ba90b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count {\n        if i == arr.count - 1 {\n            return arr[i]\n        }\n        if arr[i] == arr[i+1] {\n            i += 2\n        } else {\n            return arr[i]\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var low = 0\n    var high = arr.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else {\n                high = mid\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return arr[low]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b99cb3cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b99cb0c1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b99cb0c1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b99cb0c113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b99cb0c0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b99caec1e83 <unavailable> + 188035\n6    tmpfeopl8dt                        0x000055ca246e1888 <unavailable> + 6280\n7    tmpfeopl8dt                        0x000055ca246e13e4 <unavailable> + 5092\n8    libc.so.6                          0x00002b99cb5b6460 __libc_start_main + 245\n9    tmpfeopl8dt                        0x000055ca246e10b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var i = 0\n    while i < arr.count - 1 {\n        if arr[i] != arr[i+1] {\n            return arr[i]\n        }\n        i += 2\n    }\n    return arr[i]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var result = 0\n    for i in arr {\n        result ^= i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid + 1] {\n            left = mid + 2\n        } else if arr[mid] == arr[mid - 1] {\n            right = mid - 2\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "tmpvib9d8hu/tmpvib9d8hu.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0ae5e12c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0ae5b09b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0ae5b09988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0ae5b087b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvib9d8hu                        0x00005631ec51956b <unavailable> + 5483\n5    libc.so.6                          0x00002b0ae5ffe460 __libc_start_main + 245\n6    tmpvib9d8hu                        0x00005631ec5190b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var low = 0\n    var high = arr.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                low = mid + 2\n            } else {\n                high = mid - 1\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return arr[low]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b669c8cbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b669c5c2561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b669c5c2286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b669c5c213c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b669c5c1bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b669c3c2e83 <unavailable> + 188035\n6    tmpksfy6ui4                        0x000055e54047a888 <unavailable> + 6280\n7    tmpksfy6ui4                        0x000055e54047a3e4 <unavailable> + 5092\n8    libc.so.6                          0x00002b669cab7460 __libc_start_main + 245\n9    tmpksfy6ui4                        0x000055e54047a0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the element that appears only once in a sorted array.\nfunc search(arr: [Int]) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if arr[mid] == arr[mid - 1] {\n            if (mid - 1) % 2 == 0 {\n                left = mid + 1\n            } else {\n                right = mid - 2\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                left = mid + 2\n            } else {\n                right = mid - 1\n            }\n        } else {\n            return arr[mid]\n        }\n    }\n    return arr[left]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(search(arr: [1, 1, 2, 2, 3]) == 3)\nassert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)\nassert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)",
      "timestamp": 1665517410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}