{
  "name": "mbpp_730_consecutive_duplicates",
  "language": "swift",
  "prompt": "\n/// Write a function to remove consecutive duplicates of a given array.\nfunc consecutive_duplicates(nums: AnyHashable) -> AnyHashable {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(consecutive_duplicates(nums: [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4])\nassert(consecutive_duplicates(nums: [10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [10, 15, 19, 18, 17, 26, 17, 18, 10])\nassert(consecutive_duplicates(nums: [\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [\"a\", \"b\", \"c\", \"d\"])\nassert(consecutive_duplicates(nums: [\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]) == [\"a\", \"b\", \"c\", \"d\", \"a\"])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var result: [AnyHashable] = []\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    for num in nums {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last = nums.first as! AnyHashable\n    result.append(last)\n    for num in nums {\n        if num as! AnyHashable != last {\n            result.append(num as! AnyHashable)\n            last = num as! AnyHashable\n        }\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    var last: AnyHashable? = nil\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    var nums = nums\n    var result = [AnyHashable]()\n    for i in nums {\n        if result.last != i {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    for num in nums as! [AnyHashable] {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    for num in nums as! [AnyHashable] {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result: AnyHashable = []\n    var last: AnyHashable = nil\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var previous = nums[0]\n    for num in nums {\n        if num != previous {\n            result.append(num)\n            previous = num\n        }\n    }\n    return result",
    "    return nums",
    "    var result = [AnyHashable]()\n    for num in nums {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    var prev: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != prev {\n            result.append(num)\n        }\n        prev = num\n    }\n    return result",
    "    var result: AnyHashable = []\n    var last: AnyHashable?\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable? = nil\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    var new_nums = [AnyHashable]()\n    for num in nums {\n        if new_nums.last != num {\n            new_nums.append(num)\n        }\n    }\n    return new_nums",
    "    var result = [AnyHashable]()\n    for num in nums as! [AnyHashable] {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    if let nums = nums as? [AnyHashable] {\n        var result = [AnyHashable]()\n        for num in nums {\n            if result.last != num {\n                result.append(num)\n            }\n        }\n        return result\n    }\n    return nums",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    for num in nums as! [AnyHashable] {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last = nums[0]\n    for i in 1..<nums.count {\n        if nums[i] != last {\n            result.append(nums[i])\n            last = nums[i]\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    for num in nums as! [AnyHashable] {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    for num in nums as! [AnyHashable] {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    for num in nums {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result: AnyHashable = []\n    var last: AnyHashable = nil\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last = nums.first\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var nums = nums\n    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last = nums.first as! AnyHashable\n    result.append(last)\n    for num in nums {\n        if num as! AnyHashable != last {\n            result.append(num as! AnyHashable)\n            last = num as! AnyHashable\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result: AnyHashable = []\n    var prev: AnyHashable = nil\n    for num in nums {\n        if num != prev {\n            result.append(num)\n            prev = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var previous = nums.first!\n    for num in nums {\n        if num != previous {\n            result.append(num)\n        }\n        previous = num\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last = nums.first\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    return nums",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result: AnyHashable = []\n    var prev: AnyHashable = nil\n    for num in nums {\n        if num != prev {\n            result.append(num)\n            prev = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    for num in nums as! [AnyHashable] {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last = nums[0]\n    for i in 1..<nums.count {\n        if nums[i] != last {\n            result.append(last)\n            last = nums[i]\n        }\n    }\n    result.append(last)\n    return result",
    "    var nums = nums\n    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var previous = nums[0]\n    for i in 1..<nums.count {\n        if nums[i] != previous {\n            result.append(previous)\n        }\n        previous = nums[i]\n    }\n    result.append(previous)\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    for num in nums as! [AnyHashable] {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    let nums = nums as! [Int]\n    var result = [Int]()\n    var prev = nums[0]\n    result.append(prev)\n    for i in 1..<nums.count {\n        if nums[i] != prev {\n            result.append(nums[i])\n        }\n        prev = nums[i]\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    for num in nums {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var nums = nums\n    var result = [AnyHashable]()\n    for i in nums {\n        if result.last != i {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    for num in nums as! [AnyHashable] {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last = nums[0]\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    var prev: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != prev {\n            result.append(num)\n        }\n        prev = num\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    for i in nums {\n        if result.last != i {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    return nums",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last = nums.first\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result: AnyHashable = []\n    var prev: AnyHashable = \"\"\n    for num in nums {\n        if num != prev {\n            result.append(num)\n            prev = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var prev = nums[0]\n    for i in 1..<nums.count {\n        if nums[i] != prev {\n            result.append(nums[i])\n        }\n        prev = nums[i]\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var prev: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != prev {\n            result.append(num)\n        }\n        prev = num\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var previous: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != previous {\n            result.append(num)\n        }\n        previous = num\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    return nums",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    for num in nums {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable? = nil\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last = nums[0]\n    for i in 1..<nums.count {\n        if nums[i] != last {\n            result.append(nums[i])\n        }\n        last = nums[i]\n    }\n    return result",
    "    var result: AnyHashable = []\n    var last: AnyHashable = \"\"\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last = nums[0]\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var previous = nums[0]\n    for i in 1..<nums.count {\n        if nums[i] != previous {\n            result.append(nums[i])\n            previous = nums[i]\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last = nums[0]\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result: AnyHashable = []\n    var last: AnyHashable = nil\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable? = nil\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last = AnyHashable.self\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    for num in nums {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    \n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    \n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var nums = nums\n    var result = [AnyHashable]()\n    for i in nums {\n        if result.last != i {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var prev = nums[0]\n    for i in 1..<nums.count {\n        if nums[i] != prev {\n            result.append(nums[i])\n            prev = nums[i]\n        }\n    }\n    return result",
    "    let array = Array(nums)\n    var result = [AnyHashable]()\n    var last = array[0]\n    for i in 1..<array.count {\n        if array[i] != last {\n            result.append(last)\n            last = array[i]\n        }\n    }\n    result.append(last)\n    return result",
    "    var result = [AnyHashable]()\n    var prev = nums[0]\n    for num in nums {\n        if num != prev {\n            result.append(num)\n            prev = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    for num in nums {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    var last: AnyHashable? = nil\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    var result: AnyHashable = []\n    var prev: AnyHashable = nil\n    for num in nums {\n        if num != prev {\n            result.append(num)\n            prev = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    for num in nums {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    for i in nums {\n        if result.last != i {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable? = nil\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var previous = nums[0]\n    for i in 1..<nums.count {\n        if nums[i] != previous {\n            result.append(previous)\n            previous = nums[i]\n        }\n    }\n    result.append(previous)\n    return result",
    "    var result = [AnyHashable]()\n    var last = nums[0]\n    for i in 1..<nums.count {\n        if nums[i] != last {\n            result.append(last)\n            last = nums[i]\n        }\n    }\n    result.append(last)\n    return result",
    "    var result = [AnyHashable]()\n    var last = nums.first as! AnyHashable\n    result.append(last)\n    for num in nums {\n        if num as! AnyHashable != last {\n            result.append(num as! AnyHashable)\n            last = num as! AnyHashable\n        }\n    }\n    return result",
    "    return nums",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    var prev: AnyHashable? = nil\n    for num in nums as! [AnyHashable] {\n        if num != prev {\n            result.append(num)\n        }\n        prev = num\n    }\n    return result",
    "    var result = [AnyHashable]()\n    for num in nums as! [AnyHashable] {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    return nums",
    "    let nums = Array(nums)\n    var result = [AnyHashable]()\n    for i in 0..<nums.count {\n        if i == 0 {\n            result.append(nums[i])\n        } else {\n            if nums[i] != nums[i-1] {\n                result.append(nums[i])\n            }\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var previous: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != previous {\n            result.append(num)\n        }\n        previous = num\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    \n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    \n    return result",
    "    var result = [AnyHashable]()\n    for num in nums {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    var prev: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != prev {\n            result.append(num)\n        }\n        prev = num\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var previous = nums[0]\n    for i in 1..<nums.count {\n        if nums[i] != previous {\n            result.append(nums[i])\n            previous = nums[i]\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    let nums = Array(nums)\n    var result: [AnyHashable] = []\n    var prev: AnyHashable?\n    for num in nums {\n        if prev != num {\n            result.append(num)\n        }\n        prev = num\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    for num in nums {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    for num in nums {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = nums\n    return result",
    "    var result: AnyHashable = []\n    var last: AnyHashable = \"\"\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var prev = nums[0]\n    result.append(prev)\n    for i in 1..<nums.count {\n        if prev != nums[i] {\n            result.append(nums[i])\n        }\n        prev = nums[i]\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last = nums[0]\n    for i in nums {\n        if i != last {\n            result.append(i)\n            last = i\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable? = nil\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    return nums",
    "    var nums = nums\n    var result = [AnyHashable]()\n    for i in 0..<nums.count {\n        if i == 0 {\n            result.append(nums[i])\n        } else {\n            if nums[i] != nums[i - 1] {\n                result.append(nums[i])\n            }\n        }\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    var last: AnyHashable? = nil\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last = AnyHashable.self\n    for num in nums {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    var nums = nums\n    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable? = nil\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    for num in nums {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    var last: AnyHashable?\n    \n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    \n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var prev: AnyHashable?\n    for num in nums {\n        if num != prev {\n            result.append(num)\n        }\n        prev = num\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last = nums.first\n    for num in nums {\n        if last != num {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    var last: AnyHashable? = nil\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last = nums.first\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var previous: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != previous {\n            result.append(num)\n            previous = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    \n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    \n    return result",
    "    var result: [AnyHashable] = []\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var prev: AnyHashable? = nil\n    for num in nums as! [AnyHashable] {\n        if num != prev {\n            result.append(num)\n            prev = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var prev = nums[0]\n    for i in 1..<nums.count {\n        if nums[i] != prev {\n            result.append(nums[i])\n        }\n        prev = nums[i]\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last_element: AnyHashable?\n    for element in nums {\n        if element != last_element {\n            result.append(element)\n            last_element = element\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var prev = nums[0]\n    for i in 1..<nums.count {\n        if nums[i] != prev {\n            result.append(nums[i])\n            prev = nums[i]\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last = AnyHashable.self\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last = AnyHashable.self\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    for num in nums {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var prev: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != prev {\n            result.append(num)\n            prev = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    let nums = Array(nums)\n    var result = [AnyHashable]()\n    var prev = nums[0]\n    result.append(prev)\n    for i in 1..<nums.count {\n        if nums[i] != prev {\n            result.append(nums[i])\n        }\n        prev = nums[i]\n    }\n    return result",
    "    var result: AnyHashable = []\n    var last: AnyHashable = nil\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    for num in nums as! [AnyHashable] {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    for num in nums {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    return nums",
    "    var result = [AnyHashable]()\n    for num in nums {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var prev: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != prev {\n            result.append(num)\n        }\n        prev = num\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result: AnyHashable = []\n    var last: AnyHashable?\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable? = nil\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    var result: AnyHashable = []\n    var last: AnyHashable = nil\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result: AnyHashable = []\n    for num in nums {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var previous = nums[0]\n    for num in nums {\n        if num != previous {\n            result.append(num)\n        }\n        previous = num\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var prev: AnyHashable?\n    for num in nums {\n        if num != prev {\n            result.append(num)\n            prev = num\n        }\n    }\n    return result",
    "    var nums = nums\n    var result: [AnyHashable] = []\n    for i in 0..<nums.count {\n        if i == 0 {\n            result.append(nums[i])\n        } else {\n            if nums[i] != nums[i - 1] {\n                result.append(nums[i])\n            }\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last = nums.first!\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    for num in nums as! [AnyHashable] {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var nums = nums\n    var result = [AnyHashable]()\n    for i in nums {\n        if result.last != i {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last = nums[0]\n    for i in 1..<nums.count {\n        if nums[i] != last {\n            result.append(last)\n            last = nums[i]\n        }\n    }\n    result.append(last)\n    return result"
  ]
}