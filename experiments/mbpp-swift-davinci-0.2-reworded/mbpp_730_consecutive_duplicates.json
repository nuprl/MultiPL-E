{
  "name": "mbpp_730_consecutive_duplicates",
  "language": "swift",
  "prompt": "\n/// Write a function to remove consecutive duplicates of a given array.\nfunc consecutive_duplicates(nums: AnyHashable) -> AnyHashable {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(consecutive_duplicates(nums: [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4])\nassert(consecutive_duplicates(nums: [10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [10, 15, 19, 18, 17, 26, 17, 18, 10])\nassert(consecutive_duplicates(nums: [\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [\"a\", \"b\", \"c\", \"d\"])\nassert(consecutive_duplicates(nums: [\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]) == [\"a\", \"b\", \"c\", \"d\", \"a\"])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var result: [AnyHashable] = []\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    for num in nums {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last = nums.first as! AnyHashable\n    result.append(last)\n    for num in nums {\n        if num as! AnyHashable != last {\n            result.append(num as! AnyHashable)\n            last = num as! AnyHashable\n        }\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    var last: AnyHashable? = nil\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    var nums = nums\n    var result = [AnyHashable]()\n    for i in nums {\n        if result.last != i {\n            result.append(i)\n        }\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    for num in nums as! [AnyHashable] {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n        }\n        last = num\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    for num in nums as! [AnyHashable] {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var last: AnyHashable?\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result: AnyHashable = []\n    var last: AnyHashable = nil\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var previous = nums[0]\n    for num in nums {\n        if num != previous {\n            result.append(num)\n            previous = num\n        }\n    }\n    return result",
    "    return nums",
    "    var result = [AnyHashable]()\n    for num in nums {\n        if result.last != num {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result: [AnyHashable] = []\n    var prev: AnyHashable?\n    for num in nums as! [AnyHashable] {\n        if num != prev {\n            result.append(num)\n        }\n        prev = num\n    }\n    return result",
    "    var result: AnyHashable = []\n    var last: AnyHashable?\n    for num in nums {\n        if num != last {\n            result.append(num)\n            last = num\n        }\n    }\n    return result"
  ]
}