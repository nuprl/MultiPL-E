{
  "name": "mbpp_249_intersection_array",
  "language": "swift",
  "prompt": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set = Set<Int>()\n    for num in array_nums1 {\n        set.insert(num)\n    }\n    for num in array_nums2 {\n        if set.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    var result = Set<Int>()\n    \n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    \n    for num in set1 {\n        if set2.contains(num) {\n            result.insert(num)\n        }\n    }\n    \n    return Array(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmpb9nrzyok/tmpb9nrzyok.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b968b7dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b968b4d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b968b4d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b968b4d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb9nrzyok                        0x000055b103978920 <unavailable> + 6432\n5    libc.so.6                          0x00002b968b9c6460 __libc_start_main + 245\n6    tmpb9nrzyok                        0x000055b103978499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_intersection = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            array_intersection.append(num)\n        }\n    }\n    return array_intersection\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_nums1 = array_nums1\n    var array_nums2 = array_nums2\n    var intersection_array = [Int]()\n    var i = 0\n    var j = 0\n    while i < array_nums1.count && j < array_nums2.count {\n        if array_nums1[i] == array_nums2[j] {\n            intersection_array.append(array_nums1[i])\n            i += 1\n            j += 1\n        } else if array_nums1[i] < array_nums2[j] {\n            i += 1\n        } else {\n            j += 1\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<array_nums1.count {\n        for j in 0..<array_nums2.count {\n            if array_nums1[i] == array_nums2[j] {\n                result.append(array_nums1[i])\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set1 = Set(array_nums1)\n    var set2 = Set(array_nums2)\n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmp76ria3il/tmp76ria3il.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1759ca0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1759997b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1759997988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b17599967b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76ria3il                        0x000055956d33e760 <unavailable> + 5984\n5    libc.so.6                          0x00002b1759e8c460 __libc_start_main + 245\n6    tmp76ria3il                        0x000055956d33e2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        if dict[num] != nil {\n            dict[num] = dict[num]! + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    for num in array_nums2 {\n        if dict[num] != nil && dict[num]! > 0 {\n            result.append(num)\n            dict[num] = dict[num]! - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set1 = Set(array_nums1)\n    var set2 = Set(array_nums2)\n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmp76ria3il/tmp76ria3il.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1759ca0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1759997b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1759997988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b17599967b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76ria3il                        0x000055956d33e760 <unavailable> + 5984\n5    libc.so.6                          0x00002b1759e8c460 __libc_start_main + 245\n6    tmp76ria3il                        0x000055956d33e2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmp04kkdeas/tmp04kkdeas.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba83380bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba833502b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba833502988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba8335017b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp04kkdeas                        0x000055957d600930 <unavailable> + 6448\n5    libc.so.6                          0x00002ba8339f7460 __libc_start_main + 245\n6    tmp04kkdeas                        0x000055957d6004a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var hash = [Int: Int]()\n    for num in array_nums1 {\n        hash[num] = 1\n    }\n    for num in array_nums2 {\n        if hash[num] == 1 {\n            result.append(num)\n            hash[num] = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set = Set<Int>()\n    for num in array_nums1 {\n        set.insert(num)\n    }\n    for num in array_nums2 {\n        if set.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    var result = [Int]()\n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpfs50o02i/tmpfs50o02i.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b53e7b61c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b53e7858b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b53e7858988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b53e78577b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfs50o02i                        0x000055a2ed256930 <unavailable> + 6448\n5    libc.so.6                          0x00002b53e7d4d460 __libc_start_main + 245\n6    tmpfs50o02i                        0x000055a2ed2564a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_nums1_set = Set(array_nums1)\n    var array_nums2_set = Set(array_nums2)\n    var intersection_array = [Int]()\n    for num in array_nums1_set {\n        if array_nums2_set.contains(num) {\n            intersection_array.append(num)\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmp4bked1k_/tmp4bked1k_.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac2ef6a6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac2ef39db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac2ef39d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac2ef39c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4bked1k_                        0x000055b0c8305760 <unavailable> + 5984\n5    libc.so.6                          0x00002ac2ef892460 __libc_start_main + 245\n6    tmp4bked1k_                        0x000055b0c83052d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    var result = [Int]()\n    \n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    \n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpjmdhtnpp/tmpjmdhtnpp.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ca9d32c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ca9a29b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ca9a29988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ca9a287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjmdhtnpp                        0x0000558c98ef1930 <unavailable> + 6448\n5    libc.so.6                          0x00002b7ca9f1e460 __libc_start_main + 245\n6    tmpjmdhtnpp                        0x0000558c98ef14a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] != nil {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    var result = [Int]()\n    \n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpnjec6opx/tmpnjec6opx.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b623f3dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b623f0d3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b623f0d3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b623f0d27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnjec6opx                        0x000055f58de70930 <unavailable> + 6448\n5    libc.so.6                          0x00002b623f5c8460 __libc_start_main + 245\n6    tmpnjec6opx                        0x000055f58de704a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    \n    for num in array_nums1 {\n        if dict[num] == nil {\n            dict[num] = 1\n        } else {\n            dict[num]! += 1\n        }\n    }\n    \n    for num in array_nums2 {\n        if dict[num] != nil {\n            result.append(num)\n            dict[num] = nil\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    var intersection_array = [Int]()\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            intersection_array.append(num)\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpdtiwjhmj/tmpdtiwjhmj.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a25050c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a24d47b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a24d47988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a24d467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdtiwjhmj                        0x0000564dc4316760 <unavailable> + 5984\n5    libc.so.6                          0x00002b8a2523c460 __libc_start_main + 245\n6    tmpdtiwjhmj                        0x0000564dc43162d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set(array_nums1)\n    var set2 = Set(array_nums2)\n    var result = [Int]()\n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpx7ir1m9c/tmpx7ir1m9c.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e0477dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e04474b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2e04474988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2e044737b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx7ir1m9c                        0x0000563664047760 <unavailable> + 5984\n5    libc.so.6                          0x00002b2e04969460 __libc_start_main + 245\n6    tmpx7ir1m9c                        0x00005636640472d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) && !result.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set(array_nums1)\n    var set2 = Set(array_nums2)\n    var result = [Int]()\n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpx7ir1m9c/tmpx7ir1m9c.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e0477dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e04474b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2e04474988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2e044737b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx7ir1m9c                        0x0000563664047760 <unavailable> + 5984\n5    libc.so.6                          0x00002b2e04969460 __libc_start_main + 245\n6    tmpx7ir1m9c                        0x00005636640472d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var dict = [Int: Int]()\n    var result = [Int]()\n    for num in array_nums1 {\n        if dict[num] != nil {\n            dict[num]! += 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    for num in array_nums2 {\n        if dict[num] != nil {\n            result.append(num)\n            dict[num]! -= 1\n            if dict[num] == 0 {\n                dict.removeValue(forKey: num)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    var result = [Int]()\n    \n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpnjec6opx/tmpnjec6opx.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b623f3dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b623f0d3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b623f0d3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b623f0d27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnjec6opx                        0x000055f58de70930 <unavailable> + 6448\n5    libc.so.6                          0x00002b623f5c8460 __libc_start_main + 245\n6    tmpnjec6opx                        0x000055f58de704a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    set_nums1.intersection(set_nums2)\n    return Array(set_nums1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpto17ao_v/tmpto17ao_v.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b660abbbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b660a8b2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b660a8b2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b660a8b17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpto17ao_v                        0x0000562862932600 <unavailable> + 5632\n5    libc.so.6                          0x00002b660ada7460 __libc_start_main + 245\n6    tmpto17ao_v                        0x0000562862932179 <unavailable> + 4473\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    var result = [Int]()\n    \n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    \n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpjmdhtnpp/tmpjmdhtnpp.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ca9d32c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ca9a29b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ca9a29988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ca9a287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjmdhtnpp                        0x0000558c98ef1930 <unavailable> + 6448\n5    libc.so.6                          0x00002b7ca9f1e460 __libc_start_main + 245\n6    tmpjmdhtnpp                        0x0000558c98ef14a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var intersection_array = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            intersection_array.append(num)\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    \n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpe9dlmad4/tmpe9dlmad4.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b884c291c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b884bf88b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b884bf88988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b884bf877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe9dlmad4                        0x000055716e86dae1 <unavailable> + 6881\n5    libc.so.6                          0x00002b884c47d460 __libc_start_main + 245\n6    tmpe9dlmad4                        0x000055716e86d4a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    set_nums1.intersection(set_nums2)\n    return Array(set_nums1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpto17ao_v/tmpto17ao_v.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b660abbbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b660a8b2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b660a8b2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b660a8b17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpto17ao_v                        0x0000562862932600 <unavailable> + 5632\n5    libc.so.6                          0x00002b660ada7460 __libc_start_main + 245\n6    tmpto17ao_v                        0x0000562862932179 <unavailable> + 4473\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result: [Int] = []\n    var dict: [Int: Int] = [:]\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    var result = [Int]()\n    \n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpnjec6opx/tmpnjec6opx.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b623f3dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b623f0d3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b623f0d3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b623f0d27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnjec6opx                        0x000055f58de70930 <unavailable> + 6448\n5    libc.so.6                          0x00002b623f5c8460 __libc_start_main + 245\n6    tmpnjec6opx                        0x000055f58de704a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set = Set<Int>()\n    \n    for num in array_nums1 {\n        set.insert(num)\n    }\n    \n    for num in array_nums2 {\n        if set.contains(num) {\n            result.append(num)\n            set.remove(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_intersection = [Int]()\n    var dict_nums1 = [Int: Int]()\n    var dict_nums2 = [Int: Int]()\n    for num in array_nums1 {\n        if dict_nums1[num] == nil {\n            dict_nums1[num] = 1\n        } else {\n            dict_nums1[num]! += 1\n        }\n    }\n    for num in array_nums2 {\n        if dict_nums2[num] == nil {\n            dict_nums2[num] = 1\n        } else {\n            dict_nums2[num]! += 1\n        }\n    }\n    for (key, value) in dict_nums1 {\n        if dict_nums2[key] != nil {\n            array_intersection.append(key)\n        }\n    }\n    return array_intersection\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmp2q5ukmy7/tmp2q5ukmy7.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adaadefec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adaadbf5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adaadbf5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adaadbf47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2q5ukmy7                        0x000055c2e9fec9f0 <unavailable> + 6640\n5    libc.so.6                          0x00002adaae0ea460 __libc_start_main + 245\n6    tmp2q5ukmy7                        0x000055c2e9fec569 <unavailable> + 5481\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    var result = [Int]()\n    \n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpmyegpysq/tmpmyegpysq.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b448293fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4482636b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4482636988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b44826357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmyegpysq                        0x000055b2fd85c930 <unavailable> + 6448\n5    libc.so.6                          0x00002b4482b2b460 __libc_start_main + 245\n6    tmpmyegpysq                        0x000055b2fd85c4a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    \n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    \n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_nums1 = array_nums1\n    var array_nums2 = array_nums2\n    var intersection_array = [Int]()\n    if array_nums1.count > array_nums2.count {\n        for i in 0..<array_nums2.count {\n            if array_nums1.contains(array_nums2[i]) {\n                intersection_array.append(array_nums2[i])\n            }\n        }\n    } else {\n        for i in 0..<array_nums1.count {\n            if array_nums2.contains(array_nums1[i]) {\n                intersection_array.append(array_nums1[i])\n            }\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    return Array(set_nums1.intersection(set_nums2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpk7oe7io5/tmpk7oe7io5.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba2c9dbbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba2c9ab2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba2c9ab2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba2c9ab17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk7oe7io5                        0x000055b3e06cb600 <unavailable> + 5632\n5    libc.so.6                          0x00002ba2c9fa7460 __libc_start_main + 245\n6    tmpk7oe7io5                        0x000055b3e06cb179 <unavailable> + 4473\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_nums1 = array_nums1\n    var array_nums2 = array_nums2\n    var intersection_array = [Int]()\n    var i = 0\n    var j = 0\n    while i < array_nums1.count && j < array_nums2.count {\n        if array_nums1[i] == array_nums2[j] {\n            intersection_array.append(array_nums1[i])\n            i += 1\n            j += 1\n        } else if array_nums1[i] < array_nums2[j] {\n            i += 1\n        } else {\n            j += 1\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var intersection_array: [Int] = []\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            intersection_array.append(num)\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    var result = [Int]()\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmp_glet9im/tmp_glet9im.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b48faa08c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b48fa6ffb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b48fa6ff988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b48fa6fe7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_glet9im                        0x000055b9846d6760 <unavailable> + 5984\n5    libc.so.6                          0x00002b48fabf4460 __libc_start_main + 245\n6    tmp_glet9im                        0x000055b9846d62d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set = Set<Int>()\n    for num in array_nums1 {\n        set.insert(num)\n    }\n    for num in array_nums2 {\n        if set.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in array_nums1 {\n        if array_nums2.contains(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    var intersection_array = [Int]()\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            intersection_array.append(num)\n        }\n    }\n    \n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "tmpth_wotgg/tmpth_wotgg.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9cf08f0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9cf05e7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9cf05e7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9cf05e67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpth_wotgg                        0x000055ee6b800760 <unavailable> + 5984\n5    libc.so.6                          0x00002b9cf0adc460 __libc_start_main + 245\n6    tmpth_wotgg                        0x000055ee6b8002d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_nums1 = array_nums1\n    var array_nums2 = array_nums2\n    var intersection_array = [Int]()\n    var i = 0\n    var j = 0\n    while i < array_nums1.count && j < array_nums2.count {\n        if array_nums1[i] < array_nums2[j] {\n            i += 1\n        } else if array_nums1[i] > array_nums2[j] {\n            j += 1\n        } else {\n            intersection_array.append(array_nums1[i])\n            i += 1\n            j += 1\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in array_nums1 {\n        for j in array_nums2 {\n            if i == j {\n                result.append(i)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmp04kkdeas/tmp04kkdeas.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba83380bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba833502b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba833502988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba8335017b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp04kkdeas                        0x000055957d600930 <unavailable> + 6448\n5    libc.so.6                          0x00002ba8339f7460 __libc_start_main + 245\n6    tmp04kkdeas                        0x000055957d6004a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in array_nums1 {\n        if array_nums2.contains(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_intersection = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            array_intersection.append(num)\n        }\n    }\n    return array_intersection\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set = Set<Int>()\n    for num in array_nums1 {\n        set.insert(num)\n    }\n    for num in array_nums2 {\n        if set.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var intersection_array = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            intersection_array.append(num)\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    set_nums1.intersect(set_nums2)\n    return Array(set_nums1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "/tmp/tmpj8wx92is.swift:6:15: error: value of type 'Set<Int>' has no member 'intersect'\n    set_nums1.intersect(set_nums2)\n    ~~~~~~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_nums1 = array_nums1\n    var array_nums2 = array_nums2\n    var result = [Int]()\n    array_nums1.sort()\n    array_nums2.sort()\n    var i = 0\n    var j = 0\n    while i < array_nums1.count && j < array_nums2.count {\n        if array_nums1[i] == array_nums2[j] {\n            if result.count == 0 || result[result.count - 1] != array_nums1[i] {\n                result.append(array_nums1[i])\n            }\n            i += 1\n            j += 1\n        } else if array_nums1[i] < array_nums2[j] {\n            i += 1\n        } else {\n            j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result: [Int] = []\n    var dict: [Int: Int] = [:]\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmp04kkdeas/tmp04kkdeas.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba83380bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba833502b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba833502988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba8335017b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp04kkdeas                        0x000055957d600930 <unavailable> + 6448\n5    libc.so.6                          0x00002ba8339f7460 __libc_start_main + 245\n6    tmp04kkdeas                        0x000055957d6004a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    set_nums1.intersection(set_nums2)\n    return Array(set_nums1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpto17ao_v/tmpto17ao_v.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b660abbbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b660a8b2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b660a8b2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b660a8b17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpto17ao_v                        0x0000562862932600 <unavailable> + 5632\n5    libc.so.6                          0x00002b660ada7460 __libc_start_main + 245\n6    tmpto17ao_v                        0x0000562862932179 <unavailable> + 4473\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    var intersection_array = [Int]()\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            intersection_array.append(num)\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpdtiwjhmj/tmpdtiwjhmj.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a25050c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a24d47b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a24d47988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a24d467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdtiwjhmj                        0x0000564dc4316760 <unavailable> + 5984\n5    libc.so.6                          0x00002b8a2523c460 __libc_start_main + 245\n6    tmpdtiwjhmj                        0x0000564dc43162d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var dict = [Int: Bool]()\n    var result = [Int]()\n    for num in array_nums1 {\n        dict[num] = true\n    }\n    for num in array_nums2 {\n        if dict[num] == true {\n            result.append(num)\n            dict[num] = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    var result = [Int]()\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmp_glet9im/tmp_glet9im.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b48faa08c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b48fa6ffb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b48fa6ff988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b48fa6fe7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_glet9im                        0x000055b9846d6760 <unavailable> + 5984\n5    libc.so.6                          0x00002b48fabf4460 __libc_start_main + 245\n6    tmp_glet9im                        0x000055b9846d62d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var intersection = [Int]()\n    var set1 = Set(array_nums1)\n    var set2 = Set(array_nums2)\n    for num in set1 {\n        if set2.contains(num) {\n            intersection.append(num)\n        }\n    }\n    return intersection\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "tmp63msda0y/tmp63msda0y.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afc8dfcec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afc8dcc5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afc8dcc5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afc8dcc47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp63msda0y                        0x00005593ce863760 <unavailable> + 5984\n5    libc.so.6                          0x00002afc8e1ba460 __libc_start_main + 245\n6    tmp63msda0y                        0x00005593ce8632d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result: [Int] = []\n    var set1: Set<Int> = Set(array_nums1)\n    var set2: Set<Int> = Set(array_nums2)\n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "tmpys51usfj/tmpys51usfj.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7a7ba89c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7a7b780b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7a7b780988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7a7b77f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpys51usfj                        0x00005580f1680710 <unavailable> + 5904\n5    libc.so.6                          0x00002b7a7bc75460 __libc_start_main + 245\n6    tmpys51usfj                        0x00005580f1680289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_nums1 = array_nums1\n    var array_nums2 = array_nums2\n    var intersection_array = [Int]()\n    for i in 0..<array_nums1.count {\n        for j in 0..<array_nums2.count {\n            if array_nums1[i] == array_nums2[j] {\n                intersection_array.append(array_nums1[i])\n                array_nums2.remove(at: j)\n                break\n            }\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "tmpxl7ou952/tmpxl7ou952.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba7d3a54c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba7d374bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba7d374b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba7d374a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxl7ou952                        0x00005582e96e9760 <unavailable> + 5984\n5    libc.so.6                          0x00002ba7d3c40460 __libc_start_main + 245\n6    tmpxl7ou952                        0x00005582e96e92d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    var result = [Int]()\n    \n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpnjec6opx/tmpnjec6opx.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b623f3dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b623f0d3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b623f0d3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b623f0d27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnjec6opx                        0x000055f58de70930 <unavailable> + 6448\n5    libc.so.6                          0x00002b623f5c8460 __libc_start_main + 245\n6    tmpnjec6opx                        0x000055f58de704a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "tmp210opmm_/tmp210opmm_.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdab489c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdab180b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdab180988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdab17f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp210opmm_                        0x0000560d130ca930 <unavailable> + 6448\n5    libc.so.6                          0x00002acdab675460 __libc_start_main + 245\n6    tmp210opmm_                        0x0000560d130ca4a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set = Set<Int>()\n    \n    for num in array_nums1 {\n        set.insert(num)\n    }\n    \n    for num in array_nums2 {\n        if set.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set = Set<Int>()\n    for num in array_nums1 {\n        set.insert(num)\n    }\n    for num in array_nums2 {\n        if set.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "tmpxl7ou952/tmpxl7ou952.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba7d3a54c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba7d374bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba7d374b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba7d374a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxl7ou952                        0x00005582e96e9760 <unavailable> + 5984\n5    libc.so.6                          0x00002ba7d3c40460 __libc_start_main + 245\n6    tmpxl7ou952                        0x00005582e96e92d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "tmpxl7ou952/tmpxl7ou952.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba7d3a54c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba7d374bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba7d374b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba7d374a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxl7ou952                        0x00005582e96e9760 <unavailable> + 5984\n5    libc.so.6                          0x00002ba7d3c40460 __libc_start_main + 245\n6    tmpxl7ou952                        0x00005582e96e92d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var array_nums1 = array_nums1\n    var array_nums2 = array_nums2\n    array_nums1.sort()\n    array_nums2.sort()\n    var i = 0\n    var j = 0\n    while i < array_nums1.count && j < array_nums2.count {\n        if array_nums1[i] == array_nums2[j] {\n            result.append(array_nums1[i])\n            i += 1\n            j += 1\n        } else if array_nums1[i] < array_nums2[j] {\n            i += 1\n        } else {\n            j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set1 = Set(array_nums1)\n    var set2 = Set(array_nums2)\n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmp76ria3il/tmp76ria3il.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1759ca0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1759997b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1759997988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b17599967b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76ria3il                        0x000055956d33e760 <unavailable> + 5984\n5    libc.so.6                          0x00002b1759e8c460 __libc_start_main + 245\n6    tmp76ria3il                        0x000055956d33e2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    var intersection_array = [Int]()\n    \n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            intersection_array.append(num)\n        }\n    }\n    \n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "tmps7phs508/tmps7phs508.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba53f960c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba53f657b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba53f657988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba53f6567b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps7phs508                        0x00005566b24f9930 <unavailable> + 6448\n5    libc.so.6                          0x00002ba53fb4c460 __libc_start_main + 245\n6    tmps7phs508                        0x00005566b24f94a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    \n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "tmphgily8wj/tmphgily8wj.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b616dfebc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b616dce2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b616dce2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b616dce17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphgily8wj                        0x000056159bbac930 <unavailable> + 6448\n5    libc.so.6                          0x00002b616e1d7460 __libc_start_main + 245\n6    tmphgily8wj                        0x000056159bbac4a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set = Set<Int>()\n    for num in array_nums1 {\n        set.insert(num)\n    }\n    for num in array_nums2 {\n        if set.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    var result = [Int]()\n    \n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpnjec6opx/tmpnjec6opx.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b623f3dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b623f0d3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b623f0d3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b623f0d27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnjec6opx                        0x000055f58de70930 <unavailable> + 6448\n5    libc.so.6                          0x00002b623f5c8460 __libc_start_main + 245\n6    tmpnjec6opx                        0x000055f58de704a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var map = [Int: Bool]()\n    for num in array_nums1 {\n        map[num] = true\n    }\n    for num in array_nums2 {\n        if map[num] != nil {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) && !result.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "tmpxl7ou952/tmpxl7ou952.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba7d3a54c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba7d374bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba7d374b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba7d374a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxl7ou952                        0x00005582e96e9760 <unavailable> + 5984\n5    libc.so.6                          0x00002ba7d3c40460 __libc_start_main + 245\n6    tmpxl7ou952                        0x00005582e96e92d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) && !result.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_nums1 = array_nums1\n    var array_nums2 = array_nums2\n    var intersection_array = [Int]()\n    var i = 0\n    var j = 0\n    while i < array_nums1.count && j < array_nums2.count {\n        if array_nums1[i] == array_nums2[j] {\n            intersection_array.append(array_nums1[i])\n            i += 1\n            j += 1\n        } else if array_nums1[i] < array_nums2[j] {\n            i += 1\n        } else {\n            j += 1\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for i in 0..<array_nums1.count {\n        dict[array_nums1[i]] = i\n    }\n    for i in 0..<array_nums2.count {\n        if dict[array_nums2[i]] != nil {\n            result.append(array_nums2[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in array_nums1 {\n        if array_nums2.contains(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set(array_nums1)\n    var set2 = Set(array_nums2)\n    var result = [Int]()\n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpx7ir1m9c/tmpx7ir1m9c.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e0477dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e04474b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2e04474988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2e044737b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx7ir1m9c                        0x0000563664047760 <unavailable> + 5984\n5    libc.so.6                          0x00002b2e04969460 __libc_start_main + 245\n6    tmpx7ir1m9c                        0x00005636640472d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set = Set<Int>()\n    for num in array_nums1 {\n        set.insert(num)\n    }\n    for num in array_nums2 {\n        if set.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var dict = [Int: Int]()\n    var result = [Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_intersection = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            array_intersection.append(num)\n        }\n    }\n    return array_intersection\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set(array_nums1)\n    var set2 = Set(array_nums2)\n    \n    return Array(set1.intersection(set2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "tmpqek72ntg/tmpqek72ntg.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab8c9254c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab8c8f4bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab8c8f4b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab8c8f4a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqek72ntg                        0x000055b25b0ba600 <unavailable> + 5632\n5    libc.so.6                          0x00002ab8c9440460 __libc_start_main + 245\n6    tmpqek72ntg                        0x000055b25b0ba179 <unavailable> + 4473\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_nums1 = array_nums1\n    var array_nums2 = array_nums2\n    var intersection = [Int]()\n    for i in 0..<array_nums1.count {\n        for j in 0..<array_nums2.count {\n            if array_nums1[i] == array_nums2[j] {\n                intersection.append(array_nums1[i])\n                array_nums2.remove(at: j)\n                break\n            }\n        }\n    }\n    return intersection\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_nums1 = array_nums1\n    var array_nums2 = array_nums2\n    var intersection = [Int]()\n    for i in 0..<array_nums1.count {\n        for j in 0..<array_nums2.count {\n            if array_nums1[i] == array_nums2[j] {\n                intersection.append(array_nums1[i])\n                array_nums1.remove(at: i)\n                array_nums2.remove(at: j)\n                break\n            }\n        }\n    }\n    return intersection\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b10ed6fcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b10ed3f3561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b10ed3f3286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b10ed3f313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b10ed3f2bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b10ed1f3e83 <unavailable> + 188035\n6    tmpi163itwg                        0x000055f887436e74 <unavailable> + 7796\n7    tmpi163itwg                        0x000055f88743669f <unavailable> + 5791\n8    libc.so.6                          0x00002b10ed8e8460 __libc_start_main + 245\n9    tmpi163itwg                        0x000055f887436309 <unavailable> + 4873\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_intersection = [Int]()\n    for num1 in array_nums1 {\n        for num2 in array_nums2 {\n            if num1 == num2 {\n                array_intersection.append(num1)\n            }\n        }\n    }\n    return array_intersection\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_nums1 = array_nums1\n    var array_nums2 = array_nums2\n    var intersection_array = [Int]()\n    var i = 0\n    var j = 0\n    while i < array_nums1.count && j < array_nums2.count {\n        if array_nums1[i] == array_nums2[j] {\n            intersection_array.append(array_nums1[i])\n            i += 1\n            j += 1\n        } else if array_nums1[i] < array_nums2[j] {\n            i += 1\n        } else {\n            j += 1\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    var result = [Int]()\n    \n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpnjec6opx/tmpnjec6opx.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b623f3dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b623f0d3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b623f0d3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b623f0d27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnjec6opx                        0x000055f58de70930 <unavailable> + 6448\n5    libc.so.6                          0x00002b623f5c8460 __libc_start_main + 245\n6    tmpnjec6opx                        0x000055f58de704a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    var result = Set<Int>()\n    \n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    \n    for num in set1 {\n        if set2.contains(num) {\n            result.insert(num)\n        }\n    }\n    \n    return Array(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmpb9nrzyok/tmpb9nrzyok.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b968b7dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b968b4d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b968b4d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b968b4d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb9nrzyok                        0x000055b103978920 <unavailable> + 6432\n5    libc.so.6                          0x00002b968b9c6460 __libc_start_main + 245\n6    tmpb9nrzyok                        0x000055b103978499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    var intersection_array = [Int]()\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            intersection_array.append(num)\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpdtiwjhmj/tmpdtiwjhmj.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a25050c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a24d47b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a24d47988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a24d467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdtiwjhmj                        0x0000564dc4316760 <unavailable> + 5984\n5    libc.so.6                          0x00002b8a2523c460 __libc_start_main + 245\n6    tmpdtiwjhmj                        0x0000564dc43162d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for num in array_nums1 {\n        if array_nums2.contains(num) && !result.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    return Array(set1.intersection(set2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "tmp6xpi6d7f/tmp6xpi6d7f.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b17f3130c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b17f2e27b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b17f2e27988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b17f2e267b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6xpi6d7f                        0x0000555a8a4fd7d0 <unavailable> + 6096\n5    libc.so.6                          0x00002b17f331c460 __libc_start_main + 245\n6    tmp6xpi6d7f                        0x0000555a8a4fd349 <unavailable> + 4937\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_nums1 = array_nums1\n    var array_nums2 = array_nums2\n    var intersection_array = [Int]()\n    for i in 0..<array_nums1.count {\n        for j in 0..<array_nums2.count {\n            if array_nums1[i] == array_nums2[j] {\n                intersection_array.append(array_nums1[i])\n                array_nums1.remove(at: i)\n                array_nums2.remove(at: j)\n                break\n            }\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad99994ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad999641561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ad999641286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ad99964113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ad999640bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ad999441e83 <unavailable> + 188035\n6    tmpxt0o7c_i                        0x0000562024498e74 <unavailable> + 7796\n7    tmpxt0o7c_i                        0x000056202449869f <unavailable> + 5791\n8    libc.so.6                          0x00002ad999b36460 __libc_start_main + 245\n9    tmpxt0o7c_i                        0x0000562024498309 <unavailable> + 4873\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        if dict[num] == nil {\n            dict[num] = 1\n        } else {\n            dict[num] = dict[num]! + 1\n        }\n    }\n    for num in array_nums2 {\n        if dict[num] != nil && dict[num]! > 0 {\n            result.append(num)\n            dict[num] = dict[num]! - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set1 = Set(array_nums1)\n    var set2 = Set(array_nums2)\n    \n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "tmpnkjhiqli/tmpnkjhiqli.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae230473c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae23016ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae23016a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae2301697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnkjhiqli                        0x000055ce4b664760 <unavailable> + 5984\n5    libc.so.6                          0x00002ae23065f460 __libc_start_main + 245\n6    tmpnkjhiqli                        0x000055ce4b6642d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    var result = Set<Int>()\n    \n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    \n    for num in set1 {\n        if set2.contains(num) {\n            result.insert(num)\n        }\n    }\n    \n    return Array(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmpb9nrzyok/tmpb9nrzyok.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b968b7dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b968b4d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b968b4d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b968b4d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb9nrzyok                        0x000055b103978920 <unavailable> + 6432\n5    libc.so.6                          0x00002b968b9c6460 __libc_start_main + 245\n6    tmpb9nrzyok                        0x000055b103978499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    var result = Set<Int>()\n    \n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    \n    for num in set1 {\n        if set2.contains(num) {\n            result.insert(num)\n        }\n    }\n    \n    return Array(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmpb9nrzyok/tmpb9nrzyok.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b968b7dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b968b4d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b968b4d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b968b4d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb9nrzyok                        0x000055b103978920 <unavailable> + 6432\n5    libc.so.6                          0x00002b968b9c6460 __libc_start_main + 245\n6    tmpb9nrzyok                        0x000055b103978499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    var set_intersection = Set<Int>()\n    \n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            set_intersection.insert(num)\n        }\n    }\n    \n    return Array(set_intersection)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "tmp5emr16li/tmp5emr16li.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b23036ffc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b23033f6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b23033f6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b23033f57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5emr16li                        0x000055f7043d6920 <unavailable> + 6432\n5    libc.so.6                          0x00002b23038eb460 __libc_start_main + 245\n6    tmp5emr16li                        0x000055f7043d6499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    \n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "tmphgily8wj/tmphgily8wj.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b616dfebc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b616dce2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b616dce2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b616dce17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphgily8wj                        0x000056159bbac930 <unavailable> + 6448\n5    libc.so.6                          0x00002b616e1d7460 __libc_start_main + 245\n6    tmphgily8wj                        0x000056159bbac4a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_nums1 = array_nums1\n    var array_nums2 = array_nums2\n    var result = [Int]()\n    array_nums1.sort()\n    array_nums2.sort()\n    var i = 0\n    var j = 0\n    while i < array_nums1.count && j < array_nums2.count {\n        if array_nums1[i] == array_nums2[j] {\n            result.append(array_nums1[i])\n            i += 1\n            j += 1\n        } else if array_nums1[i] < array_nums2[j] {\n            i += 1\n        } else {\n            j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    var result = [Int]()\n    \n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    \n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpjmdhtnpp/tmpjmdhtnpp.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ca9d32c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ca9a29b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ca9a29988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ca9a287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjmdhtnpp                        0x0000558c98ef1930 <unavailable> + 6448\n5    libc.so.6                          0x00002b7ca9f1e460 __libc_start_main + 245\n6    tmpjmdhtnpp                        0x0000558c98ef14a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        if dict[num] == nil {\n            dict[num] = 1\n        } else {\n            dict[num] = dict[num]! + 1\n        }\n    }\n    for num in array_nums2 {\n        if dict[num] != nil && dict[num]! > 0 {\n            result.append(num)\n            dict[num] = dict[num]! - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set = Set<Int>()\n    for num in array_nums1 {\n        set.insert(num)\n    }\n    for num in array_nums2 {\n        if set.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    var result = [Int]()\n    \n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpnjec6opx/tmpnjec6opx.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b623f3dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b623f0d3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b623f0d3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b623f0d27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnjec6opx                        0x000055f58de70930 <unavailable> + 6448\n5    libc.so.6                          0x00002b623f5c8460 __libc_start_main + 245\n6    tmpnjec6opx                        0x000055f58de704a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "tmptzgjsmc3/tmptzgjsmc3.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6f80839c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6f80530b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6f80530988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6f8052f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptzgjsmc3                        0x000055d206593760 <unavailable> + 5984\n5    libc.so.6                          0x00002b6f80a25460 __libc_start_main + 245\n6    tmptzgjsmc3                        0x000055d2065932d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "tmpxl7ou952/tmpxl7ou952.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba7d3a54c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba7d374bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba7d374b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba7d374a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxl7ou952                        0x00005582e96e9760 <unavailable> + 5984\n5    libc.so.6                          0x00002ba7d3c40460 __libc_start_main + 245\n6    tmpxl7ou952                        0x00005582e96e92d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    var result = [Int]()\n    \n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpnjec6opx/tmpnjec6opx.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b623f3dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b623f0d3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b623f0d3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b623f0d27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnjec6opx                        0x000055f58de70930 <unavailable> + 6448\n5    libc.so.6                          0x00002b623f5c8460 __libc_start_main + 245\n6    tmpnjec6opx                        0x000055f58de704a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    var result = [Int]()\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmp_glet9im/tmp_glet9im.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b48faa08c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b48fa6ffb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b48fa6ff988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b48fa6fe7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_glet9im                        0x000055b9846d6760 <unavailable> + 5984\n5    libc.so.6                          0x00002b48fabf4460 __libc_start_main + 245\n6    tmp_glet9im                        0x000055b9846d62d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmp04kkdeas/tmp04kkdeas.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba83380bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba833502b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba833502988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba8335017b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp04kkdeas                        0x000055957d600930 <unavailable> + 6448\n5    libc.so.6                          0x00002ba8339f7460 __libc_start_main + 245\n6    tmp04kkdeas                        0x000055957d6004a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if let _ = dict[num] {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        if dict[num] == nil {\n            dict[num] = 1\n        }\n    }\n    for num in array_nums2 {\n        if dict[num] != nil {\n            result.append(num)\n            dict[num] = nil\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    set_nums1.intersection(set_nums2)\n    return Array(set_nums1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpto17ao_v/tmpto17ao_v.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b660abbbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b660a8b2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b660a8b2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b660a8b17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpto17ao_v                        0x0000562862932600 <unavailable> + 5632\n5    libc.so.6                          0x00002b660ada7460 __libc_start_main + 245\n6    tmpto17ao_v                        0x0000562862932179 <unavailable> + 4473\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_nums1 = array_nums1\n    var array_nums2 = array_nums2\n    var intersection_array: [Int] = []\n    for i in 0..<array_nums1.count {\n        for j in 0..<array_nums2.count {\n            if array_nums1[i] == array_nums2[j] {\n                intersection_array.append(array_nums1[i])\n                array_nums1.remove(at: i)\n                array_nums2.remove(at: j)\n                break\n            }\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aefaa965c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aefaa65c561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aefaa65c286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aefaa65c13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aefaa65bbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002aefaa45ce83 <unavailable> + 188035\n6    tmpjdayz1b6                        0x000056412b4f5e2f <unavailable> + 7727\n7    tmpjdayz1b6                        0x000056412b4f564f <unavailable> + 5711\n8    libc.so.6                          0x00002aefaab51460 __libc_start_main + 245\n9    tmpjdayz1b6                        0x000056412b4f52b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        if dict[num] == nil {\n            dict[num] = 1\n        } else {\n            dict[num]! += 1\n        }\n    }\n    for num in array_nums2 {\n        if dict[num] != nil {\n            result.append(num)\n            dict[num]! -= 1\n            if dict[num]! == 0 {\n                dict.removeValue(forKey: num)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    \n    for num in array_nums1 {\n        if dict[num] == nil {\n            dict[num] = 1\n        } else {\n            dict[num]! += 1\n        }\n    }\n    \n    for num in array_nums2 {\n        if dict[num] != nil {\n            result.append(num)\n            dict[num] = nil\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmp04kkdeas/tmp04kkdeas.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba83380bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba833502b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba833502988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba8335017b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp04kkdeas                        0x000055957d600930 <unavailable> + 6448\n5    libc.so.6                          0x00002ba8339f7460 __libc_start_main + 245\n6    tmp04kkdeas                        0x000055957d6004a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    var result = [Int]()\n    \n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpnjec6opx/tmpnjec6opx.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b623f3dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b623f0d3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b623f0d3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b623f0d27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnjec6opx                        0x000055f58de70930 <unavailable> + 6448\n5    libc.so.6                          0x00002b623f5c8460 __libc_start_main + 245\n6    tmpnjec6opx                        0x000055f58de704a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var map = [Int: Int]()\n    for num in array_nums1 {\n        if map[num] == nil {\n            map[num] = 1\n        } else {\n            map[num] = map[num]! + 1\n        }\n    }\n    for num in array_nums2 {\n        if map[num] != nil {\n            result.append(num)\n            map[num] = map[num]! - 1\n            if map[num] == 0 {\n                map.removeValue(forKey: num)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    var result = Set<Int>()\n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    for num in set1 {\n        if set2.contains(num) {\n            result.insert(num)\n        }\n    }\n    return Array(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "tmpnh5s4wre/tmpnh5s4wre.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5865fc7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5865cbeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5865cbe988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5865cbd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnh5s4wre                        0x000055ebb530f920 <unavailable> + 6432\n5    libc.so.6                          0x00002b58661b3460 __libc_start_main + 245\n6    tmpnh5s4wre                        0x000055ebb530f499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var intersection_array = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            intersection_array.append(num)\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    \n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "tmphgily8wj/tmphgily8wj.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b616dfebc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b616dce2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b616dce2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b616dce17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphgily8wj                        0x000056159bbac930 <unavailable> + 6448\n5    libc.so.6                          0x00002b616e1d7460 __libc_start_main + 245\n6    tmphgily8wj                        0x000056159bbac4a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_nums1 = array_nums1\n    var array_nums2 = array_nums2\n    var result = [Int]()\n    for i in 0..<array_nums1.count {\n        for j in 0..<array_nums2.count {\n            if array_nums1[i] == array_nums2[j] {\n                result.append(array_nums1[i])\n                array_nums1.remove(at: i)\n                array_nums2.remove(at: j)\n                break\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5758edbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5758bd2561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b5758bd2286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b5758bd213c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b5758bd1bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b57589d2e83 <unavailable> + 188035\n6    tmpus7abf_n                        0x000055de100f9e74 <unavailable> + 7796\n7    tmpus7abf_n                        0x000055de100f969f <unavailable> + 5791\n8    libc.so.6                          0x00002b57590c7460 __libc_start_main + 245\n9    tmpus7abf_n                        0x000055de100f9309 <unavailable> + 4873\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    let set1 = Set(array_nums1)\n    let set2 = Set(array_nums2)\n    let intersection = set1.intersection(set2)\n    return Array(intersection)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "tmpw0q4whcd/tmpw0q4whcd.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af964d62c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af964a59b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af964a59988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af964a587b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw0q4whcd                        0x00005612df21b600 <unavailable> + 5632\n5    libc.so.6                          0x00002af964f4e460 __libc_start_main + 245\n6    tmpw0q4whcd                        0x00005612df21b179 <unavailable> + 4473\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set(array_nums1)\n    var set2 = Set(array_nums2)\n    var intersection_array = [Int]()\n    for num in set1 {\n        if set2.contains(num) {\n            intersection_array.append(num)\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "tmp9herf2sx/tmp9herf2sx.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5a36344c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5a3603bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5a3603b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5a3603a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9herf2sx                        0x00005617ee5a0760 <unavailable> + 5984\n5    libc.so.6                          0x00002b5a36530460 __libc_start_main + 245\n6    tmp9herf2sx                        0x00005617ee5a02d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}