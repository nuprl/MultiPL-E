{
  "name": "mbpp_245_max_sum",
  "language": "swift",
  "prompt": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = Array(repeating: 0, count: arr.count)\n    var max_sum_right = Array(repeating: 0, count: arr.count)\n    \n    // find max sum from left to right\n    for i in 0..<arr.count {\n        if i == 0 {\n            max_sum_left[i] = arr[i]\n        } else {\n            max_sum_left[i] = max(arr[i], arr[i] + max_sum_left[i-1])\n        }\n    }\n    \n    // find max sum from right to left\n    for i in (0..<arr.count).reversed() {\n        if i == arr.count - 1 {\n            max_sum_right[i] = arr[i]\n        } else {\n            max_sum_right[i] = max(arr[i], arr[i] + max_sum_right[i+1])\n        }\n    }\n    \n    // find max sum\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmp1ee0z5nv/tmp1ee0z5nv.swift:47: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b6a0c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b69dbdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b69dbd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b69dbc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1ee0z5nv                        0x000055a245418988 <unavailable> + 6536\n5    libc.so.6                          0x00002b9b6a2b2460 __libc_start_main + 245\n6    tmp1ee0z5nv                        0x000055a2454185b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "/tmp/tmpd6wi3xep.swift:22:9: error: type annotation missing in pattern\n    var max_sum_arr_rev_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpuj10ro26/tmpuj10ro26.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf6d098c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf6cd8fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf6cd8f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf6cd8e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuj10ro26                        0x000055a76b5af578 <unavailable> + 5496\n5    libc.so.6                          0x00002abf6d284460 __libc_start_main + 245\n6    tmpuj10ro26                        0x000055a76b5af1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var left = [Int](repeating: 0, count: arr.count)\n    var right = [Int](repeating: 0, count: arr.count)\n    \n    left[0] = arr[0]\n    for i in 1..<arr.count {\n        left[i] = max(arr[i], left[i-1] + arr[i])\n    }\n    \n    right[arr.count-1] = arr[arr.count-1]\n    for i in stride(from: arr.count-2, through: 0, by: -1) {\n        right[i] = max(arr[i], right[i+1] + arr[i])\n    }\n    \n    var max_sum = Int.min\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, left[i] + right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpblgw4nqr/tmpblgw4nqr.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8049597c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b804928eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b804928e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b804928d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpblgw4nqr                        0x0000562d48d318f8 <unavailable> + 6392\n5    libc.so.6                          0x00002b8049783460 __libc_start_main + 245\n6    tmpblgw4nqr                        0x0000562d48d31529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    while i < arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n        i += 1\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmphfkkugwy/tmphfkkugwy.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba7401c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba73febdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba73febd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba73febc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphfkkugwy                        0x000055a3e52993e8 <unavailable> + 5096\n5    libc.so.6                          0x00002ba7403b2460 __libc_start_main + 245\n6    tmphfkkugwy                        0x000055a3e5299019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    for i in 0..<arr.count {\n        var sum = 0\n        var sum_arr = [Int]()\n        for j in i..<arr.count {\n            if sum_arr.count == 0 {\n                sum_arr.append(arr[j])\n                sum += arr[j]\n            } else if sum_arr.last! <= arr[j] {\n                sum_arr.append(arr[j])\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j in (0..<i).reversed() {\n            if sum_arr.last! <= arr[j] {\n                sum_arr.append(arr[j])\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_sum_arr = sum_arr\n        }\n    }\n    print(max_sum_arr)\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpr9pgedpq/tmpr9pgedpq.swift:50: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adc8adaec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adc8aaa5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adc8aaa5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adc8aaa47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpr9pgedpq                        0x0000561d600bbb28 <unavailable> + 6952\n5    libc.so.6                          0x00002adc8af9a460 __libc_start_main + 245\n6    tmpr9pgedpq                        0x0000561d600bb759 <unavailable> + 5977\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var max = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max {\n            max = sum\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmp86jf1sac/tmp86jf1sac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67f9fa2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67f9c99b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67f9c99988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67f9c987b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp86jf1sac                        0x000055757c5f9578 <unavailable> + 5496\n5    libc.so.6                          0x00002b67fa18e460 __libc_start_main + 245\n6    tmp86jf1sac                        0x000055757c5f91a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1], arr[i])\n    }\n    \n    for i in (0..<arr.count - 1).reversed() {\n        max_sum_right[i] = max(max_sum_right[i + 1], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum += max(max_sum_left[i], max_sum_right[i]) - arr[i]\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpqkgsh6nb/tmpqkgsh6nb.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aefe6ed6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aefe6bcdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aefe6bcd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aefe6bcc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqkgsh6nb                        0x0000562ef3243988 <unavailable> + 6536\n5    libc.so.6                          0x00002aefe70c2460 __libc_start_main + 245\n6    tmpqkgsh6nb                        0x0000562ef32435b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_inc = [Int](repeating: 0, count: arr.count)\n    var max_sum_dec = [Int](repeating: 0, count: arr.count)\n    max_sum_inc[0] = arr[0]\n    max_sum_dec[arr.count - 1] = arr[arr.count - 1]\n    for i in 1..<arr.count {\n        max_sum_inc[i] = max(max_sum_inc[i - 1] + arr[i], arr[i])\n    }\n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        max_sum_dec[i] = max(max_sum_dec[i + 1] + arr[i], arr[i])\n    }\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_inc[i] + max_sum_dec[i] - arr[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpcozo3zih/tmpcozo3zih.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af581000c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af580cf7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af580cf7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af580cf67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcozo3zih                        0x000055a2648298f8 <unavailable> + 6392\n5    libc.so.6                          0x00002af5811ec460 __libc_start_main + 245\n6    tmpcozo3zih                        0x000055a264829529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    var j = arr.count - 1\n    while i < j {\n        if arr[i] < arr[j] {\n            sum += arr[i]\n            i += 1\n        } else if arr[i] > arr[j] {\n            sum += arr[j]\n            j -= 1\n        } else {\n            max_sum = max(max_sum, sum)\n            sum = 0\n            i += 1\n            j -= 1\n        }\n    }\n    max_sum = max(max_sum, sum)\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmp4p74x5jf/tmp4p74x5jf.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b111ad13c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b111aa0ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b111aa0a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b111aa097b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4p74x5jf                        0x000055ee5c2df478 <unavailable> + 5240\n5    libc.so.6                          0x00002b111aeff460 __libc_start_main + 245\n6    tmp4p74x5jf                        0x000055ee5c2df0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    // find max sum from left to right\n    for i in 0..<arr.count {\n        if i == 0 {\n            max_sum_left[i] = arr[i]\n        } else {\n            max_sum_left[i] = max(max_sum_left[i-1] + arr[i], arr[i])\n        }\n    }\n    \n    // find max sum from right to left\n    for i in stride(from: arr.count-1, through: 0, by: -1) {\n        if i == arr.count-1 {\n            max_sum_right[i] = arr[i]\n        } else {\n            max_sum_right[i] = max(max_sum_right[i+1] + arr[i], arr[i])\n        }\n    }\n    \n    // find max sum\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpvoe6bbpx/tmpvoe6bbpx.swift:47: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1f5f15fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1f5ee56b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1f5ee56988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1f5ee557b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvoe6bbpx                        0x000055f79dd618f8 <unavailable> + 6392\n5    libc.so.6                          0x00002b1f5f34b460 __libc_start_main + 245\n6    tmpvoe6bbpx                        0x000055f79dd61529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumArr = [Int]()\n    \n    for i in 0..<arr.count {\n        var sum = 0\n        var sumArr = [Int]()\n        \n        for j in i..<arr.count {\n            sum += arr[j]\n            sumArr.append(arr[j])\n            \n            if sum > maxSum {\n                maxSum = sum\n                maxSumArr = sumArr\n            }\n        }\n    }\n    \n    print(maxSumArr)\n    \n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmp24r0y7g8/tmp24r0y7g8.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e9927dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e98f74b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2e98f74988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2e98f737b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp24r0y7g8                        0x00005603fb5d77c8 <unavailable> + 6088\n5    libc.so.6                          0x00002b2e99469460 __libc_start_main + 245\n6    tmp24r0y7g8                        0x00005603fb5d73f9 <unavailable> + 5113\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    var max_sum_ending_here = 0\n    var max_sum_ending_here_so_far = 0\n    for i in 0..<arr.count {\n        max_sum_ending_here = max(max_sum_ending_here + arr[i], arr[i])\n        max_sum_ending_here_so_far = max(max_sum_ending_here_so_far, max_sum_ending_here)\n        max_sum_so_far = max(max_sum_so_far, max_sum_ending_here_so_far)\n    }\n    max_sum = max_sum_so_far\n    max_sum_so_far = 0\n    max_sum_ending_here = 0\n    max_sum_ending_here_so_far = 0\n    for i in (0..<arr.count).reversed() {\n        max_sum_ending_here = max(max_sum_ending_here + arr[i], arr[i])\n        max_sum_ending_here_so_far = max(max_sum_ending_here_so_far, max_sum_ending_here)\n        max_sum_so_far = max(max_sum_so_far, max_sum_ending_here_so_far)\n    }\n    max_sum = max(max_sum, max_sum_so_far)\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpyvdza9ri/tmpyvdza9ri.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e90de9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e90ae0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2e90ae0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2e90adf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyvdza9ri                        0x0000564fbe9058c8 <unavailable> + 6344\n5    libc.so.6                          0x00002b2e90fd5460 __libc_start_main + 245\n6    tmpyvdza9ri                        0x0000564fbe9054f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var inc = [Int](repeating: 0, count: arr.count)\n    var dec = [Int](repeating: 0, count: arr.count)\n    inc[0] = arr[0]\n    dec[arr.count - 1] = arr[arr.count - 1]\n    for i in 1..<arr.count {\n        inc[i] = max(arr[i], inc[i - 1] + arr[i])\n    }\n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        dec[i] = max(arr[i], dec[i + 1] + arr[i])\n    }\n    var max_sum = inc[0] + dec[0] - arr[0]\n    for i in 1..<arr.count {\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpg08rgimm/tmpg08rgimm.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acd12dcec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acd12ac5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acd12ac5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acd12ac47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg08rgimm                        0x000056340dafd8f8 <unavailable> + 6392\n5    libc.so.6                          0x00002acd12fba460 __libc_start_main + 245\n6    tmpg08rgimm                        0x000056340dafd529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    while i < arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n        i += 1\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmphfkkugwy/tmphfkkugwy.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba7401c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba73febdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba73febd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba73febc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphfkkugwy                        0x000055a3e52993e8 <unavailable> + 5096\n5    libc.so.6                          0x00002ba7403b2460 __libc_start_main + 245\n6    tmphfkkugwy                        0x000055a3e5299019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    while i < arr.count {\n        sum += arr[i]\n        if sum > max_sum {\n            max_sum = sum\n        }\n        i += 1\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpm5w2hwwo/tmpm5w2hwwo.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b375256dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3752264b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3752264988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b37522637b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm5w2hwwo                        0x000055ef2def83e8 <unavailable> + 5096\n5    libc.so.6                          0x00002b3752759460 __libc_start_main + 245\n6    tmpm5w2hwwo                        0x000055ef2def8019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    let n = arr.count\n    var inc = [Int](repeating: 0, count: n)\n    var dec = [Int](repeating: 0, count: n)\n    inc[0] = arr[0]\n    dec[n-1] = arr[n-1]\n    for i in 1..<n {\n        inc[i] = max(inc[i-1], arr[i])\n    }\n    for i in stride(from: n-2, through: 0, by: -1) {\n        dec[i] = max(dec[i+1], arr[i])\n    }\n    var sum = 0\n    for i in 0..<n {\n        sum = max(sum, inc[i] + dec[i] - arr[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmptg_r6nm0/tmptg_r6nm0.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b786856dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7868264b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7868264988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b78682637b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptg_r6nm0                        0x000055e0c494d8f8 <unavailable> + 6392\n5    libc.so.6                          0x00002b7868759460 __libc_start_main + 245\n6    tmptg_r6nm0                        0x000055e0c494d529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumEndingHere = 0\n    for i in 0..<arr.count {\n        maxSumEndingHere = max(maxSumEndingHere + arr[i], arr[i])\n        maxSum = max(maxSum, maxSumEndingHere)\n    }\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpguy1ujg2/tmpguy1ujg2.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0d3f634c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0d3f32bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0d3f32b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0d3f32a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpguy1ujg2                        0x000055c7046d7608 <unavailable> + 5640\n5    libc.so.6                          0x00002b0d3f820460 __libc_start_main + 245\n6    tmpguy1ujg2                        0x000055c7046d7239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "/tmp/tmpd6wi3xep.swift:22:9: error: type annotation missing in pattern\n    var max_sum_arr_rev_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumSoFar = 0\n    var maxSumEndingHere = 0\n    for i in 0..<arr.count {\n        maxSumEndingHere += arr[i]\n        if maxSumEndingHere < 0 {\n            maxSumEndingHere = 0\n        }\n        if maxSumSoFar < maxSumEndingHere {\n            maxSumSoFar = maxSumEndingHere\n        }\n    }\n    maxSum = maxSumSoFar\n    maxSumSoFar = 0\n    maxSumEndingHere = 0\n    for i in (0..<arr.count).reversed() {\n        maxSumEndingHere += arr[i]\n        if maxSumEndingHere < 0 {\n            maxSumEndingHere = 0\n        }\n        if maxSumSoFar < maxSumEndingHere {\n            maxSumSoFar = maxSumEndingHere\n        }\n    }\n    maxSum += maxSumSoFar\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpty6f9fej/tmpty6f9fej.swift:45: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b16e7f5bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b16e7c52b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b16e7c52988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b16e7c517b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpty6f9fej                        0x0000557c22556838 <unavailable> + 6200\n5    libc.so.6                          0x00002b16e8147460 __libc_start_main + 245\n6    tmpty6f9fej                        0x0000557c22556469 <unavailable> + 5225\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    \n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmpd3o34ece/tmpd3o34ece.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b25bc494c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b25bc18bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b25bc18b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b25bc18a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpd3o34ece                        0x000055bc98996578 <unavailable> + 5496\n5    libc.so.6                          0x00002b25bc680460 __libc_start_main + 245\n6    tmpd3o34ece                        0x000055bc989961a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1] + arr[i], arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        max_sum_right[i] = max(max_sum_right[i + 1] + arr[i], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmpx8bevinu/tmpx8bevinu.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ade7419ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ade73e95b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ade73e95988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ade73e947b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx8bevinu                        0x0000562abcb608f8 <unavailable> + 6392\n5    libc.so.6                          0x00002ade7438a460 __libc_start_main + 245\n6    tmpx8bevinu                        0x0000562abcb60529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_inc = [Int](repeating: 0, count: arr.count)\n    var max_sum_dec = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_inc[0] = arr[0]\n    max_sum_dec[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_inc[i] = max(max_sum_inc[i - 1] + arr[i], arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        max_sum_dec[i] = max(max_sum_dec[i + 1] + arr[i], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_inc[i] + max_sum_dec[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmpy3lulw5v/tmpy3lulw5v.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af87d98dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af87d684b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af87d684988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af87d6837b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy3lulw5v                        0x00005570ab0078f8 <unavailable> + 6392\n5    libc.so.6                          0x00002af87db79460 __libc_start_main + 245\n6    tmpy3lulw5v                        0x00005570ab007529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    for i in 0..<arr.count {\n        var sum = 0\n        var j = i\n        while j < arr.count {\n            sum += arr[j]\n            j += 1\n        }\n        j = i - 1\n        while j >= 0 {\n            sum += arr[j]\n            j -= 1\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmph3gjb6w8/tmph3gjb6w8.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5ca2463c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5ca215ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5ca215a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5ca21597b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph3gjb6w8                        0x0000564180112578 <unavailable> + 5496\n5    libc.so.6                          0x00002b5ca264f460 __libc_start_main + 245\n6    tmph3gjb6w8                        0x00005641801121a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumEndingHere = 0\n    for i in 0..<arr.count {\n        maxSumEndingHere = max(maxSumEndingHere + arr[i], arr[i])\n        maxSum = max(maxSum, maxSumEndingHere)\n    }\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpguy1ujg2/tmpguy1ujg2.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0d3f634c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0d3f32bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0d3f32b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0d3f32a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpguy1ujg2                        0x000055c7046d7608 <unavailable> + 5640\n5    libc.so.6                          0x00002b0d3f820460 __libc_start_main + 245\n6    tmpguy1ujg2                        0x000055c7046d7239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    for i in 0..<arr.count {\n        var sum = 0\n        var j = i\n        while j < arr.count {\n            sum += arr[j]\n            j += 1\n        }\n        j = i - 1\n        while j >= 0 {\n            sum += arr[j]\n            j -= 1\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmph3gjb6w8/tmph3gjb6w8.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5ca2463c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5ca215ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5ca215a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5ca21597b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph3gjb6w8                        0x0000564180112578 <unavailable> + 5496\n5    libc.so.6                          0x00002b5ca264f460 __libc_start_main + 245\n6    tmph3gjb6w8                        0x00005641801121a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    for i in 0..<arr.count {\n        var sum = 0\n        var j = i\n        while j < arr.count {\n            sum += arr[j]\n            j += 1\n        }\n        j = i - 1\n        while j >= 0 {\n            sum += arr[j]\n            j -= 1\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmph3gjb6w8/tmph3gjb6w8.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5ca2463c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5ca215ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5ca215a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5ca21597b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph3gjb6w8                        0x0000564180112578 <unavailable> + 5496\n5    libc.so.6                          0x00002b5ca264f460 __libc_start_main + 245\n6    tmph3gjb6w8                        0x00005641801121a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    var max_sum_ending_here = 0\n    for i in 0..<arr.count {\n        max_sum_ending_here += arr[i]\n        if max_sum_ending_here < 0 {\n            max_sum_ending_here = 0\n        }\n        if max_sum_so_far < max_sum_ending_here {\n            max_sum_so_far = max_sum_ending_here\n        }\n    }\n    max_sum = max_sum_so_far\n    max_sum_so_far = 0\n    max_sum_ending_here = 0\n    for i in stride(from: arr.count - 1, through: 0, by: -1) {\n        max_sum_ending_here += arr[i]\n        if max_sum_ending_here < 0 {\n            max_sum_ending_here = 0\n        }\n        if max_sum_so_far < max_sum_ending_here {\n            max_sum_so_far = max_sum_ending_here\n        }\n    }\n    max_sum += max_sum_so_far\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmpuzet0cbh/tmpuzet0cbh.swift:45: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b89ba100c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b89b9df7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b89b9df7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b89b9df67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuzet0cbh                        0x0000555bfe2c17a8 <unavailable> + 6056\n5    libc.so.6                          0x00002b89ba2ec460 __libc_start_main + 245\n6    tmpuzet0cbh                        0x0000555bfe2c13d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_ending_here = 0\n    for i in 0..<arr.count {\n        max_sum_ending_here += arr[i]\n        if max_sum_ending_here < 0 {\n            max_sum_ending_here = 0\n        }\n        if max_sum < max_sum_ending_here {\n            max_sum = max_sum_ending_here\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmp1uhhjrdz/tmp1uhhjrdz.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5a0926ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5a08f65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5a08f65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5a08f647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1uhhjrdz                        0x000056080fdbf578 <unavailable> + 5496\n5    libc.so.6                          0x00002b5a0945a460 __libc_start_main + 245\n6    tmp1uhhjrdz                        0x000056080fdbf1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > maxSum {\n            maxSum = sum\n        }\n    }\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmp5odo37_d/tmp5odo37_d.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7e15514c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7e1520bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7e1520b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7e1520a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5odo37_d                        0x000055af8881f578 <unavailable> + 5496\n5    libc.so.6                          0x00002b7e15700460 __libc_start_main + 245\n6    tmp5odo37_d                        0x000055af8881f1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    // find max sum of increasing sequence from left to right\n    var current_sum = 0\n    for i in 0..<arr.count {\n        current_sum += arr[i]\n        max_sum_left[i] = max(current_sum, arr[i])\n        current_sum = max_sum_left[i]\n    }\n    \n    // find max sum of increasing sequence from right to left\n    current_sum = 0\n    for i in stride(from: arr.count - 1, through: 0, by: -1) {\n        current_sum += arr[i]\n        max_sum_right[i] = max(current_sum, arr[i])\n        current_sum = max_sum_right[i]\n    }\n    \n    // find max sum of bitonic sequence\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmpb0qa9fzd/tmpb0qa9fzd.swift:45: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2c59287c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2c58f7eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2c58f7e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2c58f7d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb0qa9fzd                        0x000055d726a828f8 <unavailable> + 6392\n5    libc.so.6                          0x00002b2c59473460 __libc_start_main + 245\n6    tmpb0qa9fzd                        0x000055d726a82529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    // find max sum of increasing subsequence from left to right\n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        for j in 0..<i {\n            if arr[j] < arr[i] {\n                max_sum_left[i] = max(max_sum_left[i], max_sum_left[j] + arr[i])\n            }\n        }\n    }\n    \n    // find max sum of increasing subsequence from right to left\n    for i in stride(from: arr.count - 1, through: 0, by: -1) {\n        max_sum_right[i] = arr[i]\n        for j in stride(from: arr.count - 1, through: i, by: -1) {\n            if arr[j] < arr[i] {\n                max_sum_right[i] = max(max_sum_right[i], max_sum_right[j] + arr[i])\n            }\n        }\n    }\n    \n    // find max sum of bitonic subsequence\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var inc = [Int](repeating: 0, count: arr.count)\n    var dec = [Int](repeating: 0, count: arr.count)\n    \n    inc[0] = arr[0]\n    dec[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        inc[i] = max(inc[i - 1] + arr[i], arr[i])\n    }\n    \n    for i in (0..<arr.count - 1).reversed() {\n        dec[i] = max(dec[i + 1] + arr[i], arr[i])\n    }\n    \n    var max_sum = Int.min\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmpp52f7kdl/tmpp52f7kdl.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b153f66fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b153f366b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b153f366988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b153f3657b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpp52f7kdl                        0x00005577c2413988 <unavailable> + 6536\n5    libc.so.6                          0x00002b153f85b460 __libc_start_main + 245\n6    tmpp52f7kdl                        0x00005577c24135b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var inc = Array(repeating: 0, count: arr.count)\n    var dec = Array(repeating: 0, count: arr.count)\n    inc[0] = arr[0]\n    dec[arr.count - 1] = arr[arr.count - 1]\n    for i in 1..<arr.count {\n        inc[i] = max(inc[i - 1] + arr[i], arr[i])\n    }\n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        dec[i] = max(dec[i + 1] + arr[i], arr[i])\n    }\n    var max_sum = 0\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmpihzvjzo_/tmpihzvjzo_.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af1cc9bdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af1cc6b4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af1cc6b4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af1cc6b37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpihzvjzo_                        0x00005574d461b8f8 <unavailable> + 6392\n5    libc.so.6                          0x00002af1ccba9460 __libc_start_main + 245\n6    tmpihzvjzo_                        0x00005574d461b529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_inc = [Int](repeating: 0, count: arr.count)\n    var max_sum_dec = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_inc[0] = arr[0]\n    max_sum_dec[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_inc[i] = max(max_sum_inc[i - 1] + arr[i], arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        max_sum_dec[i] = max(max_sum_dec[i + 1] + arr[i], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_inc[i] + max_sum_dec[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmpy3lulw5v/tmpy3lulw5v.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af87d98dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af87d684b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af87d684988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af87d6837b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy3lulw5v                        0x00005570ab0078f8 <unavailable> + 6392\n5    libc.so.6                          0x00002af87db79460 __libc_start_main + 245\n6    tmpy3lulw5v                        0x00005570ab007529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    var max_sum_ending_here = 0\n    for i in 0..<arr.count {\n        max_sum_ending_here = max(arr[i], max_sum_ending_here + arr[i])\n        max_sum_so_far = max(max_sum_so_far, max_sum_ending_here)\n    }\n    max_sum = max_sum_so_far\n    max_sum_so_far = 0\n    max_sum_ending_here = 0\n    for i in (0..<arr.count).reversed() {\n        max_sum_ending_here = max(arr[i], max_sum_ending_here + arr[i])\n        max_sum_so_far = max(max_sum_so_far, max_sum_ending_here)\n    }\n    max_sum += max_sum_so_far\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmp5ib9h3yl/tmp5ib9h3yl.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002accfd4bac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002accfd1b1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002accfd1b1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002accfd1b07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5ib9h3yl                        0x000055b3304b98c8 <unavailable> + 6344\n5    libc.so.6                          0x00002accfd6a6460 __libc_start_main + 245\n6    tmp5ib9h3yl                        0x000055b3304b94f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    var j = arr.count - 1\n    while i < j {\n        if arr[i] < arr[j] {\n            sum += arr[i]\n            i += 1\n        } else if arr[i] > arr[j] {\n            sum += arr[j]\n            j -= 1\n        } else {\n            max_sum = max(max_sum, sum)\n            sum = 0\n            i += 1\n            j -= 1\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmpkcvtwoxu/tmpkcvtwoxu.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9d497f4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9d494ebb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9d494eb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9d494ea7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkcvtwoxu                        0x000055a009293478 <unavailable> + 5240\n5    libc.so.6                          0x00002b9d499e0460 __libc_start_main + 245\n6    tmpkcvtwoxu                        0x000055a0092930a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_inc = [Int](repeating: 0, count: arr.count)\n    var max_sum_dec = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_inc[i] = arr[i]\n        max_sum_dec[i] = arr[i]\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[j] < arr[i] {\n                max_sum_inc[i] = max(max_sum_inc[i], max_sum_inc[j] + arr[i])\n            }\n        }\n    }\n    \n    for i in (0..<arr.count-1).reversed() {\n        for j in (i+1..<arr.count).reversed() {\n            if arr[j] < arr[i] {\n                max_sum_dec[i] = max(max_sum_dec[i], max_sum_dec[j] + arr[i])\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_inc[i] + max_sum_dec[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    var max_sum_ending_here = 0\n    for i in 0..<arr.count {\n        max_sum_ending_here = max_sum_ending_here + arr[i]\n        if max_sum_ending_here < 0 {\n            max_sum_ending_here = 0\n        }\n        if max_sum_so_far < max_sum_ending_here {\n            max_sum_so_far = max_sum_ending_here\n        }\n    }\n    return max_sum_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmpxdpbz_ss/tmpxdpbz_ss.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba0c905bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba0c8d52b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba0c8d52988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba0c8d517b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxdpbz_ss                        0x000055aa42d9e578 <unavailable> + 5496\n5    libc.so.6                          0x00002ba0c9247460 __libc_start_main + 245\n6    tmpxdpbz_ss                        0x000055aa42d9e1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    for i in 0..<arr.count {\n        var sum = 0\n        var j = i\n        while j < arr.count {\n            sum += arr[j]\n            j += 1\n        }\n        j = i - 1\n        while j >= 0 {\n            sum += arr[j]\n            j -= 1\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmph3gjb6w8/tmph3gjb6w8.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5ca2463c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5ca215ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5ca215a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5ca21597b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph3gjb6w8                        0x0000564180112578 <unavailable> + 5496\n5    libc.so.6                          0x00002b5ca264f460 __libc_start_main + 245\n6    tmph3gjb6w8                        0x00005641801121a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    for i in 0..<arr.count {\n        var sum = 0\n        var j = i\n        while j < arr.count {\n            sum += arr[j]\n            j += 1\n        }\n        j = i - 1\n        while j >= 0 {\n            sum += arr[j]\n            j -= 1\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmph3gjb6w8/tmph3gjb6w8.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5ca2463c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5ca215ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5ca215a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5ca21597b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph3gjb6w8                        0x0000564180112578 <unavailable> + 5496\n5    libc.so.6                          0x00002b5ca264f460 __libc_start_main + 245\n6    tmph3gjb6w8                        0x00005641801121a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    for i in 0..<arr.count {\n        max_sum_arr.append(arr[i])\n        if i > 0 {\n            max_sum_arr[i] = max(max_sum_arr[i], max_sum_arr[i - 1] + arr[i])\n        }\n        max_sum = max(max_sum, max_sum_arr[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmpjdrpv36d/tmpjdrpv36d.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adb3b87dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adb3b574b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adb3b574988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adb3b5737b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjdrpv36d                        0x0000563d72a4b708 <unavailable> + 5896\n5    libc.so.6                          0x00002adb3ba69460 __libc_start_main + 245\n6    tmpjdrpv36d                        0x0000563d72a4b339 <unavailable> + 4921\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var max_sum_arr = [Int]()\n    var sum_arr = [Int]()\n    for i in 0..<arr.count {\n        sum = 0\n        for j in i..<arr.count {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n                max_sum_arr = Array(arr[i...j])\n            }\n        }\n    }\n    print(max_sum_arr)\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmp50rbghwk/tmp50rbghwk.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4c8870c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4c8567b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4c8567988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4c85667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp50rbghwk                        0x000056116797a968 <unavailable> + 6504\n5    libc.so.6                          0x00002ae4c8a5c460 __libc_start_main + 245\n6    tmp50rbghwk                        0x000056116797a599 <unavailable> + 5529\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var max_sum_arr = [Int]()\n    var sum_arr = [Int]()\n    for i in 0..<arr.count {\n        sum = 0\n        sum_arr = [Int]()\n        for j in i..<arr.count {\n            sum += arr[j]\n            sum_arr.append(arr[j])\n            if sum > max_sum {\n                max_sum = sum\n                max_sum_arr = sum_arr\n            }\n        }\n    }\n    print(max_sum_arr)\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmpprip8s6k/tmpprip8s6k.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4273fbdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4273cb4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4273cb4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4273cb37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpprip8s6k                        0x00005634361a17c8 <unavailable> + 6088\n5    libc.so.6                          0x00002b42741a9460 __libc_start_main + 245\n6    tmpprip8s6k                        0x00005634361a13f9 <unavailable> + 5113\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1] + arr[i], arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        max_sum_right[i] = max(max_sum_right[i + 1] + arr[i], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmpx8bevinu/tmpx8bevinu.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ade7419ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ade73e95b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ade73e95988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ade73e947b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx8bevinu                        0x0000562abcb608f8 <unavailable> + 6392\n5    libc.so.6                          0x00002ade7438a460 __libc_start_main + 245\n6    tmpx8bevinu                        0x0000562abcb60529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var inc = Array(repeating: 0, count: arr.count)\n    var dec = Array(repeating: 0, count: arr.count)\n    \n    inc[0] = arr[0]\n    dec[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        inc[i] = max(arr[i], inc[i - 1] + arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        dec[i] = max(arr[i], dec[i + 1] + arr[i])\n    }\n    \n    var maxSum = inc[0] + dec[0] - arr[0]\n    for i in 1..<arr.count {\n        maxSum = max(maxSum, inc[i] + dec[i] - arr[i])\n    }\n    \n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmp91v_9meb/tmp91v_9meb.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af0df594c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af0df28bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af0df28b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af0df28a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp91v_9meb                        0x0000561abc8248f8 <unavailable> + 6392\n5    libc.so.6                          0x00002af0df780460 __libc_start_main + 245\n6    tmp91v_9meb                        0x0000561abc824529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    for i in 0..<arr.count {\n        max_sum_arr.append(arr[i])\n        max_sum_arr_rev.append(arr[i])\n        max_sum_arr_rev_rev.append(arr[i])\n    }\n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_arr[i] < max_sum_arr[j] + arr[i] {\n                max_sum_arr[i] = max_sum_arr[j] + arr[i]\n            }\n        }\n    }\n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        for j in stride(from: arr.count - 1, through: i, by: -1) {\n            if arr[i] > arr[j] && max_sum_arr_rev[i] < max_sum_arr_rev[j] + arr[i] {\n                max_sum_arr_rev[i] = max_sum_arr_rev[j] + arr[i]\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        max_sum_arr_rev_rev[i] = max_sum_arr_rev[arr.count - 1 - i]\n    }\n    for i in 0..<arr.count {\n        if max_sum < max_sum_arr[i] + max_sum_arr_rev_rev[i] - arr[i] {\n            max_sum = max_sum_arr[i] + max_sum_arr_rev_rev[i] - arr[i]\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmpaj9jrz4g/tmpaj9jrz4g.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afa5b9c9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afa5b6c0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afa5b6c0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afa5b6bf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpaj9jrz4g                        0x0000556fca688898 <unavailable> + 6296\n5    libc.so.6                          0x00002afa5bbb5460 __libc_start_main + 245\n6    tmpaj9jrz4g                        0x0000556fca6884c9 <unavailable> + 5321\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    var max_sum_ending_here = 0\n    var max_sum_ending_here_so_far = 0\n    var max_sum_ending_here_so_far_index = 0\n    var max_sum_ending_here_index = 0\n    var max_sum_ending_here_index_so_far = 0\n    var max_sum_ending_here_index_so_far_index = 0\n    var max_sum_ending_here_index_so_far_index_index = 0\n    var max_sum_ending_here_index_index = 0\n    var max_sum_ending_here_index_index_index = 0\n    var max_sum_ending_here_index_index_index_index = 0\n    var max_sum_ending_here_index_index_index_index_index = 0\n    var max_sum_ending_here_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_index_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_index_index_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_index_index_index_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "/tmp/tmptk1452jz.swift:26:9: error: type annotation missing in pattern\n    var max_sum_ending\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    for i in 0..<arr.count {\n        var sum = 0\n        var j = i\n        while j < arr.count {\n            sum += arr[j]\n            j += 1\n        }\n        j = i - 1\n        while j >= 0 {\n            sum += arr[j]\n            j -= 1\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmph3gjb6w8/tmph3gjb6w8.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5ca2463c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5ca215ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5ca215a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5ca21597b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph3gjb6w8                        0x0000564180112578 <unavailable> + 5496\n5    libc.so.6                          0x00002b5ca264f460 __libc_start_main + 245\n6    tmph3gjb6w8                        0x00005641801121a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i-1] + arr[i], arr[i])\n    }\n    \n    max_sum_right[arr.count-1] = arr[arr.count-1]\n    for i in (0..<arr.count-1).reversed() {\n        max_sum_right[i] = max(max_sum_right[i+1] + arr[i], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmp2bgdf57e/tmp2bgdf57e.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b47512c9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4750fc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4750fc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4750fbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2bgdf57e                        0x000055ec1b80f988 <unavailable> + 6536\n5    libc.so.6                          0x00002b47514b5460 __libc_start_main + 245\n6    tmp2bgdf57e                        0x000055ec1b80f5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = Int.min\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        max_sum = max(max_sum, sum)\n        if sum < 0 {\n            sum = 0\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmp9d88v2e3/tmp9d88v2e3.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b04aef38c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b04aec2fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b04aec2f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b04aec2e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9d88v2e3                        0x000055ae99764608 <unavailable> + 5640\n5    libc.so.6                          0x00002b04af124460 __libc_start_main + 245\n6    tmp9d88v2e3                        0x000055ae99764239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var inc = [Int](repeating: 0, count: arr.count)\n    var dec = [Int](repeating: 0, count: arr.count)\n    inc[0] = arr[0]\n    dec[arr.count - 1] = arr[arr.count - 1]\n    for i in 1..<arr.count {\n        inc[i] = max(inc[i - 1], arr[i])\n    }\n    for i in (0..<arr.count - 1).reversed() {\n        dec[i] = max(dec[i + 1], arr[i])\n    }\n    var sum = 0\n    for i in 0..<arr.count {\n        sum = max(sum, inc[i] + dec[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmp7rxv3omz/tmp7rxv3omz.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add060ebc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add05de2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add05de2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add05de17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7rxv3omz                        0x000055aab1bd8988 <unavailable> + 6536\n5    libc.so.6                          0x00002add062d7460 __libc_start_main + 245\n6    tmp7rxv3omz                        0x000055aab1bd85b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var inc = [Int](repeating: 0, count: arr.count)\n    var dec = [Int](repeating: 0, count: arr.count)\n    inc[0] = arr[0]\n    dec[arr.count - 1] = arr[arr.count - 1]\n    for i in 1..<arr.count {\n        inc[i] = max(inc[i - 1] + arr[i], arr[i])\n    }\n    for i in (0..<arr.count - 1).reversed() {\n        dec[i] = max(dec[i + 1] + arr[i], arr[i])\n    }\n    var max_sum = inc[0] + dec[0] - arr[0]\n    for i in 1..<arr.count {\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmp7mvtlbpk/tmp7mvtlbpk.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab3c273dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab3c2434b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab3c2434988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab3c24337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7mvtlbpk                        0x0000563b7662c988 <unavailable> + 6536\n5    libc.so.6                          0x00002ab3c2929460 __libc_start_main + 245\n6    tmp7mvtlbpk                        0x0000563b7662c5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumSoFar = 0\n    var maxSumEndingHere = 0\n    for i in 0..<arr.count {\n        maxSumEndingHere += arr[i]\n        if maxSumEndingHere < 0 {\n            maxSumEndingHere = 0\n        }\n        if maxSumSoFar < maxSumEndingHere {\n            maxSumSoFar = maxSumEndingHere\n        }\n    }\n    maxSum = maxSumSoFar\n    maxSumSoFar = 0\n    maxSumEndingHere = 0\n    for i in stride(from: arr.count - 1, through: 0, by: -1) {\n        maxSumEndingHere += arr[i]\n        if maxSumEndingHere < 0 {\n            maxSumEndingHere = 0\n        }\n        if maxSumSoFar < maxSumEndingHere {\n            maxSumSoFar = maxSumEndingHere\n        }\n    }\n    maxSum += maxSumSoFar\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmp7aigfim5/tmp7aigfim5.swift:45: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba3f2b7dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba3f2874b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba3f2874988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3f28737b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7aigfim5                        0x000056527916d7a8 <unavailable> + 6056\n5    libc.so.6                          0x00002ba3f2d69460 __libc_start_main + 245\n6    tmp7aigfim5                        0x000056527916d3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumSoFar = 0\n    var maxSumEndingHere = 0\n    var maxSumEndingHereSoFar = 0\n    var maxSumEndingHereReverse = 0\n    var maxSumEndingHereReverseSoFar = 0\n    for i in 0..<arr.count {\n        maxSumEndingHere += arr[i]\n        maxSumEndingHereSoFar = max(maxSumEndingHere, maxSumEndingHereSoFar)\n        maxSumEndingHereReverse += arr[arr.count - 1 - i]\n        maxSumEndingHereReverseSoFar = max(maxSumEndingHereReverse, maxSumEndingHereReverseSoFar)\n    }\n    maxSum = max(maxSumEndingHereSoFar, maxSumEndingHereReverseSoFar)\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpzm5meo_u/tmpzm5meo_u.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b484245bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4842152b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4842152988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b48421517b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzm5meo_u                        0x0000563b1474d608 <unavailable> + 5640\n5    libc.so.6                          0x00002b4842647460 __libc_start_main + 245\n6    tmpzm5meo_u                        0x0000563b1474d239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "/tmp/tmpd6wi3xep.swift:22:9: error: type annotation missing in pattern\n    var max_sum_arr_rev_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "/tmp/tmpd6wi3xep.swift:22:9: error: type annotation missing in pattern\n    var max_sum_arr_rev_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumEndingHere = 0\n    var maxSumStartingHere = 0\n    var maxSumStartingHereEndingHere = 0\n    for i in 0..<arr.count {\n        maxSumEndingHere = max(arr[i], maxSumEndingHere + arr[i])\n        maxSum = max(maxSum, maxSumEndingHere)\n        maxSumStartingHereEndingHere = max(arr[i], maxSumStartingHereEndingHere + arr[i])\n        maxSumStartingHere = max(maxSumStartingHere, maxSumStartingHereEndingHere)\n    }\n    return maxSum - maxSumStartingHere\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpvi4cqi2_/tmpvi4cqi2_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b474cc07c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b474c8feb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b474c8fe988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b474c8fd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvi4cqi2_                        0x000055f1db073608 <unavailable> + 5640\n5    libc.so.6                          0x00002b474cdf3460 __libc_start_main + 245\n6    tmpvi4cqi2_                        0x000055f1db073239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpuj10ro26/tmpuj10ro26.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf6d098c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf6cd8fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf6cd8f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf6cd8e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuj10ro26                        0x000055a76b5af578 <unavailable> + 5496\n5    libc.so.6                          0x00002abf6d284460 __libc_start_main + 245\n6    tmpuj10ro26                        0x000055a76b5af1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1] + arr[i], arr[i])\n    }\n    \n    for i in (0..<arr.count - 1).reversed() {\n        max_sum_right[i] = max(max_sum_right[i + 1] + arr[i], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpaydfeuyc/tmpaydfeuyc.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ade1714bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ade16e42b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ade16e42988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ade16e417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpaydfeuyc                        0x000055818860e988 <unavailable> + 6536\n5    libc.so.6                          0x00002ade17337460 __libc_start_main + 245\n6    tmpaydfeuyc                        0x000055818860e5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        max_sum_right[i] = arr[i]\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_left[i] < max_sum_left[j] + arr[i] {\n                max_sum_left[i] = max_sum_left[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        for j in stride(from: arr.count - 1, through: i + 1, by: -1) {\n            if arr[i] > arr[j] && max_sum_right[i] < max_sum_right[j] + arr[i] {\n                max_sum_right[i] = max_sum_right[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    // max sum from left to right\n    for i in 0..<arr.count {\n        if i == 0 {\n            max_sum_left[i] = arr[i]\n        } else {\n            max_sum_left[i] = max(max_sum_left[i-1] + arr[i], arr[i])\n        }\n    }\n    \n    // max sum from right to left\n    for i in (0..<arr.count).reversed() {\n        if i == arr.count - 1 {\n            max_sum_right[i] = arr[i]\n        } else {\n            max_sum_right[i] = max(max_sum_right[i+1] + arr[i], arr[i])\n        }\n    }\n    \n    // max sum of bitonic subsequence\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmptumtg7cj/tmptumtg7cj.swift:47: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b38e485ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b38e4551b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b38e4551988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b38e45507b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptumtg7cj                        0x000055c81670e988 <unavailable> + 6536\n5    libc.so.6                          0x00002b38e4a46460 __libc_start_main + 245\n6    tmptumtg7cj                        0x000055c81670e5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        max_sum_left[i] = max(max_sum_left[i-1], sum)\n    }\n    \n    sum = 0\n    for i in stride(from: arr.count-1, through: 0, by: -1) {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        max_sum_right[i] = max(max_sum_right[i+1], sum)\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b795c35cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b795c053561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b795c053286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b795c05313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b795c052bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b795be53e83 <unavailable> + 188035\n6    tmpj0pgdf3d                        0x0000564165ed6d87 <unavailable> + 7559\n7    tmpj0pgdf3d                        0x0000564165ed6878 <unavailable> + 6264\n8    libc.so.6                          0x00002b795c548460 __libc_start_main + 245\n9    tmpj0pgdf3d                        0x0000564165ed6529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        max_sum_right[i] = arr[i]\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_left[i] < max_sum_left[j] + arr[i] {\n                max_sum_left[i] = max_sum_left[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        for j in stride(from: arr.count - 1, through: i + 1, by: -1) {\n            if arr[i] > arr[j] && max_sum_right[i] < max_sum_right[j] + arr[i] {\n                max_sum_right[i] = max_sum_right[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        if max_sum < max_sum_left[i] + max_sum_right[i] - arr[i] {\n            max_sum = max_sum_left[i] + max_sum_right[i] - arr[i]\n        }\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        if i > 0 && arr[i] > arr[i-1] {\n            max_sum_left[i] += max_sum_left[i-1]\n        }\n    }\n    \n    for i in (0..<arr.count).reversed() {\n        max_sum_right[i] = arr[i]\n        if i < arr.count-1 && arr[i] > arr[i+1] {\n            max_sum_right[i] += max_sum_right[i+1]\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpoypj0jfw/tmpoypj0jfw.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b392861bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3928312b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3928312988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b39283117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpoypj0jfw                        0x0000564cce79f988 <unavailable> + 6536\n5    libc.so.6                          0x00002b3928807460 __libc_start_main + 245\n6    tmpoypj0jfw                        0x0000564cce79f5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1] + arr[i], arr[i])\n    }\n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        max_sum_right[i] = max(max_sum_right[i + 1] + arr[i], arr[i])\n    }\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpi6v5kiv1/tmpi6v5kiv1.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b84596a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b845939fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b845939f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b845939e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpi6v5kiv1                        0x00005601512ea8f8 <unavailable> + 6392\n5    libc.so.6                          0x00002b8459894460 __libc_start_main + 245\n6    tmpi6v5kiv1                        0x00005601512ea529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    var max_sum_left_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        if i > 0 && arr[i] > arr[i-1] {\n            max_sum_left[i] = max_sum_left[i-1] + arr[i]\n        }\n    }\n    \n    for i in stride(from: arr.count-1, through: 0, by: -1) {\n        max_sum_right[i] = arr[i]\n        if i < arr.count-1 && arr[i] > arr[i+1] {\n            max_sum_right[i] = max_sum_right[i+1] + arr[i]\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum_left_right[i] = max_sum_left[i] + max_sum_right[i] - arr[i]\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left_right[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmp_o9_pnf3/tmp_o9_pnf3.swift:47: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afb11d17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afb11a0eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afb11a0e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afb11a0d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_o9_pnf3                        0x0000559e2cbc78f8 <unavailable> + 6392\n5    libc.so.6                          0x00002afb11f03460 __libc_start_main + 245\n6    tmp_o9_pnf3                        0x0000559e2cbc7529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var inc = [Int](repeating: 0, count: arr.count)\n    var dec = [Int](repeating: 0, count: arr.count)\n    \n    inc[0] = arr[0]\n    dec[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        inc[i] = max(inc[i - 1] + arr[i], arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        dec[i] = max(dec[i + 1] + arr[i], arr[i])\n    }\n    \n    var max_val = Int.min\n    for i in 0..<arr.count {\n        max_val = max(max_val, inc[i] + dec[i] - arr[i])\n    }\n    \n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpmcxxuhin/tmpmcxxuhin.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae0d2f2dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae0d2c24b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae0d2c24988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae0d2c237b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmcxxuhin                        0x00005651b103d8f8 <unavailable> + 6392\n5    libc.so.6                          0x00002ae0d3119460 __libc_start_main + 245\n6    tmpmcxxuhin                        0x00005651b103d529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    // max sum from left to right\n    max_sum_left[0] = arr[0]\n    for i in 1..<arr.count {\n        max_sum_left[i] = max(arr[i], max_sum_left[i-1] + arr[i])\n    }\n    \n    // max sum from right to left\n    max_sum_right[arr.count-1] = arr[arr.count-1]\n    for i in stride(from: arr.count-2, through: 0, by: -1) {\n        max_sum_right[i] = max(arr[i], max_sum_right[i+1] + arr[i])\n    }\n    \n    // max sum of bitonic subsequence\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpvs6ujcoi/tmpvs6ujcoi.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1dfc5a3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1dfc29ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1dfc29a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1dfc2997b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvs6ujcoi                        0x0000558d945c88f8 <unavailable> + 6392\n5    libc.so.6                          0x00002b1dfc78f460 __libc_start_main + 245\n6    tmpvs6ujcoi                        0x0000558d945c8529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    for i in 0..<arr.count {\n        var sum = 0\n        var j = i\n        while j < arr.count {\n            sum += arr[j]\n            j += 1\n        }\n        j = i - 1\n        while j >= 0 {\n            sum += arr[j]\n            j -= 1\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmph3gjb6w8/tmph3gjb6w8.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5ca2463c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5ca215ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5ca215a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5ca21597b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph3gjb6w8                        0x0000564180112578 <unavailable> + 5496\n5    libc.so.6                          0x00002b5ca264f460 __libc_start_main + 245\n6    tmph3gjb6w8                        0x00005641801121a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    for i in 1..<arr.count {\n        max_sum_left[i] = max(arr[i], max_sum_left[i - 1] + arr[i])\n    }\n    for i in (0..<arr.count - 1).reversed() {\n        max_sum_right[i] = max(arr[i], max_sum_right[i + 1] + arr[i])\n    }\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmp1x__z7wb/tmp1x__z7wb.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aec1f667c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aec1f35eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aec1f35e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aec1f35d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1x__z7wb                        0x00005650a2ecb988 <unavailable> + 6536\n5    libc.so.6                          0x00002aec1f853460 __libc_start_main + 245\n6    tmp1x__z7wb                        0x00005650a2ecb5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpzyrm0vx5/tmpzyrm0vx5.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae583b4bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae583842b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae583842988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae5838417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzyrm0vx5                        0x000055ced0c9d578 <unavailable> + 5496\n5    libc.so.6                          0x00002ae583d37460 __libc_start_main + 245\n6    tmpzyrm0vx5                        0x000055ced0c9d1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    for i in 0..<arr.count {\n        var sum = 0\n        var sum_arr = [Int]()\n        for j in i..<arr.count {\n            if sum_arr.count == 0 {\n                sum_arr.append(arr[j])\n            } else if sum_arr.last! <= arr[j] {\n                sum_arr.append(arr[j])\n            } else {\n                break\n            }\n        }\n        for j in (0..<i).reversed() {\n            if sum_arr.last! <= arr[j] {\n                sum_arr.append(arr[j])\n            } else {\n                break\n            }\n        }\n        sum = sum_arr.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_sum_arr = sum_arr\n        }\n    }\n    print(max_sum_arr)\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpjqhjkf0f/tmpjqhjkf0f.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9e21389c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9e21080b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9e21080988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9e2107f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjqhjkf0f                        0x000055bbdf0c5b98 <unavailable> + 7064\n5    libc.so.6                          0x00002b9e21575460 __libc_start_main + 245\n6    tmpjqhjkf0f                        0x000055bbdf0c57c9 <unavailable> + 6089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    var j = arr.count - 1\n    while i < j {\n        if arr[i] < arr[j] {\n            sum += arr[i]\n            i += 1\n        } else if arr[i] > arr[j] {\n            sum += arr[j]\n            j -= 1\n        } else {\n            max_sum = max(max_sum, sum)\n            sum = 0\n            i += 1\n            j -= 1\n        }\n    }\n    max_sum = max(max_sum, sum)\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmp4p74x5jf/tmp4p74x5jf.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b111ad13c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b111aa0ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b111aa0a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b111aa097b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4p74x5jf                        0x000055ee5c2df478 <unavailable> + 5240\n5    libc.so.6                          0x00002b111aeff460 __libc_start_main + 245\n6    tmp4p74x5jf                        0x000055ee5c2df0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    // calculate max sum left\n    for i in 0..<arr.count {\n        if i == 0 {\n            max_sum_left[i] = arr[i]\n        } else {\n            max_sum_left[i] = max(max_sum_left[i-1] + arr[i], arr[i])\n        }\n    }\n    \n    // calculate max sum right\n    for i in (0..<arr.count).reversed() {\n        if i == arr.count - 1 {\n            max_sum_right[i] = arr[i]\n        } else {\n            max_sum_right[i] = max(max_sum_right[i+1] + arr[i], arr[i])\n        }\n    }\n    \n    // calculate max sum\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpkl2miers/tmpkl2miers.swift:47: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad2816f2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad2813e9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad2813e9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad2813e87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkl2miers                        0x000055dab0a69988 <unavailable> + 6536\n5    libc.so.6                          0x00002ad2818de460 __libc_start_main + 245\n6    tmpkl2miers                        0x000055dab0a695b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpzyrm0vx5/tmpzyrm0vx5.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae583b4bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae583842b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae583842988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae5838417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzyrm0vx5                        0x000055ced0c9d578 <unavailable> + 5496\n5    libc.so.6                          0x00002ae583d37460 __libc_start_main + 245\n6    tmpzyrm0vx5                        0x000055ced0c9d1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    for i in 0..<arr.count {\n        var max_sum_left = 0\n        var max_sum_right = 0\n        var j = i - 1\n        while j >= 0 {\n            if arr[j] < arr[j + 1] {\n                max_sum_left += arr[j]\n            }\n            j -= 1\n        }\n        j = i + 1\n        while j < arr.count {\n            if arr[j] < arr[j - 1] {\n                max_sum_right += arr[j]\n            }\n            j += 1\n        }\n        max_sum = max(max_sum, max_sum_left + max_sum_right + arr[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpic5y9d2i/tmpic5y9d2i.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2d2a278c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2d29f6fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2d29f6f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2d29f6e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpic5y9d2i                        0x0000557a0dc17608 <unavailable> + 5640\n5    libc.so.6                          0x00002b2d2a464460 __libc_start_main + 245\n6    tmpic5y9d2i                        0x0000557a0dc17239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    for i in 0..<arr.count {\n        var sum = 0\n        for j in i..<arr.count {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n                max_sum_arr = Array(arr[i...j])\n            }\n        }\n    }\n    print(max_sum_arr)\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmp_80zg9ui/tmp_80zg9ui.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfcb32bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfcb022b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfcb022988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfcb0217b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_80zg9ui                        0x0000564fd704d968 <unavailable> + 6504\n5    libc.so.6                          0x00002adfcb517460 __libc_start_main + 245\n6    tmp_80zg9ui                        0x0000564fd704d599 <unavailable> + 5529\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1], arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        max_sum_right[i] = max(max_sum_right[i + 1], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpg9_enm5w/tmpg9_enm5w.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8abe87fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8abe576b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8abe576988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8abe5757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg9_enm5w                        0x000055712d9b78f8 <unavailable> + 6392\n5    libc.so.6                          0x00002b8abea6b460 __libc_start_main + 245\n6    tmpg9_enm5w                        0x000055712d9b7529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    var j = arr.count - 1\n    while i < j {\n        if arr[i] < arr[j] {\n            sum += arr[i]\n            i += 1\n        } else {\n            sum += arr[j]\n            j -= 1\n        }\n        max_sum = max(max_sum, sum)\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmp6_fbhe3m/tmp6_fbhe3m.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6449b9bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6449892b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6449892988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b64498917b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6_fbhe3m                        0x000055c143997478 <unavailable> + 5240\n5    libc.so.6                          0x00002b6449d87460 __libc_start_main + 245\n6    tmp6_fbhe3m                        0x000055c1439970a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    var j = arr.count - 1\n    while i < j {\n        if arr[i] < arr[j] {\n            sum += arr[i]\n            i += 1\n        } else {\n            sum += arr[j]\n            j -= 1\n        }\n        max_sum = max(max_sum, sum)\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmp6_fbhe3m/tmp6_fbhe3m.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6449b9bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6449892b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6449892988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b64498917b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6_fbhe3m                        0x000055c143997478 <unavailable> + 5240\n5    libc.so.6                          0x00002b6449d87460 __libc_start_main + 245\n6    tmp6_fbhe3m                        0x000055c1439970a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var inc = [Int](repeating: 0, count: arr.count)\n    var dec = [Int](repeating: 0, count: arr.count)\n    \n    inc[0] = arr[0]\n    dec[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        inc[i] = max(inc[i - 1], arr[i])\n    }\n    \n    for i in (0..<arr.count - 1).reversed() {\n        dec[i] = max(dec[i + 1], arr[i])\n    }\n    \n    var sum = 0\n    for i in 0..<arr.count {\n        sum += max(inc[i], dec[i])\n    }\n    \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmp552qanp4/tmp552qanp4.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa8ed0ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa8ea01b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa8ea01988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa8ea007b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp552qanp4                        0x0000557cc4b41988 <unavailable> + 6536\n5    libc.so.6                          0x00002baa8eef6460 __libc_start_main + 245\n6    tmp552qanp4                        0x0000557cc4b415b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpuj10ro26/tmpuj10ro26.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf6d098c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf6cd8fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf6cd8f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf6cd8e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuj10ro26                        0x000055a76b5af578 <unavailable> + 5496\n5    libc.so.6                          0x00002abf6d284460 __libc_start_main + 245\n6    tmpuj10ro26                        0x000055a76b5af1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_ending_here = 0\n    var max_sum_so_far = 0\n    var max_sum_ending_here_reverse = 0\n    var max_sum_so_far_reverse = 0\n    for i in 0..<arr.count {\n        max_sum_ending_here += arr[i]\n        if max_sum_ending_here < 0 {\n            max_sum_ending_here = 0\n        }\n        if max_sum_so_far < max_sum_ending_here {\n            max_sum_so_far = max_sum_ending_here\n        }\n    }\n    for i in stride(from: arr.count - 1, through: 0, by: -1) {\n        max_sum_ending_here_reverse += arr[i]\n        if max_sum_ending_here_reverse < 0 {\n            max_sum_ending_here_reverse = 0\n        }\n        if max_sum_so_far_reverse < max_sum_ending_here_reverse {\n            max_sum_so_far_reverse = max_sum_ending_here_reverse\n        }\n    }\n    max_sum = max_sum_so_far + max_sum_so_far_reverse\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmp20oga881/tmp20oga881.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afa3ca24c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afa3c71bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afa3c71b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afa3c71a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp20oga881                        0x000055eb12cbf7a8 <unavailable> + 6056\n5    libc.so.6                          0x00002afa3cc10460 __libc_start_main + 245\n6    tmp20oga881                        0x000055eb12cbf3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumSoFar = 0\n    var maxSumEndingHere = 0\n    for i in 0..<arr.count {\n        maxSumEndingHere = max(arr[i], maxSumEndingHere + arr[i])\n        maxSumSoFar = max(maxSumSoFar, maxSumEndingHere)\n    }\n    maxSum = maxSumSoFar\n    maxSumSoFar = 0\n    maxSumEndingHere = 0\n    for i in stride(from: arr.count - 1, through: 0, by: -1) {\n        maxSumEndingHere = max(arr[i], maxSumEndingHere + arr[i])\n        maxSumSoFar = max(maxSumSoFar, maxSumEndingHere)\n    }\n    maxSum += maxSumSoFar\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmppm6ytvoq/tmppm6ytvoq.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adc98451c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adc98148b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adc98148988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adc981477b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppm6ytvoq                        0x000055f8987fb828 <unavailable> + 6184\n5    libc.so.6                          0x00002adc9863d460 __libc_start_main + 245\n6    tmppm6ytvoq                        0x000055f8987fb459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpuj10ro26/tmpuj10ro26.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf6d098c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf6cd8fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf6cd8f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf6cd8e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuj10ro26                        0x000055a76b5af578 <unavailable> + 5496\n5    libc.so.6                          0x00002abf6d284460 __libc_start_main + 245\n6    tmpuj10ro26                        0x000055a76b5af1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    while i < arr.count {\n        sum += arr[i]\n        if sum > max_sum {\n            max_sum = sum\n        }\n        i += 1\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpm5w2hwwo/tmpm5w2hwwo.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b375256dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3752264b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3752264988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b37522637b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm5w2hwwo                        0x000055ef2def83e8 <unavailable> + 5096\n5    libc.so.6                          0x00002b3752759460 __libc_start_main + 245\n6    tmpm5w2hwwo                        0x000055ef2def8019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    var j = arr.count - 1\n    while i < j {\n        if arr[i] < arr[j] {\n            sum += arr[i]\n            i += 1\n        } else {\n            sum += arr[j]\n            j -= 1\n        }\n        max_sum = max(max_sum, sum)\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmp6_fbhe3m/tmp6_fbhe3m.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6449b9bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6449892b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6449892988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b64498917b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6_fbhe3m                        0x000055c143997478 <unavailable> + 5240\n5    libc.so.6                          0x00002b6449d87460 __libc_start_main + 245\n6    tmp6_fbhe3m                        0x000055c1439970a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    // TODO: Implement solution\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpa0t9s30q/tmpa0t9s30q.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5b239fdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5b236f4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5b236f4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5b236f37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa0t9s30q                        0x000055a685927338 <unavailable> + 4920\n5    libc.so.6                          0x00002b5b23be9460 __libc_start_main + 245\n6    tmpa0t9s30q                        0x000055a685926f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i-1] + arr[i], arr[i])\n    }\n    \n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        max_sum_right[i] = max(max_sum_right[i+1] + arr[i], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpdpuptk5m/tmpdpuptk5m.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1581609c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1581300b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1581300988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b15812ff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdpuptk5m                        0x0000558464d0e8f8 <unavailable> + 6392\n5    libc.so.6                          0x00002b15817f5460 __libc_start_main + 245\n6    tmpdpuptk5m                        0x0000558464d0e529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        max_sum_right[i] = arr[i]\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_left[i] < max_sum_left[j] + arr[i] {\n                max_sum_left[i] = max_sum_left[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        for j in stride(from: arr.count - 1, through: i + 1, by: -1) {\n            if arr[i] > arr[j] && max_sum_right[i] < max_sum_right[j] + arr[i] {\n                max_sum_right[i] = max_sum_right[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        if max_sum < max_sum_left[i] + max_sum_right[i] - arr[i] {\n            max_sum = max_sum_left[i] + max_sum_right[i] - arr[i]\n        }\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    var j = arr.count - 1\n    while i < j {\n        if arr[i] < arr[j] {\n            sum += arr[i]\n            i += 1\n        } else {\n            sum += arr[j]\n            j -= 1\n        }\n        max_sum = max(max_sum, sum)\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmp6_fbhe3m/tmp6_fbhe3m.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6449b9bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6449892b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6449892988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b64498917b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6_fbhe3m                        0x000055c143997478 <unavailable> + 5240\n5    libc.so.6                          0x00002b6449d87460 __libc_start_main + 245\n6    tmp6_fbhe3m                        0x000055c1439970a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum = max(arr[i], sum + arr[i])\n        max_sum = max(max_sum, sum)\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpqdll4yox/tmpqdll4yox.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aea2ebcfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aea2e8c6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aea2e8c6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aea2e8c57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqdll4yox                        0x0000556df01a7608 <unavailable> + 5640\n5    libc.so.6                          0x00002aea2edbb460 __libc_start_main + 245\n6    tmpqdll4yox                        0x0000556df01a7239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpuj10ro26/tmpuj10ro26.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf6d098c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf6cd8fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf6cd8f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf6cd8e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuj10ro26                        0x000055a76b5af578 <unavailable> + 5496\n5    libc.so.6                          0x00002abf6d284460 __libc_start_main + 245\n6    tmpuj10ro26                        0x000055a76b5af1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1] + arr[i], arr[i])\n    }\n    for i in (0..<arr.count - 1).reversed() {\n        max_sum_right[i] = max(max_sum_right[i + 1] + arr[i], arr[i])\n    }\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpm0q7558o/tmpm0q7558o.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5a2d511c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5a2d208b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5a2d208988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5a2d2077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm0q7558o                        0x00005585e2978988 <unavailable> + 6536\n5    libc.so.6                          0x00002b5a2d6fd460 __libc_start_main + 245\n6    tmpm0q7558o                        0x00005585e29785b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    for i in 0..<arr.count {\n        var sum = 0\n        var sum_arr = [Int]()\n        for j in i..<arr.count {\n            sum += arr[j]\n            sum_arr.append(arr[j])\n            if sum > max_sum {\n                max_sum = sum\n                max_sum_arr = sum_arr\n            }\n        }\n    }\n    print(max_sum_arr)\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmprbk1mb6r/tmprbk1mb6r.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b14144c0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b14141b7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b14141b7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b14141b67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprbk1mb6r                        0x000055bbd03827c8 <unavailable> + 6088\n5    libc.so.6                          0x00002b14146ac460 __libc_start_main + 245\n6    tmprbk1mb6r                        0x000055bbd03823f9 <unavailable> + 5113\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    // Find the max sum of increasing subsequence from left to right\n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        for j in 0..<i {\n            if arr[j] < arr[i] {\n                max_sum_left[i] = max(max_sum_left[i], max_sum_left[j] + arr[i])\n            }\n        }\n    }\n    \n    // Find the max sum of increasing subsequence from right to left\n    for i in stride(from: arr.count - 1, through: 0, by: -1) {\n        max_sum_right[i] = arr[i]\n        for j in stride(from: arr.count - 1, through: i + 1, by: -1) {\n            if arr[j] < arr[i] {\n                max_sum_right[i] = max(max_sum_right[i], max_sum_right[j] + arr[i])\n            }\n        }\n    }\n    \n    // Find the max sum of bitonic subsequence\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    var j = arr.count - 1\n    while i < j {\n        if arr[i] < arr[j] {\n            sum += arr[i]\n            i += 1\n        } else {\n            sum += arr[j]\n            j -= 1\n        }\n        max_sum = max(max_sum, sum)\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmp6_fbhe3m/tmp6_fbhe3m.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6449b9bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6449892b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6449892988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b64498917b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6_fbhe3m                        0x000055c143997478 <unavailable> + 5240\n5    libc.so.6                          0x00002b6449d87460 __libc_start_main + 245\n6    tmp6_fbhe3m                        0x000055c1439970a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_reverse = [Int]()\n    var max_sum_arr_reverse_reverse = [Int]()\n    var max_sum_arr_reverse_reverse_reverse = [Int]()\n    var max_sum_arr_reverse_reverse_reverse_reverse = [Int]()\n    var max_sum_arr_reverse_reverse_reverse_reverse_reverse = [Int]()\n    var max_sum_arr_reverse_reverse_reverse_reverse_reverse_reverse = [Int]()\n    var max_sum_arr_reverse_reverse_reverse_reverse_reverse_reverse_reverse = [Int]()\n    var max_sum_arr_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = [Int]()\n    var max_sum_arr_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = [Int]()\n    var max_sum_arr_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = [Int]()\n    var max_sum_arr_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = [Int]()\n    var max_sum_arr_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = [Int]()\n    var max_sum_arr_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = [Int]()\n    var max_sum_arr_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = [Int]()\n    var max_sum_arr_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = [Int]()\n    var max_sum_arr_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = [Int]()\n    var max_sum_arr_reverse_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "/tmp/tmpsvekjeal.swift:22:9: error: type annotation missing in pattern\n    var max_sum_arr_reverse_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_ending_here = 0\n    var max_sum_so_far = 0\n    for i in 0..<arr.count {\n        max_sum_ending_here = max(arr[i], max_sum_ending_here + arr[i])\n        max_sum_so_far = max(max_sum_so_far, max_sum_ending_here)\n    }\n    return max_sum_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpm5xeoiz5/tmpm5xeoiz5.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab06c701c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab06c3f8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab06c3f8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab06c3f77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm5xeoiz5                        0x0000564ce693d608 <unavailable> + 5640\n5    libc.so.6                          0x00002ab06c8ed460 __libc_start_main + 245\n6    tmpm5xeoiz5                        0x0000564ce693d239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumEndingHere = 0\n    var maxSumSoFar = 0\n    var maxSumEndingHereNeg = 0\n    var maxSumSoFarNeg = 0\n    for i in 0..<arr.count {\n        maxSumEndingHere += arr[i]\n        if maxSumEndingHere < 0 {\n            maxSumEndingHere = 0\n        }\n        if maxSumSoFar < maxSumEndingHere {\n            maxSumSoFar = maxSumEndingHere\n        }\n        maxSumEndingHereNeg += arr[arr.count - 1 - i]\n        if maxSumEndingHereNeg < 0 {\n            maxSumEndingHereNeg = 0\n        }\n        if maxSumSoFarNeg < maxSumEndingHereNeg {\n            maxSumSoFarNeg = maxSumEndingHereNeg\n        }\n    }\n    maxSum = maxSumSoFar + maxSumSoFarNeg\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpqymnb_rd/tmpqymnb_rd.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b611e2f1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b611dfe8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b611dfe8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b611dfe77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqymnb_rd                        0x00005610b094d578 <unavailable> + 5496\n5    libc.so.6                          0x00002b611e4dd460 __libc_start_main + 245\n6    tmpqymnb_rd                        0x00005610b094d1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1] + arr[i], arr[i])\n    }\n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        max_sum_right[i] = max(max_sum_right[i + 1] + arr[i], arr[i])\n    }\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpi6v5kiv1/tmpi6v5kiv1.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b84596a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b845939fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b845939f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b845939e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpi6v5kiv1                        0x00005601512ea8f8 <unavailable> + 6392\n5    libc.so.6                          0x00002b8459894460 __libc_start_main + 245\n6    tmpi6v5kiv1                        0x00005601512ea529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "/tmp/tmpd6wi3xep.swift:22:9: error: type annotation missing in pattern\n    var max_sum_arr_rev_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_ending_here = 0\n    var max_sum_ending_here_reverse = 0\n    var max_sum_ending_here_reverse_temp = 0\n    var max_sum_ending_here_temp = 0\n    for i in 0..<arr.count {\n        max_sum_ending_here_temp = max_sum_ending_here + arr[i]\n        max_sum_ending_here = max(max_sum_ending_here_temp, arr[i])\n        max_sum_ending_here_reverse_temp = max_sum_ending_here_reverse + arr[arr.count - 1 - i]\n        max_sum_ending_here_reverse = max(max_sum_ending_here_reverse_temp, arr[arr.count - 1 - i])\n        max_sum = max(max_sum, max_sum_ending_here + max_sum_ending_here_reverse - arr[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpyoslsqab/tmpyoslsqab.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abcd59b6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abcd56adb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abcd56ad988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abcd56ac7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyoslsqab                        0x000055c021330608 <unavailable> + 5640\n5    libc.so.6                          0x00002abcd5ba2460 __libc_start_main + 245\n6    tmpyoslsqab                        0x000055c021330239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_ending_here = 0\n    var max_sum_so_far = 0\n    var max_sum_ending_here_reverse = 0\n    var max_sum_so_far_reverse = 0\n    for i in 0..<arr.count {\n        max_sum_ending_here += arr[i]\n        if max_sum_ending_here < 0 {\n            max_sum_ending_here = 0\n        }\n        if max_sum_so_far < max_sum_ending_here {\n            max_sum_so_far = max_sum_ending_here\n        }\n        max_sum_ending_here_reverse += arr[arr.count - i - 1]\n        if max_sum_ending_here_reverse < 0 {\n            max_sum_ending_here_reverse = 0\n        }\n        if max_sum_so_far_reverse < max_sum_ending_here_reverse {\n            max_sum_so_far_reverse = max_sum_ending_here_reverse\n        }\n    }\n    max_sum = max_sum_so_far + max_sum_so_far_reverse\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpsgu0iaz9/tmpsgu0iaz9.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b528ef54c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b528ec4bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b528ec4b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b528ec4a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsgu0iaz9                        0x0000560ef5692578 <unavailable> + 5496\n5    libc.so.6                          0x00002b528f140460 __libc_start_main + 245\n6    tmpsgu0iaz9                        0x0000560ef56921a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumSoFar = 0\n    for i in 0..<arr.count {\n        maxSumSoFar += arr[i]\n        if maxSumSoFar < 0 {\n            maxSumSoFar = 0\n        }\n        if maxSum < maxSumSoFar {\n            maxSum = maxSumSoFar\n        }\n    }\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpa94y8u2z/tmpa94y8u2z.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6b67d3dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6b67a34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6b67a34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6b67a337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa94y8u2z                        0x000055b1c0e45578 <unavailable> + 5496\n5    libc.so.6                          0x00002b6b67f29460 __libc_start_main + 245\n6    tmpa94y8u2z                        0x000055b1c0e451a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumLeft = [Int](repeating: 0, count: arr.count)\n    var maxSumRight = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        maxSumLeft[i] = arr[i]\n        maxSumRight[i] = arr[i]\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && maxSumLeft[i] < maxSumLeft[j] + arr[i] {\n                maxSumLeft[i] = maxSumLeft[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        for j in stride(from: arr.count - 1, through: i + 1, by: -1) {\n            if arr[i] > arr[j] && maxSumRight[i] < maxSumRight[j] + arr[i] {\n                maxSumRight[i] = maxSumRight[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        maxSum = max(maxSum, maxSumLeft[i] + maxSumRight[i] - arr[i])\n    }\n    \n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var sum = 0\n    var max = 0\n    for i in 0..<arr.count {\n        if arr[i] > max {\n            max = arr[i]\n            sum += arr[i]\n        } else {\n            if sum > maxSum {\n                maxSum = sum\n            }\n            sum = 0\n        }\n    }\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmphdpfnsdd/tmphdpfnsdd.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b12b9650c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b12b9347b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b12b9347988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b12b93467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphdpfnsdd                        0x000055e5cfd7a578 <unavailable> + 5496\n5    libc.so.6                          0x00002b12b983c460 __libc_start_main + 245\n6    tmphdpfnsdd                        0x000055e5cfd7a1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        max_sum_right[i] = arr[i]\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_left[i] < max_sum_left[j] + arr[i] {\n                max_sum_left[i] = max_sum_left[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        for j in stride(from: arr.count - 1, through: i + 1, by: -1) {\n            if arr[i] > arr[j] && max_sum_right[i] < max_sum_right[j] + arr[i] {\n                max_sum_right[i] = max_sum_right[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        if max_sum < max_sum_left[i] + max_sum_right[i] - arr[i] {\n            max_sum = max_sum_left[i] + max_sum_right[i] - arr[i]\n        }\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var sum = 0\n    var i = 0\n    var j = arr.count - 1\n    \n    while i < j {\n        if arr[i] < arr[j] {\n            sum += arr[i]\n            i += 1\n        } else if arr[i] > arr[j] {\n            sum += arr[j]\n            j -= 1\n        } else {\n            maxSum = max(maxSum, sum)\n            sum = 0\n            i += 1\n            j -= 1\n        }\n    }\n    \n    return max(maxSum, sum)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpl197q0pi/tmpl197q0pi.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac378cd2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac3789c9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac3789c9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac3789c87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl197q0pi                        0x000055562ce13478 <unavailable> + 5240\n5    libc.so.6                          0x00002ac378ebe460 __libc_start_main + 245\n6    tmpl197q0pi                        0x000055562ce130a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1], arr[i])\n    }\n    \n    for i in (0..<arr.count - 1).reversed() {\n        max_sum_right[i] = max(max_sum_right[i + 1], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmplanu104c/tmplanu104c.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6eacfd1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6eaccc8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6eaccc8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6eaccc77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplanu104c                        0x000055a6a1dcc988 <unavailable> + 6536\n5    libc.so.6                          0x00002b6ead1bd460 __libc_start_main + 245\n6    tmplanu104c                        0x000055a6a1dcc5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_ending_here = 0\n    var max_sum_so_far = 0\n    for i in 0..<arr.count {\n        max_sum_ending_here = max(arr[i], max_sum_ending_here + arr[i])\n        max_sum_so_far = max(max_sum_so_far, max_sum_ending_here)\n    }\n    return max_sum_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpm5xeoiz5/tmpm5xeoiz5.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab06c701c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab06c3f8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab06c3f8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab06c3f77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm5xeoiz5                        0x0000564ce693d608 <unavailable> + 5640\n5    libc.so.6                          0x00002ab06c8ed460 __libc_start_main + 245\n6    tmpm5xeoiz5                        0x0000564ce693d239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "/tmp/tmpd6wi3xep.swift:22:9: error: type annotation missing in pattern\n    var max_sum_arr_rev_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumSoFar = 0\n    var maxSumEndingHere = 0\n    for i in 0..<arr.count {\n        maxSumEndingHere = max(arr[i], maxSumEndingHere + arr[i])\n        maxSumSoFar = max(maxSumSoFar, maxSumEndingHere)\n    }\n    maxSum = maxSumSoFar\n    maxSumSoFar = 0\n    maxSumEndingHere = 0\n    for i in (0..<arr.count).reversed() {\n        maxSumEndingHere = max(arr[i], maxSumEndingHere + arr[i])\n        maxSumSoFar = max(maxSumSoFar, maxSumEndingHere)\n    }\n    maxSum = max(maxSum, maxSumSoFar)\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpxcfb5yc5/tmpxcfb5yc5.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75113f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75110eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75110ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75110e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxcfb5yc5                        0x000055b1b09298c8 <unavailable> + 6344\n5    libc.so.6                          0x00002b75115df460 __libc_start_main + 245\n6    tmpxcfb5yc5                        0x000055b1b09294f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumArr = [Int]()\n    for i in 0..<arr.count {\n        var sum = 0\n        var sumArr = [Int]()\n        for j in i..<arr.count {\n            sum += arr[j]\n            sumArr.append(arr[j])\n            if sum > maxSum {\n                maxSum = sum\n                maxSumArr = sumArr\n            }\n        }\n    }\n    print(maxSumArr)\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpthrj1hw9/tmpthrj1hw9.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7094040c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7093d37b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7093d37988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7093d367b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpthrj1hw9                        0x000055db02df17c8 <unavailable> + 6088\n5    libc.so.6                          0x00002b709422c460 __libc_start_main + 245\n6    tmpthrj1hw9                        0x000055db02df13f9 <unavailable> + 5113\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumSoFar = 0\n    var maxSumEndingHere = 0\n    var maxSumEndingHere2 = 0\n    var maxSumSoFar2 = 0\n    for i in 0..<arr.count {\n        maxSumEndingHere += arr[i]\n        maxSumEndingHere2 += arr[arr.count - 1 - i]\n        if maxSumEndingHere < 0 {\n            maxSumEndingHere = 0\n        }\n        if maxSumEndingHere2 < 0 {\n            maxSumEndingHere2 = 0\n        }\n        if maxSumEndingHere > maxSumSoFar {\n            maxSumSoFar = maxSumEndingHere\n        }\n        if maxSumEndingHere2 > maxSumSoFar2 {\n            maxSumSoFar2 = maxSumEndingHere2\n        }\n    }\n    maxSum = maxSumSoFar + maxSumSoFar2\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmp8wplw4my/tmp8wplw4my.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9d3b8e8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9d3b5dfb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9d3b5df988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9d3b5de7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8wplw4my                        0x000055bff73a9578 <unavailable> + 5496\n5    libc.so.6                          0x00002b9d3bad4460 __libc_start_main + 245\n6    tmp8wplw4my                        0x000055bff73a91a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "/tmp/tmpd6wi3xep.swift:22:9: error: type annotation missing in pattern\n    var max_sum_arr_rev_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumLeft = [Int](repeating: 0, count: arr.count)\n    var maxSumRight = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        maxSumLeft[i] = arr[i]\n        if i > 0 && arr[i] > arr[i - 1] {\n            maxSumLeft[i] = max(maxSumLeft[i], maxSumLeft[i - 1] + arr[i])\n        }\n    }\n    \n    for i in (0..<arr.count).reversed() {\n        maxSumRight[i] = arr[i]\n        if i < arr.count - 1 && arr[i] > arr[i + 1] {\n            maxSumRight[i] = max(maxSumRight[i], maxSumRight[i + 1] + arr[i])\n        }\n    }\n    \n    for i in 0..<arr.count {\n        maxSum = max(maxSum, maxSumLeft[i] + maxSumRight[i] - arr[i])\n    }\n    \n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmp7fdxk0ra/tmp7fdxk0ra.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b68f53c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b68f50bdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b68f50bd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b68f50bc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7fdxk0ra                        0x0000561e260d7988 <unavailable> + 6536\n5    libc.so.6                          0x00002b68f55b2460 __libc_start_main + 245\n6    tmp7fdxk0ra                        0x0000561e260d75b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    for i in 0..<arr.count {\n        var sum = 0\n        var j = i\n        while j < arr.count {\n            sum += arr[j]\n            j += 1\n        }\n        j = i - 1\n        while j >= 0 {\n            sum += arr[j]\n            j -= 1\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmph3gjb6w8/tmph3gjb6w8.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5ca2463c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5ca215ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5ca215a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5ca21597b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph3gjb6w8                        0x0000564180112578 <unavailable> + 5496\n5    libc.so.6                          0x00002b5ca264f460 __libc_start_main + 245\n6    tmph3gjb6w8                        0x00005641801121a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        max_sum_right[i] = arr[i]\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_left[i] < max_sum_left[j] + arr[i] {\n                max_sum_left[i] = max_sum_left[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        for j in stride(from: arr.count - 1, through: i, by: -1) {\n            if arr[i] > arr[j] && max_sum_right[i] < max_sum_right[j] + arr[i] {\n                max_sum_right[i] = max_sum_right[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        if max_sum < max_sum_left[i] + max_sum_right[i] - arr[i] {\n            max_sum = max_sum_left[i] + max_sum_right[i] - arr[i]\n        }\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "/tmp/tmpd6wi3xep.swift:22:9: error: type annotation missing in pattern\n    var max_sum_arr_rev_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_inc = [Int](repeating: 0, count: arr.count)\n    var max_sum_dec = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_inc[i] = arr[i]\n        max_sum_dec[i] = arr[i]\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_inc[i] < max_sum_inc[j] + arr[i] {\n                max_sum_inc[i] = max_sum_inc[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in (0..<arr.count-1).reversed() {\n        for j in (i+1..<arr.count).reversed() {\n            if arr[i] > arr[j] && max_sum_dec[i] < max_sum_dec[j] + arr[i] {\n                max_sum_dec[i] = max_sum_dec[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        if max_sum < max_sum_inc[i] + max_sum_dec[i] - arr[i] {\n            max_sum = max_sum_inc[i] + max_sum_dec[i] - arr[i]\n        }\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    for i in 0..<arr.count {\n        var sum = 0\n        for j in i..<arr.count {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpe1t32m9w/tmpe1t32m9w.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac28f8e4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac28f5dbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac28f5db988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac28f5da7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe1t32m9w                        0x000055e92438a578 <unavailable> + 5496\n5    libc.so.6                          0x00002ac28fad0460 __libc_start_main + 245\n6    tmpe1t32m9w                        0x000055e92438a1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_ending_here = 0\n    var max_sum_ending_here_reverse = 0\n    var max_sum_ending_here_reverse_temp = 0\n    var max_sum_ending_here_temp = 0\n    var max_sum_ending_here_reverse_temp_reverse = 0\n    var max_sum_ending_here_temp_reverse = 0\n    var max_sum_ending_here_reverse_temp_reverse_temp = 0\n    var max_sum_ending_here_temp_reverse_temp = 0\n    var max_sum_ending_here_reverse_temp_reverse_temp_reverse = 0\n    var max_sum_ending_here_temp_reverse_temp_reverse = 0\n    var max_sum_ending_here_reverse_temp_reverse_temp_reverse_temp = 0\n    var max_sum_ending_here_temp_reverse_temp_reverse_temp = 0\n    var max_sum_ending_here_reverse_temp_reverse_temp_reverse_temp_reverse = 0\n    var max_sum_ending_here_temp_reverse_temp_reverse_temp_reverse = 0\n    var max_sum_ending_here_reverse_temp_reverse_temp_reverse_temp_reverse_temp = 0\n    var max_sum_ending_here_temp_reverse_temp_reverse_temp_reverse_temp = 0\n    var max_sum_ending_here_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse = 0\n    var max_sum_ending_here_temp_reverse_temp_reverse_temp_reverse_temp_reverse = 0\n    var max_sum_ending_here_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp = 0\n    var max_sum_ending_here_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp = 0\n    var max_sum_ending_here_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse = 0\n    var max_sum_ending_here_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "/tmp/tmpynbuvydl.swift:26:9: error: type annotation missing in pattern\n    var max_sum_ending_here_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    while i < arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n        i += 1\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmphfkkugwy/tmphfkkugwy.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba7401c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba73febdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba73febd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba73febc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphfkkugwy                        0x000055a3e52993e8 <unavailable> + 5096\n5    libc.so.6                          0x00002ba7403b2460 __libc_start_main + 245\n6    tmphfkkugwy                        0x000055a3e5299019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "/tmp/tmpd6wi3xep.swift:22:9: error: type annotation missing in pattern\n    var max_sum_arr_rev_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "/tmp/tmpd6wi3xep.swift:22:9: error: type annotation missing in pattern\n    var max_sum_arr_rev_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumEndingHere = 0\n    for i in 0..<arr.count {\n        maxSumEndingHere = max(arr[i], maxSumEndingHere + arr[i])\n        maxSum = max(maxSum, maxSumEndingHere)\n    }\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmp9vca4nx5/tmp9vca4nx5.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9f8f606c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9f8f2fdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9f8f2fd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9f8f2fc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9vca4nx5                        0x000055e9954b4608 <unavailable> + 5640\n5    libc.so.6                          0x00002b9f8f7f2460 __libc_start_main + 245\n6    tmp9vca4nx5                        0x000055e9954b4239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    var max_sum_ending_here = 0\n    for i in 0..<arr.count {\n        max_sum_ending_here = max(arr[i], max_sum_ending_here + arr[i])\n        max_sum_so_far = max(max_sum_so_far, max_sum_ending_here)\n        max_sum = max(max_sum, max_sum_so_far)\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmppch395vv/tmppch395vv.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abd68b15c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abd6880cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abd6880c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abd6880b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppch395vv                        0x000056329962f608 <unavailable> + 5640\n5    libc.so.6                          0x00002abd68d01460 __libc_start_main + 245\n6    tmppch395vv                        0x000056329962f239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    for i in 0..<arr.count {\n        var sum = 0\n        var j = i\n        while j < arr.count {\n            sum += arr[j]\n            j += 1\n        }\n        j = i - 1\n        while j >= 0 {\n            sum += arr[j]\n            j -= 1\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmph3gjb6w8/tmph3gjb6w8.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5ca2463c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5ca215ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5ca215a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5ca21597b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph3gjb6w8                        0x0000564180112578 <unavailable> + 5496\n5    libc.so.6                          0x00002b5ca264f460 __libc_start_main + 245\n6    tmph3gjb6w8                        0x00005641801121a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1], arr[i])\n    }\n    \n    for i in (0..<arr.count - 1).reversed() {\n        max_sum_right[i] = max(max_sum_right[i + 1], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum += max(max_sum_left[i], max_sum_right[i]) - arr[i]\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpqkgsh6nb/tmpqkgsh6nb.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aefe6ed6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aefe6bcdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aefe6bcd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aefe6bcc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqkgsh6nb                        0x0000562ef3243988 <unavailable> + 6536\n5    libc.so.6                          0x00002aefe70c2460 __libc_start_main + 245\n6    tmpqkgsh6nb                        0x0000562ef32435b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpzyrm0vx5/tmpzyrm0vx5.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae583b4bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae583842b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae583842988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae5838417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzyrm0vx5                        0x000055ced0c9d578 <unavailable> + 5496\n5    libc.so.6                          0x00002ae583d37460 __libc_start_main + 245\n6    tmpzyrm0vx5                        0x000055ced0c9d1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpuj10ro26/tmpuj10ro26.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf6d098c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf6cd8fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf6cd8f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf6cd8e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuj10ro26                        0x000055a76b5af578 <unavailable> + 5496\n5    libc.so.6                          0x00002abf6d284460 __libc_start_main + 245\n6    tmpuj10ro26                        0x000055a76b5af1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    for i in 0..<arr.count {\n        var sum = 0\n        var j = i\n        while j < arr.count {\n            sum += arr[j]\n            j += 1\n        }\n        j = i - 1\n        while j >= 0 {\n            sum += arr[j]\n            j -= 1\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmph3gjb6w8/tmph3gjb6w8.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5ca2463c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5ca215ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5ca215a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5ca21597b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph3gjb6w8                        0x0000564180112578 <unavailable> + 5496\n5    libc.so.6                          0x00002b5ca264f460 __libc_start_main + 245\n6    tmph3gjb6w8                        0x00005641801121a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var inc = Array(repeating: 0, count: arr.count)\n    var dec = Array(repeating: 0, count: arr.count)\n    \n    inc[0] = arr[0]\n    dec[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        inc[i] = max(inc[i - 1] + arr[i], arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        dec[i] = max(dec[i + 1] + arr[i], arr[i])\n    }\n    \n    var max_sum = inc[0] + dec[0] - arr[0]\n    for i in 1..<arr.count {\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpwl80qqmq/tmpwl80qqmq.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aafd55f7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aafd52eeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aafd52ee988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aafd52ed7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwl80qqmq                        0x0000556c1fb098f8 <unavailable> + 6392\n5    libc.so.6                          0x00002aafd57e3460 __libc_start_main + 245\n6    tmpwl80qqmq                        0x0000556c1fb09529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        if i > 0 && arr[i] > arr[i-1] {\n            max_sum_left[i] = max_sum_left[i-1] + arr[i]\n        }\n    }\n    \n    for i in (0..<arr.count).reversed() {\n        max_sum_right[i] = arr[i]\n        if i < arr.count-1 && arr[i] > arr[i+1] {\n            max_sum_right[i] = max_sum_right[i+1] + arr[i]\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmp1rqjrmu_/tmp1rqjrmu_.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b16aee06c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b16aeafdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b16aeafd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b16aeafc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1rqjrmu_                        0x000055d2a9c86988 <unavailable> + 6536\n5    libc.so.6                          0x00002b16aeff2460 __libc_start_main + 245\n6    tmp1rqjrmu_                        0x000055d2a9c865b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "/tmp/tmpd6wi3xep.swift:22:9: error: type annotation missing in pattern\n    var max_sum_arr_rev_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    for i in 0..<arr.count {\n        max_sum_arr.append(arr[i])\n        max_sum_arr_rev.append(arr[i])\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_arr[i] < max_sum_arr[j] + arr[i] {\n                max_sum_arr[i] = max_sum_arr[j] + arr[i]\n            }\n        }\n    }\n    for i in stride(from: arr.count-1, through: 0, by: -1) {\n        for j in stride(from: arr.count-1, through: i, by: -1) {\n            if arr[i] > arr[j] && max_sum_arr_rev[i] < max_sum_arr_rev[j] + arr[i] {\n                max_sum_arr_rev[i] = max_sum_arr_rev[j] + arr[i]\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        if max_sum < max_sum_arr[i] + max_sum_arr_rev[i] - arr[i] {\n            max_sum = max_sum_arr[i] + max_sum_arr_rev[i] - arr[i]\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    var max_sum_ending_here = 0\n    var max_sum_ending_here_so_far = 0\n    var max_sum_ending_here_so_far_index = 0\n    var max_sum_ending_here_index = 0\n    var max_sum_ending_here_index_so_far = 0\n    var max_sum_ending_here_index_so_far_index = 0\n    var max_sum_ending_here_index_so_far_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index_index_index_index_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "/tmp/tmpty6wgx4s.swift:23:9: error: type annotation missing in pattern\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index_index_index_index_index\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        if i > 0 && arr[i] > arr[i - 1] {\n            max_sum_left[i] += max_sum_left[i - 1]\n        }\n    }\n    \n    for i in (0..<arr.count).reversed() {\n        max_sum_right[i] = arr[i]\n        if i < arr.count - 1 && arr[i] > arr[i + 1] {\n            max_sum_right[i] += max_sum_right[i + 1]\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpdhp6i_ct/tmpdhp6i_ct.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba549c8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba549985b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba549985988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba5499847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdhp6i_ct                        0x0000559eae770988 <unavailable> + 6536\n5    libc.so.6                          0x00002ba549e7a460 __libc_start_main + 245\n6    tmpdhp6i_ct                        0x0000559eae7705b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "/tmp/tmpd6wi3xep.swift:22:9: error: type annotation missing in pattern\n    var max_sum_arr_rev_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumSoFar = 0\n    var maxSumEndingHere = 0\n    var maxSumEndingHereSoFar = 0\n    var maxSumEndingHereSoFar2 = 0\n    var maxSumEndingHere2 = 0\n    \n    for i in 0..<arr.count {\n        maxSumEndingHereSoFar = max(maxSumEndingHereSoFar + arr[i], arr[i])\n        maxSumEndingHereSoFar2 = max(maxSumEndingHereSoFar2 + arr[arr.count - 1 - i], arr[arr.count - 1 - i])\n        maxSumEndingHere = max(maxSumEndingHereSoFar, maxSumEndingHere)\n        maxSumEndingHere2 = max(maxSumEndingHereSoFar2, maxSumEndingHere2)\n    }\n    maxSum = max(maxSumEndingHere, maxSumEndingHere2)\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpb7ur3o03/tmpb7ur3o03.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2bc61b0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2bc5ea7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2bc5ea7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2bc5ea67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb7ur3o03                        0x0000561b937f0608 <unavailable> + 5640\n5    libc.so.6                          0x00002b2bc639c460 __libc_start_main + 245\n6    tmpb7ur3o03                        0x0000561b937f0239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    for i in 0..<arr.count {\n        var sum = 0\n        var j = i\n        while j < arr.count {\n            sum += arr[j]\n            j += 1\n        }\n        j = i - 1\n        while j >= 0 {\n            sum += arr[j]\n            j -= 1\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmph3gjb6w8/tmph3gjb6w8.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5ca2463c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5ca215ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5ca215a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5ca21597b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph3gjb6w8                        0x0000564180112578 <unavailable> + 5496\n5    libc.so.6                          0x00002b5ca264f460 __libc_start_main + 245\n6    tmph3gjb6w8                        0x00005641801121a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1] + arr[i], arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        max_sum_right[i] = max(max_sum_right[i + 1] + arr[i], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmpx8bevinu/tmpx8bevinu.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ade7419ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ade73e95b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ade73e95988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ade73e947b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx8bevinu                        0x0000562abcb608f8 <unavailable> + 6392\n5    libc.so.6                          0x00002ade7438a460 __libc_start_main + 245\n6    tmpx8bevinu                        0x0000562abcb60529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        max_sum_right[i] = arr[i]\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_left[i] < max_sum_left[j] + arr[i] {\n                max_sum_left[i] = max_sum_left[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in (0..<arr.count - 1).reversed() {\n        for j in (i + 1)..<arr.count {\n            if arr[i] > arr[j] && max_sum_right[i] < max_sum_right[j] + arr[i] {\n                max_sum_right[i] = max_sum_right[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    var j = 0\n    while i < arr.count {\n        sum = 0\n        j = i\n        while j < arr.count {\n            sum += arr[j]\n            j += 1\n        }\n        i += 1\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmp4g_mcxok/tmp4g_mcxok.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b90b732cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b90b7023b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b90b7023988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b90b70227b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4g_mcxok                        0x000056133a07a3e8 <unavailable> + 5096\n5    libc.so.6                          0x00002b90b7518460 __libc_start_main + 245\n6    tmp4g_mcxok                        0x000056133a07a019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1] + arr[i], arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        max_sum_right[i] = max(max_sum_right[i + 1] + arr[i], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmpx8bevinu/tmpx8bevinu.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ade7419ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ade73e95b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ade73e95988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ade73e947b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx8bevinu                        0x0000562abcb608f8 <unavailable> + 6392\n5    libc.so.6                          0x00002ade7438a460 __libc_start_main + 245\n6    tmpx8bevinu                        0x0000562abcb60529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var inc = Array(repeating: 0, count: arr.count)\n    var dec = Array(repeating: 0, count: arr.count)\n    inc[0] = arr[0]\n    dec[arr.count - 1] = arr[arr.count - 1]\n    for i in 1..<arr.count {\n        inc[i] = max(inc[i - 1] + arr[i], arr[i])\n    }\n    for i in (0..<arr.count - 1).reversed() {\n        dec[i] = max(dec[i + 1] + arr[i], arr[i])\n    }\n    var max_sum = 0\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpjmhe1ild/tmpjmhe1ild.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8c85e1bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8c85b12b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8c85b12988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8c85b117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjmhe1ild                        0x000055face5ed988 <unavailable> + 6536\n5    libc.so.6                          0x00002b8c86007460 __libc_start_main + 245\n6    tmpjmhe1ild                        0x000055face5ed5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    // max sum from left to right\n    for i in 0..<arr.count {\n        if i == 0 {\n            max_sum_left[i] = arr[i]\n        } else {\n            max_sum_left[i] = max(arr[i], max_sum_left[i-1] + arr[i])\n        }\n    }\n    \n    // max sum from right to left\n    for i in (0..<arr.count).reversed() {\n        if i == arr.count - 1 {\n            max_sum_right[i] = arr[i]\n        } else {\n            max_sum_right[i] = max(arr[i], max_sum_right[i+1] + arr[i])\n        }\n    }\n    \n    // max sum\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmp70z1pxsk/tmp70z1pxsk.swift:47: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adde0cbac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adde09b1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adde09b1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adde09b07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp70z1pxsk                        0x0000555962a3f988 <unavailable> + 6536\n5    libc.so.6                          0x00002adde0ea6460 __libc_start_main + 245\n6    tmp70z1pxsk                        0x0000555962a3f5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    // find max sum of increasing subsequence from left to right\n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_left[i] < max_sum_left[j] + arr[i] {\n                max_sum_left[i] = max_sum_left[j] + arr[i]\n            }\n        }\n    }\n    \n    // find max sum of increasing subsequence from right to left\n    for i in (0..<arr.count).reversed() {\n        max_sum_right[i] = arr[i]\n        for j in (i+1..<arr.count).reversed() {\n            if arr[i] > arr[j] && max_sum_right[i] < max_sum_right[j] + arr[i] {\n                max_sum_right[i] = max_sum_right[j] + arr[i]\n            }\n        }\n    }\n    \n    // find max sum of bitonic subsequence\n    for i in 0..<arr.count {\n        if max_sum < max_sum_left[i] + max_sum_right[i] - arr[i] {\n            max_sum = max_sum_left[i] + max_sum_right[i] - arr[i]\n        }\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum > max_sum {\n            max_sum = sum\n        }\n        if sum < 0 {\n            sum = 0\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpdnw2jhly/tmpdnw2jhly.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba248b02c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba2487f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba2487f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba2487f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdnw2jhly                        0x000055ef7742c578 <unavailable> + 5496\n5    libc.so.6                          0x00002ba248cee460 __libc_start_main + 245\n6    tmpdnw2jhly                        0x000055ef7742c1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var prev = arr[0]\n    var is_increasing = true\n    for i in 1..<arr.count {\n        if arr[i] > prev {\n            if !is_increasing {\n                max_sum = max(max_sum, sum)\n                sum = 0\n            }\n            sum += arr[i]\n            is_increasing = true\n        } else {\n            if is_increasing {\n                max_sum = max(max_sum, sum)\n                sum = 0\n            }\n            sum += arr[i]\n            is_increasing = false\n        }\n        prev = arr[i]\n    }\n    max_sum = max(max_sum, sum)\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmp_clnldy8/tmp_clnldy8.swift:43: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac6aaa80c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac6aa777b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac6aa777988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac6aa7767b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_clnldy8                        0x000055db5d74d608 <unavailable> + 5640\n5    libc.so.6                          0x00002ac6aac6c460 __libc_start_main + 245\n6    tmp_clnldy8                        0x000055db5d74d239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    for i in 0..<arr.count {\n        max_sum_so_far = max(max_sum_so_far + arr[i], arr[i])\n        max_sum = max(max_sum, max_sum_so_far)\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpayd4pima/tmpayd4pima.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a6e6c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a6e3bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a6e3bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a6e3ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpayd4pima                        0x000055978eecd608 <unavailable> + 5640\n5    libc.so.6                          0x00002b9a6e8b0460 __libc_start_main + 245\n6    tmpayd4pima                        0x000055978eecd239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    for i in 0..<arr.count {\n        max_sum_so_far = max(max_sum_so_far + arr[i], arr[i])\n        max_sum = max(max_sum, max_sum_so_far)\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpayd4pima/tmpayd4pima.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a6e6c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a6e3bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a6e3bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a6e3ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpayd4pima                        0x000055978eecd608 <unavailable> + 5640\n5    libc.so.6                          0x00002b9a6e8b0460 __libc_start_main + 245\n6    tmpayd4pima                        0x000055978eecd239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var max = 0\n    for i in 0..<arr.count {\n        if arr[i] > max {\n            max = arr[i]\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpdhhoi3n1/tmpdhhoi3n1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aaff1292c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aaff0f89b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aaff0f89988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aaff0f887b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdhhoi3n1                        0x0000565009e70578 <unavailable> + 5496\n5    libc.so.6                          0x00002aaff147e460 __libc_start_main + 245\n6    tmpdhhoi3n1                        0x0000565009e701a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var inc = Array(repeating: 0, count: arr.count)\n    var dec = Array(repeating: 0, count: arr.count)\n    inc[0] = arr[0]\n    dec[arr.count - 1] = arr[arr.count - 1]\n    for i in 1..<arr.count {\n        inc[i] = max(inc[i - 1] + arr[i], arr[i])\n    }\n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        dec[i] = max(dec[i + 1] + arr[i], arr[i])\n    }\n    var max_sum = inc[0] + dec[0] - arr[0]\n    for i in 1..<arr.count {\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmp1jsovgae/tmp1jsovgae.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8df3a09c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8df3700b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8df3700988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8df36ff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1jsovgae                        0x0000559903bcf8f8 <unavailable> + 6392\n5    libc.so.6                          0x00002b8df3bf5460 __libc_start_main + 245\n6    tmp1jsovgae                        0x0000559903bcf529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var dp = Array(repeating: 0, count: arr.count)\n    dp[0] = arr[0]\n    for i in 1..<arr.count {\n        dp[i] = arr[i]\n        for j in 0..<i {\n            if arr[i] > arr[j] {\n                dp[i] = max(dp[i], dp[j] + arr[i])\n            }\n        }\n    }\n    return dp.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpynxov_je/tmpynxov_je.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab8f8645c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab8f833cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab8f833c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab8f833b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpynxov_je                        0x00005571efe2a728 <unavailable> + 5928\n5    libc.so.6                          0x00002ab8f8831460 __libc_start_main + 245\n6    tmpynxov_je                        0x00005571efe2a359 <unavailable> + 4953\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    for i in 0..<arr.count {\n        var sum = 0\n        var j = i\n        while j < arr.count {\n            sum += arr[j]\n            j += 1\n        }\n        j = i - 1\n        while j >= 0 {\n            sum += arr[j]\n            j -= 1\n        }\n        if sum > maxSum {\n            maxSum = sum\n        }\n    }\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpws7pc42q/tmpws7pc42q.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abddbe07c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abddbafeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abddbafe988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abddbafd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpws7pc42q                        0x0000560732c0c578 <unavailable> + 5496\n5    libc.so.6                          0x00002abddbff3460 __libc_start_main + 245\n6    tmpws7pc42q                        0x0000560732c0c1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    for i in 0..<arr.count {\n        max_sum_so_far += arr[i]\n        if max_sum_so_far < 0 {\n            max_sum_so_far = 0\n        }\n        if max_sum < max_sum_so_far {\n            max_sum = max_sum_so_far\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmp5592n2ck/tmp5592n2ck.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b501fea8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b501fb9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b501fb9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b501fb9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5592n2ck                        0x00005613bd8e7578 <unavailable> + 5496\n5    libc.so.6                          0x00002b5020094460 __libc_start_main + 245\n6    tmp5592n2ck                        0x00005613bd8e71a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    var max_sum_ending_here = 0\n    var max_sum_ending_here_so_far = 0\n    var max_sum_ending_here_so_far_index = 0\n    var max_sum_ending_here_index = 0\n    for i in 0..<arr.count {\n        max_sum_ending_here = max(arr[i], max_sum_ending_here + arr[i])\n        if max_sum_ending_here > max_sum_ending_here_so_far {\n            max_sum_ending_here_so_far = max_sum_ending_here\n            max_sum_ending_here_so_far_index = i\n        }\n        if max_sum_ending_here < 0 {\n            max_sum_ending_here = 0\n            max_sum_ending_here_index = i + 1\n        }\n    }\n    max_sum_ending_here = 0\n    for i in stride(from: max_sum_ending_here_so_far_index, to: -1, by: -1) {\n        max_sum_ending_here = max(arr[i], max_sum_ending_here + arr[i])\n        if max_sum_ending_here > max_sum_so_far {\n            max_sum_so_far = max_sum_ending_here\n        }\n    }\n    max_sum = max_sum_so_far\n    max_sum_so_far = 0\n    max_sum_ending_here = 0\n    for i in stride(from: max_sum_ending_here_index, to: arr.count, by: 1) {\n        max_sum_ending_here = max(arr[i], max_sum_ending_here + arr[i])\n        if max_sum_ending_here > max_sum_so_far {\n            max_sum_so_far = max_sum_ending_here\n        }\n    }\n    max_sum = max(max_sum, max_sum_so_far)\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmp_gut1qnu/tmp_gut1qnu.swift:54: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b01686f4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b01683ebb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b01683eb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b01683ea7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_gut1qnu                        0x000055a8800bf808 <unavailable> + 6152\n5    libc.so.6                          0x00002b01688e0460 __libc_start_main + 245\n6    tmp_gut1qnu                        0x000055a8800bf439 <unavailable> + 5177\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    while i < arr.count {\n        sum += arr[i]\n        if sum > max_sum {\n            max_sum = sum\n        }\n        i += 1\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpm5w2hwwo/tmpm5w2hwwo.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b375256dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3752264b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3752264988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b37522637b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm5w2hwwo                        0x000055ef2def83e8 <unavailable> + 5096\n5    libc.so.6                          0x00002b3752759460 __libc_start_main + 245\n6    tmpm5w2hwwo                        0x000055ef2def8019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpzyrm0vx5/tmpzyrm0vx5.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae583b4bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae583842b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae583842988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae5838417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzyrm0vx5                        0x000055ced0c9d578 <unavailable> + 5496\n5    libc.so.6                          0x00002ae583d37460 __libc_start_main + 245\n6    tmpzyrm0vx5                        0x000055ced0c9d1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumSoFar = 0\n    var maxSumEndingHere = 0\n    var maxSumEndingHere2 = 0\n    var maxSumSoFar2 = 0\n    var maxSum2 = 0\n    var i = 0\n    var j = arr.count - 1\n    \n    while i < arr.count - 1 {\n        if arr[i] < arr[i + 1] {\n            maxSumEndingHere += arr[i]\n        } else {\n            maxSumEndingHere = 0\n        }\n        if maxSumEndingHere > maxSumSoFar {\n            maxSumSoFar = maxSumEndingHere\n        }\n        i += 1\n    }\n    maxSum = maxSumSoFar\n    \n    while j > 0 {\n        if arr[j] < arr[j - 1] {\n            maxSumEndingHere2 += arr[j]\n        } else {\n            maxSumEndingHere2 = 0\n        }\n        if maxSumEndingHere2 > maxSumSoFar2 {\n            maxSumSoFar2 = maxSumEndingHere2\n        }\n        j -= 1\n    }\n    maxSum2 = maxSumSoFar2\n    \n    return maxSum + maxSum2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpcjw2wsdz/tmpcjw2wsdz.swift:55: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e4862cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e48323b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e48323988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e483227b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcjw2wsdz                        0x000055d26ffb43e8 <unavailable> + 5096\n5    libc.so.6                          0x00002b5e48818460 __libc_start_main + 245\n6    tmpcjw2wsdz                        0x000055d26ffb4019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    while i < arr.count {\n        sum += arr[i]\n        if sum > max_sum {\n            max_sum = sum\n        }\n        i += 1\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpm5w2hwwo/tmpm5w2hwwo.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b375256dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3752264b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3752264988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b37522637b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm5w2hwwo                        0x000055ef2def83e8 <unavailable> + 5096\n5    libc.so.6                          0x00002b3752759460 __libc_start_main + 245\n6    tmpm5w2hwwo                        0x000055ef2def8019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        if i > 0 && max_sum_left[i-1] > 0 {\n            max_sum_left[i] += max_sum_left[i-1]\n        }\n        max_sum = max(max_sum, max_sum_left[i])\n    }\n    \n    for i in stride(from: arr.count-1, through: 0, by: -1) {\n        max_sum_right[i] = arr[i]\n        if i < arr.count-1 && max_sum_right[i+1] > 0 {\n            max_sum_right[i] += max_sum_right[i+1]\n        }\n        max_sum = max(max_sum, max_sum_right[i])\n    }\n    \n    for i in 1..<arr.count-1 {\n        max_sum = max(max_sum, max_sum_left[i-1] + max_sum_right[i+1])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmp_5ulpnnc/tmp_5ulpnnc.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3a58036c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3a57d2db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3a57d2d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3a57d2c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_5ulpnnc                        0x00005601801508f8 <unavailable> + 6392\n5    libc.so.6                          0x00002b3a58222460 __libc_start_main + 245\n6    tmp_5ulpnnc                        0x0000560180150529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(arr[i], max_sum_left[i - 1] + arr[i])\n    }\n    \n    for i in (0..<arr.count - 1).reversed() {\n        max_sum_right[i] = max(arr[i], max_sum_right[i + 1] + arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmp12cbtyaz/tmp12cbtyaz.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad42d976c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad42d66db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad42d66d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad42d66c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp12cbtyaz                        0x000055dee6c87988 <unavailable> + 6536\n5    libc.so.6                          0x00002ad42db62460 __libc_start_main + 245\n6    tmp12cbtyaz                        0x000055dee6c875b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumSoFar = 0\n    var maxSumSoFarReverse = 0\n    var maxSumReverse = 0\n    var maxSumSoFarReverseTemp = 0\n    var maxSumSoFarTemp = 0\n    for i in 0..<arr.count {\n        maxSumSoFarTemp = max(maxSumSoFarTemp + arr[i], arr[i])\n        maxSumSoFar = max(maxSumSoFar, maxSumSoFarTemp)\n        maxSumSoFarReverseTemp = max(maxSumSoFarReverseTemp + arr[arr.count - 1 - i], arr[arr.count - 1 - i])\n        maxSumSoFarReverse = max(maxSumSoFarReverse, maxSumSoFarReverseTemp)\n    }\n    maxSum = maxSumSoFar + maxSumSoFarReverse - arr[arr.count - 1]\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmp8ssl39ia/tmp8ssl39ia.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add65463c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add6515ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add6515a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add651597b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8ssl39ia                        0x0000557455a38608 <unavailable> + 5640\n5    libc.so.6                          0x00002add6564f460 __libc_start_main + 245\n6    tmp8ssl39ia                        0x0000557455a38239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumSoFar = 0\n    var maxSumEndingHere = 0\n    var maxSumEndingHereSoFar = 0\n    var maxSumEndingHereSoFarNeg = 0\n    var maxSumEndingHereNeg = 0\n    var maxSumEndingHereNegSoFar = 0\n    var maxSumEndingHereNegSoFarNeg = 0\n    var maxSumEndingHereNegSoFarPos = 0\n    var maxSumEndingHerePos = 0\n    var maxSumEndingHerePosSoFar = 0\n    var maxSumEndingHerePosSoFarPos = 0\n    var maxSumEndingHerePosSoFarNeg = 0\n    var maxSumEndingHereSoFarPos = 0\n    var maxSumEndingHereSoFarNeg = 0\n    var maxSumEndingHereSoFarPosNeg = 0\n    var maxSumEndingHereSoFarNegNeg = 0\n    var maxSumEndingHereSoFarNegPos = 0\n    var maxSumEndingHereSoFarPosPos = 0\n    var maxSumEndingHereSoFarPosNeg = 0\n    var maxSumEndingHereSoFarNegPos = 0\n    var maxSumEndingHereSoFarNegNeg = 0\n    var maxSumEndingHereSoFarPosPos = 0\n    var maxSumEndingHereSoFarPosNegNeg = 0\n    var maxSumEndingHereSoFarNegPosNeg = 0\n    var maxSumEndingHereSoFarNegNegNeg = 0\n    var maxSumEndingHereSoFarPosPosPos = 0\n    var maxSumEndingHereSoFarPosPosNeg = 0\n    var maxSumEndingHereSoFarPosNegPos = 0\n    var maxSumEndingHereSoFarNegPosPos = 0\n    var maxSumEndingHereSoFarNegNegPos = 0\n    var maxSumEndingHereSoFarNegPosNeg = 0\n    var maxSumEndingHereSoFarPosNegNeg = 0\n    var maxSumEndingHereSoFarNegNegNeg = 0\n    var maxSumEndingHereSoFarPosPosPos = 0\n    var maxSumEndingHereSoFarPosPosNegNeg = 0\n    var maxSumEndingHereSoFarPosNegPosNeg = 0\n    var maxSumEnding\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "/tmp/tmpamrhiz5q.swift:18:9: error: invalid redeclaration of 'maxSumEndingHereSoFarNeg'\n    var maxSumEndingHereSoFarNeg = 0\n        ^\n/tmp/tmpamrhiz5q.swift:8:9: note: 'maxSumEndingHereSoFarNeg' previously declared here\n    var maxSumEndingHereSoFarNeg = 0\n        ^\n/tmp/tmpamrhiz5q.swift:23:9: error: invalid redeclaration of 'maxSumEndingHereSoFarPosNeg'\n    var maxSumEndingHereSoFarPosNeg = 0\n        ^\n/tmp/tmpamrhiz5q.swift:19:9: note: 'maxSumEndingHereSoFarPosNeg' previously declared here\n    var maxSumEndingHereSoFarPosNeg = 0\n        ^\n/tmp/tmpamrhiz5q.swift:24:9: error: invalid redeclaration of 'maxSumEndingHereSoFarNegPos'\n    var maxSumEndingHereSoFarNegPos = 0\n        ^\n/tmp/tmpamrhiz5q.swift:21:9: note: 'maxSumEndingHereSoFarNegPos' previously declared here\n    var maxSumEndingHereSoFarNegPos = 0\n        ^\n/tmp/tmpamrhiz5q.swift:25:9: error: invalid redeclaration of 'maxSumEndingHereSoFarNegNeg'\n    var maxSumEndingHereSoFarNegNeg = 0\n        ^\n/tmp/tmpamrhiz5q.swift:20:9: note: 'maxSumEndingHereSoFarNegNeg' previously declared here\n    var maxSumEndingHereSoFarNegNeg = 0\n        ^\n/tmp/tmpamrhiz5q.swift:26:9: error: invalid redeclaration of 'maxSumEndingHereSoFarPosPos'\n    var maxSumEndingHereSoFarPosPos = 0\n        ^\n/tmp/tmpamrhiz5q.swift:22:9: note: 'maxSumEndingHereSoFarPosPos' previously declared here\n    var maxSumEndingHereSoFarPosPos = 0\n        ^\n/tmp/tmpamrhiz5q.swift:35:9: error: invalid redeclaration of 'maxSumEndingHereSoFarNegPosNeg'\n    var maxSumEndingHereSoFarNegPosNeg = 0\n        ^\n/tmp/tmpamrhiz5q.swift:28:9: note: 'maxSumEndingHereSoFarNegPosNeg' previously declared here\n    var maxSumEndingHereSoFarNegPosNeg = 0\n        ^\n/tmp/tmpamrhiz5q.swift:36:9: error: invalid redeclaration of 'maxSumEndingHereSoFarPosNegNeg'\n    var maxSumEndingHereSoFarPosNegNeg = 0\n        ^\n/tmp/tmpamrhiz5q.swift:27:9: note: 'maxSumEndingHereSoFarPosNegNeg' previously declared here\n    var maxSumEndingHereSoFarPosNegNeg = 0\n        ^\n/tmp/tmpamrhiz5q.swift:37:9: error: invalid redeclaration of 'maxSumEn",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpuj10ro26/tmpuj10ro26.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf6d098c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf6cd8fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf6cd8f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf6cd8e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuj10ro26                        0x000055a76b5af578 <unavailable> + 5496\n5    libc.so.6                          0x00002abf6d284460 __libc_start_main + 245\n6    tmpuj10ro26                        0x000055a76b5af1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var max = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum > max {\n            max = sum\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpmayb6obb/tmpmayb6obb.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b385255fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3852256b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3852256988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b38522557b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmayb6obb                        0x0000563b8b07f578 <unavailable> + 5496\n5    libc.so.6                          0x00002b385274b460 __libc_start_main + 245\n6    tmpmayb6obb                        0x0000563b8b07f1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    for i in 0..<arr.count {\n        var sum = 0\n        var j = i\n        while j < arr.count {\n            sum += arr[j]\n            j += 1\n        }\n        j = i - 1\n        while j >= 0 {\n            sum += arr[j]\n            j -= 1\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmph3gjb6w8/tmph3gjb6w8.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5ca2463c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5ca215ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5ca215a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5ca21597b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph3gjb6w8                        0x0000564180112578 <unavailable> + 5496\n5    libc.so.6                          0x00002b5ca264f460 __libc_start_main + 245\n6    tmph3gjb6w8                        0x00005641801121a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    var j = arr.count - 1\n    while i < j {\n        if arr[i] < arr[j] {\n            sum += arr[i]\n            i += 1\n        } else {\n            sum += arr[j]\n            j -= 1\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmp2bj8l7df/tmp2bj8l7df.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c1da71c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c1d768b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c1d768988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c1d7677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2bj8l7df                        0x00005617a33cb3e8 <unavailable> + 5096\n5    libc.so.6                          0x00002b9c1dc5d460 __libc_start_main + 245\n6    tmp2bj8l7df                        0x00005617a33cb019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        max_sum_right[i] = arr[i]\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_left[i] < max_sum_left[j] + arr[i] {\n                max_sum_left[i] = max_sum_left[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        for j in stride(from: arr.count - 1, through: i + 1, by: -1) {\n            if arr[i] > arr[j] && max_sum_right[i] < max_sum_right[j] + arr[i] {\n                max_sum_right[i] = max_sum_right[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "/tmp/tmpd6wi3xep.swift:22:9: error: type annotation missing in pattern\n    var max_sum_arr_rev_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var dp = Array(repeating: 0, count: arr.count)\n    for i in 0..<arr.count {\n        dp[i] = arr[i]\n    }\n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && dp[i] < dp[j] + arr[i] {\n                dp[i] = dp[j] + arr[i]\n            }\n        }\n    }\n    return dp.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpqq9vfgyh/tmpqq9vfgyh.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8d5a122c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8d59e19b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8d59e19988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8d59e187b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqq9vfgyh                        0x000055fd3d12a6c8 <unavailable> + 5832\n5    libc.so.6                          0x00002b8d5a30e460 __libc_start_main + 245\n6    tmpqq9vfgyh                        0x000055fd3d12a2f9 <unavailable> + 4857\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_ending_here = 0\n    var max_sum_ending_here_reverse = 0\n    var max_sum_ending_here_reverse_temp = 0\n    var max_sum_ending_here_temp = 0\n    var max_sum_ending_here_reverse_temp_reverse = 0\n    var max_sum_ending_here_temp_reverse = 0\n    var max_sum_ending_here_reverse_temp_reverse_temp = 0\n    var max_sum_ending_here_temp_reverse_temp = 0\n    \n    for i in 0..<arr.count {\n        max_sum_ending_here_temp = max_sum_ending_here + arr[i]\n        max_sum_ending_here_temp_reverse = max_sum_ending_here_reverse + arr[i]\n        max_sum_ending_here_reverse_temp = max_sum_ending_here_reverse + arr[arr.count-1-i]\n        max_sum_ending_here_reverse_temp_reverse = max_sum_ending_here + arr[arr.count-1-i]\n        max_sum_ending_here_reverse_temp_reverse_temp = max_sum_ending_here_reverse_temp + arr[arr.count-1-i]\n        max_sum_ending_here_temp_reverse_temp = max_sum_ending_here_temp + arr[arr.count-1-i]\n        \n        if max_sum_ending_here_temp > max_sum_ending_here {\n            max_sum_ending_here = max_sum_ending_here_temp\n        }\n        if max_sum_ending_here_temp_reverse > max_sum_ending_here_reverse {\n            max_sum_ending_here_reverse = max_sum_ending_here_temp_reverse\n        }\n        if max_sum_ending_here_reverse_temp > max_sum_ending_here_reverse_temp_reverse {\n            max_sum_ending_here_reverse_temp_reverse = max_sum_ending_here_reverse_temp\n        }\n        if max_sum_ending_here_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "/tmp/tmpf3q5ikdz.swift:31:32: error: expected '{' after 'if' condition\n        if max_sum_ending_here_\n                               ^\n/tmp/tmpf3q5ikdz.swift:49:60: error: expected '}' at end of brace statement\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)\n                                                           ^\n/tmp/tmpf3q5ikdz.swift:3:33: note: to match this opening '{'\nfunc max_sum(arr: [Int]) -> Int {\n                                ^\n/tmp/tmpf3q5ikdz.swift:31:12: error: cannot find 'max_sum_ending_here_' in scope\n        if max_sum_ending_here_\n           ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpf3q5ikdz.swift:35:6: error: operator functions can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpf3q5ikdz.swift:47:8: error: cannot call value of non-function type 'Int'\nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\n       ^\n/tmp/tmpf3q5ikdz.swift:48:8: error: cannot call value of non-function type 'Int'\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\n       ^\n/tmp/tmpf3q5ikdz.swift:49:8: error: cannot call value of non-function type 'Int'\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)\n       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_index = 0\n    var max_sum_arr_index_arr = [Int]()\n    var max_sum_arr_index_arr_index = 0\n    var max_sum_arr_index_arr_index_arr = [Int]()\n    var max_sum_arr_index_arr_index_arr_index = 0\n    var max_sum_arr_index_arr_index_arr_index_arr = [Int]()\n    var max_sum_arr_index_arr_index_arr_index_arr_index = 0\n    var max_sum_arr_index_arr_index_arr_index_arr_index_arr = [Int]()\n    var max_sum_arr_index_arr_index_arr_index_arr_index_arr_index = 0\n    var max_sum_arr_index_arr_index_arr_index_arr_index_arr_index_arr = [Int]()\n    var max_sum_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index = 0\n    var max_sum_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr = [Int]()\n    var max_sum_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index = 0\n    var max_sum_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr = [Int]()\n    var max_sum_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index = 0\n    var max_sum_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr = [Int]()\n    var max_sum_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "/tmp/tmpcfm1orny.swift:22:9: error: type annotation missing in pattern\n    var max_sum_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        max_sum_right[i] = arr[i]\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_left[i] < max_sum_left[j] + arr[i] {\n                max_sum_left[i] = max_sum_left[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        for j in stride(from: arr.count - 1, through: i, by: -1) {\n            if arr[i] > arr[j] && max_sum_right[i] < max_sum_right[j] + arr[i] {\n                max_sum_right[i] = max_sum_right[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "/tmp/tmpd6wi3xep.swift:22:9: error: type annotation missing in pattern\n    var max_sum_arr_rev_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var max_sum_arr = [Int]()\n    var sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    var sum_arr_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev = [Int]()\n    var sum_arr_rev_rev_rev_rev = [Int]()\n    \n    for i in 0..<arr.count {\n        sum = sum + arr[i]\n        sum_arr.append(sum)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    \n    max_sum_arr = sum_arr\n    \n    sum = 0\n    for i in (0..<arr.count).reversed() {\n        sum = sum + arr[i]\n        sum_arr_rev.append(sum)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    \n    max_sum_arr_rev = sum_arr_rev\n    \n    sum = 0\n    for i in 0..<arr.count {\n        sum = sum + arr[i]\n        sum_arr_rev_rev.append(sum)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    \n    max_sum_arr_rev_rev = sum_arr_rev_rev\n    \n    sum = 0\n    for i in (0..<arr.count).reversed() {\n        sum = sum + arr[i]\n        sum_arr_rev_rev_rev.append(sum)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    \n    max_sum_arr_rev_rev_rev = sum_arr_rev_rev_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "/tmp/tmph0v8zwnr.swift:58:31: error: cannot find 'sum_arr_rev_rev_' in scope\n    max_sum_arr_rev_rev_rev = sum_arr_rev_rev_\n                              ^~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    // max sum of increasing subsequence from left to right\n    max_sum_left[0] = arr[0]\n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i-1] + arr[i], arr[i])\n    }\n    \n    // max sum of increasing subsequence from right to left\n    max_sum_right[arr.count-1] = arr[arr.count-1]\n    for i in (0..<arr.count-1).reversed() {\n        max_sum_right[i] = max(max_sum_right[i+1] + arr[i], arr[i])\n    }\n    \n    // max sum of bitonic subsequence\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpvgk8f4rb/tmpvgk8f4rb.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b870e3e7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b870e0deb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b870e0de988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b870e0dd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvgk8f4rb                        0x000055de1b951988 <unavailable> + 6536\n5    libc.so.6                          0x00002b870e5d3460 __libc_start_main + 245\n6    tmpvgk8f4rb                        0x000055de1b9515b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i-1] + arr[i], arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        max_sum_right[i] = max(max_sum_right[i+1] + arr[i], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpsonmu24y/tmpsonmu24y.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4fb2f87c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4fb2c7eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4fb2c7e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4fb2c7d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsonmu24y                        0x000055a5aea9c8f8 <unavailable> + 6392\n5    libc.so.6                          0x00002b4fb3173460 __libc_start_main + 245\n6    tmpsonmu24y                        0x000055a5aea9c529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    var max_sum_ending_here = 0\n    for i in 0..<arr.count {\n        max_sum_ending_here += arr[i]\n        if max_sum_ending_here < 0 {\n            max_sum_ending_here = 0\n        }\n        if max_sum_so_far < max_sum_ending_here {\n            max_sum_so_far = max_sum_ending_here\n        }\n    }\n    return max_sum_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpq1oi_889/tmpq1oi_889.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af4d903dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af4d8d34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af4d8d34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af4d8d337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpq1oi_889                        0x000055e6eab9f578 <unavailable> + 5496\n5    libc.so.6                          0x00002af4d9229460 __libc_start_main + 245\n6    tmpq1oi_889                        0x000055e6eab9f1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    for i in 0..<arr.count {\n        var sum = 0\n        var j = i\n        while j < arr.count {\n            sum += arr[j]\n            j += 1\n        }\n        j = i - 1\n        while j >= 0 {\n            sum += arr[j]\n            j -= 1\n        }\n        if sum > maxSum {\n            maxSum = sum\n        }\n    }\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpws7pc42q/tmpws7pc42q.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abddbe07c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abddbafeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abddbafe988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abddbafd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpws7pc42q                        0x0000560732c0c578 <unavailable> + 5496\n5    libc.so.6                          0x00002abddbff3460 __libc_start_main + 245\n6    tmpws7pc42q                        0x0000560732c0c1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(arr[i], max_sum_left[i - 1] + arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        max_sum_right[i] = max(arr[i], max_sum_right[i + 1] + arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmp1xi97s67/tmp1xi97s67.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba4cc372c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba4cc069b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba4cc069988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba4cc0687b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1xi97s67                        0x0000556984b6c8f8 <unavailable> + 6392\n5    libc.so.6                          0x00002ba4cc55e460 __libc_start_main + 245\n6    tmp1xi97s67                        0x0000556984b6c529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_index = [Int]()\n    var max_sum_arr_index_reverse = [Int]()\n    var max_sum_arr_reverse = [Int]()\n    var max_sum_arr_reverse_index = [Int]()\n    var max_sum_arr_reverse_index_reverse = [Int]()\n    var max_sum_arr_reverse_reverse = [Int]()\n    var max_sum_arr_reverse_reverse_index = [Int]()\n    var max_sum_arr_reverse_reverse_index_reverse = [Int]()\n    var max_sum_arr_reverse_reverse_reverse = [Int]()\n    var max_sum_arr_reverse_reverse_reverse_index = [Int]()\n    var max_sum_arr_reverse_reverse_reverse_index_reverse = [Int]()\n    var max_sum_arr_reverse_reverse_reverse_reverse = [Int]()\n    var max_sum_arr_reverse_reverse_reverse_reverse_index = [Int]()\n    var max_sum_arr_reverse_reverse_reverse_reverse_index_reverse = [Int]()\n    var max_sum_arr_reverse_reverse_reverse_reverse_reverse = [Int]()\n    var max_sum_arr_reverse_reverse_reverse_reverse_reverse_index = [Int]()\n    var max_sum_arr_reverse_reverse_reverse_reverse_reverse_index_reverse = [Int]()\n    var max_sum_arr_reverse_reverse_reverse_reverse_reverse_reverse = [Int]()\n    var max_sum_arr_reverse_reverse_reverse_reverse_reverse_reverse_index = [Int]()\n    var max_sum_arr_reverse_reverse_reverse_reverse_reverse_reverse_index_reverse = [Int]()\n    var max_sum_arr_reverse_reverse_reverse_reverse_reverse_reverse_reverse = [Int]()\n    var max_sum_arr_reverse_reverse_reverse_reverse_reverse_reverse_reverse_index = [Int]()\n    var max_sum_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "/tmp/tmpzcnxm2of.swift:28:9: error: type annotation missing in pattern\n    var max_sum_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    for i in 0..<arr.count {\n        max_sum_so_far += arr[i]\n        if max_sum_so_far < 0 {\n            max_sum_so_far = 0\n        }\n        if max_sum < max_sum_so_far {\n            max_sum = max_sum_so_far\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmp5592n2ck/tmp5592n2ck.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b501fea8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b501fb9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b501fb9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b501fb9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5592n2ck                        0x00005613bd8e7578 <unavailable> + 5496\n5    libc.so.6                          0x00002b5020094460 __libc_start_main + 245\n6    tmp5592n2ck                        0x00005613bd8e71a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "/tmp/tmpd6wi3xep.swift:22:9: error: type annotation missing in pattern\n    var max_sum_arr_rev_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    var j = arr.count - 1\n    while i < j {\n        if arr[i] < arr[j] {\n            sum += arr[i]\n            i += 1\n        } else {\n            sum += arr[j]\n            j -= 1\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmp2bj8l7df/tmp2bj8l7df.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c1da71c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c1d768b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c1d768988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c1d7677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2bj8l7df                        0x00005617a33cb3e8 <unavailable> + 5096\n5    libc.so.6                          0x00002b9c1dc5d460 __libc_start_main + 245\n6    tmp2bj8l7df                        0x00005617a33cb019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var inc = [Int](repeating: 0, count: arr.count)\n    var dec = [Int](repeating: 0, count: arr.count)\n    \n    inc[0] = arr[0]\n    dec[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        inc[i] = max(inc[i - 1], arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        dec[i] = max(dec[i + 1], arr[i])\n    }\n    \n    var sum = 0\n    \n    for i in 0..<arr.count {\n        sum = max(sum, inc[i] + dec[i])\n    }\n    \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpo1bur8uv/tmpo1bur8uv.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac988660c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac988357b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac988357988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9883567b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpo1bur8uv                        0x000056118c8318f8 <unavailable> + 6392\n5    libc.so.6                          0x00002ac98884c460 __libc_start_main + 245\n6    tmpo1bur8uv                        0x000056118c831529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1], arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        max_sum_right[i] = max(max_sum_right[i + 1], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpg9_enm5w/tmpg9_enm5w.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8abe87fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8abe576b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8abe576988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8abe5757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg9_enm5w                        0x000055712d9b78f8 <unavailable> + 6392\n5    libc.so.6                          0x00002b8abea6b460 __libc_start_main + 245\n6    tmpg9_enm5w                        0x000055712d9b7529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var inc = Array(repeating: 0, count: arr.count)\n    var dec = Array(repeating: 0, count: arr.count)\n    inc[0] = arr[0]\n    dec[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        inc[i] = max(inc[i - 1] + arr[i], arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        dec[i] = max(dec[i + 1] + arr[i], arr[i])\n    }\n    \n    var maxSum = inc[0] + dec[1]\n    for i in 1..<arr.count - 1 {\n        maxSum = max(maxSum, inc[i] + dec[i + 1])\n    }\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmp61lmb73y/tmp61lmb73y.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b23455fec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b23452f5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b23452f5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b23452f47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp61lmb73y                        0x0000557834da58f8 <unavailable> + 6392\n5    libc.so.6                          0x00002b23457ea460 __libc_start_main + 245\n6    tmp61lmb73y                        0x0000557834da5529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    for i in 0..<arr.count {\n        var sum = 0\n        var sum_arr = [Int]()\n        for j in i..<arr.count {\n            sum += arr[j]\n            sum_arr.append(arr[j])\n            if sum > max_sum {\n                max_sum = sum\n                max_sum_arr = sum_arr\n            }\n        }\n    }\n    print(max_sum_arr)\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmprbk1mb6r/tmprbk1mb6r.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b14144c0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b14141b7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b14141b7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b14141b67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprbk1mb6r                        0x000055bbd03827c8 <unavailable> + 6088\n5    libc.so.6                          0x00002b14146ac460 __libc_start_main + 245\n6    tmprbk1mb6r                        0x000055bbd03823f9 <unavailable> + 5113\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpuj10ro26/tmpuj10ro26.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf6d098c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf6cd8fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf6cd8f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf6cd8e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuj10ro26                        0x000055a76b5af578 <unavailable> + 5496\n5    libc.so.6                          0x00002abf6d284460 __libc_start_main + 245\n6    tmpuj10ro26                        0x000055a76b5af1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count-1] = arr[arr.count-1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(arr[i], arr[i] + max_sum_left[i-1])\n    }\n    \n    for i in stride(from: arr.count-2, through: 0, by: -1) {\n        max_sum_right[i] = max(arr[i], arr[i] + max_sum_right[i+1])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpp7aci_hk/tmpp7aci_hk.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae69690bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae696602b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae696602988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae6966017b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpp7aci_hk                        0x0000561402acb8f8 <unavailable> + 6392\n5    libc.so.6                          0x00002ae696af7460 __libc_start_main + 245\n6    tmpp7aci_hk                        0x0000561402acb529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_ending_here = 0\n    var max_sum_so_far = 0\n    for i in 0..<arr.count {\n        max_sum_ending_here += arr[i]\n        if max_sum_ending_here < 0 {\n            max_sum_ending_here = 0\n        }\n        if max_sum_so_far < max_sum_ending_here {\n            max_sum_so_far = max_sum_ending_here\n        }\n    }\n    max_sum = max_sum_so_far\n    max_sum_ending_here = 0\n    max_sum_so_far = 0\n    for i in (0..<arr.count).reversed() {\n        max_sum_ending_here += arr[i]\n        if max_sum_ending_here < 0 {\n            max_sum_ending_here = 0\n        }\n        if max_sum_so_far < max_sum_ending_here {\n            max_sum_so_far = max_sum_ending_here\n        }\n    }\n    max_sum += max_sum_so_far\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpq3rhgy0x/tmpq3rhgy0x.swift:45: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad67dbf7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad67d8eeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad67d8ee988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad67d8ed7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpq3rhgy0x                        0x0000564ae698f838 <unavailable> + 6200\n5    libc.so.6                          0x00002ad67dde3460 __libc_start_main + 245\n6    tmpq3rhgy0x                        0x0000564ae698f469 <unavailable> + 5225\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpuj10ro26/tmpuj10ro26.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf6d098c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf6cd8fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf6cd8f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf6cd8e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuj10ro26                        0x000055a76b5af578 <unavailable> + 5496\n5    libc.so.6                          0x00002abf6d284460 __libc_start_main + 245\n6    tmpuj10ro26                        0x000055a76b5af1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpuj10ro26/tmpuj10ro26.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf6d098c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf6cd8fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf6cd8f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf6cd8e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuj10ro26                        0x000055a76b5af578 <unavailable> + 5496\n5    libc.so.6                          0x00002abf6d284460 __libc_start_main + 245\n6    tmpuj10ro26                        0x000055a76b5af1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    var max_sum_left_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        max_sum_right[i] = arr[i]\n        max_sum_left_right[i] = arr[i]\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_left[i] < max_sum_left[j] + arr[i] {\n                max_sum_left[i] = max_sum_left[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in (0..<arr.count).reversed() {\n        for j in (i+1..<arr.count).reversed() {\n            if arr[i] > arr[j] && max_sum_right[i] < max_sum_right[j] + arr[i] {\n                max_sum_right[i] = max_sum_right[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum_left_right[i] = max_sum_left[i] + max_sum_right[i] - arr[i]\n        if max_sum < max_sum_left_right[i] {\n            max_sum = max_sum_left_right[i]\n        }\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpuj10ro26/tmpuj10ro26.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf6d098c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf6cd8fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf6cd8f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf6cd8e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuj10ro26                        0x000055a76b5af578 <unavailable> + 5496\n5    libc.so.6                          0x00002abf6d284460 __libc_start_main + 245\n6    tmpuj10ro26                        0x000055a76b5af1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}