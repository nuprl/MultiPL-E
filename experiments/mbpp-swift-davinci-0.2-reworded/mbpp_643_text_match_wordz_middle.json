{
  "name": "mbpp_643_text_match_wordz_middle",
  "language": "swift",
  "prompt": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil",
    "    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text.range(of: \"z\", options: .regularExpression) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0",
    "    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()",
    "    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: nil, locale: nil) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0",
    "    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil",
    "    return text.range(of: \"z\", options: .regularExpression) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text.contains(\"z\") && !text.hasPrefix(\"z\") && !text.hasSuffix(\"z\")",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil",
    "    let pattern = \"\\\\b[^z]*z[^z]*\\\\b\"\n    return text.range(of: pattern, options: .regularExpression) != nil",
    "    return text.range(of: \"z\") != nil",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0",
    "    return text.rangeOfString(\"z\") != nil"
  ]
}