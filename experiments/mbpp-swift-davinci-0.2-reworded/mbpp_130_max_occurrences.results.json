{
  "name": "mbpp_130_max_occurrences",
  "language": "swift",
  "prompt": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpc4yo_fcv/tmpc4yo_fcv.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9f09785c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9f0947cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9f0947c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9f0947b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc4yo_fcv                        0x00005585e45477c5 <unavailable> + 6085\n5    libc.so.6                          0x00002b9f09971460 __libc_start_main + 245\n6    tmpc4yo_fcv                        0x00005585e4547389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    var max = 0\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n        if dict[num]! > max {\n            max = dict[num]!\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmprd7og0z8/tmprd7og0z8.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab7ec3f5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab7ec0ecb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab7ec0ec988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab7ec0eb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprd7og0z8                        0x000055a54dd766d5 <unavailable> + 5845\n5    libc.so.6                          0x00002ab7ec5e1460 __libc_start_main + 245\n6    tmprd7og0z8                        0x000055a54dd76299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict: [Int: Int] = [:]\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max_count = 0\n    for (_, count) in dict {\n        if count > max_count {\n            max_count = count\n        }\n    }\n    return max_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpdxr9ixq4/tmpdxr9ixq4.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad387343c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad38703ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad38703a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad3870397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdxr9ixq4                        0x000055ae548da7d5 <unavailable> + 6101\n5    libc.so.6                          0x00002ad38752f460 __libc_start_main + 245\n6    tmpdxr9ixq4                        0x000055ae548da399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var max = 0\n    var max_occurrences = 0\n    var occurrences = [Int: Int]()\n    for num in nums {\n        if let count = occurrences[num] {\n            occurrences[num] = count + 1\n        } else {\n            occurrences[num] = 1\n        }\n        if occurrences[num]! > max_occurrences {\n            max = num\n            max_occurrences = occurrences[num]!\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var maxCount = 0\n    var maxNum = 0\n    for (num, count) in dict {\n        if count > maxCount {\n            maxCount = count\n            maxNum = num\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpc4yo_fcv/tmpc4yo_fcv.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9f09785c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9f0947cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9f0947c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9f0947b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc4yo_fcv                        0x00005585e45477c5 <unavailable> + 6085\n5    libc.so.6                          0x00002b9f09971460 __libc_start_main + 245\n6    tmpc4yo_fcv                        0x00005585e4547389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences = [Int: Int]()\n    for num in nums {\n        occurrences[num] = (occurrences[num] ?? 0) + 1\n    }\n    return occurrences.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpuv9kb6ls/tmpuv9kb6ls.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae2b46edc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae2b43e4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae2b43e4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae2b43e37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuv9kb6ls                        0x00005569ffb257c5 <unavailable> + 6085\n5    libc.so.6                          0x00002ae2b48d9460 __libc_start_main + 245\n6    tmpuv9kb6ls                        0x00005569ffb25389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        dict[num] = (dict[num] ?? 0) + 1\n    }\n    var max = 0\n    for (_, value) in dict {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpa8pyv558/tmpa8pyv558.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba7b64bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba7b342b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba7b342988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba7b3417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa8pyv558                        0x000055e97ebe17b5 <unavailable> + 6069\n5    libc.so.6                          0x00002aba7b837460 __libc_start_main + 245\n6    tmpa8pyv558                        0x000055e97ebe1379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var max_count = 0\n    var max_num = 0\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n        if dict[num]! > max_count {\n            max_count = dict[num]!\n            max_num = num\n        }\n    }\n    return max_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (key, value) in counts {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpkfbsj5z9/tmpkfbsj5z9.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abfb4c1ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abfb4915b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abfb4915988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abfb49147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkfbsj5z9                        0x00005602853257d5 <unavailable> + 6101\n5    libc.so.6                          0x00002abfb4e0a460 __libc_start_main + 245\n6    tmpkfbsj5z9                        0x0000560285325399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpmzzmw6rt/tmpmzzmw6rt.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af8fe2ffc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af8fdff6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af8fdff6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af8fdff57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmzzmw6rt                        0x000055a77fd8a7e5 <unavailable> + 6117\n5    libc.so.6                          0x00002af8fe4eb460 __libc_start_main + 245\n6    tmpmzzmw6rt                        0x000055a77fd8a3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.values.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpx5vo8top/tmpx5vo8top.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9e2a887c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9e2a57eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9e2a57e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9e2a57d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx5vo8top                        0x0000561cb2ca6855 <unavailable> + 6229\n5    libc.so.6                          0x00002b9e2aa73460 __libc_start_main + 245\n6    tmpx5vo8top                        0x0000561cb2ca6419 <unavailable> + 5145\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int:Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    return counts.values.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp1eqgtlzn/tmp1eqgtlzn.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63005aec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63002a5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63002a5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63002a47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1eqgtlzn                        0x0000557063e53875 <unavailable> + 6261\n5    libc.so.6                          0x00002b630079a460 __libc_start_main + 245\n6    tmp1eqgtlzn                        0x0000557063e53439 <unavailable> + 5177\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        dict[num] = (dict[num] ?? 0) + 1\n    }\n    return dict.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmps1e60bm9/tmps1e60bm9.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba2ebc6dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba2eb964b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba2eb964988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba2eb9637b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps1e60bm9                        0x000055bf5e8ae7c5 <unavailable> + 6085\n5    libc.so.6                          0x00002ba2ebe59460 __libc_start_main + 245\n6    tmps1e60bm9                        0x000055bf5e8ae389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var max_occurrences = 0\n    var occurrences = [Int: Int]()\n    for num in nums {\n        if let count = occurrences[num] {\n            occurrences[num] = count + 1\n        } else {\n            occurrences[num] = 1\n        }\n        if occurrences[num]! > max_occurrences {\n            max_occurrences = occurrences[num]!\n        }\n    }\n    return max_occurrences\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmp_zhfs92_/tmp_zhfs92_.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba971d66c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba971a5db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba971a5d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba971a5c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_zhfs92_                        0x00005576f6a116d5 <unavailable> + 5845\n5    libc.so.6                          0x00002ba971f52460 __libc_start_main + 245\n6    tmp_zhfs92_                        0x00005576f6a11299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    let max = dict.values.max()\n    return max!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpzdgcbo07/tmpzdgcbo07.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aec7fd1dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aec7fa14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aec7fa14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aec7fa137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzdgcbo07                        0x0000559245f2c855 <unavailable> + 6229\n5    libc.so.6                          0x00002aec7ff09460 __libc_start_main + 245\n6    tmpzdgcbo07                        0x0000559245f2c419 <unavailable> + 5145\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    return counts.values.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpw39hwvc7/tmpw39hwvc7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3534dfcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3534af3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3534af3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3534af27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw39hwvc7                        0x0000561fabf1a875 <unavailable> + 6261\n5    libc.so.6                          0x00002b3534fe8460 __libc_start_main + 245\n6    tmpw39hwvc7                        0x0000561fabf1a439 <unavailable> + 5177\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (key, value) in counts {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpkfbsj5z9/tmpkfbsj5z9.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abfb4c1ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abfb4915b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abfb4915988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abfb49147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkfbsj5z9                        0x00005602853257d5 <unavailable> + 6101\n5    libc.so.6                          0x00002abfb4e0a460 __libc_start_main + 245\n6    tmpkfbsj5z9                        0x0000560285325399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        dict[num] = (dict[num] ?? 0) + 1\n    }\n    var max = 0\n    for (_, value) in dict {\n        max = max > value ? max : value\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpnd870q21/tmpnd870q21.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b22feabac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22fe7b1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22fe7b1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22fe7b07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnd870q21                        0x0000563e04cc37b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b22feca6460 __libc_start_main + 245\n6    tmpnd870q21                        0x0000563e04cc3379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict: [Int: Int] = [:]\n    for num in nums {\n        dict[num] = (dict[num] ?? 0) + 1\n    }\n    var max = 0\n    for (_, value) in dict {\n        max = max > value ? max : value\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpn6n_c_yj/tmpn6n_c_yj.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1bb3076c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1bb2d6db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1bb2d6d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1bb2d6c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn6n_c_yj                        0x0000563d93a687d5 <unavailable> + 6101\n5    libc.so.6                          0x00002b1bb3262460 __libc_start_main + 245\n6    tmpn6n_c_yj                        0x0000563d93a68399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences = [Int: Int]()\n    for num in nums {\n        if let count = occurrences[num] {\n            occurrences[num] = count + 1\n        } else {\n            occurrences[num] = 1\n        }\n    }\n    \n    var max = 0\n    for (_, count) in occurrences {\n        if count > max {\n            max = count\n        }\n    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpu6an2n2x/tmpu6an2n2x.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6ee0f65c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6ee0c5cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6ee0c5c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6ee0c5b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu6an2n2x                        0x000055643bde47b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b6ee1151460 __libc_start_main + 245\n6    tmpu6an2n2x                        0x000055643bde4379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict: [Int: Int] = [:]\n    var max = 0\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n        if dict[num]! > max {\n            max = dict[num]!\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmplpmas15r/tmplpmas15r.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7af48bec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7af45b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7af45b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7af45b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplpmas15r                        0x0000561d1f4706f5 <unavailable> + 5877\n5    libc.so.6                          0x00002b7af4aaa460 __libc_start_main + 245\n6    tmplpmas15r                        0x0000561d1f4702b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        dict[num] = (dict[num] ?? 0) + 1\n    }\n    var max = 0\n    for (_, value) in dict {\n        max = max > value ? max : value\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpnd870q21/tmpnd870q21.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b22feabac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22fe7b1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22fe7b1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22fe7b07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnd870q21                        0x0000563e04cc37b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b22feca6460 __libc_start_main + 245\n6    tmpnd870q21                        0x0000563e04cc3379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        dict[num] = (dict[num] ?? 0) + 1\n    }\n    return dict.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmps1e60bm9/tmps1e60bm9.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba2ebc6dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba2eb964b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba2eb964988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba2eb9637b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps1e60bm9                        0x000055bf5e8ae7c5 <unavailable> + 6085\n5    libc.so.6                          0x00002ba2ebe59460 __libc_start_main + 245\n6    tmps1e60bm9                        0x000055bf5e8ae389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences = [Int: Int]()\n    for num in nums {\n        occurrences[num] = (occurrences[num] ?? 0) + 1\n    }\n    return occurrences.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpuv9kb6ls/tmpuv9kb6ls.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae2b46edc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae2b43e4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae2b43e4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae2b43e37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuv9kb6ls                        0x00005569ffb257c5 <unavailable> + 6085\n5    libc.so.6                          0x00002ae2b48d9460 __libc_start_main + 245\n6    tmpuv9kb6ls                        0x00005569ffb25389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (key, value) in counts {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpkfbsj5z9/tmpkfbsj5z9.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abfb4c1ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abfb4915b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abfb4915988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abfb49147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkfbsj5z9                        0x00005602853257d5 <unavailable> + 6101\n5    libc.so.6                          0x00002abfb4e0a460 __libc_start_main + 245\n6    tmpkfbsj5z9                        0x0000560285325399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        dict[num] = (dict[num] ?? 0) + 1\n    }\n    var max = 0\n    for (_, count) in dict {\n        max = max > count ? max : count\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpigqhlvoy/tmpigqhlvoy.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aea41a94c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aea4178bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aea4178b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aea4178a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigqhlvoy                        0x000055858d3a07b5 <unavailable> + 6069\n5    libc.so.6                          0x00002aea41c80460 __libc_start_main + 245\n6    tmpigqhlvoy                        0x000055858d3a0379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    let max_count = counts.values.max()\n    return max_count ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmplb8hvvyb/tmplb8hvvyb.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2270d10c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2270a07b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2270a07988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2270a067b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplb8hvvyb                        0x000055bb6757f7e5 <unavailable> + 6117\n5    libc.so.6                          0x00002b2270efc460 __libc_start_main + 245\n6    tmplb8hvvyb                        0x000055bb6757f3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var max_count = 0\n    var max_item = 0\n    var counts = [Int: Int]()\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n        if counts[num]! > max_count {\n            max_count = counts[num]!\n            max_item = num\n        }\n    }\n    return max_item\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    var max = 0\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n        if dict[num]! > max {\n            max = dict[num]!\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmprd7og0z8/tmprd7og0z8.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab7ec3f5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab7ec0ecb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab7ec0ec988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab7ec0eb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprd7og0z8                        0x000055a54dd766d5 <unavailable> + 5845\n5    libc.so.6                          0x00002ab7ec5e1460 __libc_start_main + 245\n6    tmprd7og0z8                        0x000055a54dd76299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    var max = 0\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n        if dict[num]! > max {\n            max = dict[num]!\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmprd7og0z8/tmprd7og0z8.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab7ec3f5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab7ec0ecb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab7ec0ec988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab7ec0eb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprd7og0z8                        0x000055a54dd766d5 <unavailable> + 5845\n5    libc.so.6                          0x00002ab7ec5e1460 __libc_start_main + 245\n6    tmprd7og0z8                        0x000055a54dd76299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var max_occurrences = 0\n    var occurrences: [Int: Int] = [:]\n    for num in nums {\n        occurrences[num] = (occurrences[num] ?? 0) + 1\n        if occurrences[num]! > max_occurrences {\n            max_occurrences = occurrences[num]!\n        }\n    }\n    return max_occurrences\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmp6zt8nbyz/tmp6zt8nbyz.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3bb0ae3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3bb07dab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3bb07da988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3bb07d97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6zt8nbyz                        0x0000564be25406f5 <unavailable> + 5877\n5    libc.so.6                          0x00002b3bb0ccf460 __libc_start_main + 245\n6    tmp6zt8nbyz                        0x0000564be25402b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences: [Int: Int] = [:]\n    for num in nums {\n        occurrences[num] = (occurrences[num] ?? 0) + 1\n    }\n    return occurrences.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpkav8ckd5/tmpkav8ckd5.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b36b841cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b36b8113b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b36b8113988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b36b81127b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkav8ckd5                        0x00005585416047e5 <unavailable> + 6117\n5    libc.so.6                          0x00002b36b8608460 __libc_start_main + 245\n6    tmpkav8ckd5                        0x00005585416043a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpmvb93f3i/tmpmvb93f3i.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab46c823c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab46c51ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab46c51a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab46c5197b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmvb93f3i                        0x0000561203b5f7c5 <unavailable> + 6085\n5    libc.so.6                          0x00002ab46ca0f460 __libc_start_main + 245\n6    tmpmvb93f3i                        0x0000561203b5f389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max_count = 0\n    for (_, count) in counts {\n        if count > max_count {\n            max_count = count\n        }\n    }\n    return max_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpwq_vk8_j/tmpwq_vk8_j.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6509dc6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6509abdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6509abd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6509abc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwq_vk8_j                        0x000055e9a44297b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b6509fb2460 __libc_start_main + 245\n6    tmpwq_vk8_j                        0x000055e9a4429379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict: [Int: Int] = [:]\n    for num in nums {\n        dict[num] = (dict[num] ?? 0) + 1\n    }\n    return dict.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpy0fgaa_n/tmpy0fgaa_n.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8c90946c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8c9063db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8c9063d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8c9063c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy0fgaa_n                        0x000055d9a341f7e5 <unavailable> + 6117\n5    libc.so.6                          0x00002b8c90b32460 __libc_start_main + 245\n6    tmpy0fgaa_n                        0x000055d9a341f3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    var max = 0\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n        if dict[num]! > max {\n            max = dict[num]!\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmprd7og0z8/tmprd7og0z8.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab7ec3f5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab7ec0ecb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab7ec0ec988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab7ec0eb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprd7og0z8                        0x000055a54dd766d5 <unavailable> + 5845\n5    libc.so.6                          0x00002ab7ec5e1460 __libc_start_main + 245\n6    tmprd7og0z8                        0x000055a54dd76299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    var max = 0\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n        if dict[num]! > max {\n            max = dict[num]!\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmprd7og0z8/tmprd7og0z8.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab7ec3f5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab7ec0ecb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab7ec0ec988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab7ec0eb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprd7og0z8                        0x000055a54dd766d5 <unavailable> + 5845\n5    libc.so.6                          0x00002ab7ec5e1460 __libc_start_main + 245\n6    tmprd7og0z8                        0x000055a54dd76299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpfbzvew70/tmpfbzvew70.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad24f18ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad24ee85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad24ee85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad24ee847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfbzvew70                        0x000055848b096875 <unavailable> + 6261\n5    libc.so.6                          0x00002ad24f37a460 __libc_start_main + 245\n6    tmpfbzvew70                        0x000055848b096439 <unavailable> + 5177\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpfbzvew70/tmpfbzvew70.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad24f18ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad24ee85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad24ee85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad24ee847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfbzvew70                        0x000055848b096875 <unavailable> + 6261\n5    libc.so.6                          0x00002ad24f37a460 __libc_start_main + 245\n6    tmpfbzvew70                        0x000055848b096439 <unavailable> + 5177\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var max = 0\n    var max_item = 0\n    var counts = [Int: Int]()\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n        if counts[num]! > max {\n            max = counts[num]!\n            max_item = num\n        }\n    }\n    return max_item\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences = [Int: Int]()\n    for num in nums {\n        occurrences[num] = (occurrences[num] ?? 0) + 1\n    }\n    return occurrences.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpuv9kb6ls/tmpuv9kb6ls.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae2b46edc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae2b43e4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae2b43e4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae2b43e37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuv9kb6ls                        0x00005569ffb257c5 <unavailable> + 6085\n5    libc.so.6                          0x00002ae2b48d9460 __libc_start_main + 245\n6    tmpuv9kb6ls                        0x00005569ffb25389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpmzzmw6rt/tmpmzzmw6rt.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af8fe2ffc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af8fdff6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af8fdff6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af8fdff57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmzzmw6rt                        0x000055a77fd8a7e5 <unavailable> + 6117\n5    libc.so.6                          0x00002af8fe4eb460 __libc_start_main + 245\n6    tmpmzzmw6rt                        0x000055a77fd8a3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict: [Int: Int] = [:]\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.values.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmp64dmday0/tmp64dmday0.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af3138ebc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af3135e2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af3135e2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af3135e17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp64dmday0                        0x000055c6c1963875 <unavailable> + 6261\n5    libc.so.6                          0x00002af313ad7460 __libc_start_main + 245\n6    tmp64dmday0                        0x000055c6c1963439 <unavailable> + 5177\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences = [Int: Int]()\n    for num in nums {\n        if let count = occurrences[num] {\n            occurrences[num] = count + 1\n        } else {\n            occurrences[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in occurrences {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpwsiae0rn/tmpwsiae0rn.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af9c2805c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af9c24fcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af9c24fc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af9c24fb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwsiae0rn                        0x000055d2e16c97b5 <unavailable> + 6069\n5    libc.so.6                          0x00002af9c29f1460 __libc_start_main + 245\n6    tmpwsiae0rn                        0x000055d2e16c9379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpmvb93f3i/tmpmvb93f3i.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab46c823c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab46c51ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab46c51a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab46c5197b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmvb93f3i                        0x0000561203b5f7c5 <unavailable> + 6085\n5    libc.so.6                          0x00002ab46ca0f460 __libc_start_main + 245\n6    tmpmvb93f3i                        0x0000561203b5f389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in counts {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpeb_n5xnw/tmpeb_n5xnw.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aaf3c45fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aaf3c156b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aaf3c156988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aaf3c1557b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpeb_n5xnw                        0x000055cbee78b7d5 <unavailable> + 6101\n5    libc.so.6                          0x00002aaf3c64b460 __libc_start_main + 245\n6    tmpeb_n5xnw                        0x000055cbee78b399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpmzzmw6rt/tmpmzzmw6rt.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af8fe2ffc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af8fdff6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af8fdff6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af8fdff57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmzzmw6rt                        0x000055a77fd8a7e5 <unavailable> + 6117\n5    libc.so.6                          0x00002af8fe4eb460 __libc_start_main + 245\n6    tmpmzzmw6rt                        0x000055a77fd8a3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in counts {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpuhezy3i9/tmpuhezy3i9.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0fbc43bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0fbc132b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0fbc132988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0fbc1317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuhezy3i9                        0x000055a30cba87b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b0fbc627460 __libc_start_main + 245\n6    tmpuhezy3i9                        0x000055a30cba8379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        dict[num] = (dict[num] ?? 0) + 1\n    }\n    var max = 0\n    for (_, value) in dict {\n        max = max > value ? max : value\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpnd870q21/tmpnd870q21.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b22feabac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22fe7b1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22fe7b1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22fe7b07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnd870q21                        0x0000563e04cc37b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b22feca6460 __libc_start_main + 245\n6    tmpnd870q21                        0x0000563e04cc3379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict: [Int: Int] = [:]\n    for num in nums {\n        dict[num, default: 0] += 1\n    }\n    return dict.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpl3iepo08/tmpl3iepo08.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba83dd5ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba83da51b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba83da51988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba83da507b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl3iepo08                        0x0000559dfdb06875 <unavailable> + 6261\n5    libc.so.6                          0x00002ba83df46460 __libc_start_main + 245\n6    tmpl3iepo08                        0x0000559dfdb06439 <unavailable> + 5177\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.values.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpx5vo8top/tmpx5vo8top.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9e2a887c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9e2a57eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9e2a57e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9e2a57d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx5vo8top                        0x0000561cb2ca6855 <unavailable> + 6229\n5    libc.so.6                          0x00002b9e2aa73460 __libc_start_main + 245\n6    tmpx5vo8top                        0x0000561cb2ca6419 <unavailable> + 5145\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences = [Int: Int]()\n    for num in nums {\n        occurrences[num] = (occurrences[num] ?? 0) + 1\n    }\n    return occurrences.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpuv9kb6ls/tmpuv9kb6ls.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae2b46edc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae2b43e4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae2b43e4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae2b43e37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuv9kb6ls                        0x00005569ffb257c5 <unavailable> + 6085\n5    libc.so.6                          0x00002ae2b48d9460 __libc_start_main + 245\n6    tmpuv9kb6ls                        0x00005569ffb25389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict: [Int: Int] = [:]\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpti52zybh/tmpti52zybh.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9460fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac945df1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac945df1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac945df07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpti52zybh                        0x000055aadcaf57d5 <unavailable> + 6101\n5    libc.so.6                          0x00002ac9462e6460 __libc_start_main + 245\n6    tmpti52zybh                        0x000055aadcaf5399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var max_count = 0\n    var max_item = 0\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n        if counts[num]! > max_count {\n            max_count = counts[num]!\n            max_item = num\n        }\n    }\n    return max_item\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict: [Int: Int] = [:]\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpti52zybh/tmpti52zybh.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9460fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac945df1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac945df1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac945df07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpti52zybh                        0x000055aadcaf57d5 <unavailable> + 6101\n5    libc.so.6                          0x00002ac9462e6460 __libc_start_main + 245\n6    tmpti52zybh                        0x000055aadcaf5399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict: [Int: Int] = [:]\n    for num in nums {\n        dict[num] = (dict[num] ?? 0) + 1\n    }\n    return dict.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpy0fgaa_n/tmpy0fgaa_n.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8c90946c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8c9063db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8c9063d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8c9063c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy0fgaa_n                        0x000055d9a341f7e5 <unavailable> + 6117\n5    libc.so.6                          0x00002b8c90b32460 __libc_start_main + 245\n6    tmpy0fgaa_n                        0x000055d9a341f3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var max_count = 0\n    var max_num = 0\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n        if dict[num]! > max_count {\n            max_count = dict[num]!\n            max_num = num\n        }\n    }\n    return max_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences = [Int: Int]()\n    for num in nums {\n        if let count = occurrences[num] {\n            occurrences[num] = count + 1\n        } else {\n            occurrences[num] = 1\n        }\n    }\n    var max = 0\n    for (key, value) in occurrences {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmp2_ztvabt/tmp2_ztvabt.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3a14d83c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3a14a7ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3a14a7a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3a14a797b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2_ztvabt                        0x0000558223eb97b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b3a14f6f460 __libc_start_main + 245\n6    tmp2_ztvabt                        0x0000558223eb9379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for n in nums {\n        if let count = counts[n] {\n            counts[n] = count + 1\n        } else {\n            counts[n] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in counts {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpmmiya6ah/tmpmmiya6ah.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56a5923c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56a561ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56a561a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56a56197b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmmiya6ah                        0x0000562010bb27d5 <unavailable> + 6101\n5    libc.so.6                          0x00002b56a5b0f460 __libc_start_main + 245\n6    tmpmmiya6ah                        0x0000562010bb2399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, value) in dict {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpg94358w0/tmpg94358w0.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0f2f4dbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0f2f1d2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0f2f1d2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0f2f1d17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg94358w0                        0x000055d0502267b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b0f2f6c7460 __libc_start_main + 245\n6    tmpg94358w0                        0x000055d050226379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences: [Int: Int] = [:]\n    for num in nums {\n        if let count = occurrences[num] {\n            occurrences[num] = count + 1\n        } else {\n            occurrences[num] = 1\n        }\n    }\n    var max_count = 0\n    var max_num = 0\n    for (num, count) in occurrences {\n        if count > max_count {\n            max_count = count\n            max_num = num\n        }\n    }\n    return max_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        dict[num] = (dict[num] ?? 0) + 1\n    }\n    return dict.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmps1e60bm9/tmps1e60bm9.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba2ebc6dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba2eb964b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba2eb964988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba2eb9637b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps1e60bm9                        0x000055bf5e8ae7c5 <unavailable> + 6085\n5    libc.so.6                          0x00002ba2ebe59460 __libc_start_main + 245\n6    tmps1e60bm9                        0x000055bf5e8ae389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences: [Int: Int] = [:]\n    for n in nums {\n        occurrences[n] = (occurrences[n] ?? 0) + 1\n    }\n    return occurrences.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmp7mxjqpgn/tmp7mxjqpgn.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3134fefc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3134ce6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3134ce6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3134ce57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7mxjqpgn                        0x000055bbb87d07e5 <unavailable> + 6117\n5    libc.so.6                          0x00002b31351db460 __libc_start_main + 245\n6    tmp7mxjqpgn                        0x000055bbb87d03a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var max = 0\n    var count = 0\n    var dict = [Int: Int]()\n    for num in nums {\n        if let value = dict[num] {\n            dict[num] = value + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    for (_, value) in dict {\n        if value > count {\n            count = value\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpjbzhtd8m/tmpjbzhtd8m.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af898746c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af89843db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af89843d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af89843c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjbzhtd8m                        0x000055eae93457b5 <unavailable> + 6069\n5    libc.so.6                          0x00002af898932460 __libc_start_main + 245\n6    tmpjbzhtd8m                        0x000055eae9345379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpmzzmw6rt/tmpmzzmw6rt.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af8fe2ffc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af8fdff6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af8fdff6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af8fdff57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmzzmw6rt                        0x000055a77fd8a7e5 <unavailable> + 6117\n5    libc.so.6                          0x00002af8fe4eb460 __libc_start_main + 245\n6    tmpmzzmw6rt                        0x000055a77fd8a3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var count = [Int: Int]()\n    for num in nums {\n        count[num] = (count[num] ?? 0) + 1\n    }\n    var max = 0\n    for (_, c) in count {\n        max = max > c ? max : c\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpdczpm6y7/tmpdczpm6y7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab07fc1dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab07f914b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab07f914988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab07f9137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdczpm6y7                        0x00005624b73787b5 <unavailable> + 6069\n5    libc.so.6                          0x00002ab07fe09460 __libc_start_main + 245\n6    tmpdczpm6y7                        0x00005624b7378379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var max_count = 0\n    var max_item = 0\n    var counts = [Int: Int]()\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n        if counts[num]! > max_count {\n            max_count = counts[num]!\n            max_item = num\n        }\n    }\n    return max_item\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences: [Int: Int] = [:]\n    for num in nums {\n        occurrences[num] = (occurrences[num] ?? 0) + 1\n    }\n    return occurrences.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpkav8ckd5/tmpkav8ckd5.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b36b841cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b36b8113b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b36b8113988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b36b81127b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkav8ckd5                        0x00005585416047e5 <unavailable> + 6117\n5    libc.so.6                          0x00002b36b8608460 __libc_start_main + 245\n6    tmpkav8ckd5                        0x00005585416043a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, value) in dict {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpg94358w0/tmpg94358w0.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0f2f4dbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0f2f1d2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0f2f1d2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0f2f1d17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg94358w0                        0x000055d0502267b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b0f2f6c7460 __libc_start_main + 245\n6    tmpg94358w0                        0x000055d050226379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (num, count) in counts {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmp7ehhhk54/tmp7ehhhk54.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b61b557fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b61b5276b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b61b5276988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b61b52757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ehhhk54                        0x0000560df1a5f7d5 <unavailable> + 6101\n5    libc.so.6                          0x00002b61b576b460 __libc_start_main + 245\n6    tmp7ehhhk54                        0x0000560df1a5f399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences = [Int: Int]()\n    for num in nums {\n        if let count = occurrences[num] {\n            occurrences[num] = count + 1\n        } else {\n            occurrences[num] = 1\n        }\n    }\n    var max_occurrences = 0\n    for (_, count) in occurrences {\n        max_occurrences = max(max_occurrences, count)\n    }\n    return max_occurrences\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmp_vduk_rc/tmp_vduk_rc.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4369606c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b43692fdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b43692fd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b43692fc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_vduk_rc                        0x000055df7c5a8845 <unavailable> + 6213\n5    libc.so.6                          0x00002b43697f2460 __libc_start_main + 245\n6    tmp_vduk_rc                        0x000055df7c5a8409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict: [Int: Int] = [:]\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpti52zybh/tmpti52zybh.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9460fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac945df1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac945df1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac945df07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpti52zybh                        0x000055aadcaf57d5 <unavailable> + 6101\n5    libc.so.6                          0x00002ac9462e6460 __libc_start_main + 245\n6    tmpti52zybh                        0x000055aadcaf5399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (num, count) in counts {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpuye7wmar/tmpuye7wmar.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6821ce0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b68219d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b68219d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b68219d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuye7wmar                        0x000055e1d31d47b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b6821ecc460 __libc_start_main + 245\n6    tmpuye7wmar                        0x000055e1d31d4379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (num, count) in counts {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmp7ehhhk54/tmp7ehhhk54.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b61b557fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b61b5276b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b61b5276988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b61b52757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ehhhk54                        0x0000560df1a5f7d5 <unavailable> + 6101\n5    libc.so.6                          0x00002b61b576b460 __libc_start_main + 245\n6    tmp7ehhhk54                        0x0000560df1a5f399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in counts {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpeb_n5xnw/tmpeb_n5xnw.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aaf3c45fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aaf3c156b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aaf3c156988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aaf3c1557b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpeb_n5xnw                        0x000055cbee78b7d5 <unavailable> + 6101\n5    libc.so.6                          0x00002aaf3c64b460 __libc_start_main + 245\n6    tmpeb_n5xnw                        0x000055cbee78b399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    \n    var max_count = 0\n    for (_, count) in dict {\n        if count > max_count {\n            max_count = count\n        }\n    }\n    return max_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmp7egtqgy4/tmp7egtqgy4.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aff77b59c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aff77850b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aff77850988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aff7784f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7egtqgy4                        0x000055d53c3117b5 <unavailable> + 6069\n5    libc.so.6                          0x00002aff77d45460 __libc_start_main + 245\n6    tmp7egtqgy4                        0x000055d53c311379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpmvb93f3i/tmpmvb93f3i.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab46c823c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab46c51ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab46c51a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab46c5197b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmvb93f3i                        0x0000561203b5f7c5 <unavailable> + 6085\n5    libc.so.6                          0x00002ab46ca0f460 __libc_start_main + 245\n6    tmpmvb93f3i                        0x0000561203b5f389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        dict[num] = (dict[num] ?? 0) + 1\n    }\n    var max = 0\n    for (_, value) in dict {\n        max = max > value ? max : value\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpnd870q21/tmpnd870q21.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b22feabac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22fe7b1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22fe7b1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22fe7b07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnd870q21                        0x0000563e04cc37b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b22feca6460 __libc_start_main + 245\n6    tmpnd870q21                        0x0000563e04cc3379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in counts {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpuhezy3i9/tmpuhezy3i9.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0fbc43bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0fbc132b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0fbc132988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0fbc1317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuhezy3i9                        0x000055a30cba87b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b0fbc627460 __libc_start_main + 245\n6    tmpuhezy3i9                        0x000055a30cba8379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (key, value) in counts {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpkfbsj5z9/tmpkfbsj5z9.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abfb4c1ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abfb4915b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abfb4915988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abfb49147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkfbsj5z9                        0x00005602853257d5 <unavailable> + 6101\n5    libc.so.6                          0x00002abfb4e0a460 __libc_start_main + 245\n6    tmpkfbsj5z9                        0x0000560285325399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    \n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmp7t_pl78e/tmp7t_pl78e.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b37ed008c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b37eccffb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b37eccff988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b37eccfe7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7t_pl78e                        0x00005600782487b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b37ed1f4460 __libc_start_main + 245\n6    tmp7t_pl78e                        0x0000560078248379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (key, count) in counts {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpvg5mleh8/tmpvg5mleh8.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0ed2b26c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0ed281db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0ed281d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0ed281c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvg5mleh8                        0x000055bdb77447b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b0ed2d12460 __libc_start_main + 245\n6    tmpvg5mleh8                        0x000055bdb7744379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var nums = nums\n    nums.sort()\n    var max = 0\n    var count = 1\n    for i in 1..<nums.count {\n        if nums[i] == nums[i-1] {\n            count += 1\n        } else {\n            count = 1\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpy_9e82kj/tmpy_9e82kj.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af4a3b72c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af4a3869b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af4a3869988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af4a38687b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy_9e82kj                        0x0000557705beb705 <unavailable> + 5893\n5    libc.so.6                          0x00002af4a3d5e460 __libc_start_main + 245\n6    tmpy_9e82kj                        0x0000557705beb2c9 <unavailable> + 4809\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict: [Int: Int] = [:]\n    for n in nums {\n        if let count = dict[n] {\n            dict[n] = count + 1\n        } else {\n            dict[n] = 1\n        }\n    }\n    var max = 0\n    for (key, value) in dict {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpofa9xo9a/tmpofa9xo9a.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5c52d1ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5c52a11b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5c52a11988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5c52a107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpofa9xo9a                        0x000055d4c17f57d5 <unavailable> + 6101\n5    libc.so.6                          0x00002b5c52f06460 __libc_start_main + 245\n6    tmpofa9xo9a                        0x000055d4c17f5399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, value) in dict {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpg94358w0/tmpg94358w0.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0f2f4dbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0f2f1d2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0f2f1d2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0f2f1d17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg94358w0                        0x000055d0502267b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b0f2f6c7460 __libc_start_main + 245\n6    tmpg94358w0                        0x000055d050226379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict: [Int: Int] = [:]\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpcmwrq8d0/tmpcmwrq8d0.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1055602c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b10552f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b10552f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b10552f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcmwrq8d0                        0x000055c2094d37e5 <unavailable> + 6117\n5    libc.so.6                          0x00002b10557ee460 __libc_start_main + 245\n6    tmpcmwrq8d0                        0x000055c2094d33a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        dict[num, default: 0] += 1\n    }\n    return dict.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpid2gw2rd/tmpid2gw2rd.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abb6887fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abb68576b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abb68576988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abb685757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpid2gw2rd                        0x000055937dff1865 <unavailable> + 6245\n5    libc.so.6                          0x00002abb68a6b460 __libc_start_main + 245\n6    tmpid2gw2rd                        0x000055937dff1429 <unavailable> + 5161\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var max_occurrences = 0\n    var occurrences = [Int: Int]()\n    for num in nums {\n        occurrences[num] = (occurrences[num] ?? 0) + 1\n        if occurrences[num]! > max_occurrences {\n            max_occurrences = occurrences[num]!\n        }\n    }\n    return max_occurrences\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpq068fns6/tmpq068fns6.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0f2fb55c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0f2f84cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0f2f84c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0f2f84b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpq068fns6                        0x0000564d411006d5 <unavailable> + 5845\n5    libc.so.6                          0x00002b0f2fd41460 __libc_start_main + 245\n6    tmpq068fns6                        0x0000564d41100299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict: [Int: Int] = [:]\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.values.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmp64dmday0/tmp64dmday0.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af3138ebc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af3135e2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af3135e2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af3135e17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp64dmday0                        0x000055c6c1963875 <unavailable> + 6261\n5    libc.so.6                          0x00002af313ad7460 __libc_start_main + 245\n6    tmp64dmday0                        0x000055c6c1963439 <unavailable> + 5177\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max_count = 0\n    for (_, count) in dict {\n        max_count = max(max_count, count)\n    }\n    return max_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpi9rev9na/tmpi9rev9na.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b89b2fb7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b89b2caeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b89b2cae988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b89b2cad7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpi9rev9na                        0x0000564c67b94845 <unavailable> + 6213\n5    libc.so.6                          0x00002b89b31a3460 __libc_start_main + 245\n6    tmpi9rev9na                        0x0000564c67b94409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in counts {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpuhezy3i9/tmpuhezy3i9.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0fbc43bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0fbc132b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0fbc132988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0fbc1317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuhezy3i9                        0x000055a30cba87b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b0fbc627460 __libc_start_main + 245\n6    tmpuhezy3i9                        0x000055a30cba8379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in counts {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpuhezy3i9/tmpuhezy3i9.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0fbc43bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0fbc132b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0fbc132988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0fbc1317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuhezy3i9                        0x000055a30cba87b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b0fbc627460 __libc_start_main + 245\n6    tmpuhezy3i9                        0x000055a30cba8379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    \n    var max = 0\n    for (_, count) in counts {\n        if count > max {\n            max = count\n        }\n    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpxwb3rmgt/tmpxwb3rmgt.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afc18c26c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afc1891db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afc1891d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afc1891c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxwb3rmgt                        0x0000563a67dd87d5 <unavailable> + 6101\n5    libc.so.6                          0x00002afc18e12460 __libc_start_main + 245\n6    tmpxwb3rmgt                        0x0000563a67dd8399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict: [Int: Int] = [:]\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.values.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmp64dmday0/tmp64dmday0.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af3138ebc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af3135e2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af3135e2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af3135e17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp64dmday0                        0x000055c6c1963875 <unavailable> + 6261\n5    libc.so.6                          0x00002af313ad7460 __libc_start_main + 245\n6    tmp64dmday0                        0x000055c6c1963439 <unavailable> + 5177\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var count = [Int: Int]()\n    for num in nums {\n        if let c = count[num] {\n            count[num] = c + 1\n        } else {\n            count[num] = 1\n        }\n    }\n    var max = 0\n    for (_, c) in count {\n        if c > max {\n            max = c\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmp_enb5x_0/tmp_enb5x_0.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b019ebadc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b019e8a4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b019e8a4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b019e8a37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_enb5x_0                        0x000055a1014be7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b019ed99460 __libc_start_main + 245\n6    tmp_enb5x_0                        0x000055a1014be379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpmzzmw6rt/tmpmzzmw6rt.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af8fe2ffc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af8fdff6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af8fdff6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af8fdff57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmzzmw6rt                        0x000055a77fd8a7e5 <unavailable> + 6117\n5    libc.so.6                          0x00002af8fe4eb460 __libc_start_main + 245\n6    tmpmzzmw6rt                        0x000055a77fd8a3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int:Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (key, value) in dict {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpc13o3ddz/tmpc13o3ddz.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b15eab0ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b15ea801b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b15ea801988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b15ea8007b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc13o3ddz                        0x000055ffa291a7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b15eacf6460 __libc_start_main + 245\n6    tmpc13o3ddz                        0x000055ffa291a379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max_count = 0\n    var max_num = 0\n    for (num, count) in counts {\n        if count > max_count {\n            max_count = count\n            max_num = num\n        }\n    }\n    return max_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for n in nums {\n        counts[n] = (counts[n] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpdbtqt8m6/tmpdbtqt8m6.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b05dd368c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b05dd05fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b05dd05f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b05dd05e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdbtqt8m6                        0x000055a75909e7e5 <unavailable> + 6117\n5    libc.so.6                          0x00002b05dd554460 __libc_start_main + 245\n6    tmpdbtqt8m6                        0x000055a75909e3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max_count = 0\n    for (key, value) in dict {\n        if value > max_count {\n            max_count = value\n        }\n    }\n    return max_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpn57al62c/tmpn57al62c.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4f121f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4f11eeab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4f11eea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4f11ee97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn57al62c                        0x0000564e8e28f7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b4f123df460 __libc_start_main + 245\n6    tmpn57al62c                        0x0000564e8e28f379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpc4yo_fcv/tmpc4yo_fcv.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9f09785c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9f0947cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9f0947c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9f0947b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc4yo_fcv                        0x00005585e45477c5 <unavailable> + 6085\n5    libc.so.6                          0x00002b9f09971460 __libc_start_main + 245\n6    tmpc4yo_fcv                        0x00005585e4547389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences = [Int: Int]()\n    for num in nums {\n        occurrences[num] = (occurrences[num] ?? 0) + 1\n    }\n    var max_occurrence = 0\n    for (_, occurrence) in occurrences {\n        max_occurrence = max(max_occurrence, occurrence)\n    }\n    return max_occurrence\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmprnrlc1f6/tmprnrlc1f6.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b74f52b4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b74f4fabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b74f4fab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b74f4faa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprnrlc1f6                        0x000055bb2d076845 <unavailable> + 6213\n5    libc.so.6                          0x00002b74f54a0460 __libc_start_main + 245\n6    tmprnrlc1f6                        0x000055bb2d076409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    return counts.values.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpqfga4dup/tmpqfga4dup.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abc199a2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abc19699b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abc19699988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abc196987b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqfga4dup                        0x000055d598bd7855 <unavailable> + 6229\n5    libc.so.6                          0x00002abc19b8e460 __libc_start_main + 245\n6    tmpqfga4dup                        0x000055d598bd7419 <unavailable> + 5145\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict: [Int: Int] = [:]\n    for num in nums {\n        dict[num] = (dict[num] ?? 0) + 1\n    }\n    var max = 0\n    for (_, value) in dict {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpan33bu34/tmpan33bu34.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae00784dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae007544b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae007544988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae0075437b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpan33bu34                        0x000055ed6ef1e7d5 <unavailable> + 6101\n5    libc.so.6                          0x00002ae007a39460 __libc_start_main + 245\n6    tmpan33bu34                        0x000055ed6ef1e399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var num_counts = [Int: Int]()\n    for num in nums {\n        if let count = num_counts[num] {\n            num_counts[num] = count + 1\n        } else {\n            num_counts[num] = 1\n        }\n    }\n    var max_count = 0\n    for (_, count) in num_counts {\n        if count > max_count {\n            max_count = count\n        }\n    }\n    return max_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpdlv5ti1n/tmpdlv5ti1n.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6440fc0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6440cb7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6440cb7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6440cb67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdlv5ti1n                        0x00005646df1447b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b64411ac460 __libc_start_main + 245\n6    tmpdlv5ti1n                        0x00005646df144379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in counts {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpuhezy3i9/tmpuhezy3i9.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0fbc43bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0fbc132b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0fbc132988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0fbc1317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuhezy3i9                        0x000055a30cba87b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b0fbc627460 __libc_start_main + 245\n6    tmpuhezy3i9                        0x000055a30cba8379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpmzzmw6rt/tmpmzzmw6rt.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af8fe2ffc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af8fdff6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af8fdff6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af8fdff57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmzzmw6rt                        0x000055a77fd8a7e5 <unavailable> + 6117\n5    libc.so.6                          0x00002af8fe4eb460 __libc_start_main + 245\n6    tmpmzzmw6rt                        0x000055a77fd8a3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var maxCount = 0\n    var maxNum = 0\n    for (num, count) in dict {\n        if count > maxCount {\n            maxCount = count\n            maxNum = num\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        dict[num] = (dict[num] ?? 0) + 1\n    }\n    var max = 0\n    for (_, value) in dict {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpa8pyv558/tmpa8pyv558.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba7b64bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba7b342b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba7b342988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba7b3417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa8pyv558                        0x000055e97ebe17b5 <unavailable> + 6069\n5    libc.so.6                          0x00002aba7b837460 __libc_start_main + 245\n6    tmpa8pyv558                        0x000055e97ebe1379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in counts {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpeb_n5xnw/tmpeb_n5xnw.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aaf3c45fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aaf3c156b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aaf3c156988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aaf3c1557b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpeb_n5xnw                        0x000055cbee78b7d5 <unavailable> + 6101\n5    libc.so.6                          0x00002aaf3c64b460 __libc_start_main + 245\n6    tmpeb_n5xnw                        0x000055cbee78b399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict: [Int: Int] = [:]\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpti52zybh/tmpti52zybh.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9460fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac945df1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac945df1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac945df07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpti52zybh                        0x000055aadcaf57d5 <unavailable> + 6101\n5    libc.so.6                          0x00002ac9462e6460 __libc_start_main + 245\n6    tmpti52zybh                        0x000055aadcaf5399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    var max = 0\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n            if dict[num]! > max {\n                max = dict[num]!\n            }\n        } else {\n            dict[num] = 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpm0bdzhp8/tmpm0bdzhp8.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aed11ecdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aed11bc4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aed11bc4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aed11bc37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm0bdzhp8                        0x000055ee9a3c66d5 <unavailable> + 5845\n5    libc.so.6                          0x00002aed120b9460 __libc_start_main + 245\n6    tmpm0bdzhp8                        0x000055ee9a3c6299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        dict[num] = (dict[num] ?? 0) + 1\n    }\n    var max = 0\n    for (_, value) in dict {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpa8pyv558/tmpa8pyv558.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba7b64bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba7b342b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba7b342988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba7b3417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa8pyv558                        0x000055e97ebe17b5 <unavailable> + 6069\n5    libc.so.6                          0x00002aba7b837460 __libc_start_main + 245\n6    tmpa8pyv558                        0x000055e97ebe1379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var maxCount = 0\n    for (_, count) in dict {\n        if count > maxCount {\n            maxCount = count\n        }\n    }\n    return maxCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpq8v0cwy2/tmpq8v0cwy2.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af7cccb7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af7cc9aeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af7cc9ae988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af7cc9ad7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpq8v0cwy2                        0x000055f83afa97b5 <unavailable> + 6069\n5    libc.so.6                          0x00002af7ccea3460 __libc_start_main + 245\n6    tmpq8v0cwy2                        0x000055f83afa9379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in counts {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpeb_n5xnw/tmpeb_n5xnw.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aaf3c45fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aaf3c156b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aaf3c156988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aaf3c1557b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpeb_n5xnw                        0x000055cbee78b7d5 <unavailable> + 6101\n5    libc.so.6                          0x00002aaf3c64b460 __libc_start_main + 245\n6    tmpeb_n5xnw                        0x000055cbee78b399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.values.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpx5vo8top/tmpx5vo8top.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9e2a887c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9e2a57eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9e2a57e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9e2a57d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx5vo8top                        0x0000561cb2ca6855 <unavailable> + 6229\n5    libc.so.6                          0x00002b9e2aa73460 __libc_start_main + 245\n6    tmpx5vo8top                        0x0000561cb2ca6419 <unavailable> + 5145\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max_count = 0\n    for (_, count) in dict {\n        if count > max_count {\n            max_count = count\n        }\n    }\n    return max_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmp7h42p1y0/tmp7h42p1y0.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4c9af63c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4c9ac5ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4c9ac5a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4c9ac597b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7h42p1y0                        0x000055a849fef7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b4c9b14f460 __libc_start_main + 245\n6    tmp7h42p1y0                        0x000055a849fef379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences = [Int: Int]()\n    for num in nums {\n        occurrences[num] = (occurrences[num] ?? 0) + 1\n    }\n    return occurrences.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpuv9kb6ls/tmpuv9kb6ls.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae2b46edc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae2b43e4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae2b43e4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae2b43e37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuv9kb6ls                        0x00005569ffb257c5 <unavailable> + 6085\n5    libc.so.6                          0x00002ae2b48d9460 __libc_start_main + 245\n6    tmpuv9kb6ls                        0x00005569ffb25389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences: [Int: Int] = [:]\n    for num in nums {\n        if let count = occurrences[num] {\n            occurrences[num] = count + 1\n        } else {\n            occurrences[num] = 1\n        }\n    }\n    return occurrences.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmp8v4bzlih/tmp8v4bzlih.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab1ca576c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab1ca26db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab1ca26d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab1ca26c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8v4bzlih                        0x000056158aad87e5 <unavailable> + 6117\n5    libc.so.6                          0x00002ab1ca762460 __libc_start_main + 245\n6    tmp8v4bzlih                        0x000056158aad83a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    var max = 0\n    for n in nums {\n        if let count = dict[n] {\n            dict[n] = count + 1\n        } else {\n            dict[n] = 1\n        }\n        if dict[n]! > max {\n            max = dict[n]!\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmp0a19xek3/tmp0a19xek3.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5aded9ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5adea91b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5adea91988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5adea907b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0a19xek3                        0x000055810e6d56d5 <unavailable> + 5845\n5    libc.so.6                          0x00002b5adef86460 __libc_start_main + 245\n6    tmp0a19xek3                        0x000055810e6d5299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences = [Int: Int]()\n    for num in nums {\n        occurrences[num] = (occurrences[num] ?? 0) + 1\n    }\n    return occurrences.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpuv9kb6ls/tmpuv9kb6ls.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae2b46edc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae2b43e4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae2b43e4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae2b43e37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuv9kb6ls                        0x00005569ffb257c5 <unavailable> + 6085\n5    libc.so.6                          0x00002ae2b48d9460 __libc_start_main + 245\n6    tmpuv9kb6ls                        0x00005569ffb25389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpmzzmw6rt/tmpmzzmw6rt.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af8fe2ffc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af8fdff6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af8fdff6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af8fdff57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmzzmw6rt                        0x000055a77fd8a7e5 <unavailable> + 6117\n5    libc.so.6                          0x00002af8fe4eb460 __libc_start_main + 245\n6    tmpmzzmw6rt                        0x000055a77fd8a3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var max = 0\n    var count = 0\n    var dict = [Int: Int]()\n    for num in nums {\n        if let val = dict[num] {\n            dict[num] = val + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value > max {\n            max = value\n            count = key\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpcj_m25oh/tmpcj_m25oh.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b862468ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8624385b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8624385988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b86243847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcj_m25oh                        0x0000556f0e1f68e6 <unavailable> + 6374\n5    libc.so.6                          0x00002b862487a460 __libc_start_main + 245\n6    tmpcj_m25oh                        0x0000556f0e1f6379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts = [Int: Int]()\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpmvb93f3i/tmpmvb93f3i.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab46c823c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab46c51ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab46c51a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab46c5197b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmvb93f3i                        0x0000561203b5f7c5 <unavailable> + 6085\n5    libc.so.6                          0x00002ab46ca0f460 __libc_start_main + 245\n6    tmpmvb93f3i                        0x0000561203b5f389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences = [Int: Int]()\n    for num in nums {\n        occurrences[num] = (occurrences[num] ?? 0) + 1\n    }\n    return occurrences.values.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmplldl6dyr/tmplldl6dyr.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acba93b3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acba90aab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acba90aa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acba90a97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplldl6dyr                        0x000055e3a766b855 <unavailable> + 6229\n5    libc.so.6                          0x00002acba959f460 __libc_start_main + 245\n6    tmplldl6dyr                        0x000055e3a766b419 <unavailable> + 5145\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpmzzmw6rt/tmpmzzmw6rt.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af8fe2ffc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af8fdff6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af8fdff6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af8fdff57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmzzmw6rt                        0x000055a77fd8a7e5 <unavailable> + 6117\n5    libc.so.6                          0x00002af8fe4eb460 __libc_start_main + 245\n6    tmpmzzmw6rt                        0x000055a77fd8a3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.values.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpx5vo8top/tmpx5vo8top.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9e2a887c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9e2a57eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9e2a57e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9e2a57d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx5vo8top                        0x0000561cb2ca6855 <unavailable> + 6229\n5    libc.so.6                          0x00002b9e2aa73460 __libc_start_main + 245\n6    tmpx5vo8top                        0x0000561cb2ca6419 <unavailable> + 5145\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var max_occurrences = 0\n    var max_occurrences_item = 0\n    var occurrences: [Int: Int] = [:]\n    for num in nums {\n        occurrences[num] = (occurrences[num] ?? 0) + 1\n        if occurrences[num]! > max_occurrences {\n            max_occurrences = occurrences[num]!\n            max_occurrences_item = num\n        }\n    }\n    return max_occurrences_item\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in counts {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpeb_n5xnw/tmpeb_n5xnw.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aaf3c45fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aaf3c156b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aaf3c156988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aaf3c1557b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpeb_n5xnw                        0x000055cbee78b7d5 <unavailable> + 6101\n5    libc.so.6                          0x00002aaf3c64b460 __libc_start_main + 245\n6    tmpeb_n5xnw                        0x000055cbee78b399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in counts {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpeb_n5xnw/tmpeb_n5xnw.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aaf3c45fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aaf3c156b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aaf3c156988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aaf3c1557b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpeb_n5xnw                        0x000055cbee78b7d5 <unavailable> + 6101\n5    libc.so.6                          0x00002aaf3c64b460 __libc_start_main + 245\n6    tmpeb_n5xnw                        0x000055cbee78b399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var occurrences = [Int: Int]()\n    for num in nums {\n        occurrences[num] = (occurrences[num] ?? 0) + 1\n    }\n    var max_occurrences = 0\n    for (_, count) in occurrences {\n        max_occurrences = max(max_occurrences, count)\n    }\n    return max_occurrences\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmpz9s7c20i/tmpz9s7c20i.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0b8445bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0b84152b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0b84152988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0b841517b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz9s7c20i                        0x00005617aa778845 <unavailable> + 6213\n5    libc.so.6                          0x00002b0b84647460 __libc_start_main + 245\n6    tmpz9s7c20i                        0x00005617aa778409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (key, value) in dict {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "tmp4hzi2snt/tmp4hzi2snt.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b375966fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3759366b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3759366988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b37593657b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4hzi2snt                        0x00005591bf4c87b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b375985b460 __libc_start_main + 245\n6    tmp4hzi2snt                        0x00005591bf4c8379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var max = 0\n    var max_item = 0\n    var counts = [Int: Int]()\n    for num in nums {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n        if counts[num]! > max {\n            max = counts[num]!\n            max_item = num\n        }\n    }\n    return max_item\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    var max = 0\n    for (_, count) in dict {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmp0qa4knvr/tmp0qa4knvr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c0011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32bfd08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32bfd08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32bfd077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0qa4knvr                        0x00005616e6e6c7b5 <unavailable> + 6069\n5    libc.so.6                          0x00002b32c01fd460 __libc_start_main + 245\n6    tmp0qa4knvr                        0x00005616e6e6c379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    var max = 0\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n        if dict[num]! > max {\n            max = dict[num]!\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmprd7og0z8/tmprd7og0z8.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab7ec3f5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab7ec0ecb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab7ec0ec988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab7ec0eb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprd7og0z8                        0x000055a54dd766d5 <unavailable> + 5845\n5    libc.so.6                          0x00002ab7ec5e1460 __libc_start_main + 245\n6    tmprd7og0z8                        0x000055a54dd76299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.values.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpx5vo8top/tmpx5vo8top.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9e2a887c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9e2a57eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9e2a57e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9e2a57d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx5vo8top                        0x0000561cb2ca6855 <unavailable> + 6229\n5    libc.so.6                          0x00002b9e2aa73460 __libc_start_main + 245\n6    tmpx5vo8top                        0x0000561cb2ca6419 <unavailable> + 5145\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the item with maximum frequency in a given array.\nfunc max_occurrences(nums: [Int]) -> Int {\n    var counts: [Int: Int] = [:]\n    for num in nums {\n        counts[num] = (counts[num] ?? 0) + 1\n    }\n    return counts.values.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\nassert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\nassert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "tmpmzzmw6rt/tmpmzzmw6rt.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af8fe2ffc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af8fdff6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af8fdff6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af8fdff57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmzzmw6rt                        0x000055a77fd8a7e5 <unavailable> + 6117\n5    libc.so.6                          0x00002af8fe4eb460 __libc_start_main + 245\n6    tmpmzzmw6rt                        0x000055a77fd8a3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}