{
  "name": "mbpp_554_Split",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odds: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            odds.append(i)\n        }\n    }\n    return odds\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odds: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            odds.append(i)\n        }\n    }\n    return odds\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odds = [Int]()\n    for number in list {\n        if number % 2 != 0 {\n            odds.append(number)\n        }\n    }\n    return odds\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odds = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            odds.append(i)\n        }\n    }\n    return odds\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odd = [Int]()\n    for i in list {\n        if i % 2 == 1 {\n            odd.append(i)\n        }\n    }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result = [Int]()\n    for item in list {\n        if item % 2 == 1 {\n            result.append(item)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddNumbers = [Int]()\n    for number in list {\n        if number % 2 == 1 {\n            oddNumbers.append(number)\n        }\n    }\n    return oddNumbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 == 1 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    return list.filter { $0 % 2 == 1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for number in list {\n        if number % 2 != 0 {\n            oddList.append(number)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for item in list {\n        if item % 2 != 0 {\n            oddList.append(item)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odd = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            odd.append(i)\n        }\n    }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odd: [Int] = []\n    for num in list {\n        if num % 2 != 0 {\n            odd.append(num)\n        }\n    }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for item in list {\n        if item % 2 != 0 {\n            oddList.append(item)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for item in list {\n        if item % 2 != 0 {\n            oddList.append(item)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odds = [Int]()\n    for num in list {\n        if num % 2 == 1 {\n            odds.append(num)\n        }\n    }\n    return odds\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for number in list {\n        if number % 2 == 1 {\n            oddList.append(number)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for item in list {\n        if item % 2 != 0 {\n            oddList.append(item)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for number in list {\n        if number % 2 != 0 {\n            oddList.append(number)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odds: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            odds.append(i)\n        }\n    }\n    return odds\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 == 1 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in list {\n        if i % 2 == 1 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in list {\n        if i % 2 == 1 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    return list.filter { $0 % 2 == 1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odds = [Int]()\n    for number in list {\n        if number % 2 != 0 {\n            odds.append(number)\n        }\n    }\n    return odds\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odds: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            odds.append(i)\n        }\n    }\n    return odds\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odd = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            odd.append(i)\n        }\n    }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 == 1 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odd = [Int]()\n    for number in list {\n        if number % 2 != 0 {\n            odd.append(number)\n        }\n    }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for item in list {\n        if item % 2 != 0 {\n            oddList.append(item)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 == 1 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for item in list {\n        if item % 2 == 1 {\n            result.append(item)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for num in list {\n        if num % 2 != 0 {\n            oddList.append(num)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for number in list {\n        if number % 2 != 0 {\n            oddList.append(number)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    return list.filter { $0 % 2 == 1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for number in list {\n        if number % 2 != 0 {\n            oddList.append(number)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for num in list {\n        if num % 2 == 1 {\n            oddList.append(num)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odd = [Int]()\n    for i in list {\n        if i % 2 == 1 {\n            odd.append(i)\n        }\n    }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for num in list {\n        if num % 2 != 0 {\n            oddList.append(num)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odd: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            odd.append(i)\n        }\n    }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odds: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            odds.append(i)\n        }\n    }\n    return odds\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for num in list {\n        if num % 2 != 0 {\n            oddList.append(num)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    return list.filter { $0 % 2 == 1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for number in list {\n        if number % 2 == 1 {\n            oddList.append(number)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for item in list {\n        if item % 2 == 1 {\n            result.append(item)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in list {\n        if i % 2 == 1 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odd = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            odd.append(i)\n        }\n    }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odd = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            odd.append(i)\n        }\n    }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 == 1 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var newList: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            newList.append(i)\n        }\n    }\n    return newList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odds = [Int]()\n    for i in list {\n        if i % 2 == 1 {\n            odds.append(i)\n        }\n    }\n    return odds\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odds = [Int]()\n    for i in list {\n        if i % 2 == 1 {\n            odds.append(i)\n        }\n    }\n    return odds\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odds: [Int] = []\n    for num in list {\n        if num % 2 != 0 {\n            odds.append(num)\n        }\n    }\n    return odds\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odds = [Int]()\n    for num in list {\n        if num % 2 != 0 {\n            odds.append(num)\n        }\n    }\n    return odds\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for number in list {\n        if number % 2 == 1 {\n            oddList.append(number)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for number in list {\n        if number % 2 != 0 {\n            oddList.append(number)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for number in list {\n        if number % 2 != 0 {\n            oddList.append(number)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for num in list {\n        if num % 2 != 0 {\n            oddList.append(num)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for num in list {\n        if num % 2 == 1 {\n            oddList.append(num)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odd = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            odd.append(i)\n        }\n    }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for number in list {\n        if number % 2 != 0 {\n            oddList.append(number)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 == 1 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 == 1 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odd = [Int]()\n    for i in list {\n        if i % 2 == 1 {\n            odd.append(i)\n        }\n    }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odd = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            odd.append(i)\n        }\n    }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odd = [Int]()\n    for i in list {\n        if i % 2 == 1 {\n            odd.append(i)\n        }\n    }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for num in list {\n        if num % 2 == 1 {\n            oddList.append(num)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odds: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            odds.append(i)\n        }\n    }\n    return odds\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for item in list {\n        if item % 2 == 1 {\n            result.append(item)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for item in list {\n        if item % 2 == 1 {\n            result.append(item)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for item in list {\n        if item % 2 != 0 {\n            oddList.append(item)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    return list.filter { $0 % 2 != 0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 == 1 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odds = [Int]()\n    for i in list {\n        if i % 2 == 1 {\n            odds.append(i)\n        }\n    }\n    return odds\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odd = [Int]()\n    for num in list {\n        if num % 2 != 0 {\n            odd.append(num)\n        }\n    }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in list {\n        if i % 2 == 1 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odds: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            odds.append(i)\n        }\n    }\n    return odds\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for item in list {\n        if item % 2 != 0 {\n            oddList.append(item)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    return list.filter { $0 % 2 == 1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odds = [Int]()\n    for i in list {\n        if i % 2 == 1 {\n            odds.append(i)\n        }\n    }\n    return odds\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odd = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            odd.append(i)\n        }\n    }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odd = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            odd.append(i)\n        }\n    }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in list {\n        if i % 2 == 1 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    return list.filter { $0 % 2 == 1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for number in list {\n        if number % 2 != 0 {\n            oddList.append(number)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for item in list {\n        if item % 2 == 1 {\n            result.append(item)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odd = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            odd.append(i)\n        }\n    }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odd = [Int]()\n    for i in list {\n        if i % 2 == 1 {\n            odd.append(i)\n        }\n    }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result = [Int]()\n    for item in list {\n        if item % 2 != 0 {\n            result.append(item)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for item in list {\n        if item % 2 == 1 {\n            result.append(item)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odd = [Int]()\n    for num in list {\n        if num % 2 == 1 {\n            odd.append(num)\n        }\n    }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for number in list {\n        if number % 2 != 0 {\n            oddList.append(number)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in list {\n        if i % 2 == 1 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odds: [Int] = []\n    for number in list {\n        if number % 2 == 1 {\n            odds.append(number)\n        }\n    }\n    return odds\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for number in list {\n        if number % 2 == 1 {\n            oddList.append(number)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 == 1 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odds: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            odds.append(i)\n        }\n    }\n    return odds\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odd = [Int]()\n    for number in list {\n        if number % 2 != 0 {\n            odd.append(number)\n        }\n    }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for number in list {\n        if number % 2 == 1 {\n            oddList.append(number)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList: [Int] = []\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 != 0 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for item in list {\n        if item % 2 != 0 {\n            oddList.append(item)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for i in list {\n        if i % 2 == 1 {\n            oddList.append(i)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for number in list {\n        if number % 2 != 0 {\n            oddList.append(number)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    return list.filter { $0 % 2 == 1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var odds = [Int]()\n    for i in list {\n        if i % 2 == 1 {\n            odds.append(i)\n        }\n    }\n    return odds\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in list {\n        if i % 2 == 1 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and only returns the odd ones.\nfunc Split(list: [Int]) -> [Int] {\n    var oddList = [Int]()\n    for item in list {\n        if item % 2 != 0 {\n            oddList.append(item)\n        }\n    }\n    return oddList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])\nassert(Split(list: [10, 11, 12, 13]) == [11, 13])\nassert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])",
      "timestamp": 1666123081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}