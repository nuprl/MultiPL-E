{
  "name": "mbpp_447_cube_nums",
  "language": "swift",
  "prompt": "\n/// Write a function to find cubes of individual elements in an array.\nfunc cube_nums(nums: [Int]) -> [Int] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(cube_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000])\nassert(cube_nums(nums: [10, 20, 30]) == [1000, 8000, 27000])\nassert(cube_nums(nums: [12, 15]) == [1728, 3375])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var result = [Int]()\n    for num in nums {\n        result.append(num * num * num)\n    }\n    return result",
    "    return nums.map { $0 * $0 * $0 }",
    "    var cubes = [Int]()\n    for num in nums {\n        cubes.append(num * num * num)\n    }\n    return cubes",
    "    return nums.map { $0 * $0 * $0 }",
    "    return nums.map { $0 * $0 * $0 }",
    "    return nums.map { $0 * $0 * $0 }",
    "    return nums.map { $0 * $0 * $0 }",
    "    var cubes = [Int]()\n    for num in nums {\n        cubes.append(num * num * num)\n    }\n    return cubes",
    "    return nums.map({ $0 * $0 * $0 })",
    "    var result: [Int] = []\n    for num in nums {\n        result.append(num * num * num)\n    }\n    return result",
    "    var cubes = [Int]()\n    for num in nums {\n        cubes.append(num * num * num)\n    }\n    return cubes",
    "    var cubes: [Int] = []\n    for num in nums {\n        cubes.append(num * num * num)\n    }\n    return cubes",
    "    var cubes = [Int]()\n    for num in nums {\n        cubes.append(num * num * num)\n    }\n    return cubes",
    "    var cubes = [Int]()\n    for num in nums {\n        cubes.append(num * num * num)\n    }\n    return cubes",
    "    var cubes: [Int] = []\n    for num in nums {\n        cubes.append(num * num * num)\n    }\n    return cubes",
    "    return nums.map { $0 * $0 * $0 }",
    "    var cubes = [Int]()\n    for num in nums {\n        cubes.append(num * num * num)\n    }\n    return cubes",
    "    var cubes = [Int]()\n    for num in nums {\n        cubes.append(num * num * num)\n    }\n    return cubes",
    "    var cubes = [Int]()\n    for num in nums {\n        cubes.append(num * num * num)\n    }\n    return cubes",
    "    var cubes = [Int]()\n    for num in nums {\n        cubes.append(num * num * num)\n    }\n    return cubes"
  ]
}