{
  "name": "mbpp_391_convert_list_dictionary",
  "language": "swift",
  "prompt": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_391_convert_list_dictionary.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for (index, element) in l1.enumerated() {\n        result.append([element : [l2[index] : l3[index]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var dic: [String : [String : Int]] = [:]\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1: [String : [String : Int]] = [:]\n    var d2: [String : [String : Int]] = [:]\n    var d3: [String : [String : Int]] = [:]\n    var d4: [String : [String : Int]] = [:]\n    var d5: [String : [String : Int]] = [:]\n    var d6: [String : [String : Int]] = [:]\n    var d7: [String : [String : Int]] = [:]\n    var d8: [String : [String : Int]] = [:]\n    var d9: [String : [String : Int]] = [:]\n    var d10: [String : [String : Int]] = [:]\n    var d11: [String : [String : Int]] = [:]\n    var d12: [String : [String : Int]] = [:]\n    var d13: [String : [String : Int]] = [:]\n    var d14: [String : [String : Int]] = [:]\n    var d15: [String : [String : Int]] = [:]\n    var d16: [String : [String : Int]] = [:]\n    var d17: [String : [String : Int]] = [:]\n    var d18: [String : [String : Int]] = [:]\n    var d19: [String : [String : Int]] = [:]\n    var d20: [String : [String : Int]] = [:]\n    var d21: [String : [String : Int]] = [:]\n    var d22: [String : [String : Int]] = [:]\n    var d23: [String : [String : Int]] = [:]\n    var d24: [String : [String : Int]] = [:]\n    var d25: [String : [String : Int]] = [:]\n    var d26: [String : [String : Int]] = [:]\n    var d27: [String : [String : Int]] = [:]\n    var d28: [String : [String : Int]] = [:]\n    var d29: [String : [String : Int]] = [:]\n    var d30: [String : [String : Int]] = [:]\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "/tmp/tmptb63k4tp.swift:4:9: warning: variable 'd1' was never used; consider replacing with '_' or removing it\n    var d1: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmptb63k4tp.swift:5:9: warning: variable 'd2' was never used; consider replacing with '_' or removing it\n    var d2: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmptb63k4tp.swift:6:9: warning: variable 'd3' was never used; consider replacing with '_' or removing it\n    var d3: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmptb63k4tp.swift:7:9: warning: variable 'd4' was never used; consider replacing with '_' or removing it\n    var d4: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmptb63k4tp.swift:8:9: warning: variable 'd5' was never used; consider replacing with '_' or removing it\n    var d5: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmptb63k4tp.swift:9:9: warning: variable 'd6' was never used; consider replacing with '_' or removing it\n    var d6: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmptb63k4tp.swift:10:9: warning: variable 'd7' was never used; consider replacing with '_' or removing it\n    var d7: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmptb63k4tp.swift:11:9: warning: variable 'd8' was never used; consider replacing with '_' or removing it\n    var d8: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmptb63k4tp.swift:12:9: warning: variable 'd9' was never used; consider replacing with '_' or removing it\n    var d9: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmptb63k4tp.swift:13:9: warning: variable 'd10' was never used; consider replacing with '_' or removing it\n    var d10: [String : [String : Int]] = [:]\n        ^~~\n        _\n/tmp/tmptb63k4tp.swift:14:9: warning: variable 'd11' was never used; consider replacing with '_' or removing it\n    var d11: [String : [String : Int]] = [:]\n        ^~~\n        _\n/tmp/tmptb63k4tp.swift:15:9: warning: variable 'd12' was never used; consider replacing with '_' or removing it\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var dic: [String : [String : Int]] = [:]\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dic = [String : [String : Int]]()\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dict = [String : [String : Int]]()\n    var dict2 = [String : Int]()\n    var dict3 = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dict2[l2[i]] = l3[i]\n        dict[l1[i]] = dict2\n        dict3.append(dict)\n    }\n    return dict3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "tmpe05chxsa/tmpe05chxsa.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aad3b0b1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aad3ada8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aad3ada8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aad3ada77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe05chxsa                        0x0000555cc984cf58 <unavailable> + 8024\n5    libc.so.6                          0x00002aad3b29d460 __libc_start_main + 245\n6    tmpe05chxsa                        0x0000555cc984c549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var dic: [String : [String : Int]] = [:]\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        let dic = [l1[i] : [l2[i] : l3[i]]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var temp: [String : [String : Int]] = [:]\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic: [String : [String : Int]] = [:]\n    var dic_list: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "tmpsrc187ba/tmpsrc187ba.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6a6f5f8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6a6f2efb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6a6f2ef988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6a6f2ee7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsrc187ba                        0x0000557873501eb8 <unavailable> + 7864\n5    libc.so.6                          0x00002b6a6f7e4460 __libc_start_main + 245\n6    tmpsrc187ba                        0x00005578735014a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var temp = [String : [String : Int]]()\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var temp = [String : [String : Int]]()\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dict = [String : [String : Int]]()\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dic = [String : [String : Int]]()\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1: [String : [String : Int]] = [:]\n    var d2: [String : [String : Int]] = [:]\n    var d3: [String : [String : Int]] = [:]\n    var d4: [String : [String : Int]] = [:]\n    var d5: [String : [String : Int]] = [:]\n    var d6: [String : [String : Int]] = [:]\n    var d7: [String : [String : Int]] = [:]\n    var d8: [String : [String : Int]] = [:]\n    var d9: [String : [String : Int]] = [:]\n    var d10: [String : [String : Int]] = [:]\n    var d11: [String : [String : Int]] = [:]\n    var d12: [String : [String : Int]] = [:]\n    var d13: [String : [String : Int]] = [:]\n    var d14: [String : [String : Int]] = [:]\n    var d15: [String : [String : Int]] = [:]\n    var d16: [String : [String : Int]] = [:]\n    var d17: [String : [String : Int]] = [:]\n    var d18: [String : [String : Int]] = [:]\n    var d19: [String : [String : Int]] = [:]\n    var d20: [String : [String : Int]] = [:]\n    var d21: [String : [String : Int]] = [:]\n    var d22: [String : [String : Int]] = [:]\n    var d23: [String : [String : Int]] = [:]\n    var d24: [String : [String : Int]] = [:]\n    var d25: [String : [String : Int]] = [:]\n    var d26: [String : [String : Int]] = [:]\n    var d27: [String : [String : Int]] = [:]\n    var d28: [String : [String : Int]] = [:]\n    var d29: [String : [String : Int]] = [:]\n    var d30: [String : [String : Int]] = [:]\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "/tmp/tmptb63k4tp.swift:4:9: warning: variable 'd1' was never used; consider replacing with '_' or removing it\n    var d1: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmptb63k4tp.swift:5:9: warning: variable 'd2' was never used; consider replacing with '_' or removing it\n    var d2: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmptb63k4tp.swift:6:9: warning: variable 'd3' was never used; consider replacing with '_' or removing it\n    var d3: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmptb63k4tp.swift:7:9: warning: variable 'd4' was never used; consider replacing with '_' or removing it\n    var d4: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmptb63k4tp.swift:8:9: warning: variable 'd5' was never used; consider replacing with '_' or removing it\n    var d5: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmptb63k4tp.swift:9:9: warning: variable 'd6' was never used; consider replacing with '_' or removing it\n    var d6: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmptb63k4tp.swift:10:9: warning: variable 'd7' was never used; consider replacing with '_' or removing it\n    var d7: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmptb63k4tp.swift:11:9: warning: variable 'd8' was never used; consider replacing with '_' or removing it\n    var d8: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmptb63k4tp.swift:12:9: warning: variable 'd9' was never used; consider replacing with '_' or removing it\n    var d9: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmptb63k4tp.swift:13:9: warning: variable 'd10' was never used; consider replacing with '_' or removing it\n    var d10: [String : [String : Int]] = [:]\n        ^~~\n        _\n/tmp/tmptb63k4tp.swift:14:9: warning: variable 'd11' was never used; consider replacing with '_' or removing it\n    var d11: [String : [String : Int]] = [:]\n        ^~~\n        _\n/tmp/tmptb63k4tp.swift:15:9: warning: variable 'd12' was never used; consider replacing with '_' or removing it\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dic2 = [String : Int]()\n        dic2[l2[i]] = l3[i]\n        var dic3 = [String : [String : Int]]()\n        dic3[l1[i]] = dic2\n        dic.append(dic3)\n    }\n    return dic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic: [String : [String : Int]] = [:]\n    var dic_list: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n        dic = [:]\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dict = [String : [String : Int]]()\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var temp: [String : [String : Int]] = [:]\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        list.append(dic)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmprwsl2buv/tmprwsl2buv.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75fd519c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75fd210b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75fd210988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75fd20f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprwsl2buv                        0x000055d3c5109f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b75fd705460 __libc_start_main + 245\n6    tmprwsl2buv                        0x000055d3c5109549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dict = [String : [String : Int]]()\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return dic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var dic: [String : [String : Int]] = [:]\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var arr = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        arr.append(dic)\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmpap52ebqu/tmpap52ebqu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af5382ecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af537fe3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af537fe3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af537fe27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpap52ebqu                        0x00005568043fef58 <unavailable> + 8024\n5    libc.so.6                          0x00002af5384d8460 __libc_start_main + 245\n6    tmpap52ebqu                        0x00005568043fe549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d = [String : [String : Int]]()\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        d[l1[i]] = [l2[i] : l3[i]]\n        result.append(d)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmpyuzc2s5o/tmpyuzc2s5o.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afaa52a1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afaa4f98b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afaa4f98988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afaa4f977b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyuzc2s5o                        0x0000564890f17f58 <unavailable> + 8024\n5    libc.so.6                          0x00002afaa548d460 __libc_start_main + 245\n6    tmpyuzc2s5o                        0x0000564890f17549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic_list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmpci3v5ssr/tmpci3v5ssr.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46b40bcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46b3db3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46b3db3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46b3db27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpci3v5ssr                        0x00005583a1510f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b46b42a8460 __libc_start_main + 245\n6    tmpci3v5ssr                        0x00005583a1510549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dic = [String : [String : Int]]()\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dict = [String : [String : Int]]()\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dic = [String : [String : Int]]()\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var dict: [String : [String : Int]] = [:]\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmpd3ifn9oo/tmpd3ifn9oo.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b98d65a7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b98d629eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b98d629e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b98d629d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpd3ifn9oo                        0x0000559b47be7f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b98d6793460 __libc_start_main + 245\n6    tmpd3ifn9oo                        0x0000559b47be7549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dic = [String : [String : Int]]()\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        list.append(dic)\n        dic.removeAll()\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dic = [String : [String : Int]]()\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var dic: [String : [String : Int]] = [:]\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var dict: [String : [String : Int]] = [:]\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dic = [String : [String : Int]]()\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dic = [String : [String : Int]]()\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    return [[\"l1\" : [\"l2\" : l3[0]]], [\"l1\" : [\"l2\" : l3[1]]], [\"l1\" : [\"l2\" : l3[2]]]]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmp3ncf3_0c/tmp3ncf3_0c.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba6d809c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba6d500b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba6d500988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba6d4ff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3ncf3_0c                        0x0000559ccc663be8 <unavailable> + 7144\n5    libc.so.6                          0x00002aba6d9f5460 __libc_start_main + 245\n6    tmp3ncf3_0c                        0x0000559ccc6631d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for (i, _) in l1.enumerated() {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    var dic = [String : Int]()\n    var dic2 = [String : [String : Int]]()\n    for i in 0..<l1.count {\n        dic[l2[i]] = l3[i]\n        dic2[l1[i]] = dic\n        result.append(dic2)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmpmwsgv4ho/tmpmwsgv4ho.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4f57398c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4f5708fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4f5708f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4f5708e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmwsgv4ho                        0x000056067ac21f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b4f57584460 __libc_start_main + 245\n6    tmpmwsgv4ho                        0x000056067ac21549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var temp: [String : [String : Int]] = [:]\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return dic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dic = [String : [String : Int]]()\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var d = [String : [String : Int]]()\n        d[l1[i]] = [l2[i] : l3[i]]\n        dic.append(d)\n    }\n    return dic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dictionary = [String : [String : Int]]()\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dictionary[l1[i]] = [l2[i] : l3[i]]\n        result.append(dictionary)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmpkksn5k08/tmpkksn5k08.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b69617f2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b69614e9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b69614e9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b69614e87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkksn5k08                        0x000055da51644f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b69619de460 __libc_start_main + 245\n6    tmpkksn5k08                        0x000055da51644549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var dic: [String : [String : Int]] = [:]\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var temp = [String : [String : Int]]()\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dict = [String : [String : Int]]()\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return dic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var temp = [String : [String : Int]]()\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var temp = [String : [String : Int]]()\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var temp = [String : [String : Int]]()\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic2 = [String : [String : Int]]()\n    dic[l1[0]] = [l2[0] : l3[0]]\n    dic2[l1[1]] = [l2[1] : l3[1]]\n    return [dic, dic2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmpn71iaiiz/tmpn71iaiiz.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b90bea4bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b90be742b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b90be742988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b90be7417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn71iaiiz                        0x0000562b89c02cd8 <unavailable> + 7384\n5    libc.so.6                          0x00002b90bec37460 __libc_start_main + 245\n6    tmpn71iaiiz                        0x0000562b89c022c9 <unavailable> + 4809\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dic = [String : [String : Int]]()\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var temp: [String : [String : Int]] = [:]\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return dic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dict = [String : [String : Int]]()\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var temp = [String : [String : Int]]()\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    return [[\"l1\" : [\"l2\" : l3[0]]], [\"l1\" : [\"l2\" : l3[1]]], [\"l1\" : [\"l2\" : l3[2]]]]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmp3ncf3_0c/tmp3ncf3_0c.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba6d809c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba6d500b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba6d500988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba6d4ff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3ncf3_0c                        0x0000559ccc663be8 <unavailable> + 7144\n5    libc.so.6                          0x00002aba6d9f5460 __libc_start_main + 245\n6    tmp3ncf3_0c                        0x0000559ccc6631d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : [String : Int]]()\n    var d3 = [String : [String : Int]]()\n    var d4 = [String : [String : Int]]()\n    var d5 = [String : [String : Int]]()\n    var d6 = [String : [String : Int]]()\n    var d7 = [String : [String : Int]]()\n    var d8 = [String : [String : Int]]()\n    var d9 = [String : [String : Int]]()\n    var d10 = [String : [String : Int]]()\n    var d11 = [String : [String : Int]]()\n    var d12 = [String : [String : Int]]()\n    var d13 = [String : [String : Int]]()\n    var d14 = [String : [String : Int]]()\n    var d15 = [String : [String : Int]]()\n    var d16 = [String : [String : Int]]()\n    var d17 = [String : [String : Int]]()\n    var d18 = [String : [String : Int]]()\n    var d19 = [String : [String : Int]]()\n    var d20 = [String : [String : Int]]()\n    var d21 = [String : [String : Int]]()\n    var d22 = [String : [String : Int]]()\n    var d23 = [String : [String : Int]]()\n    var d24 = [String : [String : Int]]()\n    var d25 = [String : [String : Int]]()\n    var d26 = [String : [String : Int]]()\n    var d27 = [String : [String : Int]]()\n    var d28 = [String : [String : Int]]()\n    var d29 = [String : [String : Int]]()\n    var d30 = [String : [String : Int]]()\n    var d31 = [String : [String : Int]]()\n    var d32 = [String : [String : Int]]()\n    var d33 = [String : [String : Int]]()\n    var d34 = [String : [String : Int]]()\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "/tmp/tmp9nav7eo0.swift:4:9: warning: initialization of variable 'd1' was never used; consider replacing with assignment to '_' or removing it\n    var d1 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:5:9: warning: initialization of variable 'd2' was never used; consider replacing with assignment to '_' or removing it\n    var d2 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:6:9: warning: initialization of variable 'd3' was never used; consider replacing with assignment to '_' or removing it\n    var d3 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:7:9: warning: initialization of variable 'd4' was never used; consider replacing with assignment to '_' or removing it\n    var d4 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:8:9: warning: initialization of variable 'd5' was never used; consider replacing with assignment to '_' or removing it\n    var d5 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:9:9: warning: initialization of variable 'd6' was never used; consider replacing with assignment to '_' or removing it\n    var d6 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:10:9: warning: initialization of variable 'd7' was never used; consider replacing with assignment to '_' or removing it\n    var d7 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:11:9: warning: initialization of variable 'd8' was never used; consider replacing with assignment to '_' or removing it\n    var d8 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:12:9: warning: initialization of variable 'd9' was never used; consider replacing with assignment to '_' or removing it\n    var d9 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:13:9: warning: initialization of variable 'd10' was never used; consider replacing with assignment to '_' or removing it\n    var d10 = [String : [String : Int]]()\n    ~~~~^~~\n    _\n/tmp/tmp9nav7eo0.swift:14:9: warning: ini",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : [String : Int]]()\n    var d3 = [String : [String : Int]]()\n    var d4 = [String : [String : Int]]()\n    var d5 = [String : [String : Int]]()\n    var d6 = [String : [String : Int]]()\n    var d7 = [String : [String : Int]]()\n    var d8 = [String : [String : Int]]()\n    var d9 = [String : [String : Int]]()\n    var d10 = [String : [String : Int]]()\n    var d11 = [String : [String : Int]]()\n    var d12 = [String : [String : Int]]()\n    var d13 = [String : [String : Int]]()\n    var d14 = [String : [String : Int]]()\n    var d15 = [String : [String : Int]]()\n    var d16 = [String : [String : Int]]()\n    var d17 = [String : [String : Int]]()\n    var d18 = [String : [String : Int]]()\n    var d19 = [String : [String : Int]]()\n    var d20 = [String : [String : Int]]()\n    var d21 = [String : [String : Int]]()\n    var d22 = [String : [String : Int]]()\n    var d23 = [String : [String : Int]]()\n    var d24 = [String : [String : Int]]()\n    var d25 = [String : [String : Int]]()\n    var d26 = [String : [String : Int]]()\n    var d27 = [String : [String : Int]]()\n    var d28 = [String : [String : Int]]()\n    var d29 = [String : [String : Int]]()\n    var d30 = [String : [String : Int]]()\n    var d31 = [String : [String : Int]]()\n    var d32 = [String : [String : Int]]()\n    var d33 = [String : [String : Int]]()\n    var d34 = [String : [String : Int]]()\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "/tmp/tmp9nav7eo0.swift:4:9: warning: initialization of variable 'd1' was never used; consider replacing with assignment to '_' or removing it\n    var d1 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:5:9: warning: initialization of variable 'd2' was never used; consider replacing with assignment to '_' or removing it\n    var d2 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:6:9: warning: initialization of variable 'd3' was never used; consider replacing with assignment to '_' or removing it\n    var d3 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:7:9: warning: initialization of variable 'd4' was never used; consider replacing with assignment to '_' or removing it\n    var d4 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:8:9: warning: initialization of variable 'd5' was never used; consider replacing with assignment to '_' or removing it\n    var d5 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:9:9: warning: initialization of variable 'd6' was never used; consider replacing with assignment to '_' or removing it\n    var d6 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:10:9: warning: initialization of variable 'd7' was never used; consider replacing with assignment to '_' or removing it\n    var d7 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:11:9: warning: initialization of variable 'd8' was never used; consider replacing with assignment to '_' or removing it\n    var d8 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:12:9: warning: initialization of variable 'd9' was never used; consider replacing with assignment to '_' or removing it\n    var d9 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:13:9: warning: initialization of variable 'd10' was never used; consider replacing with assignment to '_' or removing it\n    var d10 = [String : [String : Int]]()\n    ~~~~^~~\n    _\n/tmp/tmp9nav7eo0.swift:14:9: warning: ini",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var temp = [String : [String : Int]]()\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dic2 = [String : Int]()\n        dic2[l2[i]] = l3[i]\n        dic.append([l1[i] : dic2])\n    }\n    return dic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : [String : Int]]()\n    var d3 = [String : [String : Int]]()\n    var d4 = [String : [String : Int]]()\n    var d5 = [String : [String : Int]]()\n    var d6 = [String : [String : Int]]()\n    var d7 = [String : [String : Int]]()\n    var d8 = [String : [String : Int]]()\n    var d9 = [String : [String : Int]]()\n    var d10 = [String : [String : Int]]()\n    var d11 = [String : [String : Int]]()\n    var d12 = [String : [String : Int]]()\n    var d13 = [String : [String : Int]]()\n    var d14 = [String : [String : Int]]()\n    var d15 = [String : [String : Int]]()\n    var d16 = [String : [String : Int]]()\n    var d17 = [String : [String : Int]]()\n    var d18 = [String : [String : Int]]()\n    var d19 = [String : [String : Int]]()\n    var d20 = [String : [String : Int]]()\n    var d21 = [String : [String : Int]]()\n    var d22 = [String : [String : Int]]()\n    var d23 = [String : [String : Int]]()\n    var d24 = [String : [String : Int]]()\n    var d25 = [String : [String : Int]]()\n    var d26 = [String : [String : Int]]()\n    var d27 = [String : [String : Int]]()\n    var d28 = [String : [String : Int]]()\n    var d29 = [String : [String : Int]]()\n    var d30 = [String : [String : Int]]()\n    var d31 = [String : [String : Int]]()\n    var d32 = [String : [String : Int]]()\n    var d33 = [String : [String : Int]]()\n    var d34 = [String : [String : Int]]()\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "/tmp/tmp9nav7eo0.swift:4:9: warning: initialization of variable 'd1' was never used; consider replacing with assignment to '_' or removing it\n    var d1 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:5:9: warning: initialization of variable 'd2' was never used; consider replacing with assignment to '_' or removing it\n    var d2 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:6:9: warning: initialization of variable 'd3' was never used; consider replacing with assignment to '_' or removing it\n    var d3 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:7:9: warning: initialization of variable 'd4' was never used; consider replacing with assignment to '_' or removing it\n    var d4 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:8:9: warning: initialization of variable 'd5' was never used; consider replacing with assignment to '_' or removing it\n    var d5 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:9:9: warning: initialization of variable 'd6' was never used; consider replacing with assignment to '_' or removing it\n    var d6 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:10:9: warning: initialization of variable 'd7' was never used; consider replacing with assignment to '_' or removing it\n    var d7 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:11:9: warning: initialization of variable 'd8' was never used; consider replacing with assignment to '_' or removing it\n    var d8 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:12:9: warning: initialization of variable 'd9' was never used; consider replacing with assignment to '_' or removing it\n    var d9 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:13:9: warning: initialization of variable 'd10' was never used; consider replacing with assignment to '_' or removing it\n    var d10 = [String : [String : Int]]()\n    ~~~~^~~\n    _\n/tmp/tmp9nav7eo0.swift:14:9: warning: ini",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dict = [String : [String : Int]]()\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmpbdq4tvaa/tmpbdq4tvaa.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8712f2ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8712c21b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8712c21988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8712c207b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbdq4tvaa                        0x000055ee0f9c7f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b8713116460 __libc_start_main + 245\n6    tmpbdq4tvaa                        0x000055ee0f9c7549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var dic: [String : [String : Int]] = [:]\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    var dic: [String : [String : Int]] = [:]\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmp_axjfv5u/tmp_axjfv5u.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1b29c8bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1b29982b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1b29982988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1b299817b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_axjfv5u                        0x0000563f887ebeb8 <unavailable> + 7864\n5    libc.so.6                          0x00002b1b29e77460 __libc_start_main + 245\n6    tmp_axjfv5u                        0x0000563f887eb4a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dic = [String : [String : Int]]()\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var dic: [String : [String : Int]] = [:]\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var dic: [String : [String : Int]] = [:]\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dict = [String : [String : Int]]()\n    var list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dict[l1[i]] = [l2[i] : l3[i]]\n        list.append(dict)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmpiex_h7bv/tmpiex_h7bv.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d24046c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d23d3db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d23d3d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d23d3c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpiex_h7bv                        0x00005638f2ee8f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b7d24232460 __libc_start_main + 245\n6    tmpiex_h7bv                        0x00005638f2ee8549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var temp: [String : [String : Int]] = [:]\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var d = [String : [String : Int]]()\n        d[l1[i]] = [l2[i] : l3[i]]\n        result.append(d)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic_list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmpci3v5ssr/tmpci3v5ssr.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46b40bcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46b3db3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46b3db3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46b3db27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpci3v5ssr                        0x00005583a1510f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b46b42a8460 __libc_start_main + 245\n6    tmpci3v5ssr                        0x00005583a1510549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic: [String : [String : Int]] = [:]\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmps8bt928w/tmps8bt928w.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7a091a1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7a08e98b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7a08e98988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7a08e977b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps8bt928w                        0x0000563bac142eb8 <unavailable> + 7864\n5    libc.so.6                          0x00002b7a0938d460 __libc_start_main + 245\n6    tmps8bt928w                        0x0000563bac1424a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var d1 = [String : Int]()\n        d1[l2[i]] = l3[i]\n        d.append([l1[i] : d1])\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return dic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var result = [[String : [String : Int]]]()\n    \n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmps1pgpagp/tmps1pgpagp.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b569c2a1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b569bf98b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b569bf98988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b569bf977b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps1pgpagp                        0x0000562fc5450f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b569c48d460 __libc_start_main + 245\n6    tmps1pgpagp                        0x0000562fc5450549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dict = [String : [String : Int]]()\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic: [String : [String : Int]] = [:]\n    var dic2: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic2.append(dic)\n    }\n    return dic2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmpmo32ai9w/tmpmo32ai9w.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3bd3723c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3bd341ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3bd341a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3bd34197b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmo32ai9w                        0x0000559394b62eb8 <unavailable> + 7864\n5    libc.so.6                          0x00002b3bd390f460 __libc_start_main + 245\n6    tmpmo32ai9w                        0x0000559394b624a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic_list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmpci3v5ssr/tmpci3v5ssr.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46b40bcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46b3db3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46b3db3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46b3db27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpci3v5ssr                        0x00005583a1510f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b46b42a8460 __libc_start_main + 245\n6    tmpci3v5ssr                        0x00005583a1510549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for (index, value) in l1.enumerated() {\n        var dict: [String : [String : Int]] = [:]\n        dict[value] = [l2[index] : l3[index]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var temp = [String : [String : Int]]()\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dict = [String : [String : Int]]()\n    var list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dict[l1[i]] = [l2[i] : l3[i]]\n        list.append(dict)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmpiex_h7bv/tmpiex_h7bv.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d24046c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d23d3db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d23d3d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d23d3c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpiex_h7bv                        0x00005638f2ee8f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b7d24232460 __libc_start_main + 245\n6    tmpiex_h7bv                        0x00005638f2ee8549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dict = [String : [String : Int]]()\n    for i in 0..<l1.count {\n        dict[l1[i]] = [l2[i] : l3[i]]\n    }\n    return [dict]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmpm8yg7vf5/tmpm8yg7vf5.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af9be166c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af9bde5db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af9bde5d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af9bde5c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm8yg7vf5                        0x0000558b4ac3deb8 <unavailable> + 7864\n5    libc.so.6                          0x00002af9be352460 __libc_start_main + 245\n6    tmpm8yg7vf5                        0x0000558b4ac3d4a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var dic: [String : [String : Int]] = [:]\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var temp = [String : [String : Int]]()\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic: [String : [String : Int]] = [:]\n    var dic_list: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "tmpsrc187ba/tmpsrc187ba.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6a6f5f8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6a6f2efb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6a6f2ef988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6a6f2ee7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsrc187ba                        0x0000557873501eb8 <unavailable> + 7864\n5    libc.so.6                          0x00002b6a6f7e4460 __libc_start_main + 245\n6    tmpsrc187ba                        0x00005578735014a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : Int]()\n    var d3 = [[String : [String : Int]]]()\n    \n    for i in 0..<l1.count {\n        d2[l2[i]] = l3[i]\n        d1[l1[i]] = d2\n        d3.append(d1)\n    }\n    return d3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmp0ompd49x/tmp0ompd49x.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b399c7c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b399c4bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b399c4bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b399c4ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0ompd49x                        0x00005569a6474f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b399c9b0460 __libc_start_main + 245\n6    tmp0ompd49x                        0x00005569a6474549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return dic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic: [String : [String : Int]] = [:]\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmps8bt928w/tmps8bt928w.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7a091a1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7a08e98b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7a08e98988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7a08e977b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps8bt928w                        0x0000563bac142eb8 <unavailable> + 7864\n5    libc.so.6                          0x00002b7a0938d460 __libc_start_main + 245\n6    tmps8bt928w                        0x0000563bac1424a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : [String : Int]]()\n    var d3 = [String : [String : Int]]()\n    var d4 = [String : [String : Int]]()\n    var d5 = [String : [String : Int]]()\n    var d6 = [String : [String : Int]]()\n    var d7 = [String : [String : Int]]()\n    var d8 = [String : [String : Int]]()\n    var d9 = [String : [String : Int]]()\n    var d10 = [String : [String : Int]]()\n    var d11 = [String : [String : Int]]()\n    var d12 = [String : [String : Int]]()\n    var d13 = [String : [String : Int]]()\n    var d14 = [String : [String : Int]]()\n    var d15 = [String : [String : Int]]()\n    var d16 = [String : [String : Int]]()\n    var d17 = [String : [String : Int]]()\n    var d18 = [String : [String : Int]]()\n    var d19 = [String : [String : Int]]()\n    var d20 = [String : [String : Int]]()\n    var d21 = [String : [String : Int]]()\n    var d22 = [String : [String : Int]]()\n    var d23 = [String : [String : Int]]()\n    var d24 = [String : [String : Int]]()\n    var d25 = [String : [String : Int]]()\n    var d26 = [String : [String : Int]]()\n    var d27 = [String : [String : Int]]()\n    var d28 = [String : [String : Int]]()\n    var d29 = [String : [String : Int]]()\n    var d30 = [String : [String : Int]]()\n    var d31 = [String : [String : Int]]()\n    var d32 = [String : [String : Int]]()\n    var d33 = [String : [String : Int]]()\n    var d34 = [String : [String : Int]]()\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "/tmp/tmp9nav7eo0.swift:4:9: warning: initialization of variable 'd1' was never used; consider replacing with assignment to '_' or removing it\n    var d1 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:5:9: warning: initialization of variable 'd2' was never used; consider replacing with assignment to '_' or removing it\n    var d2 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:6:9: warning: initialization of variable 'd3' was never used; consider replacing with assignment to '_' or removing it\n    var d3 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:7:9: warning: initialization of variable 'd4' was never used; consider replacing with assignment to '_' or removing it\n    var d4 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:8:9: warning: initialization of variable 'd5' was never used; consider replacing with assignment to '_' or removing it\n    var d5 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:9:9: warning: initialization of variable 'd6' was never used; consider replacing with assignment to '_' or removing it\n    var d6 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:10:9: warning: initialization of variable 'd7' was never used; consider replacing with assignment to '_' or removing it\n    var d7 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:11:9: warning: initialization of variable 'd8' was never used; consider replacing with assignment to '_' or removing it\n    var d8 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:12:9: warning: initialization of variable 'd9' was never used; consider replacing with assignment to '_' or removing it\n    var d9 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:13:9: warning: initialization of variable 'd10' was never used; consider replacing with assignment to '_' or removing it\n    var d10 = [String : [String : Int]]()\n    ~~~~^~~\n    _\n/tmp/tmp9nav7eo0.swift:14:9: warning: ini",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic: [String : [String : Int]] = [:]\n    var dic_list: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "tmpsrc187ba/tmpsrc187ba.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6a6f5f8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6a6f2efb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6a6f2ef988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6a6f2ee7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsrc187ba                        0x0000557873501eb8 <unavailable> + 7864\n5    libc.so.6                          0x00002b6a6f7e4460 __libc_start_main + 245\n6    tmpsrc187ba                        0x00005578735014a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var temp = [String : [String : Int]]()\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dict = [String : [String : Int]]()\n    var dict_list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dict[l1[i]] = [l2[i] : l3[i]]\n        dict_list.append(dict)\n    }\n    return dict_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmpv0im2c5v/tmpv0im2c5v.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5f4543fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5f45136b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5f45136988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5f451357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpv0im2c5v                        0x0000562f6a399f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b5f4562b460 __libc_start_main + 245\n6    tmpv0im2c5v                        0x0000562f6a399549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dict: [String : [String : Int]] = [:]\n    var dict2: [String : [String : Int]] = [:]\n    var dict3: [String : [String : Int]] = [:]\n    var dict4: [String : [String : Int]] = [:]\n    var dict5: [String : [String : Int]] = [:]\n    var dict6: [String : [String : Int]] = [:]\n    var dict7: [String : [String : Int]] = [:]\n    var dict8: [String : [String : Int]] = [:]\n    var dict9: [String : [String : Int]] = [:]\n    var dict10: [String : [String : Int]] = [:]\n    var dict11: [String : [String : Int]] = [:]\n    var dict12: [String : [String : Int]] = [:]\n    var dict13: [String : [String : Int]] = [:]\n    var dict14: [String : [String : Int]] = [:]\n    var dict15: [String : [String : Int]] = [:]\n    var dict16: [String : [String : Int]] = [:]\n    var dict17: [String : [String : Int]] = [:]\n    var dict18: [String : [String : Int]] = [:]\n    var dict19: [String : [String : Int]] = [:]\n    var dict20: [String : [String : Int]] = [:]\n    var dict21: [String : [String : Int]] = [:]\n    var dict22: [String : [String : Int]] = [:]\n    var dict23: [String : [String : Int]] = [:]\n    var dict24: [String : [String : Int]] = [:]\n    var dict25: [String : [String : Int]] = [:]\n    var dict26: [String : [String : Int]] = [:]\n    var dict27: [String : [String : Int]] = [:]\n    var dict28: [String : [String : Int]] = [:]\n    var dict29: [String : [String : Int]] = [:]\n    var dict30: [String : [String : Int]] = [:]\n    var\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "/tmp/tmp5x0rzk77.swift:34:8: error: expected pattern\n    var\n       ^\n/tmp/tmp5x0rzk77.swift:4:9: warning: variable 'dict' was never used; consider replacing with '_' or removing it\n    var dict: [String : [String : Int]] = [:]\n        ^~~~\n        _\n/tmp/tmp5x0rzk77.swift:5:9: warning: variable 'dict2' was never used; consider replacing with '_' or removing it\n    var dict2: [String : [String : Int]] = [:]\n        ^~~~~\n        _\n/tmp/tmp5x0rzk77.swift:6:9: warning: variable 'dict3' was never used; consider replacing with '_' or removing it\n    var dict3: [String : [String : Int]] = [:]\n        ^~~~~\n        _\n/tmp/tmp5x0rzk77.swift:7:9: warning: variable 'dict4' was never used; consider replacing with '_' or removing it\n    var dict4: [String : [String : Int]] = [:]\n        ^~~~~\n        _\n/tmp/tmp5x0rzk77.swift:8:9: warning: variable 'dict5' was never used; consider replacing with '_' or removing it\n    var dict5: [String : [String : Int]] = [:]\n        ^~~~~\n        _\n/tmp/tmp5x0rzk77.swift:9:9: warning: variable 'dict6' was never used; consider replacing with '_' or removing it\n    var dict6: [String : [String : Int]] = [:]\n        ^~~~~\n        _\n/tmp/tmp5x0rzk77.swift:10:9: warning: variable 'dict7' was never used; consider replacing with '_' or removing it\n    var dict7: [String : [String : Int]] = [:]\n        ^~~~~\n        _\n/tmp/tmp5x0rzk77.swift:11:9: warning: variable 'dict8' was never used; consider replacing with '_' or removing it\n    var dict8: [String : [String : Int]] = [:]\n        ^~~~~\n        _\n/tmp/tmp5x0rzk77.swift:12:9: warning: variable 'dict9' was never used; consider replacing with '_' or removing it\n    var dict9: [String : [String : Int]] = [:]\n        ^~~~~\n        _\n/tmp/tmp5x0rzk77.swift:13:9: warning: variable 'dict10' was never used; consider replacing with '_' or removing it\n    var dict10: [String : [String : Int]] = [:]\n        ^~~~~~\n        _\n/tmp/tmp5x0rzk77.swift:14:9: warning: variable 'dict11' was never used; consider replacing with '_' or removing it\n    var dict11: [St",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dict = [String : [String : Int]]()\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dic2 = [String : Int]()\n        dic2[l2[i]] = l3[i]\n        dic.append([l1[i] : dic2])\n    }\n    return dic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dict = [String : [String : Int]]()\n    var list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dict[l1[i]] = [l2[i] : l3[i]]\n        list.append(dict)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmpiex_h7bv/tmpiex_h7bv.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d24046c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d23d3db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d23d3d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d23d3c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpiex_h7bv                        0x00005638f2ee8f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b7d24232460 __libc_start_main + 245\n6    tmpiex_h7bv                        0x00005638f2ee8549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var dic: [String : [String : Int]] = [:]\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dict = [String : [String : Int]]()\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var temp: [String : [String : Int]] = [:]\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var d = [String : [String : Int]]()\n        d[l1[i]] = [l2[i] : l3[i]]\n        result.append(d)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dict = [String : [String : Int]]()\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var dic1: [String : [String : Int]] = [:]\n        dic1[l1[i]] = [l2[i] : l3[i]]\n        dic.append(dic1)\n    }\n    return dic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var dic: [String : [String : Int]] = [:]\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic_list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmpci3v5ssr/tmpci3v5ssr.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46b40bcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46b3db3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46b3db3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46b3db27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpci3v5ssr                        0x00005583a1510f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b46b42a8460 __libc_start_main + 245\n6    tmpci3v5ssr                        0x00005583a1510549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for (index, element) in l1.enumerated() {\n        result.append([element : [l2[index] : l3[index]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var temp = [String : [String : Int]]()\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic: [String : [String : Int]] = [:]\n    var dic2: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic2.append(dic)\n    }\n    return dic2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmpmo32ai9w/tmpmo32ai9w.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3bd3723c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3bd341ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3bd341a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3bd34197b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmo32ai9w                        0x0000559394b62eb8 <unavailable> + 7864\n5    libc.so.6                          0x00002b3bd390f460 __libc_start_main + 245\n6    tmpmo32ai9w                        0x0000559394b624a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic_list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmpci3v5ssr/tmpci3v5ssr.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46b40bcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46b3db3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46b3db3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46b3db27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpci3v5ssr                        0x00005583a1510f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b46b42a8460 __libc_start_main + 245\n6    tmpci3v5ssr                        0x00005583a1510549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for (index, element) in l1.enumerated() {\n        var dict = [String : [String : Int]]()\n        dict[element] = [l2[index] : l3[index]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic_list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmpci3v5ssr/tmpci3v5ssr.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46b40bcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46b3db3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46b3db3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46b3db27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpci3v5ssr                        0x00005583a1510f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b46b42a8460 __libc_start_main + 245\n6    tmpci3v5ssr                        0x00005583a1510549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var dict: [String : [String : Int]] = [:]\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dict = [String : [String : Int]]()\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for (index, value) in l1.enumerated() {\n        result.append([value : [l2[index] : l3[index]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return dic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dic = [String : [String : Int]]()\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dictionary: [String : [String : Int]] = [:]\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        dictionary[l1[i]] = [l2[i] : l3[i]]\n        result.append(dictionary)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmpxffz403q/tmpxffz403q.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6fe14b6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6fe11adb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6fe11ad988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6fe11ac7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxffz403q                        0x000055571e96beb8 <unavailable> + 7864\n5    libc.so.6                          0x00002b6fe16a2460 __libc_start_main + 245\n6    tmpxffz403q                        0x000055571e96b4a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var arr = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        arr.append(dic)\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmpap52ebqu/tmpap52ebqu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af5382ecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af537fe3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af537fe3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af537fe27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpap52ebqu                        0x00005568043fef58 <unavailable> + 8024\n5    libc.so.6                          0x00002af5384d8460 __libc_start_main + 245\n6    tmpap52ebqu                        0x00005568043fe549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var temp = [String : [String : Int]]()\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmpd3ifn9oo/tmpd3ifn9oo.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b98d65a7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b98d629eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b98d629e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b98d629d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpd3ifn9oo                        0x0000559b47be7f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b98d6793460 __libc_start_main + 245\n6    tmpd3ifn9oo                        0x0000559b47be7549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return dic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    var dic = [String : [String : Int]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n    }\n    result.append(dic)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmpydttcz4c/tmpydttcz4c.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b068a507c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b068a1feb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b068a1fe988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b068a1fd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpydttcz4c                        0x0000562eb8139f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b068a6f3460 __libc_start_main + 245\n6    tmpydttcz4c                        0x0000562eb8139549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var temp = [String : [String : Int]]()\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dict = [String : [String : Int]]()\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : [String : Int]]()\n    var d3 = [String : [String : Int]]()\n    var d4 = [String : [String : Int]]()\n    var d5 = [String : [String : Int]]()\n    var d6 = [String : [String : Int]]()\n    var d7 = [String : [String : Int]]()\n    var d8 = [String : [String : Int]]()\n    var d9 = [String : [String : Int]]()\n    var d10 = [String : [String : Int]]()\n    var d11 = [String : [String : Int]]()\n    var d12 = [String : [String : Int]]()\n    var d13 = [String : [String : Int]]()\n    var d14 = [String : [String : Int]]()\n    var d15 = [String : [String : Int]]()\n    var d16 = [String : [String : Int]]()\n    var d17 = [String : [String : Int]]()\n    var d18 = [String : [String : Int]]()\n    var d19 = [String : [String : Int]]()\n    var d20 = [String : [String : Int]]()\n    var d21 = [String : [String : Int]]()\n    var d22 = [String : [String : Int]]()\n    var d23 = [String : [String : Int]]()\n    var d24 = [String : [String : Int]]()\n    var d25 = [String : [String : Int]]()\n    var d26 = [String : [String : Int]]()\n    var d27 = [String : [String : Int]]()\n    var d28 = [String : [String : Int]]()\n    var d29 = [String : [String : Int]]()\n    var d30 = [String : [String : Int]]()\n    var d31 = [String : [String : Int]]()\n    var d32 = [String : [String : Int]]()\n    var d33 = [String : [String : Int]]()\n    var d34 = [String : [String : Int]]()\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "/tmp/tmp9nav7eo0.swift:4:9: warning: initialization of variable 'd1' was never used; consider replacing with assignment to '_' or removing it\n    var d1 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:5:9: warning: initialization of variable 'd2' was never used; consider replacing with assignment to '_' or removing it\n    var d2 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:6:9: warning: initialization of variable 'd3' was never used; consider replacing with assignment to '_' or removing it\n    var d3 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:7:9: warning: initialization of variable 'd4' was never used; consider replacing with assignment to '_' or removing it\n    var d4 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:8:9: warning: initialization of variable 'd5' was never used; consider replacing with assignment to '_' or removing it\n    var d5 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:9:9: warning: initialization of variable 'd6' was never used; consider replacing with assignment to '_' or removing it\n    var d6 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:10:9: warning: initialization of variable 'd7' was never used; consider replacing with assignment to '_' or removing it\n    var d7 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:11:9: warning: initialization of variable 'd8' was never used; consider replacing with assignment to '_' or removing it\n    var d8 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:12:9: warning: initialization of variable 'd9' was never used; consider replacing with assignment to '_' or removing it\n    var d9 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmp9nav7eo0.swift:13:9: warning: initialization of variable 'd10' was never used; consider replacing with assignment to '_' or removing it\n    var d10 = [String : [String : Int]]()\n    ~~~~^~~\n    _\n/tmp/tmp9nav7eo0.swift:14:9: warning: ini",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d = [String : [String : Int]]()\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        d[l1[i]] = [l2[i] : l3[i]]\n        result.append(d)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmpyuzc2s5o/tmpyuzc2s5o.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afaa52a1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afaa4f98b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afaa4f98988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afaa4f977b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyuzc2s5o                        0x0000564890f17f58 <unavailable> + 8024\n5    libc.so.6                          0x00002afaa548d460 __libc_start_main + 245\n6    tmpyuzc2s5o                        0x0000564890f17549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var temp = [String : [String : Int]]()\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var dic: [String : [String : Int]] = [:]\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var dict: [String : [String : Int]] = [:]\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic_list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmpci3v5ssr/tmpci3v5ssr.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46b40bcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46b3db3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46b3db3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46b3db27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpci3v5ssr                        0x00005583a1510f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b46b42a8460 __libc_start_main + 245\n6    tmpci3v5ssr                        0x00005583a1510549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n    }\n    return [dic]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmplcvv85q7/tmplcvv85q7.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9fb772dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9fb7424b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9fb7424988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9fb74237b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplcvv85q7                        0x0000561856faceb8 <unavailable> + 7864\n5    libc.so.6                          0x00002b9fb7919460 __libc_start_main + 245\n6    tmplcvv85q7                        0x0000561856fac4a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for (index, element) in l1.enumerated() {\n        result.append([element : [l2[index] : l3[index]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for (index, value) in l1.enumerated() {\n        result.append([value : [l2[index] : l3[index]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dic = [String : [String : Int]]()\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var temp: [String : [String : Int]] = [:]\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        list.append(dic)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmprwsl2buv/tmprwsl2buv.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b75fd519c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b75fd210b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b75fd210988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b75fd20f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprwsl2buv                        0x000055d3c5109f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b75fd705460 __libc_start_main + 245\n6    tmprwsl2buv                        0x000055d3c5109549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic_list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmpci3v5ssr/tmpci3v5ssr.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46b40bcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46b3db3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46b3db3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46b3db27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpci3v5ssr                        0x00005583a1510f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b46b42a8460 __libc_start_main + 245\n6    tmpci3v5ssr                        0x00005583a1510549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var temp: [String : [String : Int]] = [:]\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dict: [String : [String : Int]] = [:]\n    var list: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        dict[l1[i]] = [l2[i] : l3[i]]\n        list.append(dict)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "tmppkl2gnsd/tmppkl2gnsd.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba46878c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba4656fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba4656f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba4656e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppkl2gnsd                        0x0000564dce60ceb8 <unavailable> + 7864\n5    libc.so.6                          0x00002aba46a64460 __libc_start_main + 245\n6    tmppkl2gnsd                        0x0000564dce60c4a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return dic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one array to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var temp: [String : [String : Int]] = [:]\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}