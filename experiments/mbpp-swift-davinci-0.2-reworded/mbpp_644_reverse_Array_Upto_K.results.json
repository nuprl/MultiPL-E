{
  "name": "mbpp_644_reverse_Array_Upto_K",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var result = input\n    for i in 0..<k/2 {\n        result.swapAt(i, k-i-1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k {\n        output[i] = input[k - i - 1]\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    var i = 0\n    var j = k - 1\n    while i < j {\n        output.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    var i = 0\n    var j = k - 1\n    while i < j {\n        output.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    var i = 0\n    var j = k - 1\n    while i < j {\n        output.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    var i = 0\n    var j = k - 1\n    while i < j {\n        output.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    var i = 0\n    var j = k - 1\n    while i < j {\n        output.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k {\n        output[i] = input[k - i - 1]\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        let temp = output[i]\n        output[i] = output[k-i-1]\n        output[k-i-1] = temp\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var result = input\n    var i = 0\n    var j = k - 1\n    while i < j {\n        result.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var result = input\n    for i in 0..<k/2 {\n        result.swapAt(i, k-i-1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    var i = 0\n    var j = k - 1\n    while i < j {\n        output.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var result = input\n    for i in 0..<k/2 {\n        result.swapAt(i, k-i-1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var result = input\n    for i in 0..<k/2 {\n        result.swapAt(i, k-i-1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    var i = 0\n    while i < k {\n        let temp = output[i]\n        output[i] = output[k]\n        output[k] = temp\n        i += 1\n        k -= 1\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "/tmp/tmpx7d4qti2.swift:11:11: error: left side of mutating operator isn't mutable: 'k' is a 'let' constant\n        k -= 1\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var result = input\n    var i = 0\n    var j = k - 1\n    while i < j {\n        result.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var result = input\n    var i = 0\n    var j = k - 1\n    while i < j {\n        result.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-1-i)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var array = input\n    var i = 0\n    var j = k\n    while i < j {\n        let temp = array[i]\n        array[i] = array[j]\n        array[j] = temp\n        i += 1\n        j -= 1\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "tmpslju3som/tmpslju3som.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd937f1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd934e8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd934e8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd934e77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpslju3som                        0x0000556c1fdd14a9 <unavailable> + 5289\n5    libc.so.6                          0x00002afd939dd460 __libc_start_main + 245\n6    tmpslju3som                        0x0000556c1fdd1079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    var i = 0\n    while i < k {\n        output.swapAt(i, k)\n        i += 1\n        k -= 1\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "/tmp/tmpcmcxd5v7.swift:9:11: error: left side of mutating operator isn't mutable: 'k' is a 'let' constant\n        k -= 1\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        let temp = output[i]\n        output[i] = output[k-i-1]\n        output[k-i-1] = temp\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var result = input\n    for i in 0..<k/2 {\n        result.swapAt(i, k-i-1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var result = input\n    for i in 0..<k/2 {\n        result.swapAt(i, k-i-1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var result = input\n    for i in 0..<k/2 {\n        let temp = result[i]\n        result[i] = result[k-i-1]\n        result[k-i-1] = temp\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    var start = 0\n    var end = k - 1\n    while start < end {\n        output.swapAt(start, end)\n        start += 1\n        end -= 1\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    var i = 0\n    var j = k - 1\n    while i < j {\n        output.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var result = input\n    var i = 0\n    var j = k - 1\n    while i < j {\n        result.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    var i = 0\n    while i < k {\n        let temp = output[i]\n        output[i] = output[k]\n        output[k] = temp\n        i += 1\n        k -= 1\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "/tmp/tmpx7d4qti2.swift:11:11: error: left side of mutating operator isn't mutable: 'k' is a 'let' constant\n        k -= 1\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output: [Int] = []\n    var i = 0\n    while i < k {\n        output.insert(input[i], at: 0)\n        i += 1\n    }\n    while i < input.count {\n        output.append(input[i])\n        i += 1\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    var i = 0\n    var j = k - 1\n    while i < j {\n        let temp = output[i]\n        output[i] = output[j]\n        output[j] = temp\n        i += 1\n        j -= 1\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var result = input\n    for i in 0..<k/2 {\n        result.swapAt(i, k-i-1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k {\n        output[i] = input[k - i - 1]\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    var i = 0\n    var j = k - 1\n    while i < j {\n        let temp = output[i]\n        output[i] = output[j]\n        output[j] = temp\n        i += 1\n        j -= 1\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    var i = 0\n    while i < k {\n        output[i] = input[k - i - 1]\n        i += 1\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var array = input\n    var i = 0\n    var j = k - 1\n    while i < j {\n        array.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    var i = 0\n    var j = k - 1\n    while i < j {\n        output.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var result = input\n    for i in 0..<k/2 {\n        let temp = result[i]\n        result[i] = result[k-i-1]\n        result[k-i-1] = temp\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var result = input\n    for i in 0..<k/2 {\n        result.swapAt(i, k-i-1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var array = input\n    var start = 0\n    var end = k - 1\n    while start < end {\n        let temp = array[start]\n        array[start] = array[end]\n        array[end] = temp\n        start += 1\n        end -= 1\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    var i = 0\n    var j = k - 1\n    while i < j {\n        output.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var result = input\n    var i = 0\n    var j = k\n    while i < j {\n        result.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "tmpf7kl4_yl/tmpf7kl4_yl.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af049f6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af049c65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af049c65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af049c647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf7kl4_yl                        0x0000562cb43524a9 <unavailable> + 5289\n5    libc.so.6                          0x00002af04a15a460 __libc_start_main + 245\n6    tmpf7kl4_yl                        0x0000562cb4352079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    var i = 0\n    while i < k {\n        output[i] = input[k - i - 1]\n        i += 1\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    var i = 0\n    var j = k - 1\n    while i < j {\n        output.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k {\n        output[i] = input[k - i - 1]\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    var i = 0\n    while i < k {\n        let temp = output[i]\n        output[i] = output[k]\n        output[k] = temp\n        i += 1\n        k -= 1\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "/tmp/tmpx7d4qti2.swift:11:11: error: left side of mutating operator isn't mutable: 'k' is a 'let' constant\n        k -= 1\n        ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    var i = 0\n    var j = k - 1\n    while i < j {\n        let temp = output[i]\n        output[i] = output[j]\n        output[j] = temp\n        i += 1\n        j -= 1\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    var i = 0\n    var j = k\n    while i < j {\n        output.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "tmpa35yb5u5/tmpa35yb5u5.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1cf8bccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1cf88c3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1cf88c3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1cf88c27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa35yb5u5                        0x000055c03bde04a9 <unavailable> + 5289\n5    libc.so.6                          0x00002b1cf8db8460 __libc_start_main + 245\n6    tmpa35yb5u5                        0x000055c03bde0079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k {\n        output[i] = input[k - i - 1]\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var result = input\n    for i in 0..<k/2 {\n        result.swapAt(i, k-i-1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        let temp = output[i]\n        output[i] = output[k-i-1]\n        output[k-i-1] = temp\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var result = input\n    for i in 0..<k/2 {\n        result.swapAt(i, k-i-1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        let temp = output[i]\n        output[i] = output[k-i-1]\n        output[k-i-1] = temp\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var result = input\n    var start = 0\n    var end = k - 1\n    while start < end {\n        result.swapAt(start, end)\n        start += 1\n        end -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k {\n        output[i] = input[k-i-1]\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    var i = 0\n    var j = k - 1\n    while i < j {\n        output.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        let temp = output[i]\n        output[i] = output[k-i-1]\n        output[k-i-1] = temp\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output: [Int] = []\n    for i in 0..<k {\n        output.append(input[k-i-1])\n    }\n    for i in k..<input.count {\n        output.append(input[i])\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        let temp = output[i]\n        output[i] = output[k-i-1]\n        output[k-i-1] = temp\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var result = input\n    for i in 0..<k/2 {\n        result.swapAt(i, k-i-1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output: [Int] = []\n    for i in 0..<k {\n        output.append(input[k - i - 1])\n    }\n    for i in k..<input.count {\n        output.append(input[i])\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        let temp = output[i]\n        output[i] = output[k-i-1]\n        output[k-i-1] = temp\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    var start = 0\n    var end = k - 1\n    while start < end {\n        output.swapAt(start, end)\n        start += 1\n        end -= 1\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    var i = 0\n    var j = k - 1\n    while i < j {\n        let temp = output[i]\n        output[i] = output[j]\n        output[j] = temp\n        i += 1\n        j -= 1\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    var i = 0\n    while i < k {\n        output.swapAt(i, k - i - 1)\n        i += 1\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "tmpd1at94ur/tmpd1at94ur.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5dce6d0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5dce3c7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5dce3c7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5dce3c67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpd1at94ur                        0x00005585ad57f4a9 <unavailable> + 5289\n5    libc.so.6                          0x00002b5dce8bc460 __libc_start_main + 245\n6    tmpd1at94ur                        0x00005585ad57f079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var result = input\n    for i in 0..<k/2 {\n        result.swapAt(i, k-i-1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k {\n        output[i] = input[k - i - 1]\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    var i = 0\n    var j = k - 1\n    while i < j {\n        let temp = output[i]\n        output[i] = output[j]\n        output[j] = temp\n        i += 1\n        j -= 1\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        let temp = output[i]\n        output[i] = output[k-i-1]\n        output[k-i-1] = temp\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var arr = input\n    var i = 0\n    var j = k - 1\n    while i < j {\n        let temp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = temp\n        i += 1\n        j -= 1\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var input = input\n    var i = 0\n    var j = k - 1\n    while i < j {\n        input.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return input\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        let temp = output[i]\n        output[i] = output[k-i-1]\n        output[k-i-1] = temp\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    var i = 0\n    var j = k - 1\n    while i < j {\n        output.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var input = input\n    for i in 0..<k/2 {\n        input.swapAt(i, k-i-1)\n    }\n    return input\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k {\n        output[i] = input[k-i-1]\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var result = input\n    for i in 0..<k/2 {\n        result.swapAt(i, k-i-1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        output.swapAt(i, k-i-1)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var result = input\n    for i in 0..<k/2 {\n        result.swapAt(i, k-i-1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k {\n        output[i] = input[k-i-1]\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1666123610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to reverse an array upto a given position.\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n    var output = input\n    for i in 0..<k/2 {\n        let temp = output[i]\n        output[i] = output[k-i-1]\n        output[k-i-1] = temp\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])\nassert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])\nassert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}