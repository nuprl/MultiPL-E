{
  "name": "mbpp_4_heap_queue_largest",
  "language": "swift",
  "prompt": "\n/// Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nfunc heap_queue_largest(nums: [Int], n: Int) -> [Int] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_queue_largest(nums: [25, 35, 22, 85, 14, 65, 75, 22, 58], n: 3) == [85, 75, 65])\nassert(heap_queue_largest(nums: [25, 35, 22, 85, 14, 65, 75, 22, 58], n: 2) == [85, 75])\nassert(heap_queue_largest(nums: [25, 35, 22, 85, 14, 65, 75, 22, 58], n: 5) == [85, 75, 65, 58, 35])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    \n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap(sort: >, elements: nums)\n    var result: [Int] = []\n    for _ in 0..<n {\n        result.append(heap.remove()!)\n    }\n    return result",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n    }\n    var result = [Int]()\n    for _ in 0..<n {\n        result.append(heap.remove()!)\n    }\n    return result",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap(sort: >, elements: nums)\n    var largest = [Int]()\n    for _ in 0..<n {\n        largest.append(heap.remove()!)\n    }\n    return largest",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.enqueue(num)\n    }\n    var result = [Int]()\n    for _ in 0..<n {\n        result.append(heap.dequeue()!)\n    }\n    return result",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n    }\n    var result = [Int]()\n    for _ in 0..<n {\n        result.append(heap.remove()!)\n    }\n    return result",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n    }\n    var result = [Int]()\n    for _ in 0..<n {\n        result.append(heap.remove()!)\n    }\n    return result",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n    }\n    var result = [Int]()\n    for _ in 0..<n {\n        result.append(heap.remove()!)\n    }\n    return result",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    \n    for num in nums {\n        heap.insert(num)\n        \n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    \n    return heap.elements",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n    }\n    var result = [Int]()\n    for _ in 0..<n {\n        result.append(heap.remove()!)\n    }\n    return result",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.enqueue(num)\n    }\n    var result = [Int]()\n    for _ in 0..<n {\n        result.append(heap.dequeue()!)\n    }\n    return result",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.elements",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap(sort: >, elements: nums)\n    var result = [Int]()\n    for _ in 0..<n {\n        result.append(heap.remove()!)\n    }\n    return result",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n    }\n    var result = [Int]()\n    for _ in 0..<n {\n        result.append(heap.remove()!)\n    }\n    return result",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n    }\n    var result = [Int]()\n    for _ in 0..<n {\n        result.append(heap.remove()!)\n    }\n    return result",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.enqueue(num)\n        if heap.count > n {\n            heap.dequeue()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n    }\n    var result = [Int]()\n    for _ in 0..<n {\n        result.append(heap.remove()!)\n    }\n    return result",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n    }\n    var result = [Int]()\n    for _ in 0..<n {\n        result.append(heap.remove()!)\n    }\n    return result",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n    }\n    var result = [Int]()\n    for _ in 0..<n {\n        result.append(heap.remove()!)\n    }\n    return result",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n    }\n    var result = [Int]()\n    for _ in 0..<n {\n        result.append(heap.remove()!)\n    }\n    return result",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n    }\n    var result = [Int]()\n    for _ in 0..<n {\n        result.append(heap.remove()!)\n    }\n    return result",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.enqueue(num)\n        if heap.count > n {\n            heap.dequeue()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n    }\n    var result = [Int]()\n    for _ in 0..<n {\n        result.append(heap.remove()!)\n    }\n    return result",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n    }\n    var result = [Int]()\n    for _ in 0..<n {\n        result.append(heap.remove()!)\n    }\n    return result",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n    }\n    var result = [Int]()\n    for _ in 0..<n {\n        result.append(heap.remove()!)\n    }\n    return result",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n    }\n    var result = [Int]()\n    for _ in 0..<n {\n        result.append(heap.remove()!)\n    }\n    return result",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.elements",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.enqueue(num)\n        if heap.count > n {\n            heap.dequeue()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    return heap.sorted()",
    "    var heap = Heap(sort: >, elements: nums)\n    var result = [Int]()\n    for _ in 0..<n {\n        result.append(heap.remove()!)\n    }\n    return result",
    "    if n <= 0 {\n        return []\n    }\n    \n    var heap = Heap<Int>(sort: >)\n    for num in nums {\n        heap.insert(num)\n        \n        if heap.count > n {\n            heap.remove()\n        }\n    }\n    \n    return heap.sorted()"
  ]
}