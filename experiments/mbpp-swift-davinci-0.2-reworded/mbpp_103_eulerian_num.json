{
  "name": "mbpp_103_eulerian_num",
  "language": "swift",
  "prompt": "\n/// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n: Int, m: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eulerian_num(n: 3, m: 1) == 4)\nassert(eulerian_num(n: 4, m: 1) == 11)\nassert(eulerian_num(n: 5, m: 3) == 26)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var dp = Array(repeating: Array(repeating: 0, count: n + 1), count: n + 1)\n    for i in 0...n {\n        dp[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...i {\n            dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n        }\n    }\n    return dp[n][m]",
    "    if n == 0 && m == 0 {\n        return 1\n    }\n    if n == 0 || m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n: n - 1, m: m - 1) + (m + 1) * eulerian_num(n: n - 1, m: m)",
    "    if n == 0 && m == 0 {\n        return 1\n    }\n    if n == 0 || m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n: n - 1, m: m - 1) + (m + 1) * eulerian_num(n: n - 1, m: m)",
    "    // TODO: Implement\n    return 0",
    "    if n == 0 && m == 0 {\n        return 1\n    }\n    if n == 0 || m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n: n - 1, m: m - 1) + (m + 1) * eulerian_num(n: n - 1, m: m)",
    "    var a: [[Int]] = Array(repeating: Array(repeating: 0, count: m+1), count: n+1)\n    for i in 0...n {\n        for j in 0...m {\n            if i == 0 && j == 0 {\n                a[i][j] = 1\n            } else if i == 0 {\n                a[i][j] = 0\n            } else if j == 0 {\n                a[i][j] = 1\n            } else {\n                a[i][j] = a[i-1][j-1] + j * a[i-1][j]\n            }\n        }\n    }\n    return a[n][m]",
    "    var dp = Array(repeating: Array(repeating: 0, count: n + 1), count: m + 1)\n    for i in 0...m {\n        dp[i][0] = 1\n    }\n    for i in 1...m {\n        for j in 1...n {\n            dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n        }\n    }\n    return dp[m][n]",
    "    var dp = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        dp[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n        }\n    }\n    return dp[n][m]",
    "    var dp = [[Int]](repeating: [Int](repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        dp[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n        }\n    }\n    return dp[n][m]",
    "    var a = Array(repeating: Array(repeating: 0, count: m+1), count: n+1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i-1][j-1] + (i-1)*a[i-1][j]\n        }\n    }\n    return a[n][m]",
    "    var a = [[Int]](repeating: [Int](repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...m {\n        a[0][i] = 1\n    }\n    for i in 1...n {\n        a[i][0] = 0\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = (i - j) * a[i - 1][j - 1] + (j + 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var dp = Array(repeating: Array(repeating: 0, count: n + 1), count: n + 1)\n    for i in 0...n {\n        dp[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...i {\n            dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n        }\n    }\n    return dp[n][m]",
    "    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n: n - 1, m: m - 1) + (m + 1) * eulerian_num(n: n - 1, m: m)",
    "    var result = 0\n    for k in 0...m {\n        result += Int(pow(-1.0, Double(k))) * binomial(n + 1, k: k) * binomial(m, k: k)\n    }\n    return result",
    "    var a = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    return 0",
    "    var dp = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        for j in 0...min(i, m) {\n            if j == 0 || j == i {\n                dp[i][j] = 1\n            } else {\n                dp[i][j] = dp[i - 1][j - 1] + (i - j) * dp[i - 1][j]\n            }\n        }\n    }\n    return dp[n][m]",
    "    var dp = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        dp[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            dp[i][j] = (i - j) * dp[i - 1][j - 1] + (j + 1) * dp[i - 1][j]\n        }\n    }\n    return dp[n][m]",
    "    return 0",
    "    var result = 0\n    if n == 0 {\n        result = 1\n    } else if m == 0 {\n        result = 0\n    } else if n == m {\n        result = 1\n    } else {\n        result = (n - m + 1) * eulerian_num(n: n - 1, m: m - 1) + (m + 1) * eulerian_num(n: n - 1, m: m)\n    }\n    return result"
  ]
}