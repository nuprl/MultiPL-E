{
  "name": "mbpp_468_max_product",
  "language": "swift",
  "prompt": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    for i in 0..<arr.count {\n        max_product_so_far *= arr[i]\n        if max_product_so_far == 0 {\n            max_product_so_far = 1\n        }\n        max_product = max(max_product, max_product_so_far)\n    }\n    max_product_so_far = 1\n    for i in (0..<arr.count).reversed() {\n        max_product_so_far *= arr[i]\n        if max_product_so_far == 0 {\n            max_product_so_far = 1\n        }\n        max_product = max(max_product, max_product_so_far)\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpxm8j92q8/tmpxm8j92q8.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e48c1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e45b8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e45b8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e45b77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxm8j92q8                        0x0000555a919cf8ac <unavailable> + 6316\n5    libc.so.6                          0x00002ab0e4aad460 __libc_start_main + 245\n6    tmpxm8j92q8                        0x0000555a919cf4f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpm_9b_ter/tmpm_9b_ter.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8c2995dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8c29654b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8c29654988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8c296537b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm_9b_ter                        0x000055a45091863c <unavailable> + 5692\n5    libc.so.6                          0x00002b8c29b49460 __libc_start_main + 245\n6    tmpm_9b_ter                        0x000055a450918289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var maxProductSoFar = 1\n    var minProductSoFar = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProductSoFar = maxProductSoFar * arr[i]\n            minProductSoFar = min(minProductSoFar * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxProductSoFar = 1\n            minProductSoFar = 1\n        } else {\n            let temp = maxProductSoFar\n            maxProductSoFar = max(minProductSoFar * arr[i], 1)\n            minProductSoFar = temp * arr[i]\n        }\n        if maxProduct < maxProductSoFar {\n            maxProduct = maxProductSoFar\n        }\n    }\n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpo5m2fkar/tmpo5m2fkar.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0c57a14c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0c5770bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0c5770b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0c5770a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpo5m2fkar                        0x000055ab846bd63c <unavailable> + 5692\n5    libc.so.6                          0x00002b0c57c00460 __libc_start_main + 245\n6    tmpo5m2fkar                        0x000055ab846bd289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpnzsj_n11/tmpnzsj_n11.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5c14f43c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5c14c3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5c14c3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5c14c397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnzsj_n11                        0x000055592f3d363c <unavailable> + 5692\n5    libc.so.6                          0x00002b5c1512f460 __libc_start_main + 245\n6    tmpnzsj_n11                        0x000055592f3d3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_prod = 1\n    var min_prod = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_prod = max_prod * arr[i]\n            min_prod = min(min_prod * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_prod = 1\n            min_prod = 1\n        } else {\n            let temp = max_prod\n            max_prod = max(min_prod * arr[i], 1)\n            min_prod = temp * arr[i]\n        }\n        if max_so_far < max_prod {\n            max_so_far = max_prod\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp11826v9h/tmp11826v9h.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb9cdf2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb9cae9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeb9cae9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeb9cae87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp11826v9h                        0x000055db118c063c <unavailable> + 5692\n5    libc.so.6                          0x00002aeb9cfde460 __libc_start_main + 245\n6    tmp11826v9h                        0x000055db118c0289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var current_product = 1\n    var last_negative = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            current_product *= arr[i]\n            max_product = max(max_product, current_product)\n        } else if arr[i] == 0 {\n            current_product = 1\n            last_negative = 1\n        } else {\n            current_product *= arr[i]\n            if last_negative < 0 {\n                max_product = max(max_product, current_product / last_negative)\n            }\n            last_negative = current_product\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpykf_a48u/tmpykf_a48u.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b264fbd0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b264f8c7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b264f8c7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b264f8c67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpykf_a48u                        0x0000564b3b0bb5ec <unavailable> + 5612\n5    libc.so.6                          0x00002b264fdbc460 __libc_start_main + 245\n6    tmpykf_a48u                        0x0000564b3b0bb239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    for i in 0..<arr.count {\n        max_product_so_far *= arr[i]\n        if max_product_so_far == 0 {\n            max_product_so_far = 1\n        }\n        max_product = max(max_product, max_product_so_far)\n    }\n    max_product_so_far = 1\n    for i in (0..<arr.count).reversed() {\n        max_product_so_far *= arr[i]\n        if max_product_so_far == 0 {\n            max_product_so_far = 1\n        }\n        max_product = max(max_product, max_product_so_far)\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpxm8j92q8/tmpxm8j92q8.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e48c1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e45b8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e45b8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e45b77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxm8j92q8                        0x0000555a919cf8ac <unavailable> + 6316\n5    libc.so.6                          0x00002ab0e4aad460 __libc_start_main + 245\n6    tmpxm8j92q8                        0x0000555a919cf4f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_so_far = 1\n    var min_so_far = 1\n    var max_ending_here = 1\n    var min_ending_here = 1\n    var result = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = min(min_ending_here * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_ending_here = 1\n            min_ending_here = 1\n        } else {\n            let temp = max_ending_here\n            max_ending_here = max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        }\n        \n        if max_ending_here > max_so_far {\n            max_so_far = max_ending_here\n        }\n        \n        if min_ending_here < min_so_far {\n            min_so_far = min_ending_here\n        }\n        \n        result = max(result, max_so_far)\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpoi0_5ogo/tmpoi0_5ogo.swift:50: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3ceabeec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3cea8e5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3cea8e5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3cea8e47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpoi0_5ogo                        0x000055ec109ac63c <unavailable> + 5692\n5    libc.so.6                          0x00002b3ceadda460 __libc_start_main + 245\n6    tmpoi0_5ogo                        0x000055ec109ac289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    var max_element = arr[0]\n    var min_element = arr[0]\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        \n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp2aagf56e/tmp2aagf56e.swift:43: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad89cf70c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad89cc67b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad89cc67988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad89cc667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2aagf56e                        0x00005571cd7e363c <unavailable> + 5692\n5    libc.so.6                          0x00002ad89d15c460 __libc_start_main + 245\n6    tmp2aagf56e                        0x00005571cd7e3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_so_far = 1\n    var min_so_far = 1\n    var max_ending_here = 1\n    var min_ending_here = 1\n    var max_product = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = min(min_ending_here * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_ending_here = 1\n            min_ending_here = 1\n        } else {\n            let temp = max_ending_here\n            max_ending_here = max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        }\n        if max_product < max_ending_here {\n            max_product = max_ending_here\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp8sev164p/tmp8sev164p.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae589858c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae58954fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae58954f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae58954e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8sev164p                        0x000055dffb56e63c <unavailable> + 5692\n5    libc.so.6                          0x00002ae589a44460 __libc_start_main + 245\n6    tmp8sev164p                        0x000055dffb56e289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        \n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    \n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_901vw3h/tmp_901vw3h.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aac7c3e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aac7c0e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aac7c0e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aac7c0df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_901vw3h                        0x000055e97cba963c <unavailable> + 5692\n5    libc.so.6                          0x00002aac7c5d5460 __libc_start_main + 245\n6    tmp_901vw3h                        0x000055e97cba9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpzybsjyl2/tmpzybsjyl2.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d60192c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d5fe89b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d5fe89988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d5fe887b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzybsjyl2                        0x000055dc71e3663c <unavailable> + 5692\n5    libc.so.6                          0x00002b7d6037e460 __libc_start_main + 245\n6    tmpzybsjyl2                        0x000055dc71e36289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpl4phuy_s/tmpl4phuy_s.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aee2dd4fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aee2da46b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aee2da46988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aee2da457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl4phuy_s                        0x0000563a459ec63c <unavailable> + 5692\n5    libc.so.6                          0x00002aee2df3b460 __libc_start_main + 245\n6    tmpl4phuy_s                        0x0000563a459ec289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product *= arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        \n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    \n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpwum8vr0c/tmpwum8vr0c.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adad0001c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adacfcf8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adacfcf8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adacfcf77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwum8vr0c                        0x0000563fc901d63c <unavailable> + 5692\n5    libc.so.6                          0x00002adad01ed460 __libc_start_main + 245\n6    tmpwum8vr0c                        0x0000563fc901d289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 0\n    var currentProduct = 1\n    var currentMax = 0\n    var currentMin = 0\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            currentMax = max(currentMax * arr[i], arr[i])\n            currentMin = min(currentMin * arr[i], arr[i])\n        } else {\n            let temp = currentMax\n            currentMax = max(currentMin * arr[i], arr[i])\n            currentMin = min(temp * arr[i], arr[i])\n        }\n        maxProduct = max(maxProduct, currentMax)\n    }\n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpuw115m88/tmpuw115m88.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b35b08bac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b35b05b1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b35b05b1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b35b05b07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuw115m88                        0x0000558adc4ea63c <unavailable> + 5692\n5    libc.so.6                          0x00002b35b0aa6460 __libc_start_main + 245\n6    tmpuw115m88                        0x0000558adc4ea289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var dp = [Int](repeating: 1, count: arr.count)\n    var max_product = 1\n    for i in 0..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] {\n                dp[i] = max(dp[i], dp[j] * arr[i])\n                max_product = max(max_product, dp[i])\n            }\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp90oc18f5/tmp90oc18f5.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab13a9fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab13a6f2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab13a6f2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab13a6f17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp90oc18f5                        0x0000563b17d9e6ac <unavailable> + 5804\n5    libc.so.6                          0x00002ab13abe7460 __libc_start_main + 245\n6    tmp90oc18f5                        0x0000563b17d9e2f9 <unavailable> + 4857\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var maxProductSoFar = 1\n    var minProductSoFar = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProductSoFar = maxProductSoFar * arr[i]\n            minProductSoFar = min(minProductSoFar * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxProductSoFar = 1\n            minProductSoFar = 1\n        } else {\n            let temp = maxProductSoFar\n            maxProductSoFar = max(minProductSoFar * arr[i], 1)\n            minProductSoFar = temp * arr[i]\n        }\n        if maxProduct < maxProductSoFar {\n            maxProduct = maxProductSoFar\n        }\n    }\n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpo5m2fkar/tmpo5m2fkar.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0c57a14c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0c5770bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0c5770b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0c5770a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpo5m2fkar                        0x000055ab846bd63c <unavailable> + 5692\n5    libc.so.6                          0x00002b0c57c00460 __libc_start_main + 245\n6    tmpo5m2fkar                        0x000055ab846bd289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = Int.min\n    var product = 1\n    for i in 0..<arr.count {\n        product *= arr[i]\n        maxProduct = max(maxProduct, product)\n        if arr[i] == 0 {\n            product = 1\n        }\n    }\n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp3fntumkt/tmp3fntumkt.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8f0f088c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8f0ed7fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8f0ed7f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8f0ed7e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3fntumkt                        0x00005559a5b265ec <unavailable> + 5612\n5    libc.so.6                          0x00002b8f0f274460 __libc_start_main + 245\n6    tmp3fntumkt                        0x00005559a5b26239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    for i in 0..<arr.count {\n        max_product_so_far *= arr[i]\n        if max_product_so_far == 0 {\n            max_product_so_far = 1\n        }\n        max_product = max(max_product, max_product_so_far)\n    }\n    max_product_so_far = 1\n    for i in (0..<arr.count).reversed() {\n        max_product_so_far *= arr[i]\n        if max_product_so_far == 0 {\n            max_product_so_far = 1\n        }\n        max_product = max(max_product, max_product_so_far)\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpxm8j92q8/tmpxm8j92q8.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e48c1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e45b8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e45b8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e45b77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxm8j92q8                        0x0000555a919cf8ac <unavailable> + 6316\n5    libc.so.6                          0x00002ab0e4aad460 __libc_start_main + 245\n6    tmpxm8j92q8                        0x0000555a919cf4f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpl4phuy_s/tmpl4phuy_s.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aee2dd4fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aee2da46b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aee2da46988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aee2da457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl4phuy_s                        0x0000563a459ec63c <unavailable> + 5692\n5    libc.so.6                          0x00002aee2df3b460 __libc_start_main + 245\n6    tmpl4phuy_s                        0x0000563a459ec289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var current_product = 1\n    var current_max = arr[0]\n    var current_min = arr[0]\n    for i in 1..<arr.count {\n        if arr[i] > 0 {\n            current_max = max(current_max * arr[i], arr[i])\n            current_min = min(current_min * arr[i], arr[i])\n        } else {\n            let temp = current_max\n            current_max = max(current_min * arr[i], arr[i])\n            current_min = min(temp * arr[i], arr[i])\n        }\n        max_product = max(max_product, current_max)\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpty2kqrmi/tmpty2kqrmi.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aaf7be89c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aaf7bb80b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aaf7bb80988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aaf7bb7f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpty2kqrmi                        0x0000557d261a063c <unavailable> + 5692\n5    libc.so.6                          0x00002aaf7c075460 __libc_start_main + 245\n6    tmpty2kqrmi                        0x0000557d261a0289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var product = 1\n    var i = 0\n    var j = 0\n    while i < arr.count {\n        if arr[i] > arr[j] {\n            product *= arr[i]\n            if product > max_product {\n                max_product = product\n            }\n            j = i\n        } else {\n            product = 1\n        }\n        i += 1\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp7d0oz0ts/tmp7d0oz0ts.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ffd6b0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ffd3a7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ffd3a7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ffd3a67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7d0oz0ts                        0x000055dd379233cc <unavailable> + 5068\n5    libc.so.6                          0x00002b8ffd89c460 __libc_start_main + 245\n6    tmp7d0oz0ts                        0x000055dd37923019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var product = 1\n    var i = 0\n    var j = 0\n    while i < arr.count {\n        if arr[i] > arr[j] {\n            product *= arr[i]\n            if product > max_product {\n                max_product = product\n            }\n            j = i\n        } else {\n            product = 1\n        }\n        i += 1\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp7d0oz0ts/tmp7d0oz0ts.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ffd6b0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ffd3a7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ffd3a7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ffd3a67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7d0oz0ts                        0x000055dd379233cc <unavailable> + 5068\n5    libc.so.6                          0x00002b8ffd89c460 __libc_start_main + 245\n6    tmp7d0oz0ts                        0x000055dd37923019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var maxSoFar = 1\n    var minSoFar = 1\n    var maxNeg = Int.min\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxSoFar = maxSoFar * arr[i]\n            minSoFar = min(minSoFar * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxSoFar = 1\n            minSoFar = 1\n            maxNeg = 0\n        } else {\n            let temp = maxSoFar\n            maxSoFar = max(minSoFar * arr[i], 1)\n            minSoFar = temp * arr[i]\n            maxNeg = max(maxNeg, minSoFar)\n        }\n        if maxSoFar > maxProduct {\n            maxProduct = maxSoFar\n        }\n    }\n    if maxProduct == 1 {\n        return maxNeg\n    }\n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpentdz_n9/tmpentdz_n9.swift:45: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b23d9d43c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b23d9a3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b23d9a3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b23d9a397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpentdz_n9                        0x000055a4e9f0e63c <unavailable> + 5692\n5    libc.so.6                          0x00002b23d9f2f460 __libc_start_main + 245\n6    tmpentdz_n9                        0x000055a4e9f0e289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    var max_element = 1\n    var min_element = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp457giy3i/tmp457giy3i.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b76c1cf8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b76c19efb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b76c19ef988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b76c19ee7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp457giy3i                        0x000055ea1660b63c <unavailable> + 5692\n5    libc.so.6                          0x00002b76c1ee4460 __libc_start_main + 245\n6    tmp457giy3i                        0x000055ea1660b289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp6q1egh1m/tmp6q1egh1m.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae739d09c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae739a00b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae739a00988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae7399ff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6q1egh1m                        0x000055df1d40d63c <unavailable> + 5692\n5    libc.so.6                          0x00002ae739ef5460 __libc_start_main + 245\n6    tmp6q1egh1m                        0x000055df1d40d289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        \n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    \n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_901vw3h/tmp_901vw3h.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aac7c3e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aac7c0e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aac7c0e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aac7c0df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_901vw3h                        0x000055e97cba963c <unavailable> + 5692\n5    libc.so.6                          0x00002aac7c5d5460 __libc_start_main + 245\n6    tmp_901vw3h                        0x000055e97cba9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var result = 0\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if result < max_so_far {\n            result = max_so_far\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpni1sjbdl/tmpni1sjbdl.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b286e9efc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b286e6e6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b286e6e6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b286e6e57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpni1sjbdl                        0x000055a73687a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b286ebdb460 __libc_start_main + 245\n6    tmpni1sjbdl                        0x000055a73687a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far*arr[i]\n            min_so_far = min(min_so_far*arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far*arr[i], 1)\n            min_so_far = temp*arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpm374r_b2/tmpm374r_b2.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abd7c871c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abd7c568b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abd7c568988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abd7c5677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm374r_b2                        0x00005649b92b463c <unavailable> + 5692\n5    libc.so.6                          0x00002abd7ca5d460 __libc_start_main + 245\n6    tmpm374r_b2                        0x00005649b92b4289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        max_so_far *= arr[i]\n        if max_so_far == 0 {\n            max_so_far = 1\n        }\n        max_product = max(max_product, max_so_far)\n    }\n    max_so_far = 1\n    for i in (0..<arr.count).reversed() {\n        max_so_far *= arr[i]\n        if max_so_far == 0 {\n            max_so_far = 1\n        }\n        max_product = max(max_product, max_so_far)\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp4vtbbzv_/tmp4vtbbzv_.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5266252c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5265f49b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5265f49988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5265f487b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vtbbzv_                        0x000055b6fd8ad8ac <unavailable> + 6316\n5    libc.so.6                          0x00002b526643e460 __libc_start_main + 245\n6    tmp4vtbbzv_                        0x000055b6fd8ad4f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var maxProductSoFar = 1\n    var minProductSoFar = 1\n    var maxNegative = Int.min\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProductSoFar = maxProductSoFar * arr[i]\n            minProductSoFar = min(minProductSoFar * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxProductSoFar = 1\n            minProductSoFar = 1\n            maxNegative = 0\n        } else {\n            let temp = maxProductSoFar\n            maxProductSoFar = max(minProductSoFar * arr[i], 1)\n            minProductSoFar = temp * arr[i]\n            maxNegative = max(maxNegative, minProductSoFar)\n        }\n        maxProduct = max(maxProduct, maxProductSoFar)\n    }\n    return maxProduct == 1 ? maxNegative : maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp3k0qnu5m/tmp3k0qnu5m.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b326d61bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b326d312b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b326d312988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b326d3117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3k0qnu5m                        0x0000564b5f5b463c <unavailable> + 5692\n5    libc.so.6                          0x00002b326d807460 __libc_start_main + 245\n6    tmp3k0qnu5m                        0x0000564b5f5b4289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_ending_here = 1\n    var min_product_ending_here = 1\n    var max_ending_here = 1\n    var min_ending_here = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = min(min_ending_here * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_ending_here = 1\n            min_ending_here = 1\n        } else {\n            let temp = max_ending_here\n            max_ending_here = max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        }\n        if max_product_ending_here < max_ending_here {\n            max_product_ending_here = max_ending_here\n        }\n        if min_product_ending_here > min_ending_here {\n            min_product_ending_here = min_ending_here\n        }\n    }\n    max_product = max(max_product_ending_here, min_product_ending_here)\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmph47nlwkh/tmph47nlwkh.swift:45: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b53c3a30c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b53c3727b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b53c3727988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b53c37267b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph47nlwkh                        0x00005557776cc63c <unavailable> + 5692\n5    libc.so.6                          0x00002b53c3c1c460 __libc_start_main + 245\n6    tmph47nlwkh                        0x00005557776cc289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    guard arr.count > 1 else { return arr.first ?? 0 }\n    var max_product = Int.min\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmptrnhdk5h/tmptrnhdk5h.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b62954dbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b62951d2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b62951d2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b62951d17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptrnhdk5h                        0x000055f961aeb6dc <unavailable> + 5852\n5    libc.so.6                          0x00002b62956c7460 __libc_start_main + 245\n6    tmptrnhdk5h                        0x000055f961aeb329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var current_product = 1\n    for i in 0..<arr.count {\n        current_product *= arr[i]\n        max_product = max(max_product, current_product)\n        if current_product == 0 {\n            current_product = 1\n        }\n    }\n    current_product = 1\n    for i in stride(from: arr.count - 1, through: 0, by: -1) {\n        current_product *= arr[i]\n        max_product = max(max_product, current_product)\n        if current_product == 0 {\n            current_product = 1\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp7vpzm1dn/tmp7vpzm1dn.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b317e476c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b317e16db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b317e16d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b317e16c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7vpzm1dn                        0x0000564e13c4280c <unavailable> + 6156\n5    libc.so.6                          0x00002b317e662460 __libc_start_main + 245\n6    tmp7vpzm1dn                        0x0000564e13c42459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpc92xqjjw/tmpc92xqjjw.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b86dddfcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b86ddaf3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b86ddaf3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b86ddaf27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc92xqjjw                        0x000055b32232663c <unavailable> + 5692\n5    libc.so.6                          0x00002b86ddfe8460 __libc_start_main + 245\n6    tmpc92xqjjw                        0x000055b322326289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var max_ending_here = 1\n    var min_ending_here = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = min(min_ending_here * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_ending_here = 1\n            min_ending_here = 1\n        } else {\n            let temp = max_ending_here\n            max_ending_here = max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        }\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp2x1kzhls/tmp2x1kzhls.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3bb0ab0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3bb07a7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3bb07a7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3bb07a67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2x1kzhls                        0x000056365d0b763c <unavailable> + 5692\n5    libc.so.6                          0x00002b3bb0c9c460 __libc_start_main + 245\n6    tmp2x1kzhls                        0x000056365d0b7289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp6q1egh1m/tmp6q1egh1m.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae739d09c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae739a00b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae739a00988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae7399ff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6q1egh1m                        0x000055df1d40d63c <unavailable> + 5692\n5    libc.so.6                          0x00002ae739ef5460 __libc_start_main + 245\n6    tmp6q1egh1m                        0x000055df1d40d289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var current_product = 1\n    var i = 0\n    while i < arr.count {\n        current_product *= arr[i]\n        if current_product > max_product {\n            max_product = current_product\n        }\n        i += 1\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpgi8j3r5g/tmpgi8j3r5g.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7b9565dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7b95354b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7b95354988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7b953537b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgi8j3r5g                        0x0000557e25e2d3cc <unavailable> + 5068\n5    libc.so.6                          0x00002b7b95849460 __libc_start_main + 245\n6    tmpgi8j3r5g                        0x0000557e25e2d019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    for i in 0..<arr.count {\n        max_product_so_far *= arr[i]\n        if max_product_so_far == 0 {\n            max_product_so_far = 1\n        }\n        max_product = max(max_product, max_product_so_far)\n    }\n    max_product_so_far = 1\n    for i in (0..<arr.count).reversed() {\n        max_product_so_far *= arr[i]\n        if max_product_so_far == 0 {\n            max_product_so_far = 1\n        }\n        max_product = max(max_product, max_product_so_far)\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpxm8j92q8/tmpxm8j92q8.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e48c1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e45b8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e45b8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e45b77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxm8j92q8                        0x0000555a919cf8ac <unavailable> + 6316\n5    libc.so.6                          0x00002ab0e4aad460 __libc_start_main + 245\n6    tmpxm8j92q8                        0x0000555a919cf4f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    var max_element = arr[0]\n    var min_element = arr[0]\n    for i in 1..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpnnw58xl7/tmpnnw58xl7.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4c832d5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4c82fccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4c82fcc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4c82fcb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnnw58xl7                        0x00005575d69c563c <unavailable> + 5692\n5    libc.so.6                          0x00002b4c834c1460 __libc_start_main + 245\n6    tmpnnw58xl7                        0x00005575d69c5289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpc92xqjjw/tmpc92xqjjw.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b86dddfcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b86ddaf3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b86ddaf3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b86ddaf27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc92xqjjw                        0x000055b32232663c <unavailable> + 5692\n5    libc.so.6                          0x00002b86ddfe8460 __libc_start_main + 245\n6    tmpc92xqjjw                        0x000055b322326289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        \n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp_2wlb8hi/tmp_2wlb8hi.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5ee1f08c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5ee1bffb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5ee1bff988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5ee1bfe7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2wlb8hi                        0x000055833e3d763c <unavailable> + 5692\n5    libc.so.6                          0x00002b5ee20f4460 __libc_start_main + 245\n6    tmp_2wlb8hi                        0x000055833e3d7289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpnzsj_n11/tmpnzsj_n11.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5c14f43c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5c14c3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5c14c3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5c14c397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnzsj_n11                        0x000055592f3d363c <unavailable> + 5692\n5    libc.so.6                          0x00002b5c1512f460 __libc_start_main + 245\n6    tmpnzsj_n11                        0x000055592f3d3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 0\n    var product = 1\n    var i = 0\n    var j = 0\n    while i < arr.count && j < arr.count {\n        if arr[i] < arr[j] {\n            product *= arr[j]\n            j += 1\n        } else {\n            maxProduct = max(maxProduct, product)\n            product = 1\n            i = j\n            j += 1\n        }\n    }\n    return max(maxProduct, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpqc40dhi5/tmpqc40dhi5.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad69bf4fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad69bc46b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad69bc46988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad69bc457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqc40dhi5                        0x0000564f1fdd445c <unavailable> + 5212\n5    libc.so.6                          0x00002ad69c13b460 __libc_start_main + 245\n6    tmpqc40dhi5                        0x0000564f1fdd40a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpc92xqjjw/tmpc92xqjjw.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b86dddfcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b86ddaf3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b86ddaf3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b86ddaf27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc92xqjjw                        0x000055b32232663c <unavailable> + 5692\n5    libc.so.6                          0x00002b86ddfe8460 __libc_start_main + 245\n6    tmpc92xqjjw                        0x000055b322326289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        \n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    \n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_901vw3h/tmp_901vw3h.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aac7c3e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aac7c0e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aac7c0e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aac7c0df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_901vw3h                        0x000055e97cba963c <unavailable> + 5692\n5    libc.so.6                          0x00002aac7c5d5460 __libc_start_main + 245\n6    tmp_901vw3h                        0x000055e97cba9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        \n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    \n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_901vw3h/tmp_901vw3h.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aac7c3e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aac7c0e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aac7c0e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aac7c0df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_901vw3h                        0x000055e97cba963c <unavailable> + 5692\n5    libc.so.6                          0x00002aac7c5d5460 __libc_start_main + 245\n6    tmp_901vw3h                        0x000055e97cba9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpc92xqjjw/tmpc92xqjjw.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b86dddfcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b86ddaf3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b86ddaf3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b86ddaf27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc92xqjjw                        0x000055b32232663c <unavailable> + 5692\n5    libc.so.6                          0x00002b86ddfe8460 __libc_start_main + 245\n6    tmpc92xqjjw                        0x000055b322326289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp0k6wxoxy/tmp0k6wxoxy.swift:47: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7a7bfa4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7a7bc9bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7a7bc9b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7a7bc9a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0k6wxoxy                        0x000055578e46063c <unavailable> + 5692\n5    libc.so.6                          0x00002b7a7c190460 __libc_start_main + 245\n6    tmp0k6wxoxy                        0x000055578e460289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_ending_here = 1\n    var min_product_ending_here = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_ending_here = max_product_ending_here * arr[i]\n            min_product_ending_here = min(min_product_ending_here * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_ending_here = 1\n            min_product_ending_here = 1\n        } else {\n            let temp = max_product_ending_here\n            max_product_ending_here = max(min_product_ending_here * arr[i], 1)\n            min_product_ending_here = temp * arr[i]\n        }\n        \n        if max_product_ending_here > max_product {\n            max_product = max_product_ending_here\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpe4qqq5q1/tmpe4qqq5q1.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0b35af3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0b357eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0b357ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0b357e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe4qqq5q1                        0x00005602310a863c <unavailable> + 5692\n5    libc.so.6                          0x00002b0b35cdf460 __libc_start_main + 245\n6    tmpe4qqq5q1                        0x00005602310a8289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var maxProductSoFar = 1\n    var minProductSoFar = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProductSoFar = maxProductSoFar * arr[i]\n            minProductSoFar = min(minProductSoFar * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxProductSoFar = 1\n            minProductSoFar = 1\n        } else {\n            let temp = maxProductSoFar\n            maxProductSoFar = max(minProductSoFar * arr[i], 1)\n            minProductSoFar = temp * arr[i]\n        }\n        if maxProduct < maxProductSoFar {\n            maxProduct = maxProductSoFar\n        }\n    }\n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpo5m2fkar/tmpo5m2fkar.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0c57a14c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0c5770bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0c5770b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0c5770a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpo5m2fkar                        0x000055ab846bd63c <unavailable> + 5692\n5    libc.so.6                          0x00002b0c57c00460 __libc_start_main + 245\n6    tmpo5m2fkar                        0x000055ab846bd289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_product_so_far {\n            max_product = max_product_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp8_olpbph/tmp8_olpbph.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a4bfd7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a4bcceb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a4bcce988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a4bccd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8_olpbph                        0x000055ef10af963c <unavailable> + 5692\n5    libc.so.6                          0x00002b8a4c1c3460 __libc_start_main + 245\n6    tmp8_olpbph                        0x000055ef10af9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        max_product = max(max_product, max_product_so_far)\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpl3catisd/tmpl3catisd.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9076901c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b90765f8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b90765f8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b90765f77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl3catisd                        0x000055914306a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b9076aed460 __libc_start_main + 245\n6    tmpl3catisd                        0x000055914306a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        \n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    \n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_901vw3h/tmp_901vw3h.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aac7c3e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aac7c0e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aac7c0e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aac7c0df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_901vw3h                        0x000055e97cba963c <unavailable> + 5692\n5    libc.so.6                          0x00002aac7c5d5460 __libc_start_main + 245\n6    tmp_901vw3h                        0x000055e97cba9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_prod = 1\n    var min_prod = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_prod = max_prod * arr[i]\n            min_prod = min(min_prod * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_prod = 1\n            min_prod = 1\n        } else {\n            let temp = max_prod\n            max_prod = max(min_prod * arr[i], 1)\n            min_prod = temp * arr[i]\n        }\n        if max_so_far < max_prod {\n            max_so_far = max_prod\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp11826v9h/tmp11826v9h.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb9cdf2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb9cae9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeb9cae9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeb9cae87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp11826v9h                        0x000055db118c063c <unavailable> + 5692\n5    libc.so.6                          0x00002aeb9cfde460 __libc_start_main + 245\n6    tmp11826v9h                        0x000055db118c0289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    for i in 0..<arr.count {\n        max_product_so_far *= arr[i]\n        if max_product_so_far == 0 {\n            max_product_so_far = 1\n        }\n        max_product = max(max_product, max_product_so_far)\n    }\n    max_product_so_far = 1\n    for i in (0..<arr.count).reversed() {\n        max_product_so_far *= arr[i]\n        if max_product_so_far == 0 {\n            max_product_so_far = 1\n        }\n        max_product = max(max_product, max_product_so_far)\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpxm8j92q8/tmpxm8j92q8.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e48c1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e45b8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e45b8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e45b77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxm8j92q8                        0x0000555a919cf8ac <unavailable> + 6316\n5    libc.so.6                          0x00002ab0e4aad460 __libc_start_main + 245\n6    tmpxm8j92q8                        0x0000555a919cf4f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 0\n    var max_product_ending_here = 1\n    var min_product_ending_here = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_ending_here = max_product_ending_here * arr[i]\n            min_product_ending_here = min(min_product_ending_here * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_ending_here = 1\n            min_product_ending_here = 1\n        } else {\n            let temp = max_product_ending_here\n            max_product_ending_here = max(min_product_ending_here * arr[i], 1)\n            min_product_ending_here = temp * arr[i]\n        }\n        if max_product < max_product_ending_here {\n            max_product = max_product_ending_here\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp44oifcga/tmp44oifcga.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b16ddbc8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b16dd8bfb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b16dd8bf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b16dd8be7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44oifcga                        0x00005613d71ec63c <unavailable> + 5692\n5    libc.so.6                          0x00002b16dddb4460 __libc_start_main + 245\n6    tmp44oifcga                        0x00005613d71ec289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product *= arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        \n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    \n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpwum8vr0c/tmpwum8vr0c.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adad0001c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adacfcf8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adacfcf8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adacfcf77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwum8vr0c                        0x0000563fc901d63c <unavailable> + 5692\n5    libc.so.6                          0x00002adad01ed460 __libc_start_main + 245\n6    tmpwum8vr0c                        0x0000563fc901d289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        if max_product < max_product_so_far {\n            max_product = max_product_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmppnwhlmlt/tmppnwhlmlt.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3ad1348c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3ad103fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3ad103f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3ad103e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppnwhlmlt                        0x000056384b63063c <unavailable> + 5692\n5    libc.so.6                          0x00002b3ad1534460 __libc_start_main + 245\n6    tmppnwhlmlt                        0x000056384b630289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        max_product = max(max_product, max_product_so_far)\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpl3catisd/tmpl3catisd.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9076901c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b90765f8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b90765f8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b90765f77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl3catisd                        0x000055914306a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b9076aed460 __libc_start_main + 245\n6    tmpl3catisd                        0x000055914306a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var product = 1\n    var max_element = arr[0]\n    for i in 0..<arr.count {\n        if arr[i] > max_element {\n            max_element = arr[i]\n        }\n        product *= arr[i]\n        if product > max_product {\n            max_product = product\n        }\n        if product == 0 {\n            product = 1\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp13p4p_9y/tmp13p4p_9y.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1620031c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b161fd28b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b161fd28988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b161fd277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp13p4p_9y                        0x000056185e14455c <unavailable> + 5468\n5    libc.so.6                          0x00002b162021d460 __libc_start_main + 245\n6    tmp13p4p_9y                        0x000056185e1441a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_so_far = 1\n    var min_so_far = 1\n    var max_ending_here = 1\n    var min_ending_here = 1\n    var result = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = min(min_ending_here * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_ending_here = 1\n            min_ending_here = 1\n        } else {\n            let temp = max_ending_here\n            max_ending_here = max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        }\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpl4hw0vhp/tmpl4hw0vhp.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1c927d5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1c924ccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1c924cc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1c924cb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl4hw0vhp                        0x000055ec582d063c <unavailable> + 5692\n5    libc.so.6                          0x00002b1c929c1460 __libc_start_main + 245\n6    tmpl4hw0vhp                        0x000055ec582d0289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var minProduct = 1\n    var maxSoFar = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProduct = maxProduct * arr[i]\n            minProduct = min(minProduct * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxProduct = 1\n            minProduct = 1\n        } else {\n            let temp = maxProduct\n            maxProduct = max(minProduct * arr[i], 1)\n            minProduct = temp * arr[i]\n        }\n        maxSoFar = max(maxSoFar, maxProduct)\n    }\n    return maxSoFar\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp493l_643/tmp493l_643.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b39c3359c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b39c3050b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b39c3050988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b39c304f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp493l_643                        0x000055dc7ca8963c <unavailable> + 5692\n5    libc.so.6                          0x00002b39c3545460 __libc_start_main + 245\n6    tmp493l_643                        0x000055dc7ca89289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        \n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    \n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_901vw3h/tmp_901vw3h.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aac7c3e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aac7c0e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aac7c0e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aac7c0df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_901vw3h                        0x000055e97cba963c <unavailable> + 5692\n5    libc.so.6                          0x00002aac7c5d5460 __libc_start_main + 245\n6    tmp_901vw3h                        0x000055e97cba9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var current_product = 1\n    var previous_product = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            current_product = max(current_product * arr[i], 1)\n            previous_product *= arr[i]\n        } else if arr[i] == 0 {\n            current_product = 1\n            previous_product = 1\n        } else {\n            let temp = current_product\n            current_product = max(previous_product * arr[i], 1)\n            previous_product = temp * arr[i]\n        }\n        max_product = max(max_product, current_product)\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpd2qzbc7l/tmpd2qzbc7l.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acef2809c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acef2500b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acef2500988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acef24ff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpd2qzbc7l                        0x00005619b9fb55ec <unavailable> + 5612\n5    libc.so.6                          0x00002acef29f5460 __libc_start_main + 245\n6    tmpd2qzbc7l                        0x00005619b9fb5239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_ending_here = 1\n    var min_product_ending_here = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_ending_here = max_product_ending_here * arr[i]\n            min_product_ending_here = min(min_product_ending_here * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_ending_here = 1\n            min_product_ending_here = 1\n        } else {\n            let temp = max_product_ending_here\n            max_product_ending_here = max(min_product_ending_here * arr[i], 1)\n            min_product_ending_here = temp * arr[i]\n        }\n        \n        if max_product < max_product_ending_here {\n            max_product = max_product_ending_here\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpomxn46tc/tmpomxn46tc.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b580db85c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b580d87cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b580d87c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b580d87b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpomxn46tc                        0x000055797986d63c <unavailable> + 5692\n5    libc.so.6                          0x00002b580dd71460 __libc_start_main + 245\n6    tmpomxn46tc                        0x000055797986d289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpnzsj_n11/tmpnzsj_n11.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5c14f43c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5c14c3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5c14c3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5c14c397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnzsj_n11                        0x000055592f3d363c <unavailable> + 5692\n5    libc.so.6                          0x00002b5c1512f460 __libc_start_main + 245\n6    tmpnzsj_n11                        0x000055592f3d3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        \n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    \n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_901vw3h/tmp_901vw3h.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aac7c3e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aac7c0e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aac7c0e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aac7c0df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_901vw3h                        0x000055e97cba963c <unavailable> + 5692\n5    libc.so.6                          0x00002aac7c5d5460 __libc_start_main + 245\n6    tmp_901vw3h                        0x000055e97cba9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var maxProductSoFar = 1\n    var minProductSoFar = 1\n    var minProduct = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProductSoFar = maxProductSoFar * arr[i]\n            minProductSoFar = min(minProductSoFar * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxProductSoFar = 1\n            minProductSoFar = 1\n        } else {\n            let temp = maxProductSoFar\n            maxProductSoFar = max(minProductSoFar * arr[i], 1)\n            minProductSoFar = temp * arr[i]\n        }\n        maxProduct = max(maxProduct, maxProductSoFar)\n    }\n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpcgv3545v/tmpcgv3545v.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b94ac47ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b94ac171b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b94ac171988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b94ac1707b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcgv3545v                        0x00005648bdc6163c <unavailable> + 5692\n5    libc.so.6                          0x00002b94ac666460 __libc_start_main + 245\n6    tmpcgv3545v                        0x00005648bdc61289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var prev_max_product = 1\n    var prev_min_product = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max(max_product, prev_max_product * arr[i])\n            prev_max_product = max(prev_max_product * arr[i], 1)\n            prev_min_product = prev_min_product * arr[i]\n        } else if arr[i] == 0 {\n            max_product = max(max_product, 0)\n            prev_max_product = 1\n            prev_min_product = 1\n        } else {\n            let temp = prev_max_product\n            max_product = max(max_product, prev_min_product * arr[i])\n            prev_max_product = prev_min_product * arr[i]\n            prev_min_product = temp * arr[i]\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp2pwv44l4/tmp2pwv44l4.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b483efc8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b483ecbfb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b483ecbf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b483ecbe7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2pwv44l4                        0x0000560f4359e5ec <unavailable> + 5612\n5    libc.so.6                          0x00002b483f1b4460 __libc_start_main + 245\n6    tmp2pwv44l4                        0x0000560f4359e239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp1bs1faz7/tmp1bs1faz7.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9bf6b91c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9bf6888b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9bf6888988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9bf68877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1bs1faz7                        0x000055e17ec2a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b9bf6d7d460 __libc_start_main + 245\n6    tmp1bs1faz7                        0x000055e17ec2a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    var max_element = arr[0]\n    var min_element = arr[0]\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmppwt9pw4f/tmppwt9pw4f.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af0133a9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af0130a0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af0130a0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af01309f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppwt9pw4f                        0x00005573e8bba63c <unavailable> + 5692\n5    libc.so.6                          0x00002af013595460 __libc_start_main + 245\n6    tmppwt9pw4f                        0x00005573e8bba289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpoqz4zr50/tmpoqz4zr50.swift:45: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4507a65c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b450775cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b450775c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b450775b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpoqz4zr50                        0x0000563844fd063c <unavailable> + 5692\n5    libc.so.6                          0x00002b4507c51460 __libc_start_main + 245\n6    tmpoqz4zr50                        0x0000563844fd0289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpl4phuy_s/tmpl4phuy_s.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aee2dd4fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aee2da46b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aee2da46988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aee2da457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl4phuy_s                        0x0000563a459ec63c <unavailable> + 5692\n5    libc.so.6                          0x00002aee2df3b460 __libc_start_main + 245\n6    tmpl4phuy_s                        0x0000563a459ec289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        \n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    \n    if flag == 0 && max_so_far == 1 {\n        return 0\n    }\n    \n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp54lmy9ht/tmp54lmy9ht.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8515600c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b85152f7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b85152f7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b85152f67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp54lmy9ht                        0x000056198caab63c <unavailable> + 5692\n5    libc.so.6                          0x00002b85157ec460 __libc_start_main + 245\n6    tmp54lmy9ht                        0x000056198caab289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var minProduct = 1\n    var max = Int.min\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProduct = maxProduct * arr[i]\n            minProduct = min(minProduct * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxProduct = 1\n            minProduct = 1\n        } else {\n            let temp = maxProduct\n            maxProduct = max(minProduct * arr[i], 1)\n            minProduct = temp * arr[i]\n        }\n        \n        if max < maxProduct {\n            max = maxProduct\n        }\n    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpoztko8mx.swift:17:26: error: cannot call value of non-function type 'Int'\n            maxProduct = max(minProduct * arr[i], 1)\n                         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var maxProductSoFar = 1\n    var minProductSoFar = 1\n    var maxNegativeProduct = Int.min\n    var maxNegativeProductSoFar = Int.min\n    var minNegativeProductSoFar = Int.min\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProductSoFar = max(maxProductSoFar * arr[i], arr[i])\n            minProductSoFar = min(minProductSoFar * arr[i], arr[i])\n            maxProduct = max(maxProduct, maxProductSoFar)\n        } else if arr[i] < 0 {\n            maxNegativeProductSoFar = max(minProductSoFar * arr[i], arr[i])\n            minNegativeProductSoFar = min(maxProductSoFar * arr[i], arr[i])\n            maxNegativeProduct = max(maxNegativeProduct, maxNegativeProductSoFar)\n            maxProduct = max(maxProduct, maxNegativeProductSoFar)\n        } else {\n            maxProductSoFar = 1\n            minProductSoFar = 1\n            maxNegativeProductSoFar = Int.min\n            minNegativeProductSoFar = Int.min\n            maxProduct = max(maxProduct, 0)\n        }\n    }\n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpcd9ko0zk/tmpcd9ko0zk.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad6f968ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad6f9385b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad6f9385988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad6f93847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcd9ko0zk                        0x000055c6eb81463c <unavailable> + 5692\n5    libc.so.6                          0x00002ad6f987a460 __libc_start_main + 245\n6    tmpcd9ko0zk                        0x000055c6eb814289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var minProduct = 1\n    var max = Int.min\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProduct = maxProduct * arr[i]\n            minProduct = min(minProduct * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxProduct = 1\n            minProduct = 1\n        } else {\n            let temp = maxProduct\n            maxProduct = max(minProduct * arr[i], 1)\n            minProduct = temp * arr[i]\n        }\n        if max < maxProduct {\n            max = maxProduct\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpte0xrktq.swift:16:26: error: cannot call value of non-function type 'Int'\n            maxProduct = max(minProduct * arr[i], 1)\n                         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 0\n    var max_product_ending_here = 1\n    var min_product_ending_here = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_ending_here = max_product_ending_here * arr[i]\n            min_product_ending_here = min(min_product_ending_here * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_ending_here = 1\n            min_product_ending_here = 1\n        } else {\n            let temp = max_product_ending_here\n            max_product_ending_here = max(min_product_ending_here * arr[i], 1)\n            min_product_ending_here = temp * arr[i]\n        }\n        if max_product_ending_here > max_product {\n            max_product = max_product_ending_here\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp7y200azq/tmp7y200azq.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae50f55ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae50f255b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae50f255988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae50f2547b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7y200azq                        0x000055e9bd3d763c <unavailable> + 5692\n5    libc.so.6                          0x00002ae50f74a460 __libc_start_main + 245\n6    tmp7y200azq                        0x000055e9bd3d7289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var maxSoFar = 1\n    var minSoFar = 1\n    var maxNegative = Int.min\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxSoFar = maxSoFar * arr[i]\n            minSoFar = min(minSoFar * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxSoFar = 1\n            minSoFar = 1\n            maxNegative = 0\n        } else {\n            let temp = maxSoFar\n            maxSoFar = max(minSoFar * arr[i], 1)\n            minSoFar = temp * arr[i]\n            if maxNegative == Int.min {\n                maxNegative = arr[i]\n            } else {\n                maxNegative = maxNegative * arr[i]\n            }\n        }\n        if maxSoFar > maxProduct {\n            maxProduct = maxSoFar\n        }\n    }\n    if maxProduct == 1 && maxNegative != Int.min {\n        return maxNegative\n    }\n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpzoib7hv8/tmpzoib7hv8.swift:49: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af5769f1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af5766e8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af5766e8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af5766e77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzoib7hv8                        0x000055cc1e38b63c <unavailable> + 5692\n5    libc.so.6                          0x00002af576bdd460 __libc_start_main + 245\n6    tmpzoib7hv8                        0x000055cc1e38b289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        \n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    \n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_901vw3h/tmp_901vw3h.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aac7c3e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aac7c0e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aac7c0e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aac7c0df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_901vw3h                        0x000055e97cba963c <unavailable> + 5692\n5    libc.so.6                          0x00002aac7c5d5460 __libc_start_main + 245\n6    tmp_901vw3h                        0x000055e97cba9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpc92xqjjw/tmpc92xqjjw.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b86dddfcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b86ddaf3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b86ddaf3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b86ddaf27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc92xqjjw                        0x000055b32232663c <unavailable> + 5692\n5    libc.so.6                          0x00002b86ddfe8460 __libc_start_main + 245\n6    tmpc92xqjjw                        0x000055b322326289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        \n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    \n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_901vw3h/tmp_901vw3h.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aac7c3e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aac7c0e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aac7c0e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aac7c0df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_901vw3h                        0x000055e97cba963c <unavailable> + 5692\n5    libc.so.6                          0x00002aac7c5d5460 __libc_start_main + 245\n6    tmp_901vw3h                        0x000055e97cba9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    var max_element = 0\n    var min_element = 0\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmppu55_x6o/tmppu55_x6o.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3a9581ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3a95515b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3a95515988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3a955147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppu55_x6o                        0x000056263a1d563c <unavailable> + 5692\n5    libc.so.6                          0x00002b3a95a0a460 __libc_start_main + 245\n6    tmppu55_x6o                        0x000056263a1d5289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        \n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    \n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_901vw3h/tmp_901vw3h.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aac7c3e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aac7c0e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aac7c0e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aac7c0df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_901vw3h                        0x000055e97cba963c <unavailable> + 5692\n5    libc.so.6                          0x00002aac7c5d5460 __libc_start_main + 245\n6    tmp_901vw3h                        0x000055e97cba9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpnzsj_n11/tmpnzsj_n11.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5c14f43c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5c14c3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5c14c3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5c14c397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnzsj_n11                        0x000055592f3d363c <unavailable> + 5692\n5    libc.so.6                          0x00002b5c1512f460 __libc_start_main + 245\n6    tmpnzsj_n11                        0x000055592f3d3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var prev_max = 1\n    var prev_min = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            prev_max = prev_max * arr[i]\n            prev_min = min(prev_min * arr[i], 1)\n        } else if arr[i] == 0 {\n            prev_max = 1\n            prev_min = 1\n        } else {\n            let temp = prev_max\n            prev_max = max(prev_min * arr[i], 1)\n            prev_min = temp * arr[i]\n        }\n        if prev_max > max_product {\n            max_product = prev_max\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpjpiki9tm/tmpjpiki9tm.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2c69df8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2c69aefb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2c69aef988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2c69aee7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjpiki9tm                        0x000055e2deb1d63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2c69fe4460 __libc_start_main + 245\n6    tmpjpiki9tm                        0x000055e2deb1d289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpc92xqjjw/tmpc92xqjjw.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b86dddfcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b86ddaf3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b86ddaf3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b86ddaf27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc92xqjjw                        0x000055b32232663c <unavailable> + 5692\n5    libc.so.6                          0x00002b86ddfe8460 __libc_start_main + 245\n6    tmpc92xqjjw                        0x000055b322326289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_ending_here = 1\n    var min_product_ending_here = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_ending_here = max_product_ending_here * arr[i]\n            min_product_ending_here = min(min_product_ending_here * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_ending_here = 1\n            min_product_ending_here = 1\n        } else {\n            let temp = max_product_ending_here\n            max_product_ending_here = max(min_product_ending_here * arr[i], 1)\n            min_product_ending_here = temp * arr[i]\n        }\n        if max_product_ending_here > max_product {\n            max_product = max_product_ending_here\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpn9yf43oj/tmpn9yf43oj.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8e804aec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8e801a5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8e801a5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8e801a47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn9yf43oj                        0x000055ca59fce63c <unavailable> + 5692\n5    libc.so.6                          0x00002b8e8069a460 __libc_start_main + 245\n6    tmpn9yf43oj                        0x000055ca59fce289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var maxProductSoFar = 1\n    var minProductSoFar = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProductSoFar = maxProductSoFar * arr[i]\n            minProductSoFar = min(minProductSoFar * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxProductSoFar = 1\n            minProductSoFar = 1\n        } else {\n            let temp = maxProductSoFar\n            maxProductSoFar = max(minProductSoFar * arr[i], 1)\n            minProductSoFar = temp * arr[i]\n        }\n        if maxProduct < maxProductSoFar {\n            maxProduct = maxProductSoFar\n        }\n    }\n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpo5m2fkar/tmpo5m2fkar.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0c57a14c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0c5770bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0c5770b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0c5770a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpo5m2fkar                        0x000055ab846bd63c <unavailable> + 5692\n5    libc.so.6                          0x00002b0c57c00460 __libc_start_main + 245\n6    tmpo5m2fkar                        0x000055ab846bd289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpnzsj_n11/tmpnzsj_n11.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5c14f43c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5c14c3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5c14c3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5c14c397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnzsj_n11                        0x000055592f3d363c <unavailable> + 5692\n5    libc.so.6                          0x00002b5c1512f460 __libc_start_main + 245\n6    tmpnzsj_n11                        0x000055592f3d3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    var max_element = arr[0]\n    var min_element = arr[0]\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmppwt9pw4f/tmppwt9pw4f.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af0133a9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af0130a0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af0130a0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af01309f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppwt9pw4f                        0x00005573e8bba63c <unavailable> + 5692\n5    libc.so.6                          0x00002af013595460 __libc_start_main + 245\n6    tmppwt9pw4f                        0x00005573e8bba289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp4vny57h3/tmp4vny57h3.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b36368d0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b36365c7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b36365c7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b36365c67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vny57h3                        0x000055fe5d2b763c <unavailable> + 5692\n5    libc.so.6                          0x00002b3636abc460 __libc_start_main + 245\n6    tmp4vny57h3                        0x000055fe5d2b7289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpc92xqjjw/tmpc92xqjjw.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b86dddfcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b86ddaf3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b86ddaf3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b86ddaf27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc92xqjjw                        0x000055b32232663c <unavailable> + 5692\n5    libc.so.6                          0x00002b86ddfe8460 __libc_start_main + 245\n6    tmpc92xqjjw                        0x000055b322326289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpoqz4zr50/tmpoqz4zr50.swift:45: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4507a65c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b450775cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b450775c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b450775b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpoqz4zr50                        0x0000563844fd063c <unavailable> + 5692\n5    libc.so.6                          0x00002b4507c51460 __libc_start_main + 245\n6    tmpoqz4zr50                        0x0000563844fd0289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var minProduct = 1\n    var max = Int.min\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProduct = maxProduct * arr[i]\n            minProduct = min(minProduct * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxProduct = 1\n            minProduct = 1\n        } else {\n            let temp = maxProduct\n            maxProduct = max(minProduct * arr[i], 1)\n            minProduct = temp * arr[i]\n        }\n        \n        if max < maxProduct {\n            max = maxProduct\n        }\n    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpoztko8mx.swift:17:26: error: cannot call value of non-function type 'Int'\n            maxProduct = max(minProduct * arr[i], 1)\n                         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp4vny57h3/tmp4vny57h3.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b36368d0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b36365c7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b36365c7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b36365c67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vny57h3                        0x000055fe5d2b763c <unavailable> + 5692\n5    libc.so.6                          0x00002b3636abc460 __libc_start_main + 245\n6    tmp4vny57h3                        0x000055fe5d2b7289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpnzsj_n11/tmpnzsj_n11.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5c14f43c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5c14c3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5c14c3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5c14c397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnzsj_n11                        0x000055592f3d363c <unavailable> + 5692\n5    libc.so.6                          0x00002b5c1512f460 __libc_start_main + 245\n6    tmpnzsj_n11                        0x000055592f3d3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var product = 1\n    var i = 0\n    var j = 0\n    while i < arr.count {\n        if arr[i] > arr[j] {\n            product *= arr[i]\n            if product > max_product {\n                max_product = product\n            }\n            i += 1\n        } else {\n            product /= arr[j]\n            j += 1\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af7cc696c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af7cc38d561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af7cc38d286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af7cc38d13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af7cc38cbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002af7cc18de83 <unavailable> + 188035\n6    tmpt3ccm5qo                        0x000055dc0285571e <unavailable> + 5918\n7    tmpt3ccm5qo                        0x000055dc028553ec <unavailable> + 5100\n8    libc.so.6                          0x00002af7cc882460 __libc_start_main + 245\n9    tmpt3ccm5qo                        0x000055dc028550b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpl4phuy_s/tmpl4phuy_s.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aee2dd4fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aee2da46b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aee2da46988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aee2da457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl4phuy_s                        0x0000563a459ec63c <unavailable> + 5692\n5    libc.so.6                          0x00002aee2df3b460 __libc_start_main + 245\n6    tmpl4phuy_s                        0x0000563a459ec289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        \n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    \n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp_901vw3h/tmp_901vw3h.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aac7c3e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aac7c0e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aac7c0e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aac7c0df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_901vw3h                        0x000055e97cba963c <unavailable> + 5692\n5    libc.so.6                          0x00002aac7c5d5460 __libc_start_main + 245\n6    tmp_901vw3h                        0x000055e97cba9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    var max_element = 1\n    var min_element = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        \n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpgqxrswtb/tmpgqxrswtb.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9641fc9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9641cc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9641cc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9641cbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgqxrswtb                        0x000055ca4e6a363c <unavailable> + 5692\n5    libc.so.6                          0x00002b96421b5460 __libc_start_main + 245\n6    tmpgqxrswtb                        0x000055ca4e6a3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if flag == 0 {\n            max_product = max(max_product, max_so_far)\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpz5jyjd3g/tmpz5jyjd3g.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acef1579c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acef1270b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acef1270988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acef126f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz5jyjd3g                        0x0000562ef846563c <unavailable> + 5692\n5    libc.so.6                          0x00002acef1765460 __libc_start_main + 245\n6    tmpz5jyjd3g                        0x0000562ef8465289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpzybsjyl2/tmpzybsjyl2.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d60192c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d5fe89b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d5fe89988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d5fe887b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzybsjyl2                        0x000055dc71e3663c <unavailable> + 5692\n5    libc.so.6                          0x00002b7d6037e460 __libc_start_main + 245\n6    tmpzybsjyl2                        0x000055dc71e36289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    \n    for i in 0..<arr.count {\n        max_so_far = max(max_so_far * arr[i], arr[i])\n        max_product = max(max_product, max_so_far)\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmps8u7hhn6/tmps8u7hhn6.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b73bd341c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b73bd038b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b73bd038988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b73bd0377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps8u7hhn6                        0x000055bf7bfd85ec <unavailable> + 5612\n5    libc.so.6                          0x00002b73bd52d460 __libc_start_main + 245\n6    tmps8u7hhn6                        0x000055bf7bfd8239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_ending_here = 1\n    var min_ending_here = 1\n    var max_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_ending_here = max_ending_here*arr[i]\n            min_ending_here = min(min_ending_here*arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_ending_here = 1\n            min_ending_here = 1\n        } else {\n            let temp = max_ending_here\n            max_ending_here = max(min_ending_here*arr[i], 1)\n            min_ending_here = temp*arr[i]\n        }\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    if flag == 0 && max_so_far == 1 {\n        return 0\n    }\n    \n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpq1mu2nf6/tmpq1mu2nf6.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4281a17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b428170eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b428170e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b428170d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpq1mu2nf6                        0x000056410f21463c <unavailable> + 5692\n5    libc.so.6                          0x00002b4281c03460 __libc_start_main + 245\n6    tmpq1mu2nf6                        0x000056410f214289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    var max_element_so_far = 1\n    var min_element_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmplqme19mf/tmplqme19mf.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af63e0a5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af63dd9cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af63dd9c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af63dd9b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplqme19mf                        0x000055c43d56763c <unavailable> + 5692\n5    libc.so.6                          0x00002af63e291460 __libc_start_main + 245\n6    tmplqme19mf                        0x000055c43d567289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_product_so_far {\n            max_product = max_product_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp8_olpbph/tmp8_olpbph.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a4bfd7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a4bcceb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a4bcce988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a4bccd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8_olpbph                        0x000055ef10af963c <unavailable> + 5692\n5    libc.so.6                          0x00002b8a4c1c3460 __libc_start_main + 245\n6    tmp8_olpbph                        0x000055ef10af9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmpzybsjyl2/tmpzybsjyl2.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d60192c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d5fe89b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d5fe89988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d5fe887b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzybsjyl2                        0x000055dc71e3663c <unavailable> + 5692\n5    libc.so.6                          0x00002b7d6037e460 __libc_start_main + 245\n6    tmpzybsjyl2                        0x000055dc71e36289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var maxProductTillNow = 1\n    var minProductTillNow = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProductTillNow = maxProductTillNow * arr[i]\n            minProductTillNow = min(minProductTillNow * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxProductTillNow = 1\n            minProductTillNow = 1\n        } else {\n            let temp = maxProductTillNow\n            maxProductTillNow = max(minProductTillNow * arr[i], 1)\n            minProductTillNow = temp * arr[i]\n        }\n        if maxProduct < maxProductTillNow {\n            maxProduct = maxProductTillNow\n        }\n    }\n    return maxProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpt1ne6g0n/tmpt1ne6g0n.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aecd09e3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aecd06dab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aecd06da988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aecd06d97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt1ne6g0n                        0x000055f6f2a6763c <unavailable> + 5692\n5    libc.so.6                          0x00002aecd0bcf460 __libc_start_main + 245\n6    tmpt1ne6g0n                        0x000055f6f2a67289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var minProduct = 1\n    var maxSoFar = 1\n    var flag = 0\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProduct = maxProduct * arr[i]\n            minProduct = min(minProduct * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            maxProduct = 1\n            minProduct = 1\n        } else {\n            let temp = maxProduct\n            maxProduct = max(minProduct * arr[i], 1)\n            minProduct = temp * arr[i]\n        }\n        if maxSoFar < maxProduct {\n            maxSoFar = maxProduct\n        }\n    }\n    if flag == 0 && maxSoFar == 1 {\n        return 0\n    }\n    return maxSoFar\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp1axgsp0p/tmp1axgsp0p.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab071bb0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0718a7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0718a7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0718a67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1axgsp0p                        0x000055afc3f2263c <unavailable> + 5692\n5    libc.so.6                          0x00002ab071d9c460 __libc_start_main + 245\n6    tmp1axgsp0p                        0x000055afc3f22289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var maxProduct = 1\n    var minProduct = 1\n    var maxSoFar = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            maxProduct = maxProduct * arr[i]\n            minProduct = min(minProduct * arr[i], 1)\n        } else if arr[i] == 0 {\n            maxProduct = 1\n            minProduct = 1\n        } else {\n            let temp = maxProduct\n            maxProduct = max(minProduct * arr[i], 1)\n            minProduct = temp * arr[i]\n        }\n        if maxSoFar < maxProduct {\n            maxSoFar = maxProduct\n        }\n    }\n    return maxSoFar\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp4yszv8bx/tmp4yszv8bx.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ade86833c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ade8652ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ade8652a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ade865297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4yszv8bx                        0x000055ed0742d63c <unavailable> + 5692\n5    libc.so.6                          0x00002ade86a1f460 __libc_start_main + 245\n6    tmp4yszv8bx                        0x000055ed0742d289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var min_product = 1\n    var max_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product = max_product * arr[i]\n            min_product = min(min_product * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product = 1\n            min_product = 1\n        } else {\n            let temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        }\n        if max_so_far < max_product {\n            max_so_far = max_product\n        }\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp84zn7c06/tmp84zn7c06.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b7b2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b7afe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b7afe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b7afdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp84zn7c06                        0x0000561f1255a63c <unavailable> + 5692\n5    libc.so.6                          0x00002b2b7b4d5460 __libc_start_main + 245\n6    tmp84zn7c06                        0x0000561f1255a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_product_so_far {\n            max_product = max_product_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmp8_olpbph/tmp8_olpbph.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a4bfd7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a4bcceb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a4bcce988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a4bccd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8_olpbph                        0x000055ef10af963c <unavailable> + 5692\n5    libc.so.6                          0x00002b8a4c1c3460 __libc_start_main + 245\n6    tmp8_olpbph                        0x000055ef10af9289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    var max_element = arr[0]\n    var min_element = arr[0]\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmppwt9pw4f/tmppwt9pw4f.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af0133a9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af0130a0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af0130a0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af01309f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppwt9pw4f                        0x00005573e8bba63c <unavailable> + 5692\n5    libc.so.6                          0x00002af013595460 __libc_start_main + 245\n6    tmppwt9pw4f                        0x00005573e8bba289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpl4phuy_s/tmpl4phuy_s.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aee2dd4fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aee2da46b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aee2da46988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aee2da457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl4phuy_s                        0x0000563a459ec63c <unavailable> + 5692\n5    libc.so.6                          0x00002aee2df3b460 __libc_start_main + 245\n6    tmpl4phuy_s                        0x0000563a459ec289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_product_so_far = 1\n    var min_product_so_far = 1\n    var max_element = 1\n    var min_element = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min(min_product_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_product_so_far = 1\n            min_product_so_far = 1\n        } else {\n            let temp = max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], 1)\n            min_product_so_far = temp * arr[i]\n        }\n        \n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpgqxrswtb/tmpgqxrswtb.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9641fc9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9641cc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9641cc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9641cbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgqxrswtb                        0x000055ca4e6a363c <unavailable> + 5692\n5    libc.so.6                          0x00002b96421b5460 __libc_start_main + 245\n6    tmpgqxrswtb                        0x000055ca4e6a3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var product = 1\n    var i = 0\n    var j = 0\n    while i < arr.count && j < arr.count {\n        if arr[i] < arr[j] {\n            product *= arr[j]\n            j += 1\n        } else {\n            max_product = max(max_product, product)\n            product = 1\n            i = j\n            j += 1\n        }\n    }\n    max_product = max(max_product, product)\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpxoeh88l_/tmpxoeh88l_.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b90018bec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b90015b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b90015b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b90015b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxoeh88l_                        0x000055f9648c545c <unavailable> + 5212\n5    libc.so.6                          0x00002b9001aaa460 __libc_start_main + 245\n6    tmpxoeh88l_                        0x000055f9648c50a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    var flag = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n            flag = 1\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_product < max_so_far {\n            max_product = max_so_far\n        }\n    }\n    \n    if flag == 0 && max_product == 1 {\n        return 0\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmp76lfabes/tmp76lfabes.swift:48: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4902a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae48ff9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae48ff9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae48ff9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76lfabes                        0x0000558189f0263c <unavailable> + 5692\n5    libc.so.6                          0x00002ae490494460 __libc_start_main + 245\n6    tmp76lfabes                        0x0000558189f02289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max = 0\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max {\n            max = max_so_far\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmp5g4k09tv.swift:16:26: error: cannot call value of non-function type 'Int'\n            max_so_far = max(min_so_far * arr[i], 1)\n                         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1665509745,
      "stdout": "",
      "stderr": "tmptv3y0cfh/tmptv3y0cfh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46520fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4651df2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4651df2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4651df17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptv3y0cfh                        0x0000558f01eb363c <unavailable> + 5692\n5    libc.so.6                          0x00002b46522e7460 __libc_start_main + 245\n6    tmptv3y0cfh                        0x0000558f01eb3289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr: [Int]) -> Int {\n    var max_product = 1\n    var max_so_far = 1\n    var min_so_far = 1\n    \n    for i in 0..<arr.count {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i]\n            min_so_far = min(min_so_far * arr[i], 1)\n        } else if arr[i] == 0 {\n            max_so_far = 1\n            min_so_far = 1\n        } else {\n            let temp = max_so_far\n            max_so_far = max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        }\n        \n        if max_so_far > max_product {\n            max_product = max_so_far\n        }\n    }\n    \n    return max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)\nassert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)\nassert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "tmpc92xqjjw/tmpc92xqjjw.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b86dddfcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b86ddaf3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b86ddaf3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b86ddaf27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc92xqjjw                        0x000055b32232663c <unavailable> + 5692\n5    libc.so.6                          0x00002b86ddfe8460 __libc_start_main + 245\n6    tmpc92xqjjw                        0x000055b322326289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}