{
  "name": "mbpp_589_perfect_squares",
  "language": "swift",
  "prompt": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares: [Int] = []\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmppxhb_1dn.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    \n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            result.append(i)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpvyor7gbc.swift:7:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmpvyor7gbc.swift:7:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmpvyor7gbc.swift:8:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmpvyor7gbc.swift:8:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if i == i*i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "tmpruezb4ft/tmpruezb4ft.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae8649c5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae8646bcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae8646bc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae8646bb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpruezb4ft                        0x000055aff88015d7 <unavailable> + 5591\n5    libc.so.6                          0x00002ae864bb1460 __libc_start_main + 245\n6    tmpruezb4ft                        0x000055aff8801209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares: [Int] = []\n    for i in a...b {\n        let sqrt_i = Int(sqrt(Double(i)))\n        if sqrt_i * sqrt_i == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp3yh1tr0n.swift:6:26: error: cannot find 'sqrt' in scope\n        let sqrt_i = Int(sqrt(Double(i)))\n                         ^~~~\n/tmp/tmp3yh1tr0n.swift:7:28: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt_i * sqrt_i == i {\n           ~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp3yh1tr0n.swift:7:28: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt_i * sqrt_i == i {\n                           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp07z4qfmi.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmp07z4qfmi.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmp07z4qfmi.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmp07z4qfmi.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if i == i*i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "tmpruezb4ft/tmpruezb4ft.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae8649c5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae8646bcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae8646bc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae8646bb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpruezb4ft                        0x000055aff88015d7 <unavailable> + 5591\n5    libc.so.6                          0x00002ae864bb1460 __libc_start_main + 245\n6    tmpruezb4ft                        0x000055aff8801209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares: [Int] = []\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmppxhb_1dn.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result: [Int] = []\n    for i in a...b {\n        let sqrt_i = Int(sqrt(Double(i)))\n        if sqrt_i * sqrt_i == i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp04hiqggw.swift:6:26: error: cannot find 'sqrt' in scope\n        let sqrt_i = Int(sqrt(Double(i)))\n                         ^~~~\n/tmp/tmp04hiqggw.swift:7:28: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt_i * sqrt_i == i {\n           ~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp04hiqggw.swift:7:28: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt_i * sqrt_i == i {\n                           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        let squareRoot = sqrt(Double(i))\n        if squareRoot.truncatingRemainder(dividingBy: 1) == 0 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpxg6qnwf7.swift:6:26: error: cannot find 'sqrt' in scope\n        let squareRoot = sqrt(Double(i))\n                         ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if i == i*i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "tmpruezb4ft/tmpruezb4ft.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae8649c5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae8646bcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae8646bc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae8646bb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpruezb4ft                        0x000055aff88015d7 <unavailable> + 5591\n5    libc.so.6                          0x00002ae864bb1460 __libc_start_main + 245\n6    tmpruezb4ft                        0x000055aff8801209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result: [Int] = []\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpy4daqhjh.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        let sqrt_i = Int(sqrt(Double(i)))\n        if sqrt_i * sqrt_i == i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp_42dwl9e.swift:6:26: error: cannot find 'sqrt' in scope\n        let sqrt_i = Int(sqrt(Double(i)))\n                         ^~~~\n/tmp/tmp_42dwl9e.swift:7:28: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt_i * sqrt_i == i {\n           ~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp_42dwl9e.swift:7:28: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt_i * sqrt_i == i {\n                           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpeuvmdlal.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmpeuvmdlal.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmpeuvmdlal.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmpeuvmdlal.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        let sqrt_i = Int(sqrt(Double(i)))\n        if sqrt_i * sqrt_i == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp_geyfax7.swift:6:26: error: cannot find 'sqrt' in scope\n        let sqrt_i = Int(sqrt(Double(i)))\n                         ^~~~\n/tmp/tmp_geyfax7.swift:7:28: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt_i * sqrt_i == i {\n           ~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp_geyfax7.swift:7:28: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt_i * sqrt_i == i {\n                           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp07z4qfmi.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmp07z4qfmi.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmp07z4qfmi.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmp07z4qfmi.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp07z4qfmi.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmp07z4qfmi.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmp07z4qfmi.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmp07z4qfmi.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result: [Int] = []\n    for i in a...b {\n        let sqrt_i = Int(sqrt(Double(i)))\n        if sqrt_i * sqrt_i == i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp04hiqggw.swift:6:26: error: cannot find 'sqrt' in scope\n        let sqrt_i = Int(sqrt(Double(i)))\n                         ^~~~\n/tmp/tmp04hiqggw.swift:7:28: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt_i * sqrt_i == i {\n           ~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp04hiqggw.swift:7:28: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt_i * sqrt_i == i {\n                           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp07z4qfmi.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmp07z4qfmi.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmp07z4qfmi.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmp07z4qfmi.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpeuvmdlal.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmpeuvmdlal.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmpeuvmdlal.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmpeuvmdlal.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpyczon244.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpyczon244.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpeuvmdlal.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmpeuvmdlal.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmpeuvmdlal.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmpeuvmdlal.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        let sqrt_i = Int(sqrt(Double(i)))\n        if sqrt_i * sqrt_i == i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp_42dwl9e.swift:6:26: error: cannot find 'sqrt' in scope\n        let sqrt_i = Int(sqrt(Double(i)))\n                         ^~~~\n/tmp/tmp_42dwl9e.swift:7:28: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt_i * sqrt_i == i {\n           ~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp_42dwl9e.swift:7:28: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt_i * sqrt_i == i {\n                           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares: [Int] = []\n    for i in a...b {\n        if i == i*i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "tmp1sub9g7v/tmp1sub9g7v.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aedcf17bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aedcee72b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aedcee72988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aedcee717b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1sub9g7v                        0x000056121e23f577 <unavailable> + 5495\n5    libc.so.6                          0x00002aedcf367460 __libc_start_main + 245\n6    tmp1sub9g7v                        0x000056121e23f1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp07z4qfmi.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmp07z4qfmi.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmp07z4qfmi.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmp07z4qfmi.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpqhc60ds9.swift:6:12: error: cannot find 'is_square' in scope\n        if is_square(i) {\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares: [Int] = []\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmppxhb_1dn.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp07z4qfmi.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmp07z4qfmi.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmp07z4qfmi.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmp07z4qfmi.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares: [Int] = []\n    for i in a...b {\n        if i == i * i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "tmplm3rmj_9/tmplm3rmj_9.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b22daba4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22da89bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22da89b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22da89a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplm3rmj_9                        0x00005564a427f577 <unavailable> + 5495\n5    libc.so.6                          0x00002b22dad90460 __libc_start_main + 245\n6    tmplm3rmj_9                        0x00005564a427f1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result: [Int] = []\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpy4daqhjh.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result: [Int] = []\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpy4daqhjh.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares: [Int] = []\n    for i in a...b {\n        if i.squareRoot().truncatingRemainder(dividingBy: 1) == 0 {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmp73yiz79o.swift:6:14: error: value of type 'Int' has no member 'squareRoot'\n        if i.squareRoot().truncatingRemainder(dividingBy: 1) == 0 {\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        let sqrt_i = Int(sqrt(Double(i)))\n        if sqrt_i * sqrt_i == i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp_42dwl9e.swift:6:26: error: cannot find 'sqrt' in scope\n        let sqrt_i = Int(sqrt(Double(i)))\n                         ^~~~\n/tmp/tmp_42dwl9e.swift:7:28: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt_i * sqrt_i == i {\n           ~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp_42dwl9e.swift:7:28: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt_i * sqrt_i == i {\n                           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if i == i*i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "tmpruezb4ft/tmpruezb4ft.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae8649c5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae8646bcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae8646bc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae8646bb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpruezb4ft                        0x000055aff88015d7 <unavailable> + 5591\n5    libc.so.6                          0x00002ae864bb1460 __libc_start_main + 245\n6    tmpruezb4ft                        0x000055aff8801209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result: [Int] = []\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmp89arkwub.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmp89arkwub.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmp89arkwub.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmp89arkwub.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result: [Int] = []\n    for i in a...b {\n        if Int(sqrt(Double(i))) * Int(sqrt(Double(i))) == i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpstqf74b6.swift:6:16: error: cannot find 'sqrt' in scope\n        if Int(sqrt(Double(i))) * Int(sqrt(Double(i))) == i {\n               ^~~~\n/tmp/tmpstqf74b6.swift:6:39: error: cannot find 'sqrt' in scope\n        if Int(sqrt(Double(i))) * Int(sqrt(Double(i))) == i {\n                                      ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp07z4qfmi.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmp07z4qfmi.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmp07z4qfmi.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmp07z4qfmi.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp07z4qfmi.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmp07z4qfmi.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmp07z4qfmi.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmp07z4qfmi.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares: [Int] = []\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpr5ovxv7h.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmpr5ovxv7h.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmpr5ovxv7h.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmpr5ovxv7h.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares: [Int] = []\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmppxhb_1dn.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if i == i * i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "tmp5xiz7vv4/tmp5xiz7vv4.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b98d5adfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b98d57d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b98d57d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b98d57d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5xiz7vv4                        0x0000561930ee15d7 <unavailable> + 5591\n5    libc.so.6                          0x00002b98d5ccb460 __libc_start_main + 245\n6    tmp5xiz7vv4                        0x0000561930ee1209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp07z4qfmi.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmp07z4qfmi.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmp07z4qfmi.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmp07z4qfmi.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares: [Int] = []\n    for i in a...b {\n        if i == i * i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "tmplm3rmj_9/tmplm3rmj_9.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b22daba4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22da89bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22da89b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22da89a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplm3rmj_9                        0x00005564a427f577 <unavailable> + 5495\n5    libc.so.6                          0x00002b22dad90460 __libc_start_main + 245\n6    tmplm3rmj_9                        0x00005564a427f1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp07z4qfmi.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmp07z4qfmi.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmp07z4qfmi.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmp07z4qfmi.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var perfect_squares = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            perfect_squares.append(i)\n        }\n    }\n    return perfect_squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmp1i70d0_1.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(n: i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpef_1b3um.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(n: i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares: [Int] = []\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmppxhb_1dn.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if i == i * i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "tmp5xiz7vv4/tmp5xiz7vv4.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b98d5adfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b98d57d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b98d57d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b98d57d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5xiz7vv4                        0x0000561930ee15d7 <unavailable> + 5591\n5    libc.so.6                          0x00002b98d5ccb460 __libc_start_main + 245\n6    tmp5xiz7vv4                        0x0000561930ee1209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result: [Int] = []\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpy4daqhjh.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpyczon244.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        let sqrt_i = Int(sqrt(Double(i)))\n        if sqrt_i * sqrt_i == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp_geyfax7.swift:6:26: error: cannot find 'sqrt' in scope\n        let sqrt_i = Int(sqrt(Double(i)))\n                         ^~~~\n/tmp/tmp_geyfax7.swift:7:28: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt_i * sqrt_i == i {\n           ~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp_geyfax7.swift:7:28: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt_i * sqrt_i == i {\n                           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpeuvmdlal.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmpeuvmdlal.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmpeuvmdlal.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmpeuvmdlal.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares: [Int] = []\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmppxhb_1dn.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpyczon244.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpyczon244.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        let sqrt_i = Int(sqrt(Double(i)))\n        if sqrt_i * sqrt_i == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp_geyfax7.swift:6:26: error: cannot find 'sqrt' in scope\n        let sqrt_i = Int(sqrt(Double(i)))\n                         ^~~~\n/tmp/tmp_geyfax7.swift:7:28: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt_i * sqrt_i == i {\n           ~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp_geyfax7.swift:7:28: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt_i * sqrt_i == i {\n                           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        let sqrt_i = Int(sqrt(Double(i)))\n        if sqrt_i * sqrt_i == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp_geyfax7.swift:6:26: error: cannot find 'sqrt' in scope\n        let sqrt_i = Int(sqrt(Double(i)))\n                         ^~~~\n/tmp/tmp_geyfax7.swift:7:28: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt_i * sqrt_i == i {\n           ~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp_geyfax7.swift:7:28: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt_i * sqrt_i == i {\n                           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpyczon244.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        let sqrt_i = sqrt(Double(i))\n        if sqrt_i == floor(sqrt_i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpots6gn4m.swift:6:22: error: cannot find 'sqrt' in scope\n        let sqrt_i = sqrt(Double(i))\n                     ^~~~\n/tmp/tmpots6gn4m.swift:7:22: error: cannot find 'floor' in scope\n        if sqrt_i == floor(sqrt_i) {\n                     ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpyczon244.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result: [Int] = []\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmp89arkwub.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmp89arkwub.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmp89arkwub.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmp89arkwub.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result: [Int] = []\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpy4daqhjh.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var perfect_squares = [Int]()\n    for i in a...b {\n        let square_root = Int(sqrt(Double(i)))\n        if square_root * square_root == i {\n            perfect_squares.append(i)\n        }\n    }\n    return perfect_squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmphyoyf1cj.swift:6:31: error: cannot find 'sqrt' in scope\n        let square_root = Int(sqrt(Double(i)))\n                              ^~~~\n/tmp/tmphyoyf1cj.swift:7:38: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if square_root * square_root == i {\n           ~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmphyoyf1cj.swift:7:38: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if square_root * square_root == i {\n                                     ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares: [Int] = []\n    for i in a...b {\n        let sqrt_i = sqrt(Double(i))\n        if sqrt_i == floor(sqrt_i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmprsn93ez_.swift:6:22: error: cannot find 'sqrt' in scope\n        let sqrt_i = sqrt(Double(i))\n                     ^~~~\n/tmp/tmprsn93ez_.swift:7:22: error: cannot find 'floor' in scope\n        if sqrt_i == floor(sqrt_i) {\n                     ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        let root = sqrt(Double(i))\n        if root == floor(root) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpg_5hvuhi.swift:6:20: error: cannot find 'sqrt' in scope\n        let root = sqrt(Double(i))\n                   ^~~~\n/tmp/tmpg_5hvuhi.swift:7:20: error: cannot find 'floor' in scope\n        if root == floor(root) {\n                   ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if is_perfect_square(n: i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmp8jzmaey2.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(n: i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result: [Int] = []\n    for i in a...b {\n        let sqrt_i = Int(sqrt(Double(i)))\n        if sqrt_i * sqrt_i == i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp04hiqggw.swift:6:26: error: cannot find 'sqrt' in scope\n        let sqrt_i = Int(sqrt(Double(i)))\n                         ^~~~\n/tmp/tmp04hiqggw.swift:7:28: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt_i * sqrt_i == i {\n           ~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp04hiqggw.swift:7:28: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt_i * sqrt_i == i {\n                           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if i == i * i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "tmphc4yz20b/tmphc4yz20b.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1e663edc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1e660e4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1e660e4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1e660e37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphc4yz20b                        0x000055d22179f5d7 <unavailable> + 5591\n5    libc.so.6                          0x00002b1e665d9460 __libc_start_main + 245\n6    tmphc4yz20b                        0x000055d22179f209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result: [Int] = []\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmp89arkwub.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmp89arkwub.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmp89arkwub.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmp89arkwub.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp07z4qfmi.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmp07z4qfmi.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmp07z4qfmi.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmp07z4qfmi.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares: [Int] = []\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmppxhb_1dn.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpyczon244.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if i == i*i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "tmplzkrlllj/tmplzkrlllj.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aaacb5a7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aaacb29eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aaacb29e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aaacb29d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplzkrlllj                        0x000055ee636ec5d7 <unavailable> + 5591\n5    libc.so.6                          0x00002aaacb793460 __libc_start_main + 245\n6    tmplzkrlllj                        0x000055ee636ec209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp07z4qfmi.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmp07z4qfmi.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmp07z4qfmi.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmp07z4qfmi.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if i == i*i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "tmpruezb4ft/tmpruezb4ft.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae8649c5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae8646bcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae8646bc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae8646bb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpruezb4ft                        0x000055aff88015d7 <unavailable> + 5591\n5    libc.so.6                          0x00002ae864bb1460 __libc_start_main + 245\n6    tmpruezb4ft                        0x000055aff8801209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result: [Int] = []\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpy4daqhjh.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if i == i * i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "tmp5xiz7vv4/tmp5xiz7vv4.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b98d5adfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b98d57d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b98d57d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b98d57d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5xiz7vv4                        0x0000561930ee15d7 <unavailable> + 5591\n5    libc.so.6                          0x00002b98d5ccb460 __libc_start_main + 245\n6    tmp5xiz7vv4                        0x0000561930ee1209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp07z4qfmi.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmp07z4qfmi.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmp07z4qfmi.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmp07z4qfmi.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp07z4qfmi.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmp07z4qfmi.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmp07z4qfmi.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmp07z4qfmi.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpyczon244.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpyczon244.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpeuvmdlal.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmpeuvmdlal.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmpeuvmdlal.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmpeuvmdlal.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if i == i*i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "tmpruezb4ft/tmpruezb4ft.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae8649c5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae8646bcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae8646bc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae8646bb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpruezb4ft                        0x000055aff88015d7 <unavailable> + 5591\n5    libc.so.6                          0x00002ae864bb1460 __libc_start_main + 245\n6    tmpruezb4ft                        0x000055aff8801209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpyczon244.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpyczon244.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result: [Int] = []\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpy4daqhjh.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if isPerfectSquare(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmp_17375v4.swift:6:12: error: cannot find 'isPerfectSquare' in scope\n        if isPerfectSquare(i) {\n           ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp07z4qfmi.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmp07z4qfmi.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmp07z4qfmi.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmp07z4qfmi.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if i == i * i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "tmp5xiz7vv4/tmp5xiz7vv4.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b98d5adfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b98d57d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b98d57d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b98d57d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5xiz7vv4                        0x0000561930ee15d7 <unavailable> + 5591\n5    libc.so.6                          0x00002b98d5ccb460 __libc_start_main + 245\n6    tmp5xiz7vv4                        0x0000561930ee1209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if is_perfect_square(n: i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmp8jzmaey2.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(n: i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if i == i * i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "tmp5xiz7vv4/tmp5xiz7vv4.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b98d5adfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b98d57d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b98d57d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b98d57d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5xiz7vv4                        0x0000561930ee15d7 <unavailable> + 5591\n5    libc.so.6                          0x00002b98d5ccb460 __libc_start_main + 245\n6    tmp5xiz7vv4                        0x0000561930ee1209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if is_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpshy5ckiq.swift:6:12: error: cannot find 'is_square' in scope\n        if is_square(i) {\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares: [Int] = []\n    for i in a...b {\n        if i == i*i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "tmp1sub9g7v/tmp1sub9g7v.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aedcf17bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aedcee72b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aedcee72988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aedcee717b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1sub9g7v                        0x000056121e23f577 <unavailable> + 5495\n5    libc.so.6                          0x00002aedcf367460 __libc_start_main + 245\n6    tmp1sub9g7v                        0x000056121e23f1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if i == i*i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "tmpruezb4ft/tmpruezb4ft.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae8649c5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae8646bcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae8646bc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae8646bb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpruezb4ft                        0x000055aff88015d7 <unavailable> + 5591\n5    libc.so.6                          0x00002ae864bb1460 __libc_start_main + 245\n6    tmpruezb4ft                        0x000055aff8801209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if i == i * i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "tmp5xiz7vv4/tmp5xiz7vv4.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b98d5adfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b98d57d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b98d57d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b98d57d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5xiz7vv4                        0x0000561930ee15d7 <unavailable> + 5591\n5    libc.so.6                          0x00002b98d5ccb460 __libc_start_main + 245\n6    tmp5xiz7vv4                        0x0000561930ee1209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares: [Int] = []\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmppxhb_1dn.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares: [Int] = []\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpr5ovxv7h.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmpr5ovxv7h.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmpr5ovxv7h.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmpr5ovxv7h.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpyczon244.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpeuvmdlal.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmpeuvmdlal.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmpeuvmdlal.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmpeuvmdlal.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpyczon244.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpyczon244.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if isPerfectSquare(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmp_17375v4.swift:6:12: error: cannot find 'isPerfectSquare' in scope\n        if isPerfectSquare(i) {\n           ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        let sqrt_i = Int(sqrt(Double(i)))\n        if sqrt_i * sqrt_i == i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp_42dwl9e.swift:6:26: error: cannot find 'sqrt' in scope\n        let sqrt_i = Int(sqrt(Double(i)))\n                         ^~~~\n/tmp/tmp_42dwl9e.swift:7:28: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt_i * sqrt_i == i {\n           ~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp_42dwl9e.swift:7:28: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt_i * sqrt_i == i {\n                           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares: [Int] = []\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmppxhb_1dn.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpeuvmdlal.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmpeuvmdlal.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmpeuvmdlal.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmpeuvmdlal.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result: [Int] = []\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpy4daqhjh.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if i.isPerfectSquare {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmp3bfhex_0.swift:6:14: error: value of type 'Int' has no member 'isPerfectSquare'\n        if i.isPerfectSquare {\n           ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpeuvmdlal.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmpeuvmdlal.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmpeuvmdlal.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmpeuvmdlal.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        let sqrt_i = sqrt(Double(i))\n        if sqrt_i == Double(Int(sqrt_i)) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpmzqkixkt.swift:6:22: error: cannot find 'sqrt' in scope\n        let sqrt_i = sqrt(Double(i))\n                     ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpyczon244.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if is_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpshy5ckiq.swift:6:12: error: cannot find 'is_square' in scope\n        if is_square(i) {\n           ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares: [Int] = []\n    for i in a...b {\n        if i == i * i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "tmplm3rmj_9/tmplm3rmj_9.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b22daba4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22da89bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22da89b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22da89a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplm3rmj_9                        0x00005564a427f577 <unavailable> + 5495\n5    libc.so.6                          0x00002b22dad90460 __libc_start_main + 245\n6    tmplm3rmj_9                        0x00005564a427f1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result: [Int] = []\n    for i in a...b {\n        if isPerfectSquare(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpte34lrg2.swift:6:12: error: cannot find 'isPerfectSquare' in scope\n        if isPerfectSquare(i) {\n           ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp07z4qfmi.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmp07z4qfmi.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmp07z4qfmi.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmp07z4qfmi.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if i == i * i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "tmp5xiz7vv4/tmp5xiz7vv4.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b98d5adfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b98d57d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b98d57d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b98d57d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5xiz7vv4                        0x0000561930ee15d7 <unavailable> + 5591\n5    libc.so.6                          0x00002b98d5ccb460 __libc_start_main + 245\n6    tmp5xiz7vv4                        0x0000561930ee1209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        let sqrt_i = sqrt(Double(i))\n        if sqrt_i == floor(sqrt_i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpots6gn4m.swift:6:22: error: cannot find 'sqrt' in scope\n        let sqrt_i = sqrt(Double(i))\n                     ^~~~\n/tmp/tmpots6gn4m.swift:7:22: error: cannot find 'floor' in scope\n        if sqrt_i == floor(sqrt_i) {\n                     ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpyczon244.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares: [Int] = []\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmppxhb_1dn.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        let sqrt_i = Int(sqrt(Double(i)))\n        if sqrt_i * sqrt_i == i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp_42dwl9e.swift:6:26: error: cannot find 'sqrt' in scope\n        let sqrt_i = Int(sqrt(Double(i)))\n                         ^~~~\n/tmp/tmp_42dwl9e.swift:7:28: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt_i * sqrt_i == i {\n           ~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp_42dwl9e.swift:7:28: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt_i * sqrt_i == i {\n                           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp07z4qfmi.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmp07z4qfmi.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmp07z4qfmi.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmp07z4qfmi.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares: [Int] = []\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmppxhb_1dn.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        let sqrt_i = Int(sqrt(Double(i)))\n        if sqrt_i * sqrt_i == i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp_42dwl9e.swift:6:26: error: cannot find 'sqrt' in scope\n        let sqrt_i = Int(sqrt(Double(i)))\n                         ^~~~\n/tmp/tmp_42dwl9e.swift:7:28: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt_i * sqrt_i == i {\n           ~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp_42dwl9e.swift:7:28: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt_i * sqrt_i == i {\n                           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpeuvmdlal.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmpeuvmdlal.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmpeuvmdlal.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmpeuvmdlal.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp07z4qfmi.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmp07z4qfmi.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmp07z4qfmi.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmp07z4qfmi.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpyczon244.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp07z4qfmi.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmp07z4qfmi.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmp07z4qfmi.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmp07z4qfmi.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        let sqrt_i = Int(sqrt(Double(i)))\n        if sqrt_i * sqrt_i == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp_geyfax7.swift:6:26: error: cannot find 'sqrt' in scope\n        let sqrt_i = Int(sqrt(Double(i)))\n                         ^~~~\n/tmp/tmp_geyfax7.swift:7:28: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt_i * sqrt_i == i {\n           ~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp_geyfax7.swift:7:28: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt_i * sqrt_i == i {\n                           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result: [Int] = []\n    for i in a...b {\n        if is_perfect_square(n: i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmp223aasyt.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(n: i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpyczon244.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if i == i * i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "tmp5xiz7vv4/tmp5xiz7vv4.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b98d5adfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b98d57d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b98d57d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b98d57d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5xiz7vv4                        0x0000561930ee15d7 <unavailable> + 5591\n5    libc.so.6                          0x00002b98d5ccb460 __libc_start_main + 245\n6    tmp5xiz7vv4                        0x0000561930ee1209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpeuvmdlal.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmpeuvmdlal.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmpeuvmdlal.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmpeuvmdlal.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if i == i * i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "tmphc4yz20b/tmphc4yz20b.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1e663edc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1e660e4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1e660e4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1e660e37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphc4yz20b                        0x000055d22179f5d7 <unavailable> + 5591\n5    libc.so.6                          0x00002b1e665d9460 __libc_start_main + 245\n6    tmphc4yz20b                        0x000055d22179f209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp07z4qfmi.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmp07z4qfmi.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmp07z4qfmi.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmp07z4qfmi.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpyczon244.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpyczon244.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares: [Int] = []\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpr5ovxv7h.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmpr5ovxv7h.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmpr5ovxv7h.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmpr5ovxv7h.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if i == i * i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "tmp5xiz7vv4/tmp5xiz7vv4.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b98d5adfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b98d57d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b98d57d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b98d57d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5xiz7vv4                        0x0000561930ee15d7 <unavailable> + 5591\n5    libc.so.6                          0x00002b98d5ccb460 __libc_start_main + 245\n6    tmp5xiz7vv4                        0x0000561930ee1209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares: [Int] = []\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmppxhb_1dn.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if isPerfectSquare(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmplljsidn5.swift:6:12: error: cannot find 'isPerfectSquare' in scope\n        if isPerfectSquare(i) {\n           ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result: [Int] = []\n    for i in a...b {\n        if i == i * i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "tmpfioq69jn/tmpfioq69jn.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1f980a0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1f97d97b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1f97d97988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1f97d967b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfioq69jn                        0x0000558ddad1b577 <unavailable> + 5495\n5    libc.so.6                          0x00002b1f9828c460 __libc_start_main + 245\n6    tmpfioq69jn                        0x0000558ddad1b1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result: [Int] = []\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpy4daqhjh.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if i.squareRoot().truncatingRemainder(dividingBy: 1) == 0 {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpeiqr9r97.swift:6:14: error: value of type 'Int' has no member 'squareRoot'\n        if i.squareRoot().truncatingRemainder(dividingBy: 1) == 0 {\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        let sqrt_i = Int(sqrt(Double(i)))\n        if sqrt_i * sqrt_i == i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp_42dwl9e.swift:6:26: error: cannot find 'sqrt' in scope\n        let sqrt_i = Int(sqrt(Double(i)))\n                         ^~~~\n/tmp/tmp_42dwl9e.swift:7:28: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt_i * sqrt_i == i {\n           ~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp_42dwl9e.swift:7:28: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt_i * sqrt_i == i {\n                           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(n: i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpef_1b3um.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(n: i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "/tmp/tmpyczon244.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if is_perfect_square(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmpp7yxrxol.swift:6:12: error: cannot find 'is_perfect_square' in scope\n        if is_perfect_square(i) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n    var squares = [Int]()\n    for i in a...b {\n        let sqrt = Int(sqrt(Double(i)))\n        if sqrt * sqrt == i {\n            squares.append(i)\n        }\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])\nassert(perfect_squares(a: 50, b: 100) == [64, 81, 100])\nassert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "/tmp/tmp07z4qfmi.swift:6:24: error: use of local variable 'sqrt' before its declaration\n        let sqrt = Int(sqrt(Double(i)))\n                       ^\n/tmp/tmp07z4qfmi.swift:6:13: note: 'sqrt' declared here\n        let sqrt = Int(sqrt(Double(i)))\n            ^\n/tmp/tmp07z4qfmi.swift:7:24: error: binary operator '==' cannot be applied to operands of type 'Duration' and 'Int'\n        if sqrt * sqrt == i {\n           ~~~~~~~~~~~ ^  ~\n/tmp/tmp07z4qfmi.swift:7:24: note: overloads for '==' exist with these partially matching parameter lists: (Duration, Duration), (Int, Int)\n        if sqrt * sqrt == i {\n                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}