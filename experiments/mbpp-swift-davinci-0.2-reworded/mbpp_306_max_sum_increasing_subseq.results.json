{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "swift",
  "prompt": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp5r9nk8uz/tmp5r9nk8uz.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac1b2020c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac1b1d17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac1b1d17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac1b1d167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5r9nk8uz                        0x0000562bb116a421 <unavailable> + 5153\n5    libc.so.6                          0x00002ac1b220c460 __libc_start_main + 245\n6    tmp5r9nk8uz                        0x0000562bb116a059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max_sum = 0\n    for i in index..<k {\n        max_sum = max(max_sum, dp[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpn9ipjziw/tmpn9ipjziw.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aaee6b20c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aaee6817b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aaee6817988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aaee68167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn9ipjziw                        0x000055ab7afc5661 <unavailable> + 5729\n5    libc.so.6                          0x00002aaee6d0c460 __libc_start_main + 245\n6    tmpn9ipjziw                        0x000055ab7afc5299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp70ayonys/tmp70ayonys.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abeaac29c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abeaa920b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abeaa920988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abeaa91f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp70ayonys                        0x0000562bb9a78421 <unavailable> + 5153\n5    libc.so.6                          0x00002abeaae15460 __libc_start_main + 245\n6    tmp70ayonys                        0x0000562bb9a78059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    var max_so_far = dp[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] && dp[j] + a[i] > dp[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n        max_so_far = max(max_so_far, dp[i])\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpems16yhr/tmpems16yhr.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b42e7a21c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b42e7718b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b42e7718988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b42e77177b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpems16yhr                        0x00005602bdec9661 <unavailable> + 5729\n5    libc.so.6                          0x00002b42e7c0d460 __libc_start_main + 245\n6    tmpems16yhr                        0x00005602bdec9299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpmfxgdcmb/tmpmfxgdcmb.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b70e1b77c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b70e186eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b70e186e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b70e186d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmfxgdcmb                        0x00005578d7700421 <unavailable> + 5153\n5    libc.so.6                          0x00002b70e1d63460 __libc_start_main + 245\n6    tmpmfxgdcmb                        0x00005578d7700059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpml6gettu/tmpml6gettu.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aedaa2f1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeda9fe8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeda9fe8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeda9fe77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpml6gettu                        0x0000555563781421 <unavailable> + 5153\n5    libc.so.6                          0x00002aedaa4dd460 __libc_start_main + 245\n6    tmpml6gettu                        0x0000555563781059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpf8iuwk7s/tmpf8iuwk7s.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abe287d7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abe284ceb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abe284ce988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abe284cd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf8iuwk7s                        0x000055e29c2b2421 <unavailable> + 5153\n5    libc.so.6                          0x00002abe289c3460 __libc_start_main + 245\n6    tmpf8iuwk7s                        0x000055e29c2b2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max = 0\n    for i in index..<k {\n        if dp[i] > max {\n            max = dp[i]\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpn0ego1mp/tmpn0ego1mp.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae501e3dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae501b34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae501b34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae501b337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn0ego1mp                        0x000056157e0aa5d1 <unavailable> + 5585\n5    libc.so.6                          0x00002ae502029460 __libc_start_main + 245\n6    tmpn0ego1mp                        0x000056157e0aa209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpml6gettu/tmpml6gettu.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aedaa2f1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeda9fe8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeda9fe8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeda9fe77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpml6gettu                        0x0000555563781421 <unavailable> + 5153\n5    libc.so.6                          0x00002aedaa4dd460 __libc_start_main + 245\n6    tmpml6gettu                        0x0000555563781059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    return dp[index] + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp4t93zbhn/tmp4t93zbhn.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac16e854c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac16e54bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac16e54b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac16e54a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4t93zbhn                        0x000055d26f5605d1 <unavailable> + 5585\n5    libc.so.6                          0x00002ac16ea40460 __libc_start_main + 245\n6    tmp4t93zbhn                        0x000055d26f560209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    if index == k {\n        return a[index]\n    }\n    \n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    \n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpibk7008n/tmpibk7008n.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5663fbbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5663cb2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5663cb2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5663cb17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpibk7008n                        0x000055bb8e752421 <unavailable> + 5153\n5    libc.so.6                          0x00002b56641a7460 __libc_start_main + 245\n6    tmpibk7008n                        0x000055bb8e752059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index + 1)\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    } else {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpwcofhaha/tmpwcofhaha.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8505887c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b850557eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b850557e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b850557d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwcofhaha                        0x000055adea9a3421 <unavailable> + 5153\n5    libc.so.6                          0x00002b8505a73460 __libc_start_main + 245\n6    tmpwcofhaha                        0x000055adea9a3059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max_sum = 0\n    for i in index..<k {\n        max_sum += dp[i]\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpxlhncr9e/tmpxlhncr9e.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b13d0b0cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b13d0803b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b13d0803988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b13d08027b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxlhncr9e                        0x0000559e785a15d1 <unavailable> + 5585\n5    libc.so.6                          0x00002b13d0cf8460 __libc_start_main + 245\n6    tmpxlhncr9e                        0x0000559e785a1209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] {\n                dp[i] = max(dp[i], dp[j])\n            }\n        }\n        dp[i] += a[i]\n    }\n    var max_sum = 0\n    for i in index..<k {\n        max_sum = max(max_sum, dp[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmph0gj6owk/tmph0gj6owk.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b526258cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5262283b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5262283988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b52622827b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph0gj6owk                        0x000055b43aa0a661 <unavailable> + 5729\n5    libc.so.6                          0x00002b5262778460 __libc_start_main + 245\n6    tmph0gj6owk                        0x000055b43aa0a299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpml6gettu/tmpml6gettu.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aedaa2f1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeda9fe8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeda9fe8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeda9fe77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpml6gettu                        0x0000555563781421 <unavailable> + 5153\n5    libc.so.6                          0x00002aedaa4dd460 __libc_start_main + 245\n6    tmpml6gettu                        0x0000555563781059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k == index {\n        sum = a[index]\n    }\n    return max(sum + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpo4koldbc/tmpo4koldbc.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b434a8a0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b434a597b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b434a597988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b434a5967b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpo4koldbc                        0x000055698245f421 <unavailable> + 5153\n5    libc.so.6                          0x00002b434aa8c460 __libc_start_main + 245\n6    tmpo4koldbc                        0x000055698245f059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var sum = 0\n    for i in index..<k {\n        sum += a[i]\n    }\n    return dp[index] + sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmprla7fmp8/tmprla7fmp8.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4175826c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b417551db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b417551d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b417551c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprla7fmp8                        0x000055d8a04a1661 <unavailable> + 5729\n5    libc.so.6                          0x00002b4175a12460 __libc_start_main + 245\n6    tmprla7fmp8                        0x000055d8a04a1299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        sum = max(sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpzq3bctxk/tmpzq3bctxk.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4045c34c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b404592bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b404592b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b404592a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzq3bctxk                        0x00005610ec0b8421 <unavailable> + 5153\n5    libc.so.6                          0x00002b4045e20460 __libc_start_main + 245\n6    tmpzq3bctxk                        0x00005610ec0b8059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    if k == n {\n        return 0\n    }\n    \n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    \n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpwpc9cxvu/tmpwpc9cxvu.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b289cde5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b289cadcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b289cadc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b289cadb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwpc9cxvu                        0x00005594cc584421 <unavailable> + 5153\n5    libc.so.6                          0x00002b289cfd1460 __libc_start_main + 245\n6    tmpwpc9cxvu                        0x00005594cc584059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k == index {\n        sum = a[index]\n    }\n    let sum1 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let sum2 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index)\n    return max(sum1, sum2 + sum)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp815tfm74/tmp815tfm74.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b27465b3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b27462aab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b27462aa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b27462a97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp815tfm74                        0x0000560198194421 <unavailable> + 5153\n5    libc.so.6                          0x00002b274679f460 __libc_start_main + 245\n6    tmp815tfm74                        0x0000560198194059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpf8iuwk7s/tmpf8iuwk7s.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abe287d7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abe284ceb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abe284ce988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abe284cd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf8iuwk7s                        0x000055e29c2b2421 <unavailable> + 5153\n5    libc.so.6                          0x00002abe289c3460 __libc_start_main + 245\n6    tmpf8iuwk7s                        0x000055e29c2b2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] && j < k && i > k {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    return dp[index]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpneabzx0r/tmpneabzx0r.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b17e5119c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b17e4e10b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b17e4e10988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b17e4e0f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpneabzx0r                        0x000055c2a7c30661 <unavailable> + 5729\n5    libc.so.6                          0x00002b17e5305460 __libc_start_main + 245\n6    tmpneabzx0r                        0x000055c2a7c30299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp70ayonys/tmp70ayonys.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abeaac29c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abeaa920b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abeaa920988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abeaa91f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp70ayonys                        0x0000562bb9a78421 <unavailable> + 5153\n5    libc.so.6                          0x00002abeaae15460 __libc_start_main + 245\n6    tmp70ayonys                        0x0000562bb9a78059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            let sum = max_sum_increasing_subseq(a: a, n: n, index: i+1, k: k)\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return a[k] + max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpdtwprv6f/tmpdtwprv6f.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac051619c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac051310b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac051310988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac05130f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdtwprv6f                        0x0000559fcd845511 <unavailable> + 5393\n5    libc.so.6                          0x00002ac051805460 __libc_start_main + 245\n6    tmpdtwprv6f                        0x0000559fcd845149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    if k == n {\n        return 0\n    }\n    \n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    } else {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpa9gczg0y/tmpa9gczg0y.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af6284fcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af6281f3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af6281f3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af6281f27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa9gczg0y                        0x000055e996e62421 <unavailable> + 5153\n5    libc.so.6                          0x00002af6286e8460 __libc_start_main + 245\n6    tmpa9gczg0y                        0x000055e996e62059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    if k >= n {\n        return 0\n    }\n    \n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    } else {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmptziehf19/tmptziehf19.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aab7508bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aab74d82b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aab74d82988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aab74d817b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptziehf19                        0x00005642c1baf421 <unavailable> + 5153\n5    libc.so.6                          0x00002aab75277460 __libc_start_main + 245\n6    tmptziehf19                        0x00005642c1baf059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            sum = max(sum, max_sum_increasing_subseq(a: a, n: n, index: i+1, k: k))\n        }\n    }\n    return sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpxioumyj8/tmpxioumyj8.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5ab67b2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5ab64a9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5ab64a9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5ab64a87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxioumyj8                        0x0000561b068cb5a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b5ab699e460 __libc_start_main + 245\n6    tmpxioumyj8                        0x0000561b068cb1d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp70ayonys/tmp70ayonys.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abeaac29c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abeaa920b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abeaa920988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abeaa91f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp70ayonys                        0x0000562bb9a78421 <unavailable> + 5153\n5    libc.so.6                          0x00002abeaae15460 __libc_start_main + 245\n6    tmp70ayonys                        0x0000562bb9a78059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        sum = max(sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpzq3bctxk/tmpzq3bctxk.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4045c34c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b404592bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b404592b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b404592a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzq3bctxk                        0x00005610ec0b8421 <unavailable> + 5153\n5    libc.so.6                          0x00002b4045e20460 __libc_start_main + 245\n6    tmpzq3bctxk                        0x00005610ec0b8059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), a[index] + a[k] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpmymow2ue/tmpmymow2ue.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b6c993c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b6c68ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b6c68a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b6c6897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmymow2ue                        0x0000560965e87421 <unavailable> + 5153\n5    libc.so.6                          0x00002b9b6cb7f460 __libc_start_main + 245\n6    tmpmymow2ue                        0x0000560965e87059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpw1wyzp7d/tmpw1wyzp7d.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3f52e81c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3f52b78b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3f52b78988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3f52b777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw1wyzp7d                        0x0000559bfc9d2421 <unavailable> + 5153\n5    libc.so.6                          0x00002b3f5306d460 __libc_start_main + 245\n6    tmpw1wyzp7d                        0x0000559bfc9d2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpuar6eyj1/tmpuar6eyj1.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5751e8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5751b85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5751b85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5751b847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuar6eyj1                        0x000055614a2f4421 <unavailable> + 5153\n5    libc.so.6                          0x00002b575207a460 __libc_start_main + 245\n6    tmpuar6eyj1                        0x000055614a2f4059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp5r9nk8uz/tmp5r9nk8uz.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac1b2020c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac1b1d17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac1b1d17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac1b1d167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5r9nk8uz                        0x0000562bb116a421 <unavailable> + 5153\n5    libc.so.6                          0x00002ac1b220c460 __libc_start_main + 245\n6    tmp5r9nk8uz                        0x0000562bb116a059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[k] {\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a: a, n: n, index: i+1, k: i))\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp7k9r2tte/tmp7k9r2tte.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc043acc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc040a3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc040a3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc040a27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7k9r2tte                        0x000055b02a5f75a1 <unavailable> + 5537\n5    libc.so.6                          0x00002acc04598460 __libc_start_main + 245\n6    tmp7k9r2tte                        0x000055b02a5f71d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var include = 0\n    if k == -1 || a[k] < a[index] {\n        include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index)\n    }\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmphe0ebh49/tmphe0ebh49.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad908bfac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad9088f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad9088f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad9088f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphe0ebh49                        0x0000561c7c15c421 <unavailable> + 5153\n5    libc.so.6                          0x00002ad908de6460 __libc_start_main + 245\n6    tmphe0ebh49                        0x0000561c7c15c059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 0..<n {\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var max_sum = 0\n    for i in 0...index {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, dp[i])\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp60jgthfv/tmp60jgthfv.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d4968fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d49386b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d49386988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d493857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp60jgthfv                        0x00005586b836d751 <unavailable> + 5969\n5    libc.so.6                          0x00002b7d4987b460 __libc_start_main + 245\n6    tmp60jgthfv                        0x00005586b836d389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp5r9nk8uz/tmp5r9nk8uz.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac1b2020c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac1b1d17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac1b1d17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac1b1d167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5r9nk8uz                        0x0000562bb116a421 <unavailable> + 5153\n5    libc.so.6                          0x00002ac1b220c460 __libc_start_main + 245\n6    tmp5r9nk8uz                        0x0000562bb116a059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var include = 0\n    if k < n {\n        include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp0e2dlhya/tmp0e2dlhya.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4c5bccfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4c5b9c6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4c5b9c6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4c5b9c57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0e2dlhya                        0x0000557a67c0b421 <unavailable> + 5153\n5    libc.so.6                          0x00002b4c5bebb460 __libc_start_main + 245\n6    tmp0e2dlhya                        0x0000557a67c0b059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index >= n {\n        return 0\n    }\n    if k >= n {\n        return 0\n    }\n    if k <= index {\n        return 0\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpdp7lh0x_/tmpdp7lh0x_.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abe2fd61c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abe2fa58b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abe2fa58988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abe2fa577b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdp7lh0x_                        0x000056096ed34421 <unavailable> + 5153\n5    libc.so.6                          0x00002abe2ff4d460 __libc_start_main + 245\n6    tmpdp7lh0x_                        0x000056096ed34059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max_sum = 0\n    for i in index..<k {\n        max_sum += dp[i]\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpu7c47n49/tmpu7c47n49.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b505fb83c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b505f87ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b505f87a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b505f8797b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu7c47n49                        0x000055bc743f35d1 <unavailable> + 5585\n5    libc.so.6                          0x00002b505fd6f460 __libc_start_main + 245\n6    tmpu7c47n49                        0x000055bc743f3209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[k] {\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a: a, n: n, index: i+1, k: i))\n        }\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp75fz6a5v/tmp75fz6a5v.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b60f83bec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b60f80b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b60f80b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b60f80b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp75fz6a5v                        0x000055ae556115a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b60f85aa460 __libc_start_main + 245\n6    tmp75fz6a5v                        0x000055ae556111d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k == index {\n        sum = a[index]\n    }\n    return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), sum + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpd4_wjwmd/tmpd4_wjwmd.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b99aeba2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b99ae899b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b99ae899988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b99ae8987b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpd4_wjwmd                        0x000055ae6863f421 <unavailable> + 5153\n5    libc.so.6                          0x00002b99aed8e460 __libc_start_main + 245\n6    tmpd4_wjwmd                        0x000055ae6863f059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var include = 0\n    if k == index + 1 {\n        include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpn2_t_ae1/tmpn2_t_ae1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6655199c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6654e90b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6654e90988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6654e8f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn2_t_ae1                        0x0000556cd4a80421 <unavailable> + 5153\n5    libc.so.6                          0x00002b6655385460 __libc_start_main + 245\n6    tmpn2_t_ae1                        0x0000556cd4a80059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp5r9nk8uz/tmp5r9nk8uz.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac1b2020c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac1b1d17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac1b1d17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac1b1d167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5r9nk8uz                        0x0000562bb116a421 <unavailable> + 5153\n5    libc.so.6                          0x00002ac1b220c460 __libc_start_main + 245\n6    tmp5r9nk8uz                        0x0000562bb116a059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpmfxgdcmb/tmpmfxgdcmb.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b70e1b77c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b70e186eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b70e186e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b70e186d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmfxgdcmb                        0x00005578d7700421 <unavailable> + 5153\n5    libc.so.6                          0x00002b70e1d63460 __libc_start_main + 245\n6    tmpmfxgdcmb                        0x00005578d7700059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j])\n            }\n        }\n        dp[i] += a[i]\n    }\n    return dp[index] + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmphb91auq7/tmphb91auq7.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b80f5892c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b80f5589b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b80f5589988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b80f55887b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphb91auq7                        0x00005591e635d661 <unavailable> + 5729\n5    libc.so.6                          0x00002b80f5a7e460 __libc_start_main + 245\n6    tmphb91auq7                        0x00005591e635d299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    return dp[index] + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp4t93zbhn/tmp4t93zbhn.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac16e854c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac16e54bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac16e54b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac16e54a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4t93zbhn                        0x000055d26f5605d1 <unavailable> + 5585\n5    libc.so.6                          0x00002ac16ea40460 __libc_start_main + 245\n6    tmp4t93zbhn                        0x000055d26f560209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: k, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    \n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpge47wjog/tmpge47wjog.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b815c42cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b815c123b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b815c123988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b815c1227b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpge47wjog                        0x000055bb8979c421 <unavailable> + 5153\n5    libc.so.6                          0x00002b815c618460 __libc_start_main + 245\n6    tmpge47wjog                        0x000055bb8979c059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    if a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpvzurz9ua/tmpvzurz9ua.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2a177d6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2a174cdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2a174cd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2a174cc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvzurz9ua                        0x000055b262856421 <unavailable> + 5153\n5    libc.so.6                          0x00002b2a179c2460 __libc_start_main + 245\n6    tmpvzurz9ua                        0x000055b262856059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i+1, k: k) + a[i])\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmprm2zmkax/tmprm2zmkax.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b724eadcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b724e7d3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b724e7d3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b724e7d27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprm2zmkax                        0x0000557d595205a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b724ecc8460 __libc_start_main + 245\n6    tmprm2zmkax                        0x0000557d595201d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index + 1)\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index + 1))\n    } else {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index + 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpa53pni8i/tmpa53pni8i.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae16ee0fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae16eb06b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae16eb06988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae16eb057b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa53pni8i                        0x000055fe02d10421 <unavailable> + 5153\n5    libc.so.6                          0x00002ae16effb460 __libc_start_main + 245\n6    tmpa53pni8i                        0x000055fe02d10059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k < n {\n        sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    if a[index] < a[k] {\n        sum = max(sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e5d718c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e5d40f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b5e5d40f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b5e5d40f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b5e5d40ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b5e5d20fe83 <unavailable> + 188035\n6    tmpfxyonked                        0x0000555efffed74e <unavailable> + 5966\n7    tmpfxyonked                        0x0000555efffed71d <unavailable> + 5917\n8    tmpfxyonked                        0x0000555efffed3a3 <unavailable> + 5027\n9    libc.so.6                          0x00002b5e5d904460 __libc_start_main + 245\n10   tmpfxyonked                        0x0000555efffed059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp70ayonys/tmp70ayonys.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abeaac29c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abeaa920b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abeaa920988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abeaa91f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp70ayonys                        0x0000562bb9a78421 <unavailable> + 5153\n5    libc.so.6                          0x00002abeaae15460 __libc_start_main + 245\n6    tmp70ayonys                        0x0000562bb9a78059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index >= n {\n        return 0\n    }\n    if k <= index {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a: a, n: n, index: i+1, k: k))\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpxq4ep27y/tmpxq4ep27y.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b72e2623c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b72e231ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b72e231a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b72e23197b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxq4ep27y                        0x00005601663255a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b72e280f460 __libc_start_main + 245\n6    tmpxq4ep27y                        0x00005601663251d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpw1wyzp7d/tmpw1wyzp7d.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3f52e81c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3f52b78b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3f52b78988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3f52b777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw1wyzp7d                        0x0000559bfc9d2421 <unavailable> + 5153\n5    libc.so.6                          0x00002b3f5306d460 __libc_start_main + 245\n6    tmpw1wyzp7d                        0x0000559bfc9d2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpw1wyzp7d/tmpw1wyzp7d.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3f52e81c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3f52b78b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3f52b78988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3f52b777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw1wyzp7d                        0x0000559bfc9d2421 <unavailable> + 5153\n5    libc.so.6                          0x00002b3f5306d460 __libc_start_main + 245\n6    tmpw1wyzp7d                        0x0000559bfc9d2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpw1wyzp7d/tmpw1wyzp7d.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3f52e81c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3f52b78b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3f52b78988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3f52b777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw1wyzp7d                        0x0000559bfc9d2421 <unavailable> + 5153\n5    libc.so.6                          0x00002b3f5306d460 __libc_start_main + 245\n6    tmpw1wyzp7d                        0x0000559bfc9d2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var include = 0\n    if k < n {\n        include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp0e2dlhya/tmp0e2dlhya.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4c5bccfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4c5b9c6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4c5b9c6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4c5b9c57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0e2dlhya                        0x0000557a67c0b421 <unavailable> + 5153\n5    libc.so.6                          0x00002b4c5bebb460 __libc_start_main + 245\n6    tmp0e2dlhya                        0x0000557a67c0b059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1))\n    } else {\n        return max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpt0i4o04a/tmpt0i4o04a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b037b89fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b037b596b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b037b596988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b037b5957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt0i4o04a                        0x000055a55fcae421 <unavailable> + 5153\n5    libc.so.6                          0x00002b037ba8b460 __libc_start_main + 245\n6    tmpt0i4o04a                        0x000055a55fcae059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[k] {\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a: a, n: n, index: i+1, k: i))\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp7k9r2tte/tmp7k9r2tte.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc043acc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc040a3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc040a3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc040a27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7k9r2tte                        0x000055b02a5f75a1 <unavailable> + 5537\n5    libc.so.6                          0x00002acc04598460 __libc_start_main + 245\n6    tmp7k9r2tte                        0x000055b02a5f71d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var max_sum = 0\n    for i in index..<k {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i, k: k))\n        }\n    }\n    return max_sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123759,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp8cxr68kk/tmp8cxr68kk.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acbfcbcec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acbfc8c5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acbfc8c5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acbfc8c47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8cxr68kk                        0x000055f0477ad421 <unavailable> + 5153\n5    libc.so.6                          0x00002acbfcdba460 __libc_start_main + 245\n6    tmp8cxr68kk                        0x000055f0477ad059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k <= index {\n        sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    } else {\n        sum = max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpmnntacw_/tmpmnntacw_.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9312d62c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9312a59b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9312a59988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9312a587b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmnntacw_                        0x0000561a7e74b421 <unavailable> + 5153\n5    libc.so.6                          0x00002b9312f4e460 __libc_start_main + 245\n6    tmpmnntacw_                        0x0000561a7e74b059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    if a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpvzurz9ua/tmpvzurz9ua.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2a177d6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2a174cdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2a174cd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2a174cc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvzurz9ua                        0x000055b262856421 <unavailable> + 5153\n5    libc.so.6                          0x00002b2a179c2460 __libc_start_main + 245\n6    tmpvzurz9ua                        0x000055b262856059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k < index {\n        return 0\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpxt0xp1bd/tmpxt0xp1bd.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aad4fc86c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aad4f97db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aad4f97d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aad4f97c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxt0xp1bd                        0x000055673a27e421 <unavailable> + 5153\n5    libc.so.6                          0x00002aad4fe72460 __libc_start_main + 245\n6    tmpxt0xp1bd                        0x000055673a27e059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    \n    if a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpq0nphb1r/tmpq0nphb1r.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba084760c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba084457b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba084457988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba0844567b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpq0nphb1r                        0x000055e32616d421 <unavailable> + 5153\n5    libc.so.6                          0x00002ba08494c460 __libc_start_main + 245\n6    tmpq0nphb1r                        0x000055e32616d059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k) + a[index])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp5msjy06n/tmp5msjy06n.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2a1d02cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2a1cd23b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2a1cd23988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2a1cd227b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5msjy06n                        0x00005556b9af4421 <unavailable> + 5153\n5    libc.so.6                          0x00002b2a1d218460 __libc_start_main + 245\n6    tmp5msjy06n                        0x00005556b9af4059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: k))\n        }\n    }\n    return max_sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp90up4jmt/tmp90up4jmt.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b58dce06c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b58dcafdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b58dcafd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b58dcafc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp90up4jmt                        0x000055ae9ad4e5a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b58dcff2460 __libc_start_main + 245\n6    tmp90up4jmt                        0x000055ae9ad4e1d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpl0lfgjfd/tmpl0lfgjfd.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3f5a272c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3f59f69b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3f59f69988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3f59f687b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl0lfgjfd                        0x0000556a5858f421 <unavailable> + 5153\n5    libc.so.6                          0x00002b3f5a45e460 __libc_start_main + 245\n6    tmpl0lfgjfd                        0x0000556a5858f059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index > k {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpfoeex3vk/tmpfoeex3vk.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b86e19a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b86e169fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b86e169f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b86e169e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfoeex3vk                        0x00005564af32e421 <unavailable> + 5153\n5    libc.so.6                          0x00002b86e1b94460 __libc_start_main + 245\n6    tmpfoeex3vk                        0x00005564af32e059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp5r9nk8uz/tmp5r9nk8uz.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac1b2020c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac1b1d17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac1b1d17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac1b1d167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5r9nk8uz                        0x0000562bb116a421 <unavailable> + 5153\n5    libc.so.6                          0x00002ac1b220c460 __libc_start_main + 245\n6    tmp5r9nk8uz                        0x0000562bb116a059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpw1wyzp7d/tmpw1wyzp7d.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3f52e81c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3f52b78b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3f52b78988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3f52b777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw1wyzp7d                        0x0000559bfc9d2421 <unavailable> + 5153\n5    libc.so.6                          0x00002b3f5306d460 __libc_start_main + 245\n6    tmpw1wyzp7d                        0x0000559bfc9d2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    if k == n {\n        return 0\n    }\n    \n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1), a[index] + max_sum_increasing_subseq(a: a, n: n, index: k + 1, k: k + 1))\n    }\n    \n    return max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpcs8uef6l/tmpcs8uef6l.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acfa5ba6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acfa589db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acfa589d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acfa589c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcs8uef6l                        0x000055938cc49421 <unavailable> + 5153\n5    libc.so.6                          0x00002acfa5d92460 __libc_start_main + 245\n6    tmpcs8uef6l                        0x000055938cc49059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp70ayonys/tmp70ayonys.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abeaac29c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abeaa920b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abeaa920988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abeaa91f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp70ayonys                        0x0000562bb9a78421 <unavailable> + 5153\n5    libc.so.6                          0x00002abeaae15460 __libc_start_main + 245\n6    tmp70ayonys                        0x0000562bb9a78059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    var max_so_far = dp[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] && j < k {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n        max_so_far = max(max_so_far, dp[i])\n    }\n    return max_so_far\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpixzrajiq/tmpixzrajiq.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba7522b0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba751fa7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba751fa7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba751fa67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpixzrajiq                        0x000055e9a0969661 <unavailable> + 5729\n5    libc.so.6                          0x00002ba75249c460 __libc_start_main + 245\n6    tmpixzrajiq                        0x000055e9a0969299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp70ayonys/tmp70ayonys.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abeaac29c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abeaa920b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abeaa920988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abeaa91f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp70ayonys                        0x0000562bb9a78421 <unavailable> + 5153\n5    libc.so.6                          0x00002abeaae15460 __libc_start_main + 245\n6    tmp70ayonys                        0x0000562bb9a78059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    var include = 0\n    if k > index {\n        include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmppiwki3dy/tmppiwki3dy.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6e59476c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6e5916db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6e5916d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6e5916c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppiwki3dy                        0x000055a407832421 <unavailable> + 5153\n5    libc.so.6                          0x00002b6e59662460 __libc_start_main + 245\n6    tmppiwki3dy                        0x000055a407832059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    }\n    return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp5j1ccus1/tmp5j1ccus1.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba89d798c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba89d48fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba89d48f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba89d48e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5j1ccus1                        0x000055e940158421 <unavailable> + 5153\n5    libc.so.6                          0x00002ba89d984460 __libc_start_main + 245\n6    tmp5j1ccus1                        0x000055e940158059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp_xtxpqtp/tmp_xtxpqtp.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b452c000c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b452bcf7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b452bcf7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b452bcf67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_xtxpqtp                        0x0000557ac7949421 <unavailable> + 5153\n5    libc.so.6                          0x00002b452c1ec460 __libc_start_main + 245\n6    tmp_xtxpqtp                        0x0000557ac7949059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        ans = max(ans, a[k] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpbcohak5x/tmpbcohak5x.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aaff44cfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aaff41c6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aaff41c6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aaff41c57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbcohak5x                        0x000055b93cf3a421 <unavailable> + 5153\n5    libc.so.6                          0x00002aaff46bb460 __libc_start_main + 245\n6    tmpbcohak5x                        0x000055b93cf3a059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k == index {\n        sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    } else {\n        sum = max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp1o0mhfhs/tmp1o0mhfhs.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abc3b5d3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abc3b2cab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abc3b2ca988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abc3b2c97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1o0mhfhs                        0x000055bf1a5e4421 <unavailable> + 5153\n5    libc.so.6                          0x00002abc3b7bf460 __libc_start_main + 245\n6    tmp1o0mhfhs                        0x000055bf1a5e4059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max_sum = 0\n    for i in 0..<n {\n        if i < index {\n            max_sum = max(max_sum, dp[i])\n        } else if i == k {\n            max_sum = max(max_sum, dp[i])\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpgu4z4jsv/tmpgu4z4jsv.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad932c62c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad932959b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad932959988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad9329587b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgu4z4jsv                        0x000055ffa711a661 <unavailable> + 5729\n5    libc.so.6                          0x00002ad932e4e460 __libc_start_main + 245\n6    tmpgu4z4jsv                        0x000055ffa711a299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var include = 0\n    if k < n && a[index] < a[k] {\n        include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp45i54z02/tmp45i54z02.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad12cfe6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad12ccddb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad12ccdd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad12ccdc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp45i54z02                        0x000055f34e4ff421 <unavailable> + 5153\n5    libc.so.6                          0x00002ad12d1d2460 __libc_start_main + 245\n6    tmp45i54z02                        0x000055f34e4ff059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum1 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    var sum2 = 0\n    if a[index] < a[k] {\n        sum2 = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(sum1, sum2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpal0gx1wr/tmpal0gx1wr.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b73ef119c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b73eee10b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b73eee10988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b73eee0f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpal0gx1wr                        0x00005634d86e4421 <unavailable> + 5153\n5    libc.so.6                          0x00002b73ef305460 __libc_start_main + 245\n6    tmpal0gx1wr                        0x00005634d86e4059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i+1, k: k))\n        }\n    }\n    return max_sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpczrwcazv/tmpczrwcazv.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abbef100c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abbeedf7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abbeedf7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abbeedf67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpczrwcazv                        0x000055eb6b1415a1 <unavailable> + 5537\n5    libc.so.6                          0x00002abbef2ec460 __libc_start_main + 245\n6    tmpczrwcazv                        0x000055eb6b1411d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[index] = a[index]\n    for i in index+1..<n {\n        if i == k {\n            dp[i] = dp[index] + a[i]\n        } else {\n            dp[i] = max(dp[i-1], dp[i])\n        }\n    }\n    return dp[n-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp6_amut6i/tmp6_amut6i.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf14155c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf13e4cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf13e4c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf13e4b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6_amut6i                        0x000055aba7be8661 <unavailable> + 5729\n5    libc.so.6                          0x00002abf14341460 __libc_start_main + 245\n6    tmp6_amut6i                        0x000055aba7be8299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp70ayonys/tmp70ayonys.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abeaac29c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abeaa920b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abeaa920988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abeaa91f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp70ayonys                        0x0000562bb9a78421 <unavailable> + 5153\n5    libc.so.6                          0x00002abeaae15460 __libc_start_main + 245\n6    tmp70ayonys                        0x0000562bb9a78059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max_sum = 0\n    for i in 0..<index {\n        if dp[i] > max_sum {\n            max_sum = dp[i]\n        }\n    }\n    max_sum += a[k]\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp6t48gh41/tmp6t48gh41.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac4b7076c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac4b6d6db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac4b6d6d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac4b6d6c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6t48gh41                        0x00005641e4a7a5d1 <unavailable> + 5585\n5    libc.so.6                          0x00002ac4b7262460 __libc_start_main + 245\n6    tmp6t48gh41                        0x00005641e4a7a209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var max_sum = 0\n    for i in 0..<index {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, dp[i])\n        }\n    }\n    return max_sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpgqavkc95/tmpgqavkc95.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4e72d4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4e6fcbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4e6fcb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4e6fca7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgqavkc95                        0x000055e51667d755 <unavailable> + 5973\n5    libc.so.6                          0x00002ae4e74c0460 __libc_start_main + 245\n6    tmpgqavkc95                        0x000055e51667d299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k == index {\n        sum = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    } else {\n        sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpecwqvram/tmpecwqvram.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af63f3a7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af63f09eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af63f09e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af63f09d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpecwqvram                        0x0000565266143391 <unavailable> + 5009\n5    libc.so.6                          0x00002af63f593460 __libc_start_main + 245\n6    tmpecwqvram                        0x0000565266142fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var max_sum = 0\n    for i in 0..<index {\n        max_sum = max(max_sum, dp[i])\n    }\n    return max_sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpr8es46be/tmpr8es46be.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b36331ffc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3632ef6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3632ef6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3632ef57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpr8es46be                        0x000055ca6ff7d661 <unavailable> + 5729\n5    libc.so.6                          0x00002b36333eb460 __libc_start_main + 245\n6    tmpr8es46be                        0x000055ca6ff7d299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpovf76a_q/tmpovf76a_q.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad605bc6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad6058bdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad6058bd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad6058bc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpovf76a_q                        0x0000555834288421 <unavailable> + 5153\n5    libc.so.6                          0x00002ad605db2460 __libc_start_main + 245\n6    tmpovf76a_q                        0x0000555834288059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpw1wyzp7d/tmpw1wyzp7d.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3f52e81c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3f52b78b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3f52b78988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3f52b777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw1wyzp7d                        0x0000559bfc9d2421 <unavailable> + 5153\n5    libc.so.6                          0x00002b3f5306d460 __libc_start_main + 245\n6    tmpw1wyzp7d                        0x0000559bfc9d2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp8cxr68kk/tmp8cxr68kk.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acbfcbcec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acbfc8c5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acbfc8c5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acbfc8c47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8cxr68kk                        0x000055f0477ad421 <unavailable> + 5153\n5    libc.so.6                          0x00002acbfcdba460 __libc_start_main + 245\n6    tmp8cxr68kk                        0x000055f0477ad059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[k] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpxbh4b08y/tmpxbh4b08y.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad3ff614c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad3ff30bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad3ff30b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad3ff30a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxbh4b08y                        0x000055b53e02f421 <unavailable> + 5153\n5    libc.so.6                          0x00002ad3ff800460 __libc_start_main + 245\n6    tmpxbh4b08y                        0x000055b53e02f059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var include = 0\n    if k == -1 || a[index] > a[k] {\n        include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index)\n    }\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmppovw_wqq/tmppovw_wqq.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b71bbca8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b71bb99fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b71bb99f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b71bb99e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppovw_wqq                        0x00005562c58ca421 <unavailable> + 5153\n5    libc.so.6                          0x00002b71bbe94460 __libc_start_main + 245\n6    tmppovw_wqq                        0x00005562c58ca059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    let including = a[index] + max_sum_increasing_subseq(a: a, n: n, index: k, k: k + 1)\n    let excluding = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(including, excluding)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpohsejf2p/tmpohsejf2p.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab9ce11cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab9cde13b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab9cde13988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab9cde127b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpohsejf2p                        0x000055e885c6e421 <unavailable> + 5153\n5    libc.so.6                          0x00002ab9ce308460 __libc_start_main + 245\n6    tmpohsejf2p                        0x000055e885c6e059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    return dp[index] + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpsr2_tpl1/tmpsr2_tpl1.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b747fc8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b747f986b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b747f986988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b747f9857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsr2_tpl1                        0x0000558abb0405d1 <unavailable> + 5585\n5    libc.so.6                          0x00002b747fe7b460 __libc_start_main + 245\n6    tmpsr2_tpl1                        0x0000558abb040209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpw1wyzp7d/tmpw1wyzp7d.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3f52e81c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3f52b78b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3f52b78988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3f52b777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw1wyzp7d                        0x0000559bfc9d2421 <unavailable> + 5153\n5    libc.so.6                          0x00002b3f5306d460 __libc_start_main + 245\n6    tmpw1wyzp7d                        0x0000559bfc9d2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            sum = max(sum, max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: k))\n        }\n    }\n    return sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpzzex7a6q/tmpzzex7a6q.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad815843c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad81553ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad81553a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad8155397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzzex7a6q                        0x0000557b95d715a1 <unavailable> + 5537\n5    libc.so.6                          0x00002ad815a2f460 __libc_start_main + 245\n6    tmpzzex7a6q                        0x0000557b95d711d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if a[index] < a[k] {\n        sum = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(sum, max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmplqwlsv1z/tmplqwlsv1z.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab22d8dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab22d5d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab22d5d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab22d5d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplqwlsv1z                        0x0000555c3c6d3421 <unavailable> + 5153\n5    libc.so.6                          0x00002ab22dac6460 __libc_start_main + 245\n6    tmplqwlsv1z                        0x0000555c3c6d3059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1), a[index] + max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpm1qnq75d/tmpm1qnq75d.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad15ea05c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad15e6fcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad15e6fc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad15e6fb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm1qnq75d                        0x000055ca39ec2421 <unavailable> + 5153\n5    libc.so.6                          0x00002ad15ebf1460 __libc_start_main + 245\n6    tmpm1qnq75d                        0x000055ca39ec2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max_sum = 0\n    for i in index..<k {\n        max_sum = max(max_sum, dp[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpydk2bd7b/tmpydk2bd7b.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b70768b4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b70765abb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b70765ab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b70765aa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpydk2bd7b                        0x0000560ea89ed661 <unavailable> + 5729\n5    libc.so.6                          0x00002b7076aa0460 __libc_start_main + 245\n6    tmpydk2bd7b                        0x0000560ea89ed299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmptdvvlgoo/tmptdvvlgoo.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae656c81c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae656978b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae656978988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae6569777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptdvvlgoo                        0x000056209a4b0421 <unavailable> + 5153\n5    libc.so.6                          0x00002ae656e6d460 __libc_start_main + 245\n6    tmptdvvlgoo                        0x000056209a4b0059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var include = 0\n    if k == index + 1 {\n        include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpn2_t_ae1/tmpn2_t_ae1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6655199c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6654e90b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6654e90988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6654e8f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn2_t_ae1                        0x0000556cd4a80421 <unavailable> + 5153\n5    libc.so.6                          0x00002b6655385460 __libc_start_main + 245\n6    tmpn2_t_ae1                        0x0000556cd4a80059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[k] {\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: i))\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpt66oc_rx/tmpt66oc_rx.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b87b3105c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b87b2dfcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b87b2dfc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b87b2dfb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt66oc_rx                        0x000055940464d5a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b87b32f1460 __libc_start_main + 245\n6    tmpt66oc_rx                        0x000055940464d1d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var maxSum = 0\n    for i in index..<k {\n        maxSum = max(maxSum, dp[i])\n    }\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpkby4vk_k/tmpkby4vk_k.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7649f7ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7649c75b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7649c75988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7649c747b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkby4vk_k                        0x000055c356f25661 <unavailable> + 5729\n5    libc.so.6                          0x00002b764a16a460 __libc_start_main + 245\n6    tmpkby4vk_k                        0x000055c356f25299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if k > index && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpy2xi9a3j/tmpy2xi9a3j.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abd33ccec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abd339c5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abd339c5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abd339c47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy2xi9a3j                        0x000055bf193b5421 <unavailable> + 5153\n5    libc.so.6                          0x00002abd33eba460 __libc_start_main + 245\n6    tmpy2xi9a3j                        0x000055bf193b5059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpml6gettu/tmpml6gettu.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aedaa2f1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeda9fe8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeda9fe8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeda9fe77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpml6gettu                        0x0000555563781421 <unavailable> + 5153\n5    libc.so.6                          0x00002aedaa4dd460 __libc_start_main + 245\n6    tmpml6gettu                        0x0000555563781059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i+1, k: i) + a[i])\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpsp04z554/tmpsp04z554.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7a262fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7a2326b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7a2326988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7a23257b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsp04z554                        0x0000556075aee5a1 <unavailable> + 5537\n5    libc.so.6                          0x00002ad7a281b460 __libc_start_main + 245\n6    tmpsp04z554                        0x0000556075aee1d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var max_sum = 0\n    for i in index..<k {\n        max_sum += a[i]\n    }\n    return dp[index] + max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp16qme6gy/tmp16qme6gy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af2a7687c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af2a737eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af2a737e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af2a737d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp16qme6gy                        0x0000557639549661 <unavailable> + 5729\n5    libc.so.6                          0x00002af2a7873460 __libc_start_main + 245\n6    tmp16qme6gy                        0x0000557639549299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp5r9nk8uz/tmp5r9nk8uz.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac1b2020c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac1b1d17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac1b1d17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac1b1d167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5r9nk8uz                        0x0000562bb116a421 <unavailable> + 5153\n5    libc.so.6                          0x00002ac1b220c460 __libc_start_main + 245\n6    tmp5r9nk8uz                        0x0000562bb116a059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max = 0\n    for i in 0..<index {\n        if dp[i] > max {\n            max = dp[i]\n        }\n    }\n    return max + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp8gw63q5z/tmp8gw63q5z.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b2d0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12afc7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12afc7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12afc67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8gw63q5z                        0x000055bf0ed6b5d1 <unavailable> + 5585\n5    libc.so.6                          0x00002ac12b4bc460 __libc_start_main + 245\n6    tmp8gw63q5z                        0x000055bf0ed6b209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index > k {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp7jm463yo/tmp7jm463yo.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b16ab481c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b16ab178b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b16ab178988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b16ab1777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7jm463yo                        0x0000561076a9b421 <unavailable> + 5153\n5    libc.so.6                          0x00002b16ab66d460 __libc_start_main + 245\n6    tmp7jm463yo                        0x0000561076a9b059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    if a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpvzurz9ua/tmpvzurz9ua.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2a177d6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2a174cdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2a174cd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2a174cc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvzurz9ua                        0x000055b262856421 <unavailable> + 5153\n5    libc.so.6                          0x00002b2a179c2460 __libc_start_main + 245\n6    tmpvzurz9ua                        0x000055b262856059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    if k == n {\n        return 0\n    }\n    \n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    \n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp8yzwpvw1/tmp8yzwpvw1.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6710345c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b671003cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b671003c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b671003b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8yzwpvw1                        0x000055a11885b421 <unavailable> + 5153\n5    libc.so.6                          0x00002b6710531460 __libc_start_main + 245\n6    tmp8yzwpvw1                        0x000055a11885b059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpeok008g6/tmpeok008g6.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b10c52afc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b10c4fa6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b10c4fa6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b10c4fa57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpeok008g6                        0x000055b21d77e421 <unavailable> + 5153\n5    libc.so.6                          0x00002b10c549b460 __libc_start_main + 245\n6    tmpeok008g6                        0x000055b21d77e059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1))\n    }\n    return max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpouvlnq2u/tmpouvlnq2u.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bf5933c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bf562ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bf562a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bf56297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpouvlnq2u                        0x000056521ec44421 <unavailable> + 5153\n5    libc.so.6                          0x00002b8bf5b1f460 __libc_start_main + 245\n6    tmpouvlnq2u                        0x000056521ec44059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp_xtxpqtp/tmp_xtxpqtp.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b452c000c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b452bcf7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b452bcf7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b452bcf67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_xtxpqtp                        0x0000557ac7949421 <unavailable> + 5153\n5    libc.so.6                          0x00002b452c1ec460 __libc_start_main + 245\n6    tmp_xtxpqtp                        0x0000557ac7949059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if index < k {\n        sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    else {\n        sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k) + a[index]\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpfiztbhxk/tmpfiztbhxk.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b286ecd6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b286e9cdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b286e9cd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b286e9cc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfiztbhxk                        0x000055dfd38ae391 <unavailable> + 5009\n5    libc.so.6                          0x00002b286eec2460 __libc_start_main + 245\n6    tmpfiztbhxk                        0x000055dfd38adfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpml6gettu/tmpml6gettu.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aedaa2f1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeda9fe8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeda9fe8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeda9fe77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpml6gettu                        0x0000555563781421 <unavailable> + 5153\n5    libc.so.6                          0x00002aedaa4dd460 __libc_start_main + 245\n6    tmpml6gettu                        0x0000555563781059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var include = 0\n    if k == index + 1 {\n        include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    \n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    \n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmp413o1sq4/tmp413o1sq4.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0fcf257c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0fcef4eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0fcef4e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0fcef4d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp413o1sq4                        0x000055cb6db39421 <unavailable> + 5153\n5    libc.so.6                          0x00002b0fcf443460 __libc_start_main + 245\n6    tmp413o1sq4                        0x000055cb6db39059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index >= n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpofguc_om/tmpofguc_om.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49b727ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49b6f71b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49b6f71988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49b6f707b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpofguc_om                        0x0000561e46111421 <unavailable> + 5153\n5    libc.so.6                          0x00002b49b7466460 __libc_start_main + 245\n6    tmpofguc_om                        0x0000561e46111059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    if a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpvzurz9ua/tmpvzurz9ua.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2a177d6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2a174cdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2a174cd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2a174cc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvzurz9ua                        0x000055b262856421 <unavailable> + 5153\n5    libc.so.6                          0x00002b2a179c2460 __libc_start_main + 245\n6    tmpvzurz9ua                        0x000055b262856059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpeok008g6/tmpeok008g6.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b10c52afc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b10c4fa6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b10c4fa6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b10c4fa57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpeok008g6                        0x000055b21d77e421 <unavailable> + 5153\n5    libc.so.6                          0x00002b10c549b460 __libc_start_main + 245\n6    tmpeok008g6                        0x000055b21d77e059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[index] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i, k: k) + a[index])\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmp_q0xej9l/tmp_q0xej9l.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b83a1bccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b83a18c3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b83a18c3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b83a18c27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_q0xej9l                        0x000055e9055915a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b83a1db8460 __libc_start_main + 245\n6    tmp_q0xej9l                        0x000055e9055911d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp70ayonys/tmp70ayonys.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abeaac29c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abeaa920b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abeaa920988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abeaa91f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp70ayonys                        0x0000562bb9a78421 <unavailable> + 5153\n5    libc.so.6                          0x00002abeaae15460 __libc_start_main + 245\n6    tmp70ayonys                        0x0000562bb9a78059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmp5ajf_e3y/tmp5ajf_e3y.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac0020cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac001dc1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac001dc1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac001dc07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5ajf_e3y                        0x000055f796a8d421 <unavailable> + 5153\n5    libc.so.6                          0x00002ac0022b6460 __libc_start_main + 245\n6    tmp5ajf_e3y                        0x000055f796a8d059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            let sum = max_sum_increasing_subseq(a: a, n: n, index: i+1, k: k)\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpbzw3074s/tmpbzw3074s.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba5e4e15c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba5e4b0cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba5e4b0c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba5e4b0b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbzw3074s                        0x000055af65ad8511 <unavailable> + 5393\n5    libc.so.6                          0x00002ba5e5001460 __libc_start_main + 245\n6    tmpbzw3074s                        0x000055af65ad8149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var include = 0\n    if k == index + 1 {\n        include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpn2_t_ae1/tmpn2_t_ae1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6655199c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6654e90b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6654e90988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6654e8f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn2_t_ae1                        0x0000556cd4a80421 <unavailable> + 5153\n5    libc.so.6                          0x00002b6655385460 __libc_start_main + 245\n6    tmpn2_t_ae1                        0x0000556cd4a80059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: k))\n        }\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpzg3qrz7h/tmpzg3qrz7h.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7179c3ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7179931b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7179931988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b71799307b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzg3qrz7h                        0x00005598c00f75a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b7179e26460 __libc_start_main + 245\n6    tmpzg3qrz7h                        0x00005598c00f71d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    if index == k {\n        return a[index]\n    }\n    \n    let including_k = a[k] + max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1)\n    let excluding_k = max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1)\n    \n    return max(including_k, excluding_k)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5af5511c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5af5208561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b5af5208286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b5af520813c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b5af5207bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b5af5008e83 <unavailable> + 188035\n6    tmp09wojosv                        0x000055bf9ff73703 <unavailable> + 5891\n7    tmp09wojosv                        0x000055bf9ff73746 <unavailable> + 5958\n8    tmp09wojosv                        0x000055bf9ff733a3 <unavailable> + 5027\n9    libc.so.6                          0x00002b5af56fd460 __libc_start_main + 245\n10   tmp09wojosv                        0x000055bf9ff73059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var ans1 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    var ans2 = 0\n    if a[index] < a[k] {\n        ans2 = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index)\n    }\n    return max(ans1, ans2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpglyytz9a/tmpglyytz9a.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b084fbbbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b084f8b2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b084f8b2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b084f8b17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpglyytz9a                        0x0000563f861b4421 <unavailable> + 5153\n5    libc.so.6                          0x00002b084fda7460 __libc_start_main + 245\n6    tmpglyytz9a                        0x0000563f861b4059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpeok008g6/tmpeok008g6.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b10c52afc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b10c4fa6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b10c4fa6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b10c4fa57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpeok008g6                        0x000055b21d77e421 <unavailable> + 5153\n5    libc.so.6                          0x00002b10c549b460 __libc_start_main + 245\n6    tmpeok008g6                        0x000055b21d77e059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i+1, k: k))\n        }\n    }\n    return max_sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpczrwcazv/tmpczrwcazv.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abbef100c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abbeedf7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abbeedf7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abbeedf67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpczrwcazv                        0x000055eb6b1415a1 <unavailable> + 5537\n5    libc.so.6                          0x00002abbef2ec460 __libc_start_main + 245\n6    tmpczrwcazv                        0x000055eb6b1411d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp_xtxpqtp/tmp_xtxpqtp.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b452c000c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b452bcf7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b452bcf7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b452bcf67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_xtxpqtp                        0x0000557ac7949421 <unavailable> + 5153\n5    libc.so.6                          0x00002b452c1ec460 __libc_start_main + 245\n6    tmp_xtxpqtp                        0x0000557ac7949059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    var include = a[index]\n    var exclude = 0\n    if index < k {\n        include += max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpyver579k/tmpyver579k.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae21893bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae218632b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae218632988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae2186317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyver579k                        0x00005652f0e06421 <unavailable> + 5153\n5    libc.so.6                          0x00002ae218b27460 __libc_start_main + 245\n6    tmpyver579k                        0x00005652f0e06059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpn6taqhwf/tmpn6taqhwf.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b251ee52c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b251eb49b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b251eb49988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b251eb487b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn6taqhwf                        0x000055d0dee55421 <unavailable> + 5153\n5    libc.so.6                          0x00002b251f03e460 __libc_start_main + 245\n6    tmpn6taqhwf                        0x000055d0dee55059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var max_sum = 0\n    for i in 0..<index {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, dp[i])\n        }\n    }\n    return max_sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpkiatjwty/tmpkiatjwty.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae7222afc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae721fa6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae721fa6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae721fa57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkiatjwty                        0x000055927deb9755 <unavailable> + 5973\n5    libc.so.6                          0x00002ae72249b460 __libc_start_main + 245\n6    tmpkiatjwty                        0x000055927deb9299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    var max_sum = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n        max_sum = max(max_sum, dp[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpafytmi22/tmpafytmi22.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b83b360dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b83b3304b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b83b3304988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b83b33037b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpafytmi22                        0x0000556456989661 <unavailable> + 5729\n5    libc.so.6                          0x00002b83b37f9460 __libc_start_main + 245\n6    tmpafytmi22                        0x0000556456989299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpx3igk_lb/tmpx3igk_lb.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f9adfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f97d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f97d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f97d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx3igk_lb                        0x000055a3e8c9a421 <unavailable> + 5153\n5    libc.so.6                          0x00002b00f9ccb460 __libc_start_main + 245\n6    tmpx3igk_lb                        0x000055a3e8c9a059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var include = 0\n    if k == -1 || a[index] > a[k] {\n        include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index)\n    }\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmppovw_wqq/tmppovw_wqq.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b71bbca8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b71bb99fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b71bb99f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b71bb99e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppovw_wqq                        0x00005562c58ca421 <unavailable> + 5153\n5    libc.so.6                          0x00002b71bbe94460 __libc_start_main + 245\n6    tmppovw_wqq                        0x00005562c58ca059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i+1, k: k))\n        }\n    }\n    return max_sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmptmsv_1e2/tmptmsv_1e2.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b841c625c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b841c31cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b841c31c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b841c31b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptmsv_1e2                        0x00005609f2bf85a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b841c811460 __libc_start_main + 245\n6    tmptmsv_1e2                        0x00005609f2bf81d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var res = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if k > index {\n        res = max(res, a[index] + max_sum_increasing_subseq(a: a, n: n, index: k, k: k))\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmptbq1julp/tmptbq1julp.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3e0af04c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3e0abfbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3e0abfb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3e0abfa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptbq1julp                        0x0000560a3e91b421 <unavailable> + 5153\n5    libc.so.6                          0x00002b3e0b0f0460 __libc_start_main + 245\n6    tmptbq1julp                        0x0000560a3e91b059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum_including_k = 0\n    if k == -1 || a[k] < a[index] {\n        sum_including_k = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index) + a[index]\n    }\n    let sum_excluding_k = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(sum_including_k, sum_excluding_k)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpow4_cm81/tmpow4_cm81.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4cf003c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4cecfab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4cecfa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4cecf97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpow4_cm81                        0x000055a876a83421 <unavailable> + 5153\n5    libc.so.6                          0x00002ae4cf1ef460 __libc_start_main + 245\n6    tmpow4_cm81                        0x000055a876a83059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp_xtxpqtp/tmp_xtxpqtp.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b452c000c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b452bcf7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b452bcf7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b452bcf67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_xtxpqtp                        0x0000557ac7949421 <unavailable> + 5153\n5    libc.so.6                          0x00002b452c1ec460 __libc_start_main + 245\n6    tmp_xtxpqtp                        0x0000557ac7949059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpovf76a_q/tmpovf76a_q.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad605bc6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad6058bdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad6058bd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad6058bc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpovf76a_q                        0x0000555834288421 <unavailable> + 5153\n5    libc.so.6                          0x00002ad605db2460 __libc_start_main + 245\n6    tmpovf76a_q                        0x0000555834288059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var max_sum = dp[index]\n    for i in index+1..<k {\n        max_sum += a[i]\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpt_03ibjl/tmpt_03ibjl.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba4d96bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba4d662b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba4d662988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba4d6617b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt_03ibjl                        0x0000559afffbc661 <unavailable> + 5729\n5    libc.so.6                          0x00002aba4db57460 __libc_start_main + 245\n6    tmpt_03ibjl                        0x0000559afffbc299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if k > index {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpg767zo50/tmpg767zo50.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa4caa4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa4c79bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa4c79b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa4c79a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg767zo50                        0x000056377d5b6421 <unavailable> + 5153\n5    libc.so.6                          0x00002baa4cc90460 __libc_start_main + 245\n6    tmpg767zo50                        0x000056377d5b6059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpw1wyzp7d/tmpw1wyzp7d.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3f52e81c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3f52b78b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3f52b78988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3f52b777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw1wyzp7d                        0x0000559bfc9d2421 <unavailable> + 5153\n5    libc.so.6                          0x00002b3f5306d460 __libc_start_main + 245\n6    tmpw1wyzp7d                        0x0000559bfc9d2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    for i in index + 1..<k {\n        if a[i] > a[index] {\n            max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: i, k: k))\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpdu7a76hf/tmpdu7a76hf.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acbee900c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acbee5f7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acbee5f7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acbee5f67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdu7a76hf                        0x0000564dd6cdf5a1 <unavailable> + 5537\n5    libc.so.6                          0x00002acbeeaec460 __libc_start_main + 245\n6    tmpdu7a76hf                        0x0000564dd6cdf1d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            let sum = max_sum_increasing_subseq(a: a, n: n, index: i+1, k: k)\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    \n    return a[index] + max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpe25ox1qq/tmpe25ox1qq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af78bd88c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af78ba7fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af78ba7f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af78ba7e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe25ox1qq                        0x00005573aeeb7511 <unavailable> + 5393\n5    libc.so.6                          0x00002af78bf74460 __libc_start_main + 245\n6    tmpe25ox1qq                        0x00005573aeeb7149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<k {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i+1, k: k))\n        }\n    }\n    return max_sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpvbekpuqr/tmpvbekpuqr.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b73a6a23c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b73a671ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b73a671a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b73a67197b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvbekpuqr                        0x00005569988765a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b73a6c0f460 __libc_start_main + 245\n6    tmpvbekpuqr                        0x00005569988761d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpovf76a_q/tmpovf76a_q.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad605bc6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad6058bdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad6058bd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad6058bc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpovf76a_q                        0x0000555834288421 <unavailable> + 5153\n5    libc.so.6                          0x00002ad605db2460 __libc_start_main + 245\n6    tmpovf76a_q                        0x0000555834288059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            sum = max(sum, max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: k))\n        }\n    }\n    return sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpzzex7a6q/tmpzzex7a6q.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad815843c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad81553ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad81553a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad8155397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzzex7a6q                        0x0000557b95d715a1 <unavailable> + 5537\n5    libc.so.6                          0x00002ad815a2f460 __libc_start_main + 245\n6    tmpzzex7a6q                        0x0000557b95d711d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] && j < k {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    return dp[index]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpqhw2lwl0/tmpqhw2lwl0.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b86d3212c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b86d2f09b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b86d2f09988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b86d2f087b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqhw2lwl0                        0x00005558ba7a6661 <unavailable> + 5729\n5    libc.so.6                          0x00002b86d33fe460 __libc_start_main + 245\n6    tmpqhw2lwl0                        0x00005558ba7a6299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if a[index] < a[k] {\n        sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    sum = max(sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmp0n9gxhmi/tmp0n9gxhmi.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b510c8c2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b510c5b9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b510c5b9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b510c5b87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0n9gxhmi                        0x000055717c146421 <unavailable> + 5153\n5    libc.so.6                          0x00002b510caae460 __libc_start_main + 245\n6    tmp0n9gxhmi                        0x000055717c146059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var result = 0\n    for i in 0..<index {\n        if a[i] < a[k] {\n            result = max(result, dp[i])\n        }\n    }\n    return result + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpixup_rxw/tmpixup_rxw.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7280f26c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7280c1db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7280c1d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7280c1c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpixup_rxw                        0x000055cf3e372755 <unavailable> + 5973\n5    libc.so.6                          0x00002b7281112460 __libc_start_main + 245\n6    tmpixup_rxw                        0x000055cf3e372299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp70ayonys/tmp70ayonys.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abeaac29c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abeaa920b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abeaa920988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abeaa91f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp70ayonys                        0x0000562bb9a78421 <unavailable> + 5153\n5    libc.so.6                          0x00002abeaae15460 __libc_start_main + 245\n6    tmp70ayonys                        0x0000562bb9a78059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1), a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index + 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmp5e5mxmd6/tmp5e5mxmd6.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba79ce84c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba79cb7bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba79cb7b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba79cb7a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5e5mxmd6                        0x000055b686214421 <unavailable> + 5153\n5    libc.so.6                          0x00002ba79d070460 __libc_start_main + 245\n6    tmp5e5mxmd6                        0x000055b686214059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        sum = max(sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpzq3bctxk/tmpzq3bctxk.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4045c34c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b404592bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b404592b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b404592a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzq3bctxk                        0x00005610ec0b8421 <unavailable> + 5153\n5    libc.so.6                          0x00002b4045e20460 __libc_start_main + 245\n6    tmpzq3bctxk                        0x00005610ec0b8059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp70ayonys/tmp70ayonys.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abeaac29c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abeaa920b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abeaa920988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abeaa91f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp70ayonys                        0x0000562bb9a78421 <unavailable> + 5153\n5    libc.so.6                          0x00002abeaae15460 __libc_start_main + 245\n6    tmp70ayonys                        0x0000562bb9a78059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: k, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    \n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpge47wjog/tmpge47wjog.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b815c42cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b815c123b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b815c123988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b815c1227b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpge47wjog                        0x000055bb8979c421 <unavailable> + 5153\n5    libc.so.6                          0x00002b815c618460 __libc_start_main + 245\n6    tmpge47wjog                        0x000055bb8979c059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if a[index] < a[k] {\n        sum = max(sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmp6m6sb38f/tmp6m6sb38f.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8c06b40c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8c06837b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8c06837988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8c068367b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6m6sb38f                        0x000055889f20c421 <unavailable> + 5153\n5    libc.so.6                          0x00002b8c06d2c460 __libc_start_main + 245\n6    tmp6m6sb38f                        0x000055889f20c059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpw1wyzp7d/tmpw1wyzp7d.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3f52e81c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3f52b78b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3f52b78988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3f52b777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw1wyzp7d                        0x0000559bfc9d2421 <unavailable> + 5153\n5    libc.so.6                          0x00002b3f5306d460 __libc_start_main + 245\n6    tmpw1wyzp7d                        0x0000559bfc9d2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    if k == n {\n        return 0\n    }\n    \n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    \n    if a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    }\n    \n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpet4t58gy/tmpet4t58gy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1d9fa7ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1d9f771b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1d9f771988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1d9f7707b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpet4t58gy                        0x0000560ac84bf421 <unavailable> + 5153\n5    libc.so.6                          0x00002b1d9fc66460 __libc_start_main + 245\n6    tmpet4t58gy                        0x0000560ac84bf059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var res = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if a[index] < a[k] {\n        res = max(res, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpgs9ixbs4/tmpgs9ixbs4.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aed5fccfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aed5f9c6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aed5f9c6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aed5f9c57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgs9ixbs4                        0x0000555e200d4421 <unavailable> + 5153\n5    libc.so.6                          0x00002aed5febb460 __libc_start_main + 245\n6    tmpgs9ixbs4                        0x0000555e200d4059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    var sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            sum = max(sum, max_sum_increasing_subseq(a: a, n: n, index: i+1, k: k))\n        }\n    }\n    return sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmp747n53q7/tmp747n53q7.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b13c17fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b13c14f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b13c14f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b13c14f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp747n53q7                        0x0000563416a075a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b13c19e6460 __libc_start_main + 245\n6    tmp747n53q7                        0x0000563416a071d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index) + a[index])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmp6vuzzdg0/tmp6vuzzdg0.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a6d032c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a6cd29b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a6cd29988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a6cd287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6vuzzdg0                        0x000055af8a3f0421 <unavailable> + 5153\n5    libc.so.6                          0x00002b9a6d21e460 __libc_start_main + 245\n6    tmp6vuzzdg0                        0x000055af8a3f0059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpw1wyzp7d/tmpw1wyzp7d.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3f52e81c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3f52b78b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3f52b78988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3f52b777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw1wyzp7d                        0x0000559bfc9d2421 <unavailable> + 5153\n5    libc.so.6                          0x00002b3f5306d460 __libc_start_main + 245\n6    tmpw1wyzp7d                        0x0000559bfc9d2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp5r9nk8uz/tmp5r9nk8uz.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac1b2020c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac1b1d17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac1b1d17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac1b1d167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5r9nk8uz                        0x0000562bb116a421 <unavailable> + 5153\n5    libc.so.6                          0x00002ac1b220c460 __libc_start_main + 245\n6    tmp5r9nk8uz                        0x0000562bb116a059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: i) + a[i])\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpox6nw5f8/tmpox6nw5f8.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b11b5bc2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b11b58b9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b11b58b9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b11b58b87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpox6nw5f8                        0x000055c9051515a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b11b5dae460 __libc_start_main + 245\n6    tmpox6nw5f8                        0x000055c9051511d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if index > k {\n        return 0\n    }\n    var sum = 0\n    if k == index + 1 {\n        sum = a[index]\n    }\n    return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), sum + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpxwjlkgtg/tmpxwjlkgtg.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6876075c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6875d6cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6875d6c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6875d6b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxwjlkgtg                        0x0000564f5a529421 <unavailable> + 5153\n5    libc.so.6                          0x00002b6876261460 __libc_start_main + 245\n6    tmpxwjlkgtg                        0x0000564f5a529059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpml6gettu/tmpml6gettu.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aedaa2f1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeda9fe8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeda9fe8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeda9fe77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpml6gettu                        0x0000555563781421 <unavailable> + 5153\n5    libc.so.6                          0x00002aedaa4dd460 __libc_start_main + 245\n6    tmpml6gettu                        0x0000555563781059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max = 0\n    for i in 0..<index {\n        if dp[i] > max {\n            max = dp[i]\n        }\n    }\n    return max + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpcdke43g_/tmpcdke43g_.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32bb1f5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32baeecb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32baeec988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32baeeb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcdke43g_                        0x000055b009a675d1 <unavailable> + 5585\n5    libc.so.6                          0x00002b32bb3e1460 __libc_start_main + 245\n6    tmpcdke43g_                        0x000055b009a67209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1), a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmp_quxh_it/tmp_quxh_it.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b17247c0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b17244b7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b17244b7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b17244b67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_quxh_it                        0x0000562f8824e421 <unavailable> + 5153\n5    libc.so.6                          0x00002b17249ac460 __libc_start_main + 245\n6    tmp_quxh_it                        0x0000562f8824e059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpw1wyzp7d/tmpw1wyzp7d.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3f52e81c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3f52b78b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3f52b78988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3f52b777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw1wyzp7d                        0x0000559bfc9d2421 <unavailable> + 5153\n5    libc.so.6                          0x00002b3f5306d460 __libc_start_main + 245\n6    tmpw1wyzp7d                        0x0000559bfc9d2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpml6gettu/tmpml6gettu.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aedaa2f1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeda9fe8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeda9fe8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeda9fe77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpml6gettu                        0x0000555563781421 <unavailable> + 5153\n5    libc.so.6                          0x00002aedaa4dd460 __libc_start_main + 245\n6    tmpml6gettu                        0x0000555563781059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max = dp[index]\n    for i in index+1..<k {\n        if max < dp[i] {\n            max = dp[i]\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmppcxfcwgd/tmppcxfcwgd.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2dc75a7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2dc729eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2dc729e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2dc729d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcxfcwgd                        0x0000555ded5df5d1 <unavailable> + 5585\n5    libc.so.6                          0x00002b2dc7793460 __libc_start_main + 245\n6    tmppcxfcwgd                        0x0000555ded5df209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: i) + a[i])\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpox6nw5f8/tmpox6nw5f8.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b11b5bc2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b11b58b9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b11b58b9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b11b58b87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpox6nw5f8                        0x000055c9051515a1 <unavailable> + 5537\n5    libc.so.6                          0x00002b11b5dae460 __libc_start_main + 245\n6    tmpox6nw5f8                        0x000055c9051511d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var ans = 0\n    if k == index {\n        ans = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    } else {\n        ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpzfkh7_pd/tmpzfkh7_pd.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7f20f9fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7f20c96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7f20c96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7f20c957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzfkh7_pd                        0x000056105ba45391 <unavailable> + 5009\n5    libc.so.6                          0x00002b7f2118b460 __libc_start_main + 245\n6    tmpzfkh7_pd                        0x000056105ba44fc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp8cxr68kk/tmp8cxr68kk.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acbfcbcec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acbfc8c5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acbfc8c5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acbfc8c47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8cxr68kk                        0x000055f0477ad421 <unavailable> + 5153\n5    libc.so.6                          0x00002acbfcdba460 __libc_start_main + 245\n6    tmp8cxr68kk                        0x000055f0477ad059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k == index + 1 {\n        sum = a[index]\n    }\n    return max(sum + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmp9h6c3mj5/tmp9h6c3mj5.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4bb6bd7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4bb68ceb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4bb68ce988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4bb68cd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9h6c3mj5                        0x0000560b4e51e421 <unavailable> + 5153\n5    libc.so.6                          0x00002b4bb6dc3460 __libc_start_main + 245\n6    tmp9h6c3mj5                        0x0000560b4e51e059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max_sum = 0\n    for i in index..<k {\n        max_sum = max(max_sum, dp[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpqx_l381j/tmpqx_l381j.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b100f05bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b100ed52b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b100ed52988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b100ed517b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqx_l381j                        0x0000556d30137661 <unavailable> + 5729\n5    libc.so.6                          0x00002b100f247460 __libc_start_main + 245\n6    tmpqx_l381j                        0x0000556d30137299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    if a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpvzurz9ua/tmpvzurz9ua.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2a177d6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2a174cdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2a174cd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2a174cc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvzurz9ua                        0x000055b262856421 <unavailable> + 5153\n5    libc.so.6                          0x00002b2a179c2460 __libc_start_main + 245\n6    tmpvzurz9ua                        0x000055b262856059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[i] > a[j] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var max_sum = 0\n    for i in 0..<index {\n        if a[k] > a[i] {\n            max_sum = max(max_sum, dp[i])\n        }\n    }\n    return max_sum + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpnaiva55u/tmpnaiva55u.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1721a88c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b172177fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b172177f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b172177e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnaiva55u                        0x000055780023d755 <unavailable> + 5973\n5    libc.so.6                          0x00002b1721c74460 __libc_start_main + 245\n6    tmpnaiva55u                        0x000055780023d299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var including = 0\n    if k == index + 1 {\n        including = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    let excluding = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(including, excluding)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpov94btdm/tmpov94btdm.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aefadaa1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aefad798b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aefad798988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aefad7977b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpov94btdm                        0x000055cb10209421 <unavailable> + 5153\n5    libc.so.6                          0x00002aefadc8d460 __libc_start_main + 245\n6    tmpov94btdm                        0x000055cb10209059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: k, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmputls_nss/tmputls_nss.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad45eb5fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad45e856b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad45e856988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad45e8557b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmputls_nss                        0x0000564d9c67b421 <unavailable> + 5153\n5    libc.so.6                          0x00002ad45ed4b460 __libc_start_main + 245\n6    tmputls_nss                        0x0000564d9c67b059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    if k == n {\n        return 0\n    }\n    \n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    \n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    \n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmppt3sv7on/tmppt3sv7on.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2395f96c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2395c8db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2395c8d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2395c8c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppt3sv7on                        0x000055c47f562421 <unavailable> + 5153\n5    libc.so.6                          0x00002b2396182460 __libc_start_main + 245\n6    tmppt3sv7on                        0x000055c47f562059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1))\n    } else {\n        return max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpt0i4o04a/tmpt0i4o04a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b037b89fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b037b596b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b037b596988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b037b5957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt0i4o04a                        0x000055a55fcae421 <unavailable> + 5153\n5    libc.so.6                          0x00002b037ba8b460 __libc_start_main + 245\n6    tmpt0i4o04a                        0x000055a55fcae059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index) + a[index])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmp6vuzzdg0/tmp6vuzzdg0.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a6d032c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a6cd29b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a6cd29988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a6cd287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6vuzzdg0                        0x000055af8a3f0421 <unavailable> + 5153\n5    libc.so.6                          0x00002b9a6d21e460 __libc_start_main + 245\n6    tmp6vuzzdg0                        0x000055af8a3f0059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max = 0\n    for i in 0..<index {\n        if max < dp[i] {\n            max = dp[i]\n        }\n    }\n    return max + a[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmptzeailzu/tmptzeailzu.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b422f28ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b422ef85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b422ef85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b422ef847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptzeailzu                        0x000055a9d9ed95d1 <unavailable> + 5585\n5    libc.so.6                          0x00002b422f47a460 __libc_start_main + 245\n6    tmptzeailzu                        0x000055a9d9ed9209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    }\n    return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmp5628vxql/tmp5628vxql.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5471998c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b547168fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b547168f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b547168e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5628vxql                        0x000055e5ca186421 <unavailable> + 5153\n5    libc.so.6                          0x00002b5471b84460 __libc_start_main + 245\n6    tmp5628vxql                        0x000055e5ca186059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: k, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    \n    return max(include, exclude)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpge47wjog/tmpge47wjog.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b815c42cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b815c123b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b815c123988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b815c1227b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpge47wjog                        0x000055bb8979c421 <unavailable> + 5153\n5    libc.so.6                          0x00002b815c618460 __libc_start_main + 245\n6    tmpge47wjog                        0x000055bb8979c059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var incl = 0\n    if k == index + 1 {\n        incl = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    let excl = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(incl, excl)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmp0ueq_hf_/tmp0ueq_hf_.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba41e18bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba41de82b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba41de82988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba41de817b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0ueq_hf_                        0x000055b365ffd421 <unavailable> + 5153\n5    libc.so.6                          0x00002ba41e377460 __libc_start_main + 245\n6    tmp0ueq_hf_                        0x000055b365ffd059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var max_sum = dp[index]\n    for i in index+1..<k {\n        max_sum += a[i]\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpt_03ibjl/tmpt_03ibjl.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba4d96bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba4d662b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aba4d662988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aba4d6617b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt_03ibjl                        0x0000559afffbc661 <unavailable> + 5729\n5    libc.so.6                          0x00002aba4db57460 __libc_start_main + 245\n6    tmpt_03ibjl                        0x0000559afffbc299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp8cxr68kk/tmp8cxr68kk.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acbfcbcec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acbfc8c5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acbfc8c5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acbfc8c47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8cxr68kk                        0x000055f0477ad421 <unavailable> + 5153\n5    libc.so.6                          0x00002acbfcdba460 __libc_start_main + 245\n6    tmp8cxr68kk                        0x000055f0477ad059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpuar6eyj1/tmpuar6eyj1.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5751e8ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5751b85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5751b85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5751b847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuar6eyj1                        0x000055614a2f4421 <unavailable> + 5153\n5    libc.so.6                          0x00002b575207a460 __libc_start_main + 245\n6    tmpuar6eyj1                        0x000055614a2f4059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var max_sum = 0\n    for i in 0..<n {\n        if i < index {\n            max_sum = max(max_sum, dp[i])\n        } else if i == index {\n            max_sum = max(max_sum, dp[i] - a[i])\n        } else if i == k {\n            max_sum = max(max_sum, dp[i] + a[index])\n        } else {\n            max_sum = max(max_sum, dp[i])\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpm1p10_38/tmpm1p10_38.swift:43: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d6a05cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d69d53b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d69d53988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d69d527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm1p10_38                        0x0000559973bc0661 <unavailable> + 5729\n5    libc.so.6                          0x00002b7d6a248460 __libc_start_main + 245\n6    tmpm1p10_38                        0x0000559973bc0299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    if a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "tmpy_jp2tqn/tmpy_jp2tqn.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0d4d5e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0d4d2e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0d4d2e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0d4d2df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy_jp2tqn                        0x00005585fec09421 <unavailable> + 5153\n5    libc.so.6                          0x00002b0d4d7d5460 __libc_start_main + 245\n6    tmpy_jp2tqn                        0x00005585fec09059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}