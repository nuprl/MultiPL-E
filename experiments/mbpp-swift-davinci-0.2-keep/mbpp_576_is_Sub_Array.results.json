{
  "name": "mbpp_576_is_Sub_Array",
  "language": "swift",
  "prompt": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    if A.count < B.count {\n        return false\n    }\n    for i in 0...A.count - B.count {\n        var j = 0\n        while j < B.count && A[i + j] == B[j] {\n            j += 1\n        }\n        if j == B.count {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var flag = false\n    for i in 0..<A.count {\n        for j in 0..<B.count {\n            if A[i] == B[j] {\n                flag = true\n            }\n            else {\n                flag = false\n            }\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "tmplw3nwej4/tmplw3nwej4.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aafbdd81c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aafbda78b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aafbda78988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aafbda777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplw3nwej4                        0x00005653f306d622 <unavailable> + 5666\n5    libc.so.6                          0x00002aafbdf6d460 __libc_start_main + 245\n6    tmplw3nwej4                        0x00005653f306d019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n        if j == B.count {\n            flag = true\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n        if j == B.count {\n            flag = true\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = 1\n            break\n        }\n    }\n    if flag == 1 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            j += 1\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    let len_A = A.count\n    let len_B = B.count\n    \n    if len_B > len_A {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    \n    while i < len_A && j < len_B {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    \n    if j == len_B {\n        return true\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "tmplw3nwej4/tmplw3nwej4.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aafbdd81c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aafbda78b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aafbda78988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aafbda777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplw3nwej4                        0x00005653f306d622 <unavailable> + 5666\n5    libc.so.6                          0x00002aafbdf6d460 __libc_start_main + 245\n6    tmplw3nwej4                        0x00005653f306d019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "tmplw3nwej4/tmplw3nwej4.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aafbdd81c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aafbda78b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aafbda78988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aafbda777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplw3nwej4                        0x00005653f306d622 <unavailable> + 5666\n5    libc.so.6                          0x00002aafbdf6d460 __libc_start_main + 245\n6    tmplw3nwej4                        0x00005653f306d019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "tmplw3nwej4/tmplw3nwej4.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aafbdd81c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aafbda78b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aafbda78988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aafbda777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplw3nwej4                        0x00005653f306d622 <unavailable> + 5666\n5    libc.so.6                          0x00002aafbdf6d460 __libc_start_main + 245\n6    tmplw3nwej4                        0x00005653f306d019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var is_Sub_Array = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        is_Sub_Array = true\n    }\n    return is_Sub_Array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var is_Sub_Array = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        is_Sub_Array = true\n    }\n    return is_Sub_Array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "tmplw3nwej4/tmplw3nwej4.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aafbdd81c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aafbda78b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aafbda78988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aafbda777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplw3nwej4                        0x00005653f306d622 <unavailable> + 5666\n5    libc.so.6                          0x00002aafbdf6d460 __libc_start_main + 245\n6    tmplw3nwej4                        0x00005653f306d019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n        if j == B.count {\n            flag = true\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var result = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n        if j == B.count {\n            result = true\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var result = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        result = true\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n        if j == B.count {\n            flag = true\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var is_Sub_Array = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        is_Sub_Array = true\n    }\n    return is_Sub_Array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    let m = A.count\n    let n = B.count\n    while i < m && j < n {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == n {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = 1\n        } else {\n            i += 1\n            flag = 0\n        }\n    }\n    if flag == 1 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "tmp1exl6xaz/tmp1exl6xaz.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afa8cbdcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afa8c8d3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afa8c8d3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afa8c8d27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1exl6xaz                        0x000055f1aac14622 <unavailable> + 5666\n5    libc.so.6                          0x00002afa8cdc8460 __libc_start_main + 245\n6    tmp1exl6xaz                        0x000055f1aac14019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    if A.count > B.count {\n        return false\n    }\n    for i in 0..<B.count {\n        if A[0] == B[i] {\n            var j = 0\n            while j < A.count && i+j < B.count && A[j] == B[i+j] {\n                j += 1\n            }\n            if j == A.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    let lenA = A.count\n    let lenB = B.count\n    var i = 0\n    var j = 0\n    while i < lenA && j < lenB {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == lenB {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    let len_A = A.count\n    let len_B = B.count\n    if len_A > len_B {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < len_A && j < len_B {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = 0\n            j += 1\n        }\n    }\n    if i == len_A {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var is_Sub_Array = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        is_Sub_Array = true\n    }\n    return is_Sub_Array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var is_Sub_Array = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        is_Sub_Array = true\n    }\n    return is_Sub_Array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var isSubArray = false\n    for i in 0..<A.count {\n        var j = 0\n        while j < B.count && i + j < A.count && A[i + j] == B[j] {\n            j += 1\n        }\n        if j == B.count {\n            isSubArray = true\n        }\n    }\n    return isSubArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    if A.count > B.count {\n        return false\n    }\n    for i in 0...B.count - A.count {\n        var j = 0\n        while j < A.count {\n            if B[i + j] != A[j] {\n                break\n            }\n            j += 1\n        }\n        if j == A.count {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var is_Sub_Array = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        is_Sub_Array = true\n    }\n    return is_Sub_Array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var flag = false\n    for i in 0..<A.count {\n        if A[i] == B[0] {\n            flag = true\n            for j in 0..<B.count {\n                if A[i + j] != B[j] {\n                    flag = false\n                    break\n                }\n            }\n            if flag {\n                break\n            }\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa055b2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa052a9561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002baa052a9286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002baa052a913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002baa052a8bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002baa050a9e83 <unavailable> + 188035\n6    tmp1vxs_59h                        0x00005574c9e12af6 <unavailable> + 6902\n7    tmp1vxs_59h                        0x00005574c9e12718 <unavailable> + 5912\n8    libc.so.6                          0x00002baa0579e460 __libc_start_main + 245\n9    tmp1vxs_59h                        0x00005574c9e121a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] != B[j] {\n            i = i - j + 1\n            j = 0\n        } else {\n            i += 1\n            j += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var result = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        result = true\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var is_Sub = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        is_Sub = true\n    }\n    return is_Sub\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var isSubArray = false\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        isSubArray = true\n    }\n    return isSubArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var isSubArray = false\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        isSubArray = true\n    }\n    return isSubArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = 1\n            break\n        }\n    }\n    if flag == 1 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var found = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n        if j == B.count {\n            found = true\n            break\n        }\n    }\n    return found\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    if B.count > A.count {\n        return false\n    }\n    for i in 0...(A.count - B.count) {\n        if A[i] == B[0] {\n            var j = 0\n            while j < B.count {\n                if A[i + j] != B[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == B.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = 1\n            break\n        }\n    }\n    if flag == 1 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    let m = A.count\n    let n = B.count\n    while i < m && j < n {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == n {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "tmplw3nwej4/tmplw3nwej4.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aafbdd81c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aafbda78b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aafbda78988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aafbda777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplw3nwej4                        0x00005653f306d622 <unavailable> + 5666\n5    libc.so.6                          0x00002aafbdf6d460 __libc_start_main + 245\n6    tmplw3nwej4                        0x00005653f306d019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var is_Sub_Array = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        is_Sub_Array = true\n    }\n    return is_Sub_Array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = 1\n            break\n        }\n    }\n    if flag == 1 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    let n = A.count\n    let m = B.count\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == m {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n        if j == B.count {\n            flag = true\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var isSubArray = false\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        isSubArray = true\n    }\n    return isSubArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var result = false\n    for i in 0..<A.count {\n        if A[i] == B[0] {\n            var j = 0\n            while j < B.count && i + j < A.count {\n                if A[i + j] != B[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == B.count {\n                result = true\n                break\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var result = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        result = true\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n        if j == B.count {\n            flag = true\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var result = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n        if j == B.count {\n            result = true\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var result = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n        if j == B.count {\n            result = true\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            j = 0\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "tmpt4z37s6w/tmpt4z37s6w.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4b0457ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4b04275b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4b04275988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4b042747b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt4z37s6w                        0x0000562067492622 <unavailable> + 5666\n5    libc.so.6                          0x00002b4b0476a460 __libc_start_main + 245\n6    tmpt4z37s6w                        0x0000562067492019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var result = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        result = true\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    if A.count > B.count {\n        return false\n    }\n    for i in 0...(B.count - A.count) {\n        if A == Array(B[i..<(i + A.count)]) {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    let n = A.count\n    let m = B.count\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == m {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var isSubArray = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            isSubArray = true\n        } else {\n            i += 1\n            j = 0\n            isSubArray = false\n        }\n    }\n    return isSubArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "tmp24seohbq/tmp24seohbq.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb3a879c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb3a570b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeb3a570988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeb3a56f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp24seohbq                        0x0000558b973e0622 <unavailable> + 5666\n5    libc.so.6                          0x00002aeb3aa65460 __libc_start_main + 245\n6    tmp24seohbq                        0x0000558b973e0019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var is_Sub_Array = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        is_Sub_Array = true\n    }\n    return is_Sub_Array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var result = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        result = true\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var result = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        result = true\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var is_Sub = false\n    for i in 0..<A.count {\n        if A[i] == B[0] {\n            is_Sub = true\n            for j in 0..<B.count {\n                if A[i+j] != B[j] {\n                    is_Sub = false\n                    break\n                }\n            }\n        }\n    }\n    return is_Sub\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b79815c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b7950c561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b9b7950c286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b9b7950c13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b9b7950bbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b9b7930ce83 <unavailable> + 188035\n6    tmp2wj4uh6b                        0x000055c50a418af6 <unavailable> + 6902\n7    tmp2wj4uh6b                        0x000055c50a418602 <unavailable> + 5634\n8    libc.so.6                          0x00002b9b79a01460 __libc_start_main + 245\n9    tmp2wj4uh6b                        0x000055c50a4181a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "tmplw3nwej4/tmplw3nwej4.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aafbdd81c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aafbda78b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aafbda78988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aafbda777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplw3nwej4                        0x00005653f306d622 <unavailable> + 5666\n5    libc.so.6                          0x00002aafbdf6d460 __libc_start_main + 245\n6    tmplw3nwej4                        0x00005653f306d019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var result = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        result = true\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = 1\n            break\n        }\n    }\n    return flag == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var result = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        result = true\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}