{
  "name": "mbpp_643_text_match_wordz_middle",
  "language": "swift",
  "prompt": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp19z_3e6u.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp19z_3e6u.swift:4:72: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n                                                                      ~^~~~~~~~~~~~~~~\n/tmp/tmp19z_3e6u.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\")\n    return regex.matches(in: text, range: NSRange(location: 0, length: text.utf16.count)).count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpfyrhs0nj.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\")\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpfyrhs0nj.swift:5:43: error: cannot find 'NSRange' in scope\n    return regex.matches(in: text, range: NSRange(location: 0, length: text.utf16.count)).count > 0\n                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpcay2qouk.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpcay2qouk.swift:4:72: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n                                                                      ~^~~~~~~~~~~~~~~\n/tmp/tmpcay2qouk.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp9qprbj9h.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n           ~~~~ ^~~~~\n/tmp/tmp9qprbj9h.swift:4:47: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                         ~~~~ ^~~~~\n/tmp/tmp9qprbj9h.swift:4:89: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                                                                   ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[^z].*z.*[^z]$\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1ukfnsen.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[^z].*z.*[^z]$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp1ukfnsen.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"(^z|z$|[^a-z]z[^a-z])\", options: [.caseInsensitive])\n    return regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count)).count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp_tka_4ha.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"(^z|z$|[^a-z]z[^a-z])\", options: [.caseInsensitive])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_tka_4ha.swift:4:87: error: reference to member 'caseInsensitive' cannot be resolved without a contextual type\n    let regex = try! NSRegularExpression(pattern: \"(^z|z$|[^a-z]z[^a-z])\", options: [.caseInsensitive])\n                                                                                      ^\n/tmp/tmp_tka_4ha.swift:5:56: error: cannot find 'NSRange' in scope\n    return regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count)).count == 0\n                                                       ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\")\n    return regex.matches(in: text, range: NSRange(location: 0, length: text.utf16.count)).count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpfyrhs0nj.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\")\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpfyrhs0nj.swift:5:43: error: cannot find 'NSRange' in scope\n    return regex.matches(in: text, range: NSRange(location: 0, length: text.utf16.count)).count > 0\n                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp15jvd1yk.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp15jvd1yk.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp9qprbj9h.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n           ~~~~ ^~~~~\n/tmp/tmp9qprbj9h.swift:4:47: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                         ~~~~ ^~~~~\n/tmp/tmp9qprbj9h.swift:4:89: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                                                                   ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\") != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp18yx9s_6.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil\n           ~~~~ ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpool3xrgm.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpool3xrgm.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpcrnf34r1.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil\n           ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let pattern = \"\\\\Bz\\\\B\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpg1npjjrl.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpg1npjjrl.swift:6:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil && text.range(of: \"^z\") == nil && text.range(of: \"z$\") == nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpt94ifww2.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"^z\") == nil && text.range(of: \"z$\") == nil\n           ~~~~ ^~~~~\n/tmp/tmpt94ifww2.swift:4:47: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"^z\") == nil && text.range(of: \"z$\") == nil\n                                         ~~~~ ^~~~~\n/tmp/tmpt94ifww2.swift:4:78: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"^z\") == nil && text.range(of: \"z$\") == nil\n                                                                        ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let pattern = \"\\\\b[^z]*z[^z]*\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp9rafg_qe.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp9rafg_qe.swift:6:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "/tmp/tmpya64x43q.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpya64x43q.swift:4:82: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: .caseInsensitive)\n                                                                                ~^~~~~~~~~~~~~~~\n/tmp/tmpya64x43q.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp9qprbj9h.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n           ~~~~ ^~~~~\n/tmp/tmp9qprbj9h.swift:4:47: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                         ~~~~ ^~~~~\n/tmp/tmp9qprbj9h.swift:4:89: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                                                                   ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression, range: nil, locale: nil) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmp596yfpr_.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression, range: nil, locale: nil) != nil\n           ~~~~ ^~~~~\n/tmp/tmp596yfpr_.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression, range: nil, locale: nil) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n/tmp/tmp596yfpr_.swift:4:68: error: 'nil' requires a contextual type\n    return text.range(of: \"z\", options: .regularExpression, range: nil, locale: nil) != nil\n                                                                   ^\n/tmp/tmp596yfpr_.swift:4:81: error: 'nil' requires a contextual type\n    return text.range(of: \"z\", options: .regularExpression, range: nil, locale: nil) != nil\n                                                                                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp15jvd1yk.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp15jvd1yk.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp15jvd1yk.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp15jvd1yk.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let pattern = \"\\\\b[^z]*z[^z]*\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n    return regex.firstMatch(in: text, options: [], range: range) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "/tmp/tmpx_y8mdhl.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpx_y8mdhl.swift:6:17: error: cannot find 'NSRange' in scope\n    let range = NSRange(location: 0, length: text.utf16.count)\n                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp15jvd1yk.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp15jvd1yk.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp3e7_4vz0.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp3e7_4vz0.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: Range(start: text.startIndex.advancedBy(1), end: text.endIndex.advancedBy(-1)), locale: nil) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "/tmp/tmpovbbdpcm.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: Range(start: text.startIndex.advancedBy(1), end: text.endIndex.advancedBy(-1)), locale: nil) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpovbbdpcm.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: Range(start: text.startIndex.advancedBy(1), end: text.endIndex.advancedBy(-1)), locale: nil) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpovbbdpcm.swift:4:141: error: extra argument 'end' in call\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: Range(start: text.startIndex.advancedBy(1), end: text.endIndex.advancedBy(-1)), locale: nil) != nil\n                                                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~\n/tmp/tmpovbbdpcm.swift:4:78: error: generic parameter 'Bound' could not be inferred\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: Range(start: text.startIndex.advancedBy(1), end: text.endIndex.advancedBy(-1)), locale: nil) != nil\n                                                                             ^\n/tmp/tmpovbbdpcm.swift:4:78: note: explicitly specify the generic arguments to fix this issue\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: Range(start: text.startIndex.advancedBy(1), end: text.endIndex.advancedBy(-1)), locale: nil) != nil\n                                                                             ^\n                                                                                  <<#Bound: Comparable#>>\n/tmp/tmpovbbdpcm.swift:4:107: error: value of type 'String.Index' has no member 'advancedBy'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: Range(start: text.startInde",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\b\", options: .caseInsensitive)\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "/tmp/tmphr1af7w8.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\b\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmphr1af7w8.swift:4:72: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\b\", options: .caseInsensitive)\n                                                                      ~^~~~~~~~~~~~~~~\n/tmp/tmphr1af7w8.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let pattern = \"\\\\b[^z]*z[^z]*\\\\b\"\n    return text.range(of: pattern, options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmppc3kpdea.swift:5:17: error: value of type 'String' has no member 'range'\n    return text.range(of: pattern, options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmppc3kpdea.swift:5:46: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: pattern, options: .regularExpression) != nil\n                                            ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpcrnf34r1.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil\n           ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: Range(start: text.startIndex.advancedBy(1), end: text.endIndex.advancedBy(-1)), locale: nil) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "/tmp/tmpovbbdpcm.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: Range(start: text.startIndex.advancedBy(1), end: text.endIndex.advancedBy(-1)), locale: nil) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpovbbdpcm.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: Range(start: text.startIndex.advancedBy(1), end: text.endIndex.advancedBy(-1)), locale: nil) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpovbbdpcm.swift:4:141: error: extra argument 'end' in call\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: Range(start: text.startIndex.advancedBy(1), end: text.endIndex.advancedBy(-1)), locale: nil) != nil\n                                                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~\n/tmp/tmpovbbdpcm.swift:4:78: error: generic parameter 'Bound' could not be inferred\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: Range(start: text.startIndex.advancedBy(1), end: text.endIndex.advancedBy(-1)), locale: nil) != nil\n                                                                             ^\n/tmp/tmpovbbdpcm.swift:4:78: note: explicitly specify the generic arguments to fix this issue\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: Range(start: text.startIndex.advancedBy(1), end: text.endIndex.advancedBy(-1)), locale: nil) != nil\n                                                                             ^\n                                                                                  <<#Bound: Comparable#>>\n/tmp/tmpovbbdpcm.swift:4:107: error: value of type 'String.Index' has no member 'advancedBy'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: Range(start: text.startInde",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: nil, locale: nil) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpdpa7rblu.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: nil, locale: nil) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpdpa7rblu.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: nil, locale: nil) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdpa7rblu.swift:4:78: error: 'nil' requires a contextual type\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: nil, locale: nil) != nil\n                                                                             ^\n/tmp/tmpdpa7rblu.swift:4:91: error: 'nil' requires a contextual type\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: nil, locale: nil) != nil\n                                                                                          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp3e7_4vz0.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp3e7_4vz0.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpz0z2uql5.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpz0z2uql5.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp9qprbj9h.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n           ~~~~ ^~~~~\n/tmp/tmp9qprbj9h.swift:4:47: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                         ~~~~ ^~~~~\n/tmp/tmp9qprbj9h.swift:4:89: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                                                                   ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let pattern = \"\\\\b[^z]*z[^z]*\\\\b\"\n    return text.range(of: pattern, options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmppc3kpdea.swift:5:17: error: value of type 'String' has no member 'range'\n    return text.range(of: pattern, options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmppc3kpdea.swift:5:46: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: pattern, options: .regularExpression) != nil\n                                            ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: nil, locale: nil) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpdpa7rblu.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: nil, locale: nil) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpdpa7rblu.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: nil, locale: nil) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdpa7rblu.swift:4:78: error: 'nil' requires a contextual type\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: nil, locale: nil) != nil\n                                                                             ^\n/tmp/tmpdpa7rblu.swift:4:91: error: 'nil' requires a contextual type\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch, range: nil, locale: nil) != nil\n                                                                                          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "/tmp/tmp5sewvkr2.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5sewvkr2.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\")\n    return regex.matches(in: text, range: NSRange(location: 0, length: text.utf16.count)).count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpfyrhs0nj.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\")\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpfyrhs0nj.swift:5:43: error: cannot find 'NSRange' in scope\n    return regex.matches(in: text, range: NSRange(location: 0, length: text.utf16.count)).count > 0\n                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp15jvd1yk.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp15jvd1yk.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\")?.startIndex != text.startIndex && text.rangeOfString(\"z\")?.endIndex != text.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "/tmp/tmpkzlkx61b.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\")?.startIndex != text.startIndex && text.rangeOfString(\"z\")?.endIndex != text.endIndex\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpkzlkx61b.swift:4:75: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\")?.startIndex != text.startIndex && text.rangeOfString(\"z\")?.endIndex != text.endIndex\n                                                                     ~~~~ ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\")\n    let matches = regex.matches(in: text, range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "/tmp/tmp0p6o84s6.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\")\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0p6o84s6.swift:5:50: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, range: NSRange(location: 0, length: text.utf16.count))\n                                                 ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp15jvd1yk.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp15jvd1yk.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let pattern = \"\\\\b[^z]*z[^z]*\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp9rafg_qe.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp9rafg_qe.swift:6:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w+z\\\\b\", options: .caseInsensitive)\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "/tmp/tmp4xtpmbj2.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w+z\\\\b\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp4xtpmbj2.swift:4:77: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w+z\\\\b\", options: .caseInsensitive)\n                                                                           ~^~~~~~~~~~~~~~~\n/tmp/tmp4xtpmbj2.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpool3xrgm.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpool3xrgm.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: .reportCompletion, range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "/tmp/tmpl_azcmsd.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpl_azcmsd.swift:4:72: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n                                                                      ~^~~~~~~~~~~~~~~\n/tmp/tmpl_azcmsd.swift:5:78: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: .reportCompletion, range: NSRange(location: 0, length: text.utf16.count))\n                                                                             ^~~~~~~\n/tmp/tmpl_azcmsd.swift:5:53: error: cannot infer contextual base in reference to member 'reportCompletion'\n    let matches = regex.matches(in: text, options: .reportCompletion, range: NSRange(location: 0, length: text.utf16.count))\n                                                   ~^~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*z\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmp96n5ims4.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*z\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp96n5ims4.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let pattern = \"\\\\b[^z]*z[^z]*\\\\b\"\n    return text.range(of: pattern, options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmppc3kpdea.swift:5:17: error: value of type 'String' has no member 'range'\n    return text.range(of: pattern, options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmppc3kpdea.swift:5:46: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: pattern, options: .regularExpression) != nil\n                                            ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*z\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmp96n5ims4.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*z\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp96n5ims4.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[^z]*z[^z]*$\", options: .caseInsensitive)\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "/tmp/tmpudv4h77l.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[^z]*z[^z]*$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpudv4h77l.swift:4:78: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[^z]*z[^z]*$\", options: .caseInsensitive)\n                                                                            ~^~~~~~~~~~~~~~~\n/tmp/tmpudv4h77l.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp19z_3e6u.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp19z_3e6u.swift:4:72: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n                                                                      ~^~~~~~~~~~~~~~~\n/tmp/tmp19z_3e6u.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\b\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "/tmp/tmp1f_fnm14.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\b\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp1f_fnm14.swift:4:72: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\b\", options: .caseInsensitive)\n                                                                      ~^~~~~~~~~~~~~~~\n/tmp/tmp1f_fnm14.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp15jvd1yk.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp15jvd1yk.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*z\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "/tmp/tmpu46j5zrz.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*z\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpu46j5zrz.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\b\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "/tmp/tmp1f_fnm14.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\b\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp1f_fnm14.swift:4:72: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\b\", options: .caseInsensitive)\n                                                                      ~^~~~~~~~~~~~~~~\n/tmp/tmp1f_fnm14.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let pattern = \"\\\\b[^z]*z[^z]*\\\\b\"\n    return text.range(of: pattern, options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmppc3kpdea.swift:5:17: error: value of type 'String' has no member 'range'\n    return text.range(of: pattern, options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmppc3kpdea.swift:5:46: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: pattern, options: .regularExpression) != nil\n                                            ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "/tmp/tmp5sewvkr2.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5sewvkr2.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "/tmp/tmp7p1pk1ee.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmp7p1pk1ee.swift:4:51: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex\n                                             ~~~~ ^~~~~~~~~~~~~\n/tmp/tmp7p1pk1ee.swift:4:97: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex\n                                                                                           ~~~~ ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp9qprbj9h.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n           ~~~~ ^~~~~\n/tmp/tmp9qprbj9h.swift:4:47: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                         ~~~~ ^~~~~\n/tmp/tmp9qprbj9h.swift:4:89: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                                                                   ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let pattern = \"\\\\b[^z]*z[^z]*\\\\b\"\n    return text.range(of: pattern, options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmppc3kpdea.swift:5:17: error: value of type 'String' has no member 'range'\n    return text.range(of: pattern, options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmppc3kpdea.swift:5:46: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: pattern, options: .regularExpression) != nil\n                                            ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpcrnf34r1.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil\n           ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let pattern = \"\\\\b[^z]*z[^z]*\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n    let matches = regex.matches(in: text, options: [], range: range)\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "/tmp/tmpaipq3_9t.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpaipq3_9t.swift:6:17: error: cannot find 'NSRange' in scope\n    let range = NSRange(location: 0, length: text.utf16.count)\n                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp9qprbj9h.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n           ~~~~ ^~~~~\n/tmp/tmp9qprbj9h.swift:4:47: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                         ~~~~ ^~~~~\n/tmp/tmp9qprbj9h.swift:4:89: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                                                                   ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\") != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp18yx9s_6.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil\n           ~~~~ ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.numberOfMatches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmp59tl35rv.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp59tl35rv.swift:5:64: error: cannot find 'NSRange' in scope\n    return regex.numberOfMatches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) > 0\n                                                               ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let pattern = \"\\\\b[^z]*z[^z]*\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "/tmp/tmp0spscffq.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0spscffq.swift:6:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let pattern = \"\\\\b[^z]*z[^z]*\\\\b\"\n    return text.range(of: pattern, options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmppc3kpdea.swift:5:17: error: value of type 'String' has no member 'range'\n    return text.range(of: pattern, options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmppc3kpdea.swift:5:46: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: pattern, options: .regularExpression) != nil\n                                            ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpool3xrgm.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpool3xrgm.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpcrnf34r1.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil\n           ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpcrnf34r1.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil\n           ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: .caseInsensitive)\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "/tmp/tmpggo5kku_.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpggo5kku_.swift:4:82: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: .caseInsensitive)\n                                                                                ~^~~~~~~~~~~~~~~\n/tmp/tmpggo5kku_.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[^z].*[^z]$\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "/tmp/tmp7wd6s38q.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[^z].*[^z]$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp7wd6s38q.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpacze30a4.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpacze30a4.swift:4:72: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n                                                                      ~^~~~~~~~~~~~~~~\n/tmp/tmpacze30a4.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmp5j3im85i.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5j3im85i.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp3e7_4vz0.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp3e7_4vz0.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let pattern = \"\\\\b[^z]*z[^z]*\\\\b\"\n    return text.range(of: pattern, options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmppc3kpdea.swift:5:17: error: value of type 'String' has no member 'range'\n    return text.range(of: pattern, options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmppc3kpdea.swift:5:46: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: pattern, options: .regularExpression) != nil\n                                            ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpz0z2uql5.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpz0z2uql5.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpz0z2uql5.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpz0z2uql5.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[^z].*[^z]$\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "/tmp/tmp7wd6s38q.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[^z].*[^z]$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp7wd6s38q.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\") != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp18yx9s_6.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil\n           ~~~~ ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let pattern = \"\\\\b[^z]*z[^z]*\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp9rafg_qe.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp9rafg_qe.swift:6:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"(?<!^)z(?!$)\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "/tmp/tmpe37_36im.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"(?<!^)z(?!$)\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmpe37_36im.swift:4:53: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"(?<!^)z(?!$)\", options: .regularExpression) != nil\n                                                   ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpyxm82_6n.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpyxm82_6n.swift:4:51: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n                                             ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpyxm82_6n.swift:4:97: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n                                                                                           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpyxm82_6n.swift:4:133: error: value of type 'String.Index' has no member 'predecessor'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n                                                                                                                      ~~~~~~~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp15jvd1yk.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp15jvd1yk.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp15jvd1yk.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp15jvd1yk.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp15jvd1yk.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp15jvd1yk.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp3e7_4vz0.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp3e7_4vz0.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*z\\\\b\", options: .caseInsensitive)\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "/tmp/tmp9cseyy27.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*z\\\\b\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp9cseyy27.swift:4:77: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\w*z\\\\b\", options: .caseInsensitive)\n                                                                           ~^~~~~~~~~~~~~~~\n/tmp/tmp9cseyy27.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "/tmp/tmp5sewvkr2.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5sewvkr2.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpcrnf34r1.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil\n           ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp15jvd1yk.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp15jvd1yk.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpz0z2uql5.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpz0z2uql5.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[^z].*z.*[^z]$\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1ukfnsen.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[^z].*z.*[^z]$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp1ukfnsen.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let pattern = \"\\\\b[^z]*z[^z]*\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp9rafg_qe.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp9rafg_qe.swift:6:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpcu83hig9.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpcu83hig9.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpz0z2uql5.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpz0z2uql5.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp15jvd1yk.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp15jvd1yk.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp15jvd1yk.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp15jvd1yk.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpcu83hig9.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpcu83hig9.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[^z].*z.*[^z]$\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "/tmp/tmpqv9dmpi_.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[^z].*z.*[^z]$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpqv9dmpi_.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let pattern = \"\\\\b[^z]*z[^z]*\\\\b\"\n    return text.range(of: pattern, options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmppc3kpdea.swift:5:17: error: value of type 'String' has no member 'range'\n    return text.range(of: pattern, options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmppc3kpdea.swift:5:46: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: pattern, options: .regularExpression) != nil\n                                            ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpz0z2uql5.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpz0z2uql5.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.contains(\"z\") && !text.hasPrefix(\"z\") && !text.hasSuffix(\"z\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmpcu83hig9.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpcu83hig9.swift:5:59: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil\n                                                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\b\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "/tmp/tmp1f_fnm14.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\b\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp1f_fnm14.swift:4:72: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\b\", options: .caseInsensitive)\n                                                                      ~^~~~~~~~~~~~~~~\n/tmp/tmp1f_fnm14.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpwelc35rl.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpwelc35rl.swift:4:46: error: cannot infer contextual base in reference to member 'RegularExpressionSearch'\n    return text.rangeOfString(\"z\", options: .RegularExpressionSearch) != nil\n                                            ~^~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp15jvd1yk.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp15jvd1yk.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpcrnf34r1.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil\n           ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "/tmp/tmp901zjk2l.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp901zjk2l.swift:4:82: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: .caseInsensitive)\n                                                                                ~^~~~~~~~~~~~~~~\n/tmp/tmp901zjk2l.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let pattern = \"\\\\b[^z]*z[^z]*\\\\b\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp9rafg_qe.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp9rafg_qe.swift:6:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\b\", options: .caseInsensitive)\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "/tmp/tmp1gbtyubk.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\b\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp1gbtyubk.swift:4:72: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\bz\\\\b\", options: .caseInsensitive)\n                                                                      ~^~~~~~~~~~~~~~~\n/tmp/tmp1gbtyubk.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp9qprbj9h.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n           ~~~~ ^~~~~\n/tmp/tmp9qprbj9h.swift:4:47: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                         ~~~~ ^~~~~\n/tmp/tmp9qprbj9h.swift:4:89: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                                                                   ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n    return regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count)).count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123752,
      "stdout": "",
      "stderr": "/tmp/tmp2_z7wpd2.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp2_z7wpd2.swift:4:72: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: .caseInsensitive)\n                                                                      ~^~~~~~~~~~~~~~~\n/tmp/tmp2_z7wpd2.swift:5:56: error: cannot find 'NSRange' in scope\n    return regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count)).count > 0\n                                                       ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp1un6wpic.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n           ~~~~ ^~~~~\n/tmp/tmp1un6wpic.swift:4:42: error: cannot infer contextual base in reference to member 'regularExpression'\n    return text.range(of: \"z\", options: .regularExpression) != nil\n                                        ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpyxm82_6n.swift:4:17: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpyxm82_6n.swift:4:51: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n                                             ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpyxm82_6n.swift:4:97: error: value of type 'String' has no member 'rangeOfString'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n                                                                                           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpyxm82_6n.swift:4:133: error: value of type 'String.Index' has no member 'predecessor'\n    return text.rangeOfString(\"z\") != nil && text.rangeOfString(\"z\") != text.startIndex && text.rangeOfString(\"z\") != text.endIndex.predecessor()\n                                                                                                                      ~~~~~~~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp3e7_4vz0.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\b[^z]*z[^z]*\\\\b\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp3e7_4vz0.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp9qprbj9h.swift:4:17: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n           ~~~~ ^~~~~\n/tmp/tmp9qprbj9h.swift:4:47: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                         ~~~~ ^~~~~\n/tmp/tmp9qprbj9h.swift:4:89: error: value of type 'String' has no member 'range'\n    return text.range(of: \"z\") != nil && text.range(of: \"z\") != text.startIndex && text.range(of: \"z\") != text.endIndex\n                                                                                   ~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmp15jvd1yk.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp15jvd1yk.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1665510560,
      "stdout": "",
      "stderr": "/tmp/tmpzk20q9bs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzk20q9bs.swift:5:63: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n                                                              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\")\n    let matches = regex.matches(in: text, range: NSRange(text.startIndex..., in: text))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_wordz_middle(text: \"pythonzabc.\") == true)\nassert(text_match_wordz_middle(text: \"zxyabc.\") == false)\nassert(text_match_wordz_middle(text: \"  lang  .\") == false)",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "/tmp/tmplbnledsa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"\\\\Bz\\\\B\")\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmplbnledsa.swift:5:50: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: text, range: NSRange(text.startIndex..., in: text))\n                                                 ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}