{
  "name": "mbpp_803_is_perfect_square",
  "language": "swift",
  "prompt": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_803_is_perfect_square.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var result = 1\n    while result <= n {\n        i += 2\n        result += i\n        if result == n {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i < n {\n        i += 1\n    }\n    return i * i == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var result = 1\n    while result <= n {\n        i += 2\n        result += i\n        if result == n {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var num = 1\n    while num < n {\n        i += 2\n        num += i\n    }\n    return num == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        let sqr = mid * mid\n        if sqr == n {\n            return true\n        }\n        if sqr < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        let sq = mid * mid\n        if sq == n {\n            return true\n        } else if sq < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i*i <= n {\n        if i*i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var result = 1\n    while result < n {\n        i += 2\n        result += i\n    }\n    return result == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = i + (j - i) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var sum = 1\n    while sum < n {\n        i += 2\n        sum += i\n    }\n    return sum == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = i + (j - i) / 2\n        let sqr = mid * mid\n        if sqr == n {\n            return true\n        }\n        if sqr < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var result = 1\n    while result <= n {\n        i += 2\n        result += i\n        if result == n {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var result = 1\n    while result < n {\n        i += 2\n        result += i\n    }\n    return result == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i*i <= n {\n        if i*i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var result = 1\n    while result <= n {\n        i += 2\n        result += i\n        if result == n {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    \n    var i = 1\n    var result = 1\n    while result <= n {\n        i += 2\n        result += i\n        if result == n {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        let sq = mid * mid\n        if sq == n {\n            return true\n        }\n        if sq < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var sum = 1\n    while sum < n {\n        i += 2\n        sum += i\n    }\n    return sum == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var result = 1\n    while result < n {\n        i += 2\n        result += i\n    }\n    return result == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i*i <= n {\n        if i*i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var result = 1\n    while result <= n {\n        i += 2\n        result += i\n    }\n    return result == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "tmpl13ex442/tmpl13ex442.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7177f0ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7177c05b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7177c05988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7177c047b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl13ex442                        0x000055cb0e86d227 <unavailable> + 4647\n5    libc.so.6                          0x00002b71780fa460 __libc_start_main + 245\n6    tmpl13ex442                        0x000055cb0e86ce69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    var i = 1\n    while i * i < n {\n        i += 1\n    }\n    return i * i == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var result = 1\n    while result <= n {\n        i += 2\n        result += i\n        if result == n {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    var sum = 1\n    while sum < n {\n        i += 2\n        sum += i\n    }\n    return sum == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        let sq = mid * mid\n        if sq == n {\n            return true\n        } else if sq < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = i + (j - i)/2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        let sq = mid * mid\n        if sq == n {\n            return true\n        }\n        if sq < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i*i <= n {\n        if i*i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        let sq = mid * mid\n        if sq == n {\n            return true\n        }\n        if sq < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        let sq = mid * mid\n        if sq == n {\n            return true\n        }\n        if sq < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        let sq = mid * mid\n        if sq == n {\n            return true\n        } else if sq < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var sum = 1\n    while sum < n {\n        i += 2\n        sum += i\n    }\n    return sum == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    var sum = 1\n    while sum < n {\n        i += 2\n        sum += i\n    }\n    return sum == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        let sq = mid * mid\n        if sq == n {\n            return true\n        }\n        if sq < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        } else if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    var i = 1\n    while i <= n / 2 {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = i + (j - i) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var result = 1\n    while result <= n {\n        i += 2\n        result += i\n    }\n    return result == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "tmpl13ex442/tmpl13ex442.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7177f0ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7177c05b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7177c05988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7177c047b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl13ex442                        0x000055cb0e86d227 <unavailable> + 4647\n5    libc.so.6                          0x00002b71780fa460 __libc_start_main + 245\n6    tmpl13ex442                        0x000055cb0e86ce69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = i + (j - i) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var sum = 1\n    while sum < n {\n        i += 2\n        sum += i\n    }\n    return sum == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var result = 1\n    while result <= n {\n        i += 2\n        result += i\n        if result == n {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var result = 1\n    while result < n {\n        i += 2\n        result += i\n    }\n    return result == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        } else if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        let sqr = mid * mid\n        if sqr == n {\n            return true\n        }\n        if sqr < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        }\n        if mid * mid > n {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var sum = 1\n    while sum < n {\n        i += 2\n        sum += i\n    }\n    return sum == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        }\n        if mid * mid > n {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n < 2 {\n        return true\n    }\n    var low = 1\n    var high = n\n    while low <= high {\n        let mid = low + (high - low) / 2\n        let mid_squared = mid * mid\n        if mid_squared == n {\n            return true\n        } else if mid_squared < n {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        let sq = mid * mid\n        if sq == n {\n            return true\n        } else if sq < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = i + (j - i) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var sum = 1\n    while sum < n {\n        i += 2\n        sum += i\n    }\n    return sum == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    \n    if n == 0 || n == 1 {\n        return true\n    }\n    \n    var i = 1\n    var result = 1\n    \n    while result <= n {\n        i += 2\n        result += i\n    }\n    \n    return result == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "tmpc8q89gpu/tmpc8q89gpu.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab46da9fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab46d796b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab46d796988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab46d7957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc8q89gpu                        0x0000562f1fdd6227 <unavailable> + 4647\n5    libc.so.6                          0x00002ab46dc8b460 __libc_start_main + 245\n6    tmpc8q89gpu                        0x0000562f1fdd5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n < 2 {\n        return true\n    }\n    var left = 2\n    var right = n / 2\n    while left <= right {\n        let mid = left + (right - left) / 2\n        let mid_squared = mid * mid\n        if mid_squared == n {\n            return true\n        } else if mid_squared < n {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        let sq = mid * mid\n        if sq == n {\n            return true\n        } else if sq < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var result = 1\n    while result <= n {\n        i += 2\n        result += i\n    }\n    return result == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "tmpl13ex442/tmpl13ex442.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7177f0ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7177c05b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7177c05988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7177c047b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl13ex442                        0x000055cb0e86d227 <unavailable> + 4647\n5    libc.so.6                          0x00002b71780fa460 __libc_start_main + 245\n6    tmpl13ex442                        0x000055cb0e86ce69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        let sq = mid * mid\n        if sq == n {\n            return true\n        }\n        if sq < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var sum = 1\n    while sum < n {\n        i += 2\n        sum += i\n    }\n    return sum == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    var sum = 1\n    while sum < n {\n        i += 2\n        sum += i\n    }\n    return sum == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var result = 1\n    while result < n {\n        i += 2\n        result += i\n    }\n    return result == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var sum = 1\n    while sum < n {\n        i += 2\n        sum += i\n    }\n    return sum == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = i + (j - i) / 2\n        let square = mid * mid\n        if square == n {\n            return true\n        }\n        if square < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        let sq = mid * mid\n        if sq == n {\n            return true\n        } else if sq < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var result = 1\n    while result <= n {\n        i += 2\n        result += i\n        if result == n {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        } else if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var result = 1\n    while result <= n {\n        i += 2\n        result += i\n    }\n    return result == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "tmpl13ex442/tmpl13ex442.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7177f0ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7177c05b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7177c05988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7177c047b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl13ex442                        0x000055cb0e86d227 <unavailable> + 4647\n5    libc.so.6                          0x00002b71780fa460 __libc_start_main + 245\n6    tmpl13ex442                        0x000055cb0e86ce69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var result = 1\n    while result <= n {\n        i += 2\n        result += i\n    }\n    return result == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "tmpl13ex442/tmpl13ex442.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7177f0ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7177c05b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7177c05988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7177c047b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl13ex442                        0x000055cb0e86d227 <unavailable> + 4647\n5    libc.so.6                          0x00002b71780fa460 __libc_start_main + 245\n6    tmpl13ex442                        0x000055cb0e86ce69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        let sq = mid * mid\n        if sq == n {\n            return true\n        }\n        if sq < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var start = 1\n    var end = n\n    while start <= end {\n        let mid = (start + end) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            start = mid + 1\n        } else {\n            end = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var result = 1\n    while result <= n {\n        i += 2\n        result += i\n    }\n    return result == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124144,
      "stdout": "",
      "stderr": "tmp1gsjbjie/tmp1gsjbjie.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad56140bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad561102b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad561102988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5611017b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1gsjbjie                        0x000055f4b7411227 <unavailable> + 4647\n5    libc.so.6                          0x00002ad5615f7460 __libc_start_main + 245\n6    tmp1gsjbjie                        0x000055f4b7410e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = i + (j - i) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var start = 1\n    var end = n\n    while start <= end {\n        let mid = (start + end) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            start = mid + 1\n        } else {\n            end = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var sum = 1\n    while sum < n {\n        i += 2\n        sum += i\n    }\n    return sum == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = i + (j - i) / 2\n        let sq = mid * mid\n        if sq == n {\n            return true\n        } else if sq < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var result = 1\n    while result < n {\n        i += 2\n        result += i\n    }\n    return result == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var sum = 1\n    while sum < n {\n        i += 2\n        sum += i\n    }\n    return sum == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var result = 1\n    while result <= n {\n        i += 2\n        result += i\n    }\n    return result == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "tmpl13ex442/tmpl13ex442.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7177f0ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7177c05b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7177c05988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7177c047b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl13ex442                        0x000055cb0e86d227 <unavailable> + 4647\n5    libc.so.6                          0x00002b71780fa460 __libc_start_main + 245\n6    tmpl13ex442                        0x000055cb0e86ce69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    var x = n\n    while x * x > n {\n        x = (x + n / x) / 2\n    }\n    return x * x == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    var i = 1\n    while i*i <= n {\n        if i*i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var result = 1\n    while result < n {\n        i += 2\n        result += i\n    }\n    return result == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = i + (j - i) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        } else if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var sum = 1\n    while sum < n {\n        i += 2\n        sum += i\n    }\n    return sum == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i < n {\n        i += 1\n    }\n    return i * i == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i*i <= n {\n        if i*i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var sum = 1\n    while sum < n {\n        i += 2\n        sum += i\n    }\n    return sum == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = i + (j - i) / 2\n        let sq = mid * mid\n        if sq == n {\n            return true\n        }\n        if sq < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var result = 1\n    while result <= n {\n        i += 2\n        result += i\n        if result == n {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        } else if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        let sq = mid * mid\n        if sq == n {\n            return true\n        }\n        if sq < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i: Int = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        let mid_square = mid * mid\n        if mid_square == n {\n            return true\n        }\n        if mid_square < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var sum = 1\n    while sum < n {\n        i += 2\n        sum += i\n    }\n    return sum == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var sum = 1\n    while sum < n {\n        i += 2\n        sum += i\n    }\n    return sum == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i: Int = 1\n    var result: Int = 1\n    while result <= n {\n        i += 2\n        result += i\n    }\n    return result == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124144,
      "stdout": "",
      "stderr": "tmppdaomn_d/tmppdaomn_d.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0ffae18c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0ffab0fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0ffab0f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0ffab0e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppdaomn_d                        0x000055ec4e808227 <unavailable> + 4647\n5    libc.so.6                          0x00002b0ffb004460 __libc_start_main + 245\n6    tmppdaomn_d                        0x000055ec4e807e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var result = 1\n    while result <= n {\n        i += 2\n        result += i\n        if result == n {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var result = 1\n    while result <= n {\n        i += 2\n        result += i\n    }\n    return result == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "tmpl13ex442/tmpl13ex442.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7177f0ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7177c05b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7177c05988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7177c047b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl13ex442                        0x000055cb0e86d227 <unavailable> + 4647\n5    libc.so.6                          0x00002b71780fa460 __libc_start_main + 245\n6    tmpl13ex442                        0x000055cb0e86ce69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i < j {\n        let mid = (i + j) / 2\n        let sq = mid * mid\n        if sq == n {\n            return true\n        } else if sq < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124144,
      "stdout": "",
      "stderr": "tmp4jbjevb3/tmp4jbjevb3.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba0910d0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba090dc7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba090dc7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba090dc67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4jbjevb3                        0x0000564d5039d3a1 <unavailable> + 5025\n5    libc.so.6                          0x00002ba0912bc460 __libc_start_main + 245\n6    tmp4jbjevb3                        0x0000564d5039cef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        }\n        if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        let sq = mid * mid\n        if sq == n {\n            return true\n        }\n        if sq < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        let mid_sq = mid * mid\n        if mid_sq == n {\n            return true\n        } else if mid_sq < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var result = 1\n    while result < n {\n        i += 2\n        result += i\n    }\n    return result == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i * i <= n {\n        if i * i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    var i = 1\n    while i*i <= n {\n        if i*i == n {\n            return true\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1665509737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        } else if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n: Int) -> Bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 || n == 1 {\n        return true\n    }\n    var i = 1\n    var j = n\n    while i <= j {\n        let mid = (i + j) / 2\n        if mid * mid == n {\n            return true\n        } else if mid * mid < n {\n            i = mid + 1\n        } else {\n            j = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_perfect_square(n: 10) == false)\nassert(is_perfect_square(n: 36) == true)\nassert(is_perfect_square(n: 14) == false)\nassert(is_perfect_square(n: 196) == true)\nassert(is_perfect_square(n: 125) == false)\nassert(is_perfect_square(n: 15625) == true)",
      "timestamp": 1666124144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}