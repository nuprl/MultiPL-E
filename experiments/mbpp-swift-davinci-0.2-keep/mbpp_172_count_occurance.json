{
  "name": "mbpp_172_count_occurance",
  "language": "swift",
  "prompt": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_172_count_occurance.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count",
    "    return s.components(separatedBy: \"std\").count - 1",
    "    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        if s.substring(from: i, to: i + 3) == \"std\" {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i+3)\n        if s[start..<end] == \"std\" {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n        if s[range] == \"std\" {\n            count += 1\n        }\n    }\n    return count",
    "    return s.components(separatedBy: \"std\").count - 1",
    "    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    var i = 0\n    while i < s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n        i += 1\n    }\n    return count",
    "    var count = 0\n    var startIndex = s.startIndex\n    while startIndex < s.endIndex {\n        if s[startIndex] == \"s\" {\n            if s[startIndex.advancedBy(1)] == \"t\" {\n                if s[startIndex.advancedBy(2)] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n        startIndex = startIndex.advancedBy(1)\n    }\n    return count",
    "    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count",
    "    return s.components(separatedBy: \"std\").count - 1",
    "    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count"
  ]
}