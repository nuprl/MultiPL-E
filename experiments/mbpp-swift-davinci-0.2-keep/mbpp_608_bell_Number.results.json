{
  "name": "mbpp_608_bell_Number",
  "language": "swift",
  "prompt": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_608_bell_Number.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e9b734c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e9b42b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2e9b42b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2e9b42b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2e9b42abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b2e9b41448a <unavailable> + 1340554\n6    tmp0lo62hcx                        0x0000562a6d437c77 <unavailable> + 7287\n7    tmp0lo62hcx                        0x0000562a6d4376b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b2e9b920460 __libc_start_main + 245\n9    tmp0lo62hcx                        0x0000562a6d4373d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2..<n {\n        bell.append([1])\n        for j in 1..<i {\n            bell[i].append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        bell[i].append(1)\n    }\n    return bell[n-1][n-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "tmp26awpup3/tmp26awpup3.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b16314aec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b16311a5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b16311a5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b16311a47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp26awpup3                        0x000055e758482635 <unavailable> + 5685\n5    libc.so.6                          0x00002b163169a460 __libc_start_main + 245\n6    tmp26awpup3                        0x000055e7584822e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af054588c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af05427f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af05427f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af05427f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af05427ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002af05426848a <unavailable> + 1340554\n6    tmp0529zkiy                        0x0000563d26e15c77 <unavailable> + 7287\n7    tmp0529zkiy                        0x0000563d26e156b8 <unavailable> + 5816\n8    libc.so.6                          0x00002af054774460 __libc_start_main + 245\n9    tmp0529zkiy                        0x0000563d26e153d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = Array(repeating: Array(repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1...i {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1...i {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1..<i {\n            temp.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b941cffac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b941ccf1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b941ccf1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b941ccf113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b941ccf0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b941ccda48a <unavailable> + 1340554\n6    tmp3cts87vy                        0x00005596e225bc77 <unavailable> + 7287\n7    tmp3cts87vy                        0x00005596e225b6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b941d1e6460 __libc_start_main + 245\n9    tmp3cts87vy                        0x00005596e225b3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2..<n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n - 1][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "tmpmshn82pf/tmpmshn82pf.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7f0bd7fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7f0ba76b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7f0ba76988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7f0ba757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmshn82pf                        0x0000556a04397635 <unavailable> + 5685\n5    libc.so.6                          0x00002b7f0bf6b460 __libc_start_main + 245\n6    tmpmshn82pf                        0x0000556a043972e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af054588c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af05427f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af05427f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af05427f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af05427ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002af05426848a <unavailable> + 1340554\n6    tmp0529zkiy                        0x0000563d26e15c77 <unavailable> + 7287\n7    tmp0529zkiy                        0x0000563d26e156b8 <unavailable> + 5816\n8    libc.so.6                          0x00002af054774460 __libc_start_main + 245\n9    tmp0529zkiy                        0x0000563d26e153d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i-1][0])\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i-1][j])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "tmp2az3rfqp/tmp2az3rfqp.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b871d618c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b871d30fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b871d30f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b871d30e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2az3rfqp                        0x00005611e8237725 <unavailable> + 5925\n5    libc.so.6                          0x00002b871d804460 __libc_start_main + 245\n6    tmp2az3rfqp                        0x00005611e82373d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    for i in 1...n {\n        var temp = [Int]()\n        temp.append(bell[i-1][0])\n        for j in 1..<i {\n            temp.append(bell[i-1][j-1] + temp[j-1])\n        }\n        temp.append(temp[i-1])\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "tmpr3alxc1z/tmpr3alxc1z.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4986651c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4986348b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4986348988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49863477b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpr3alxc1z                        0x00005629de48a725 <unavailable> + 5925\n5    libc.so.6                          0x00002b498683d460 __libc_start_main + 245\n6    tmpr3alxc1z                        0x00005629de48a3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i-1][j])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "tmpprinilum/tmpprinilum.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b85d2b16c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b85d280db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b85d280d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b85d280c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpprinilum                        0x00005623db6fc725 <unavailable> + 5925\n5    libc.so.6                          0x00002b85d2d02460 __libc_start_main + 245\n6    tmpprinilum                        0x00005623db6fc3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b64cafcfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b64cacc6561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b64cacc6286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b64cacc613c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b64cacc5bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b64cacaf48a <unavailable> + 1340554\n6    tmpsekmkqb2                        0x00005599e18bcc77 <unavailable> + 7287\n7    tmpsekmkqb2                        0x00005599e18bc6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b64cb1bb460 __libc_start_main + 245\n9    tmpsekmkqb2                        0x00005599e18bc3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1..<i {\n            temp.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae9d938ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae9d9085561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae9d9085286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae9d908513c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae9d9084bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ae9d906e48a <unavailable> + 1340554\n6    tmphr5x9ikr                        0x00005585a99dfc77 <unavailable> + 7287\n7    tmphr5x9ikr                        0x00005585a99df6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002ae9d957a460 __libc_start_main + 245\n9    tmphr5x9ikr                        0x00005585a99df3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1...i {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b64cafcfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b64cacc6561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b64cacc6286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b64cacc613c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b64cacc5bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b64cacaf48a <unavailable> + 1340554\n6    tmpsekmkqb2                        0x00005599e18bcc77 <unavailable> + 7287\n7    tmpsekmkqb2                        0x00005599e18bc6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b64cb1bb460 __libc_start_main + 245\n9    tmpsekmkqb2                        0x00005599e18bc3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1..<i {\n            temp.append(bell[i-1][j-1] + bell[i-1][j])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "tmp7deg2fdk/tmp7deg2fdk.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7c545bac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7c542b1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7c542b1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7c542b07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7deg2fdk                        0x0000560594b96725 <unavailable> + 5925\n5    libc.so.6                          0x00002b7c547a6460 __libc_start_main + 245\n6    tmp7deg2fdk                        0x0000560594b963d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    for i in 0...n {\n        var row = [Int]()\n        var endValue = 0\n        for j in 0...i {\n            if j == 0 {\n                endValue = 1\n            } else {\n                endValue = endValue * (i - j + 1) / j\n            }\n            row.append(endValue)\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "tmp4p73x3y8/tmp4p73x3y8.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b07b9230c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b07b8f27b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b07b8f27988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b07b8f267b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4p73x3y8                        0x000055b6d9c2a585 <unavailable> + 5509\n5    libc.so.6                          0x00002b07b941c460 __libc_start_main + 245\n6    tmp4p73x3y8                        0x000055b6d9c2a239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell: [[Int]] = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n+1), count: n+1)\n    bell[0][0] = 1\n    for i in 1..<n+1 {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1..<i+1 {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1...i {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n+1), count: n+1)\n    bell[0][0] = 1\n    for i in 1..<n+1 {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1..<i+1 {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    for i in 0...n {\n        bell.append([Int](repeating: 0, count: n+1))\n        bell[i][0] = bell[i][i] = 1\n        for j in 1..<i {\n            bell[i][j] = bell[i-1][j-1] + bell[i-1][j]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "/tmp/tmp59n9l8nr.swift:7:33: error: cannot assign value of type '()' to subscript of type 'Int'\n        bell[i][0] = bell[i][i] = 1\n                     ~~~~~~~~~~~^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1...i {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1..<i {\n            temp.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae9d938ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae9d9085561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae9d9085286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae9d908513c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae9d9084bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ae9d906e48a <unavailable> + 1340554\n6    tmphr5x9ikr                        0x00005585a99dfc77 <unavailable> + 7287\n7    tmphr5x9ikr                        0x00005585a99df6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002ae9d957a460 __libc_start_main + 245\n9    tmphr5x9ikr                        0x00005585a99df3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    for i in 1...n {\n        var row = [Int]()\n        row.append(bell[i-1][0])\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + row[j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "tmp0akpgywb/tmp0akpgywb.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b668cf0ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b668cc01b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b668cc01988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b668cc007b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0akpgywb                        0x0000561553a54725 <unavailable> + 5925\n5    libc.so.6                          0x00002b668d0f6460 __libc_start_main + 245\n6    tmp0akpgywb                        0x0000561553a543d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        bell.append([1])\n        for j in 1..<i {\n            bell[i].append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        bell[i].append(1)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "tmp7ishybqn/tmp7ishybqn.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e0766ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e07361b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2e07361988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2e073607b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ishybqn                        0x000055a1ad290725 <unavailable> + 5925\n5    libc.so.6                          0x00002b2e07856460 __libc_start_main + 245\n6    tmp7ishybqn                        0x000055a1ad2903d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1..<i {\n            temp.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b941cffac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b941ccf1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b941ccf1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b941ccf113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b941ccf0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b941ccda48a <unavailable> + 1340554\n6    tmp3cts87vy                        0x00005596e225bc77 <unavailable> + 7287\n7    tmp3cts87vy                        0x00005596e225b6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b941d1e6460 __libc_start_main + 245\n9    tmp3cts87vy                        0x00005596e225b3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    for i in 1...n {\n        bell.append([1])\n        for j in 1...i {\n            bell[i].append(bell[i-1][j-1] + bell[i][j-1])\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "tmpqw6ce6w8/tmpqw6ce6w8.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b68a71f2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b68a6ee9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b68a6ee9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b68a6ee87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqw6ce6w8                        0x000055bade194635 <unavailable> + 5685\n5    libc.so.6                          0x00002b68a73de460 __libc_start_main + 245\n6    tmpqw6ce6w8                        0x000055bade1942e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    for i in 1...n {\n        bell.append([1])\n        for j in 1...i {\n            bell[i].append(bell[i-1][j-1] + bell[i][j-1])\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "tmpqw6ce6w8/tmpqw6ce6w8.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b68a71f2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b68a6ee9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b68a6ee9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b68a6ee87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqw6ce6w8                        0x000055bade194635 <unavailable> + 5685\n5    libc.so.6                          0x00002b68a73de460 __libc_start_main + 245\n6    tmpqw6ce6w8                        0x000055bade1942e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n+1), count: n+1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1...i {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e9b734c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e9b42b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2e9b42b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2e9b42b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2e9b42abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b2e9b41448a <unavailable> + 1340554\n6    tmp0lo62hcx                        0x0000562a6d437c77 <unavailable> + 7287\n7    tmp0lo62hcx                        0x0000562a6d4376b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b2e9b920460 __libc_start_main + 245\n9    tmp0lo62hcx                        0x0000562a6d4373d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e9b734c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e9b42b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2e9b42b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2e9b42b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2e9b42abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b2e9b41448a <unavailable> + 1340554\n6    tmp0lo62hcx                        0x0000562a6d437c77 <unavailable> + 7287\n7    tmp0lo62hcx                        0x0000562a6d4376b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b2e9b920460 __libc_start_main + 245\n9    tmp0lo62hcx                        0x0000562a6d4373d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af054588c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af05427f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af05427f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af05427f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af05427ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002af05426848a <unavailable> + 1340554\n6    tmp0529zkiy                        0x0000563d26e15c77 <unavailable> + 7287\n7    tmp0529zkiy                        0x0000563d26e156b8 <unavailable> + 5816\n8    libc.so.6                          0x00002af054774460 __libc_start_main + 245\n9    tmp0529zkiy                        0x0000563d26e153d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1...i {\n            var sum = 0\n            for k in 0..<j {\n                sum += bell[i-1][k]*row[j-k-1]\n            }\n            row.append(sum)\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "tmpjdo_oggx/tmpjdo_oggx.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7f53251c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7f52f48b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7f52f48988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7f52f477b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjdo_oggx                        0x000055dd72b76725 <unavailable> + 5925\n5    libc.so.6                          0x00002b7f5343d460 __libc_start_main + 245\n6    tmpjdo_oggx                        0x000055dd72b763d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b64cafcfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b64cacc6561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b64cacc6286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b64cacc613c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b64cacc5bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b64cacaf48a <unavailable> + 1340554\n6    tmpsekmkqb2                        0x00005599e18bcc77 <unavailable> + 7287\n7    tmpsekmkqb2                        0x00005599e18bc6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b64cb1bb460 __libc_start_main + 245\n9    tmpsekmkqb2                        0x00005599e18bc3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1..<i {\n            temp.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b485bdf7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b485baee561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b485baee286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b485baee13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b485baedbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b485bad748a <unavailable> + 1340554\n6    tmp5ct219vj                        0x000055d76c822c77 <unavailable> + 7287\n7    tmp5ct219vj                        0x000055d76c8226b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b485bfe3460 __libc_start_main + 245\n9    tmp5ct219vj                        0x000055d76c8223d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af054588c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af05427f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af05427f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af05427f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af05427ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002af05426848a <unavailable> + 1340554\n6    tmp0529zkiy                        0x0000563d26e15c77 <unavailable> + 7287\n7    tmp0529zkiy                        0x0000563d26e156b8 <unavailable> + 5816\n8    libc.so.6                          0x00002af054774460 __libc_start_main + 245\n9    tmp0529zkiy                        0x0000563d26e153d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1...i {\n            row.append(bell[i-1][j-1] + row[j-1])\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "tmp7wse1gls/tmp7wse1gls.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad30f831c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad30f528b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad30f528988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad30f5277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7wse1gls                        0x000055a34ce3e635 <unavailable> + 5685\n5    libc.so.6                          0x00002ad30fa1d460 __libc_start_main + 245\n6    tmp7wse1gls                        0x000055a34ce3e2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e9b734c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e9b42b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2e9b42b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2e9b42b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2e9b42abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b2e9b41448a <unavailable> + 1340554\n6    tmp0lo62hcx                        0x0000562a6d437c77 <unavailable> + 7287\n7    tmp0lo62hcx                        0x0000562a6d4376b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b2e9b920460 __libc_start_main + 245\n9    tmp0lo62hcx                        0x0000562a6d4373d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    for i in 1...n {\n        bell.append([1])\n        for j in 1...i {\n            bell[i].append(bell[i-1][j-1] + bell[i][j-1])\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "tmpqw6ce6w8/tmpqw6ce6w8.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b68a71f2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b68a6ee9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b68a6ee9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b68a6ee87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqw6ce6w8                        0x000055bade194635 <unavailable> + 5685\n5    libc.so.6                          0x00002b68a73de460 __libc_start_main + 245\n6    tmpqw6ce6w8                        0x000055bade1942e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e9b734c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e9b42b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2e9b42b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2e9b42b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2e9b42abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b2e9b41448a <unavailable> + 1340554\n6    tmp0lo62hcx                        0x0000562a6d437c77 <unavailable> + 7287\n7    tmp0lo62hcx                        0x0000562a6d4376b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b2e9b920460 __libc_start_main + 245\n9    tmp0lo62hcx                        0x0000562a6d4373d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e9b734c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e9b42b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2e9b42b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2e9b42b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2e9b42abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b2e9b41448a <unavailable> + 1340554\n6    tmp0lo62hcx                        0x0000562a6d437c77 <unavailable> + 7287\n7    tmp0lo62hcx                        0x0000562a6d4376b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b2e9b920460 __libc_start_main + 245\n9    tmp0lo62hcx                        0x0000562a6d4373d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e9b734c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e9b42b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2e9b42b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2e9b42b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2e9b42abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b2e9b41448a <unavailable> + 1340554\n6    tmp0lo62hcx                        0x0000562a6d437c77 <unavailable> + 7287\n7    tmp0lo62hcx                        0x0000562a6d4376b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b2e9b920460 __libc_start_main + 245\n9    tmp0lo62hcx                        0x0000562a6d4373d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1...i {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n+1 {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1..<i+1 {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af054588c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af05427f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af05427f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af05427f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af05427ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002af05426848a <unavailable> + 1340554\n6    tmp0529zkiy                        0x0000563d26e15c77 <unavailable> + 7287\n7    tmp0529zkiy                        0x0000563d26e156b8 <unavailable> + 5816\n8    libc.so.6                          0x00002af054774460 __libc_start_main + 245\n9    tmp0529zkiy                        0x0000563d26e153d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e9b734c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e9b42b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2e9b42b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2e9b42b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2e9b42abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b2e9b41448a <unavailable> + 1340554\n6    tmp0lo62hcx                        0x0000562a6d437c77 <unavailable> + 7287\n7    tmp0lo62hcx                        0x0000562a6d4376b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b2e9b920460 __libc_start_main + 245\n9    tmp0lo62hcx                        0x0000562a6d4373d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e9b734c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e9b42b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2e9b42b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2e9b42b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2e9b42abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b2e9b41448a <unavailable> + 1340554\n6    tmp0lo62hcx                        0x0000562a6d437c77 <unavailable> + 7287\n7    tmp0lo62hcx                        0x0000562a6d4376b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b2e9b920460 __libc_start_main + 245\n9    tmp0lo62hcx                        0x0000562a6d4373d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b64cafcfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b64cacc6561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b64cacc6286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b64cacc613c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b64cacc5bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b64cacaf48a <unavailable> + 1340554\n6    tmpsekmkqb2                        0x00005599e18bcc77 <unavailable> + 7287\n7    tmpsekmkqb2                        0x00005599e18bc6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b64cb1bb460 __libc_start_main + 245\n9    tmpsekmkqb2                        0x00005599e18bc3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1...i {\n            row.append(bell[i-1][j-1] + row[j-1])\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "tmp7wse1gls/tmp7wse1gls.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad30f831c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad30f528b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad30f528988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad30f5277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7wse1gls                        0x000055a34ce3e635 <unavailable> + 5685\n5    libc.so.6                          0x00002ad30fa1d460 __libc_start_main + 245\n6    tmp7wse1gls                        0x000055a34ce3e2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        for j in 0...i {\n            if j == 0 {\n                row.append(bell[i-1][i-1])\n            } else {\n                row.append(bell[i-1][j-1] + row[j-1])\n            }\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "tmp80utv_fu/tmp80utv_fu.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afd8fc24c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afd8f91bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afd8f91b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afd8f91a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp80utv_fu                        0x000055db8f2e8635 <unavailable> + 5685\n5    libc.so.6                          0x00002afd8fe10460 __libc_start_main + 245\n6    tmp80utv_fu                        0x000055db8f2e82e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = Array(repeating: Array(repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1...i {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e9b734c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e9b42b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2e9b42b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2e9b42b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2e9b42abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b2e9b41448a <unavailable> + 1340554\n6    tmp0lo62hcx                        0x0000562a6d437c77 <unavailable> + 7287\n7    tmp0lo62hcx                        0x0000562a6d4376b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b2e9b920460 __libc_start_main + 245\n9    tmp0lo62hcx                        0x0000562a6d4373d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell: [[Int]] = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e9b734c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e9b42b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2e9b42b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2e9b42b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2e9b42abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b2e9b41448a <unavailable> + 1340554\n6    tmp0lo62hcx                        0x0000562a6d437c77 <unavailable> + 7287\n7    tmp0lo62hcx                        0x0000562a6d4376b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b2e9b920460 __libc_start_main + 245\n9    tmp0lo62hcx                        0x0000562a6d4373d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e9b734c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e9b42b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2e9b42b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2e9b42b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2e9b42abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b2e9b41448a <unavailable> + 1340554\n6    tmp0lo62hcx                        0x0000562a6d437c77 <unavailable> + 7287\n7    tmp0lo62hcx                        0x0000562a6d4376b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b2e9b920460 __libc_start_main + 245\n9    tmp0lo62hcx                        0x0000562a6d4373d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1...i {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e9b734c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e9b42b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2e9b42b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2e9b42b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2e9b42abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b2e9b41448a <unavailable> + 1340554\n6    tmp0lo62hcx                        0x0000562a6d437c77 <unavailable> + 7287\n7    tmp0lo62hcx                        0x0000562a6d4376b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b2e9b920460 __libc_start_main + 245\n9    tmp0lo62hcx                        0x0000562a6d4373d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b64cafcfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b64cacc6561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b64cacc6286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b64cacc613c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b64cacc5bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b64cacaf48a <unavailable> + 1340554\n6    tmpsekmkqb2                        0x00005599e18bcc77 <unavailable> + 7287\n7    tmpsekmkqb2                        0x00005599e18bc6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b64cb1bb460 __libc_start_main + 245\n9    tmpsekmkqb2                        0x00005599e18bc3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e9b734c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e9b42b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2e9b42b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2e9b42b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2e9b42abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b2e9b41448a <unavailable> + 1340554\n6    tmp0lo62hcx                        0x0000562a6d437c77 <unavailable> + 7287\n7    tmp0lo62hcx                        0x0000562a6d4376b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b2e9b920460 __libc_start_main + 245\n9    tmp0lo62hcx                        0x0000562a6d4373d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n+1), count: n+1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1...i {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e9b734c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e9b42b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2e9b42b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2e9b42b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2e9b42abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b2e9b41448a <unavailable> + 1340554\n6    tmp0lo62hcx                        0x0000562a6d437c77 <unavailable> + 7287\n7    tmp0lo62hcx                        0x0000562a6d4376b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b2e9b920460 __libc_start_main + 245\n9    tmp0lo62hcx                        0x0000562a6d4373d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1..<i {\n            temp.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b485bdf7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b485baee561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b485baee286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b485baee13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b485baedbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b485bad748a <unavailable> + 1340554\n6    tmp5ct219vj                        0x000055d76c822c77 <unavailable> + 7287\n7    tmp5ct219vj                        0x000055d76c8226b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b485bfe3460 __libc_start_main + 245\n9    tmp5ct219vj                        0x000055d76c8223d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e9b734c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e9b42b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2e9b42b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2e9b42b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2e9b42abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b2e9b41448a <unavailable> + 1340554\n6    tmp0lo62hcx                        0x0000562a6d437c77 <unavailable> + 7287\n7    tmp0lo62hcx                        0x0000562a6d4376b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b2e9b920460 __libc_start_main + 245\n9    tmp0lo62hcx                        0x0000562a6d4373d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n+1), count: n+1)\n    bell[0][0] = 1\n    for i in 1..<n+1 {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1..<i+1 {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell: [[Int]] = [[Int]](repeating: [Int](repeating: 0, count: n+1), count: n+1)\n    bell[0][0] = 1\n    for i in 1..<n+1 {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1..<i+1 {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1..<i {\n            temp.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae9d938ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae9d9085561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae9d9085286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae9d908513c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae9d9084bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ae9d906e48a <unavailable> + 1340554\n6    tmphr5x9ikr                        0x00005585a99dfc77 <unavailable> + 7287\n7    tmphr5x9ikr                        0x00005585a99df6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002ae9d957a460 __libc_start_main + 245\n9    tmphr5x9ikr                        0x00005585a99df3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    for i in 1...n {\n        var row = [Int]()\n        for j in 0...i {\n            if j == 0 {\n                row.append(bell[i-1][j])\n            } else {\n                row.append(bell[i-1][j-1] + row[j-1])\n            }\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "tmphx8u21p8/tmphx8u21p8.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adc8df5dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adc8dc54b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adc8dc54988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adc8dc537b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphx8u21p8                        0x000055d1fbeeb635 <unavailable> + 5685\n5    libc.so.6                          0x00002adc8e149460 __libc_start_main + 245\n6    tmphx8u21p8                        0x000055d1fbeeb2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1...i {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell: [[Int]] = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1...i {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    for i in 0...n {\n        bell.append([Int](repeating: 0, count: n + 1))\n        bell[i][0] = bell[i][i] = 1\n        if i > 1 {\n            for j in 1...i - 1 {\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n            }\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "/tmp/tmpuh7lwqsn.swift:7:33: error: cannot assign value of type '()' to subscript of type 'Int'\n        bell[i][0] = bell[i][i] = 1\n                     ~~~~~~~~~~~^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e9b734c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e9b42b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2e9b42b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2e9b42b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2e9b42abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b2e9b41448a <unavailable> + 1340554\n6    tmp0lo62hcx                        0x0000562a6d437c77 <unavailable> + 7287\n7    tmp0lo62hcx                        0x0000562a6d4376b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b2e9b920460 __libc_start_main + 245\n9    tmp0lo62hcx                        0x0000562a6d4373d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e9b734c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e9b42b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2e9b42b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2e9b42b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2e9b42abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b2e9b41448a <unavailable> + 1340554\n6    tmp0lo62hcx                        0x0000562a6d437c77 <unavailable> + 7287\n7    tmp0lo62hcx                        0x0000562a6d4376b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b2e9b920460 __libc_start_main + 245\n9    tmp0lo62hcx                        0x0000562a6d4373d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1..<i {\n            temp.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b941cffac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b941ccf1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b941ccf1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b941ccf113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b941ccf0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b941ccda48a <unavailable> + 1340554\n6    tmp3cts87vy                        0x00005596e225bc77 <unavailable> + 7287\n7    tmp3cts87vy                        0x00005596e225b6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b941d1e6460 __libc_start_main + 245\n9    tmp3cts87vy                        0x00005596e225b3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1..<i {\n            temp.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b485bdf7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b485baee561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b485baee286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b485baee13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b485baedbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b485bad748a <unavailable> + 1340554\n6    tmp5ct219vj                        0x000055d76c822c77 <unavailable> + 7287\n7    tmp5ct219vj                        0x000055d76c8226b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b485bfe3460 __libc_start_main + 245\n9    tmp5ct219vj                        0x000055d76c8223d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell: [[Int]] = Array(repeating: Array(repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1...i {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell: [[Int]] = [[Int]](repeating: [Int](repeating: 0, count: n+1), count: n+1)\n    bell[0][0] = 1\n    for i in 1..<n+1 {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1..<i+1 {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1..<i {\n            temp.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b941cffac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b941ccf1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b941ccf1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b941ccf113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b941ccf0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b941ccda48a <unavailable> + 1340554\n6    tmp3cts87vy                        0x00005596e225bc77 <unavailable> + 7287\n7    tmp3cts87vy                        0x00005596e225b6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b941d1e6460 __libc_start_main + 245\n9    tmp3cts87vy                        0x00005596e225b3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    var bell = [[Int]]()\n    bell.append([1])\n    for i in 1...n {\n        var row = [Int]()\n        for j in 0...i {\n            if j == 0 {\n                row.append(bell[i-1][j])\n            } else {\n                row.append(bell[i-1][j-1] + row[j-1])\n            }\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "tmpfh0qhnhh/tmpfh0qhnhh.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6c9feccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6c9fbc3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6c9fbc3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6c9fbc27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfh0qhnhh                        0x00005555da615635 <unavailable> + 5685\n5    libc.so.6                          0x00002b6ca00b8460 __libc_start_main + 245\n6    tmpfh0qhnhh                        0x00005555da6152e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1...i {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n+1), count: n+1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1...i {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i-1][j])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "tmpprinilum/tmpprinilum.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b85d2b16c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b85d280db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b85d280d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b85d280c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpprinilum                        0x00005623db6fc725 <unavailable> + 5925\n5    libc.so.6                          0x00002b85d2d02460 __libc_start_main + 245\n6    tmpprinilum                        0x00005623db6fc3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    for i in 0...n {\n        bell.append([Int](repeating: 0, count: i+1))\n    }\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1...i {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1..<i {\n            temp.append(bell[i-1][j-1] + bell[i-1][j])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "tmp7deg2fdk/tmp7deg2fdk.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7c545bac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7c542b1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7c542b1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7c542b07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7deg2fdk                        0x0000560594b96725 <unavailable> + 5925\n5    libc.so.6                          0x00002b7c547a6460 __libc_start_main + 245\n6    tmp7deg2fdk                        0x0000560594b963d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i - 1][0])\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i - 1][j])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "tmp3n77y50q/tmp3n77y50q.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1947ef4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1947bebb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1947beb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1947bea7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3n77y50q                        0x000055cd5619f725 <unavailable> + 5925\n5    libc.so.6                          0x00002b19480e0460 __libc_start_main + 245\n6    tmp3n77y50q                        0x000055cd5619f3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    for i in 1...n {\n        bell.append([1])\n        for j in 1...i {\n            bell[i].append(bell[i-1][j-1] + bell[i][j-1])\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "tmpqw6ce6w8/tmpqw6ce6w8.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b68a71f2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b68a6ee9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b68a6ee9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b68a6ee87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqw6ce6w8                        0x000055bade194635 <unavailable> + 5685\n5    libc.so.6                          0x00002b68a73de460 __libc_start_main + 245\n6    tmpqw6ce6w8                        0x000055bade1942e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e9b734c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e9b42b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2e9b42b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2e9b42b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2e9b42abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b2e9b41448a <unavailable> + 1340554\n6    tmp0lo62hcx                        0x0000562a6d437c77 <unavailable> + 7287\n7    tmp0lo62hcx                        0x0000562a6d4376b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b2e9b920460 __libc_start_main + 245\n9    tmp0lo62hcx                        0x0000562a6d4373d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1...i {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1..<i {\n            temp.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b941cffac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b941ccf1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b941ccf1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b941ccf113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b941ccf0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b941ccda48a <unavailable> + 1340554\n6    tmp3cts87vy                        0x00005596e225bc77 <unavailable> + 7287\n7    tmp3cts87vy                        0x00005596e225b6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b941d1e6460 __libc_start_main + 245\n9    tmp3cts87vy                        0x00005596e225b3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e9b734c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e9b42b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2e9b42b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2e9b42b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2e9b42abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b2e9b41448a <unavailable> + 1340554\n6    tmp0lo62hcx                        0x0000562a6d437c77 <unavailable> + 7287\n7    tmp0lo62hcx                        0x0000562a6d4376b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b2e9b920460 __libc_start_main + 245\n9    tmp0lo62hcx                        0x0000562a6d4373d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1...i {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1...i {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af054588c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af05427f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af05427f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af05427f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af05427ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002af05426848a <unavailable> + 1340554\n6    tmp0529zkiy                        0x0000563d26e15c77 <unavailable> + 7287\n7    tmp0529zkiy                        0x0000563d26e156b8 <unavailable> + 5816\n8    libc.so.6                          0x00002af054774460 __libc_start_main + 245\n9    tmp0529zkiy                        0x0000563d26e153d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(bell[i-1][0])\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b093e9fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b093e6f2561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b093e6f2286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b093e6f213c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b093e6f1bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b093e6db48a <unavailable> + 1340554\n6    tmp17904e_i                        0x000055fb8612ece1 <unavailable> + 7393\n7    tmp17904e_i                        0x000055fb8612e6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b093ebe7460 __libc_start_main + 245\n9    tmp17904e_i                        0x000055fb8612e3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    for i in 1...n {\n        bell.append([1])\n        for j in 1...i {\n            bell[i].append(bell[i-1][j-1] + bell[i][j-1])\n        }\n    }\n    return bell[n][n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "tmp3_lil5kl/tmp3_lil5kl.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7f9c329c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7f9c020b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7f9c020988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7f9c01f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_lil5kl                        0x00005604c7c47635 <unavailable> + 5685\n5    libc.so.6                          0x00002b7f9c515460 __libc_start_main + 245\n6    tmp3_lil5kl                        0x00005604c7c472e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e9b734c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e9b42b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2e9b42b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2e9b42b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2e9b42abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b2e9b41448a <unavailable> + 1340554\n6    tmp0lo62hcx                        0x0000562a6d437c77 <unavailable> + 7287\n7    tmp0lo62hcx                        0x0000562a6d4376b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b2e9b920460 __libc_start_main + 245\n9    tmp0lo62hcx                        0x0000562a6d4373d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var arr = [Int]()\n        arr.append(1)\n        for j in 1..<i {\n            arr.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        arr.append(1)\n        bell.append(arr)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad570dfdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad570af4561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ad570af4286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ad570af413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ad570af3bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ad570add48a <unavailable> + 1340554\n6    tmpn9zd7n1m                        0x0000559ceb49ac77 <unavailable> + 7287\n7    tmpn9zd7n1m                        0x0000559ceb49a6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002ad570fe9460 __libc_start_main + 245\n9    tmpn9zd7n1m                        0x0000559ceb49a3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b64cafcfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b64cacc6561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b64cacc6286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b64cacc613c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b64cacc5bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b64cacaf48a <unavailable> + 1340554\n6    tmpsekmkqb2                        0x00005599e18bcc77 <unavailable> + 7287\n7    tmpsekmkqb2                        0x00005599e18bc6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b64cb1bb460 __libc_start_main + 245\n9    tmpsekmkqb2                        0x00005599e18bc3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell: [[Int]] = [[Int]](repeating: [Int](repeating: 0, count: n+1), count: n+1)\n    bell[0][0] = 1\n    for i in 1..<n+1 {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1..<i+1 {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    for i in 1...n {\n        var row = [Int]()\n        for j in 0...i {\n            if j == 0 {\n                row.append(bell[i-1][j])\n            } else {\n                row.append(bell[i-1][j-1] + row[j-1])\n            }\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "tmphx8u21p8/tmphx8u21p8.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adc8df5dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adc8dc54b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adc8dc54988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adc8dc537b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphx8u21p8                        0x000055d1fbeeb635 <unavailable> + 5685\n5    libc.so.6                          0x00002adc8e149460 __libc_start_main + 245\n6    tmphx8u21p8                        0x000055d1fbeeb2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    for i in 0...n {\n        bell.append([Int](repeating: 0, count: n+1))\n        bell[i][0] = bell[i][i] = 1\n        if i > 1 {\n            for j in 1..<i {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n            }\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "/tmp/tmpwbx6weon.swift:7:33: error: cannot assign value of type '()' to subscript of type 'Int'\n        bell[i][0] = bell[i][i] = 1\n                     ~~~~~~~~~~~^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af054588c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af05427f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af05427f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af05427f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af05427ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002af05426848a <unavailable> + 1340554\n6    tmp0529zkiy                        0x0000563d26e15c77 <unavailable> + 7287\n7    tmp0529zkiy                        0x0000563d26e156b8 <unavailable> + 5816\n8    libc.so.6                          0x00002af054774460 __libc_start_main + 245\n9    tmp0529zkiy                        0x0000563d26e153d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1...i {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell: [[Int]] = Array(repeating: Array(repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1..<i {\n            temp.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b485bdf7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b485baee561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b485baee286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b485baee13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b485baedbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b485bad748a <unavailable> + 1340554\n6    tmp5ct219vj                        0x000055d76c822c77 <unavailable> + 7287\n7    tmp5ct219vj                        0x000055d76c8226b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b485bfe3460 __libc_start_main + 245\n9    tmp5ct219vj                        0x000055d76c8223d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var dp = Array(repeating: Array(repeating: 0, count: n+1), count: n+1)\n    dp[0][0] = 1\n    for i in 1...n {\n        dp[i][0] = dp[i-1][i-1]\n        for j in 1...i {\n            dp[i][j] = dp[i-1][j-1] + dp[i][j-1]\n        }\n    }\n    return dp[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    for i in 0...n {\n        bell.append([Int](repeating: 0, count: n+1))\n        bell[i][0] = bell[i][i] = 1\n        if i > 1 {\n            for j in 1..<i {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n            }\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "/tmp/tmpwbx6weon.swift:7:33: error: cannot assign value of type '()' to subscript of type 'Int'\n        bell[i][0] = bell[i][i] = 1\n                     ~~~~~~~~~~~^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell: [[Int]] = [[Int]](repeating: [Int](repeating: 0, count: n+1), count: n+1)\n    bell[0][0] = 1\n    for i in 1..<n+1 {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1..<i+1 {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af054588c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af05427f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af05427f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af05427f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af05427ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002af05426848a <unavailable> + 1340554\n6    tmp0529zkiy                        0x0000563d26e15c77 <unavailable> + 7287\n7    tmp0529zkiy                        0x0000563d26e156b8 <unavailable> + 5816\n8    libc.so.6                          0x00002af054774460 __libc_start_main + 245\n9    tmp0529zkiy                        0x0000563d26e153d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    for i in 0...n {\n        bell.append([])\n        for _ in 0...i {\n            bell[i].append(0)\n        }\n    }\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1...i {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell: [[Int]] = Array(repeating: Array(repeating: 0, count: n+1), count: n+1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1...i {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1...i {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    for i in 0...n {\n        bell.append([])\n        for _ in 0...i {\n            bell[i].append(0)\n        }\n    }\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1...i {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell: [[Int]] = [[Int]](repeating: [Int](repeating: 0, count: n+1), count: n+1)\n    bell[0][0] = 1\n    for i in 1..<n+1 {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1..<i+1 {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1..<i {\n            temp.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b485bdf7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b485baee561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b485baee286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b485baee13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b485baedbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b485bad748a <unavailable> + 1340554\n6    tmp5ct219vj                        0x000055d76c822c77 <unavailable> + 7287\n7    tmp5ct219vj                        0x000055d76c8226b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b485bfe3460 __libc_start_main + 245\n9    tmp5ct219vj                        0x000055d76c8223d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        bell.append([1])\n        for j in 1..<i {\n            bell[i].append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        bell[i].append(1)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "tmpu9pqnoen/tmpu9pqnoen.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5198cdac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b51989d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b51989d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b51989d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu9pqnoen                        0x0000559803ba4725 <unavailable> + 5925\n5    libc.so.6                          0x00002b5198ec6460 __libc_start_main + 245\n6    tmpu9pqnoen                        0x0000559803ba43d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = Array(repeating: Array(repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1...i {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    for i in 1...n {\n        var row = [Int]()\n        for j in 0...i {\n            if j == 0 {\n                row.append(bell[i-1][j])\n            } else {\n                row.append(bell[i-1][j-1] + row[j-1])\n            }\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "tmphx8u21p8/tmphx8u21p8.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adc8df5dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adc8dc54b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adc8dc54988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adc8dc537b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphx8u21p8                        0x000055d1fbeeb635 <unavailable> + 5685\n5    libc.so.6                          0x00002adc8e149460 __libc_start_main + 245\n6    tmphx8u21p8                        0x000055d1fbeeb2e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    for i in 0...n {\n        bell.append([Int](repeating: 0, count: i+1))\n    }\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1...i {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var bell_i = [Int](repeating: 0, count: i + 1)\n        bell_i[0] = bell_i[i] = 1\n        for j in 1..<i {\n            bell_i[j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n        bell.append(bell_i)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "/tmp/tmpbqtl0u92.swift:9:31: error: cannot assign value of type '()' to subscript of type 'Int'\n        bell_i[0] = bell_i[i] = 1\n                    ~~~~~~~~~~^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2..<n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n-1][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "tmpah65sq_o/tmpah65sq_o.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae25f70dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae25f404b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae25f404988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae25f4037b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpah65sq_o                        0x000055948d523635 <unavailable> + 5685\n5    libc.so.6                          0x00002ae25f8f9460 __libc_start_main + 245\n6    tmpah65sq_o                        0x000055948d5232e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n+1), count: n+1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1...i {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    for i in 0...n {\n        var row = [Int]()\n        var end_val = 0\n        for j in 0...i {\n            if j == 0 {\n                end_val = 1\n            } else {\n                end_val = end_val * (i - j + 1) / j\n            }\n            row.append(end_val)\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "tmpckbmi1is/tmpckbmi1is.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b47bb0d7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b47badceb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b47badce988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b47badcd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpckbmi1is                        0x000055e300ec1585 <unavailable> + 5509\n5    libc.so.6                          0x00002b47bb2c3460 __libc_start_main + 245\n6    tmpckbmi1is                        0x000055e300ec1239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n+1), count: n+1)\n    bell[0][0] = 1\n    for i in 1..<n+1 {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1..<i+1 {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e9b734c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e9b42b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2e9b42b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2e9b42b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2e9b42abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b2e9b41448a <unavailable> + 1340554\n6    tmp0lo62hcx                        0x0000562a6d437c77 <unavailable> + 7287\n7    tmp0lo62hcx                        0x0000562a6d4376b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b2e9b920460 __libc_start_main + 245\n9    tmp0lo62hcx                        0x0000562a6d4373d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b64cafcfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b64cacc6561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b64cacc6286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b64cacc613c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b64cacc5bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b64cacaf48a <unavailable> + 1340554\n6    tmpsekmkqb2                        0x00005599e18bcc77 <unavailable> + 7287\n7    tmpsekmkqb2                        0x00005599e18bc6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b64cb1bb460 __libc_start_main + 245\n9    tmpsekmkqb2                        0x00005599e18bc3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n        bell[i][i] = bell[i][i - 1]\n    }\n    return bell[n - 1][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "tmpwg9ptg2b/tmpwg9ptg2b.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba5b4e80c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba5b4b77b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba5b4b77988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba5b4b767b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwg9ptg2b                        0x0000560851621545 <unavailable> + 5445\n5    libc.so.6                          0x00002ba5b506c460 __libc_start_main + 245\n6    tmpwg9ptg2b                        0x00005608516211f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af054588c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af05427f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af05427f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af05427f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af05427ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002af05426848a <unavailable> + 1340554\n6    tmp0529zkiy                        0x0000563d26e15c77 <unavailable> + 7287\n7    tmp0529zkiy                        0x0000563d26e156b8 <unavailable> + 5816\n8    libc.so.6                          0x00002af054774460 __libc_start_main + 245\n9    tmp0529zkiy                        0x0000563d26e153d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var bell_i = [Int]()\n        bell_i.append(1)\n        for j in 1..<i {\n            bell_i.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        bell_i.append(1)\n        bell.append(bell_i)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4a2d3efc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4a2d0e6561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b4a2d0e6286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b4a2d0e613c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b4a2d0e5bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b4a2d0cf48a <unavailable> + 1340554\n6    tmptcr_k4oa                        0x000055d96f0acc77 <unavailable> + 7287\n7    tmptcr_k4oa                        0x000055d96f0ac6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b4a2d5db460 __libc_start_main + 245\n9    tmptcr_k4oa                        0x000055d96f0ac3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i-1][j])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "tmp_evdi9n1/tmp_evdi9n1.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b77015fec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b77012f5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b77012f5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b77012f47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_evdi9n1                        0x00005600257df725 <unavailable> + 5925\n5    libc.so.6                          0x00002b77017ea460 __libc_start_main + 245\n6    tmp_evdi9n1                        0x00005600257df3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af054588c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af05427f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af05427f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af05427f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af05427ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002af05426848a <unavailable> + 1340554\n6    tmp0529zkiy                        0x0000563d26e15c77 <unavailable> + 7287\n7    tmp0529zkiy                        0x0000563d26e156b8 <unavailable> + 5816\n8    libc.so.6                          0x00002af054774460 __libc_start_main + 245\n9    tmp0529zkiy                        0x0000563d26e153d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    for i in 0...n {\n        bell.append([Int](repeating: 0, count: i+1))\n    }\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1...i {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    for i in 0...n {\n        bell.append([Int](repeating: 0, count: n))\n        bell[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...i {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba0ffd80c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba0ffa77561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ba0ffa77286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ba0ffa7713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ba0ffa76bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ba0ff8777ec <unavailable> + 186348\n6    tmpdhy803ry                        0x000055fe19a47cbd <unavailable> + 7357\n7    tmpdhy803ry                        0x000055fe19a47528 <unavailable> + 5416\n8    libc.so.6                          0x00002ba0fff6c460 __libc_start_main + 245\n9    tmpdhy803ry                        0x000055fe19a47249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    for i in 0...n {\n        bell.append([])\n        for _ in 0...i {\n            bell[i].append(0)\n        }\n    }\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1...i {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    \n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1c93608c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1c932ff561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b1c932ff286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b1c932ff13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b1c932febb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b1c932e848a <unavailable> + 1340554\n6    tmp5ewzb7je                        0x000055bdd3876c77 <unavailable> + 7287\n7    tmp5ewzb7je                        0x000055bdd38766b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b1c937f4460 __libc_start_main + 245\n9    tmp5ewzb7je                        0x000055bdd38763d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        bell.append([1])\n        for j in 1...i {\n            bell[i].append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "tmp2824cyd9/tmp2824cyd9.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afeefcdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afeef9d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afeef9d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afeef9d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2824cyd9                        0x000055d85e9d5635 <unavailable> + 5685\n5    libc.so.6                          0x00002afeefecb460 __libc_start_main + 245\n6    tmp2824cyd9                        0x000055d85e9d52e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    for i in 0...n {\n        var row = [Int]()\n        var endValue = 0\n        for j in 0...i {\n            if j == 0 {\n                endValue = 1\n            } else {\n                endValue = endValue * (i - j + 1) / j\n            }\n            row.append(endValue)\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "tmp4p73x3y8/tmp4p73x3y8.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b07b9230c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b07b8f27b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b07b8f27988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b07b8f267b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4p73x3y8                        0x000055b6d9c2a585 <unavailable> + 5509\n5    libc.so.6                          0x00002b07b941c460 __libc_start_main + 245\n6    tmp4p73x3y8                        0x000055b6d9c2a239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n+1), count: n+1)\n    bell[0][0] = 1\n    for i in 1..<n+1 {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1..<i+1 {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n+1), count: n+1)\n    bell[0][0] = 1\n    for i in 1..<n+1 {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1..<i+1 {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1...i {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var arr = [Int]()\n        arr.append(1)\n        for j in 1..<i {\n            arr.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        arr.append(1)\n        bell.append(arr)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad570dfdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad570af4561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ad570af4286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ad570af413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ad570af3bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ad570add48a <unavailable> + 1340554\n6    tmpn9zd7n1m                        0x0000559ceb49ac77 <unavailable> + 7287\n7    tmpn9zd7n1m                        0x0000559ceb49a6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002ad570fe9460 __libc_start_main + 245\n9    tmpn9zd7n1m                        0x0000559ceb49a3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af054588c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af05427f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af05427f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af05427f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af05427ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002af05426848a <unavailable> + 1340554\n6    tmp0529zkiy                        0x0000563d26e15c77 <unavailable> + 7287\n7    tmp0529zkiy                        0x0000563d26e156b8 <unavailable> + 5816\n8    libc.so.6                          0x00002af054774460 __libc_start_main + 245\n9    tmp0529zkiy                        0x0000563d26e153d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af054588c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af05427f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af05427f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af05427f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af05427ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002af05426848a <unavailable> + 1340554\n6    tmp0529zkiy                        0x0000563d26e15c77 <unavailable> + 7287\n7    tmp0529zkiy                        0x0000563d26e156b8 <unavailable> + 5816\n8    libc.so.6                          0x00002af054774460 __libc_start_main + 245\n9    tmp0529zkiy                        0x0000563d26e153d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    for i in 1...n {\n        bell.append([1])\n        for j in 1..<i {\n            bell[i].append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        bell[i].append(1)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "tmplgyz0l3v/tmplgyz0l3v.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afa88c3dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afa88934b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afa88934988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afa889337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplgyz0l3v                        0x000055bbcdd0e725 <unavailable> + 5925\n5    libc.so.6                          0x00002afa88e29460 __libc_start_main + 245\n6    tmplgyz0l3v                        0x000055bbcdd0e3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var bell_row = [Int]()\n        bell_row.append(1)\n        for j in 1..<i {\n            bell_row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        bell_row.append(1)\n        bell.append(bell_row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afc67adfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afc677d6561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002afc677d6286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002afc677d613c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002afc677d5bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002afc677bf48a <unavailable> + 1340554\n6    tmpeoz4tp5k                        0x0000562ebd17bc77 <unavailable> + 7287\n7    tmpeoz4tp5k                        0x0000562ebd17b6b8 <unavailable> + 5816\n8    libc.so.6                          0x00002afc67ccb460 __libc_start_main + 245\n9    tmpeoz4tp5k                        0x0000562ebd17b3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1..<i {\n            temp.append(bell[i-1][j-1] + bell[i-1][j])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "tmp7deg2fdk/tmp7deg2fdk.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7c545bac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7c542b1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7c542b1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7c542b07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7deg2fdk                        0x0000560594b96725 <unavailable> + 5925\n5    libc.so.6                          0x00002b7c547a6460 __libc_start_main + 245\n6    tmp7deg2fdk                        0x0000560594b963d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af054588c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af05427f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af05427f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af05427f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af05427ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002af05426848a <unavailable> + 1340554\n6    tmp0529zkiy                        0x0000563d26e15c77 <unavailable> + 7287\n7    tmp0529zkiy                        0x0000563d26e156b8 <unavailable> + 5816\n8    libc.so.6                          0x00002af054774460 __libc_start_main + 245\n9    tmp0529zkiy                        0x0000563d26e153d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af054588c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af05427f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af05427f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af05427f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af05427ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002af05426848a <unavailable> + 1340554\n6    tmp0529zkiy                        0x0000563d26e15c77 <unavailable> + 7287\n7    tmp0529zkiy                        0x0000563d26e156b8 <unavailable> + 5816\n8    libc.so.6                          0x00002af054774460 __libc_start_main + 245\n9    tmp0529zkiy                        0x0000563d26e153d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1..<i {\n            temp.append(bell[i-1][j-1] + bell[i-1][j])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "tmp7deg2fdk/tmp7deg2fdk.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7c545bac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7c542b1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7c542b1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7c542b07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7deg2fdk                        0x0000560594b96725 <unavailable> + 5925\n5    libc.so.6                          0x00002b7c547a6460 __libc_start_main + 245\n6    tmp7deg2fdk                        0x0000560594b963d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af054588c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af05427f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af05427f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af05427f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af05427ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002af05426848a <unavailable> + 1340554\n6    tmp0529zkiy                        0x0000563d26e15c77 <unavailable> + 7287\n7    tmp0529zkiy                        0x0000563d26e156b8 <unavailable> + 5816\n8    libc.so.6                          0x00002af054774460 __libc_start_main + 245\n9    tmp0529zkiy                        0x0000563d26e153d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af054588c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af05427f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af05427f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af05427f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af05427ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002af05426848a <unavailable> + 1340554\n6    tmp0529zkiy                        0x0000563d26e15c77 <unavailable> + 7287\n7    tmp0529zkiy                        0x0000563d26e156b8 <unavailable> + 5816\n8    libc.so.6                          0x00002af054774460 __libc_start_main + 245\n9    tmp0529zkiy                        0x0000563d26e153d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1..<i {\n            temp.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b485bdf7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b485baee561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b485baee286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b485baee13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b485baedbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b485bad748a <unavailable> + 1340554\n6    tmp5ct219vj                        0x000055d76c822c77 <unavailable> + 7287\n7    tmp5ct219vj                        0x000055d76c8226b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b485bfe3460 __libc_start_main + 245\n9    tmp5ct219vj                        0x000055d76c8223d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    for i in 1...n {\n        bell.append([1])\n        for j in 1..<i {\n            bell[i].append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        bell[i].append(1)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "tmplgyz0l3v/tmplgyz0l3v.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afa88c3dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afa88934b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afa88934988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afa889337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplgyz0l3v                        0x000055bbcdd0e725 <unavailable> + 5925\n5    libc.so.6                          0x00002afa88e29460 __libc_start_main + 245\n6    tmplgyz0l3v                        0x000055bbcdd0e3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    for i in 0...n {\n        bell.append([Int](repeating: 0, count: n + 1))\n        bell[i][0] = bell[i][i] = 1\n        for j in 1..<i {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i - 1][j]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "/tmp/tmp0da3jwc9.swift:7:33: error: cannot assign value of type '()' to subscript of type 'Int'\n        bell[i][0] = bell[i][i] = 1\n                     ~~~~~~~~~~~^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        bell.append([1])\n        for j in 1..<i {\n            bell[i].append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        bell[i].append(1)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "tmpkhd87k7c/tmpkhd87k7c.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7b4aad8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7b4a7cfb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7b4a7cf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7b4a7ce7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkhd87k7c                        0x00005639a05f3725 <unavailable> + 5925\n5    libc.so.6                          0x00002b7b4acc4460 __libc_start_main + 245\n6    tmpkhd87k7c                        0x00005639a05f33d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af054588c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af05427f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af05427f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af05427f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af05427ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002af05426848a <unavailable> + 1340554\n6    tmp0529zkiy                        0x0000563d26e15c77 <unavailable> + 7287\n7    tmp0529zkiy                        0x0000563d26e156b8 <unavailable> + 5816\n8    libc.so.6                          0x00002af054774460 __libc_start_main + 245\n9    tmp0529zkiy                        0x0000563d26e153d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af054588c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af05427f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af05427f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af05427f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af05427ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002af05426848a <unavailable> + 1340554\n6    tmp0529zkiy                        0x0000563d26e15c77 <unavailable> + 7287\n7    tmp0529zkiy                        0x0000563d26e156b8 <unavailable> + 5816\n8    libc.so.6                          0x00002af054774460 __libc_start_main + 245\n9    tmp0529zkiy                        0x0000563d26e153d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1...i {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n+1), count: n+1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1...i {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = Array(repeating: Array(repeating: 0, count: n+1), count: n+1)\n    bell[0][0] = 1\n    for i in 1..<n+1 {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1..<i+1 {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e9b734c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e9b42b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2e9b42b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2e9b42b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2e9b42abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b2e9b41448a <unavailable> + 1340554\n6    tmp0lo62hcx                        0x0000562a6d437c77 <unavailable> + 7287\n7    tmp0lo62hcx                        0x0000562a6d4376b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b2e9b920460 __libc_start_main + 245\n9    tmp0lo62hcx                        0x0000562a6d4373d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    for i in 0...n {\n        bell.append([Int](repeating: 0, count: i+1))\n    }\n    bell[0][0] = 1\n    for i in 1..<n {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1..<i {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n        bell[i][i] = bell[i][i-1]\n    }\n    return bell[n-1][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "tmp7yykp9ak/tmp7yykp9ak.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfb3efbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfb3bf2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfb3bf2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfb3bf17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7yykp9ak                        0x000055614bc4e685 <unavailable> + 5765\n5    libc.so.6                          0x00002adfb40e7460 __libc_start_main + 245\n6    tmp7yykp9ak                        0x000055614bc4e339 <unavailable> + 4921\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e9b734c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e9b42b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2e9b42b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2e9b42b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2e9b42abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b2e9b41448a <unavailable> + 1340554\n6    tmp0lo62hcx                        0x0000562a6d437c77 <unavailable> + 7287\n7    tmp0lo62hcx                        0x0000562a6d4376b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b2e9b920460 __libc_start_main + 245\n9    tmp0lo62hcx                        0x0000562a6d4373d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1,1])\n    for i in 2...n {\n        var temp = [Int]()\n        temp.append(1)\n        for j in 1..<i {\n            temp.append(bell[i-1][j-1] + bell[i-1][j])\n        }\n        temp.append(1)\n        bell.append(temp)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "tmp7deg2fdk/tmp7deg2fdk.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7c545bac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7c542b1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7c542b1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7c542b07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7deg2fdk                        0x0000560594b96725 <unavailable> + 5925\n5    libc.so.6                          0x00002b7c547a6460 __libc_start_main + 245\n6    tmp7deg2fdk                        0x0000560594b963d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = Array(repeating: Array(repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1...i {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e9b734c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e9b42b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2e9b42b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2e9b42b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2e9b42abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b2e9b41448a <unavailable> + 1340554\n6    tmp0lo62hcx                        0x0000562a6d437c77 <unavailable> + 7287\n7    tmp0lo62hcx                        0x0000562a6d4376b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b2e9b920460 __libc_start_main + 245\n9    tmp0lo62hcx                        0x0000562a6d4373d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var row = [Int]()\n        row.append(1)\n        for j in 1..<i {\n            row.append(bell[i-1][j-1] + bell[i][j-1])\n        }\n        row.append(1)\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e9b734c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e9b42b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2e9b42b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2e9b42b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2e9b42abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b2e9b41448a <unavailable> + 1340554\n6    tmp0lo62hcx                        0x0000562a6d437c77 <unavailable> + 7287\n7    tmp0lo62hcx                        0x0000562a6d4376b8 <unavailable> + 5816\n8    libc.so.6                          0x00002b2e9b920460 __libc_start_main + 245\n9    tmp0lo62hcx                        0x0000562a6d4373d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    bell[0][0] = 1\n    for i in 1..<n + 1 {\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in 1..<i + 1 {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1665509713,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    bell.append([1])\n    bell.append([1, 1])\n    for i in 2...n {\n        var bell_i = [Int]()\n        bell_i.append(1)\n        for j in 1..<i {\n            bell_i.append(bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n        bell_i.append(1)\n        bell.append(bell_i)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba698d80c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba698a77561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ba698a77286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ba698a7713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ba698a76bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ba698a6048a <unavailable> + 1340554\n6    tmp60zlu6qw                        0x000055e09c975c77 <unavailable> + 7287\n7    tmp60zlu6qw                        0x000055e09c9756b8 <unavailable> + 5816\n8    libc.so.6                          0x00002ba698f6c460 __libc_start_main + 245\n9    tmp60zlu6qw                        0x000055e09c9753d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    for i in 0...n {\n        var row = [Int]()\n        var endValue = 0\n        for j in 0...i {\n            if j == 0 {\n                endValue = 1\n            } else {\n                endValue = endValue * (i - j + 1) / j\n            }\n            row.append(endValue)\n        }\n        bell.append(row)\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "tmp4p73x3y8/tmp4p73x3y8.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b07b9230c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b07b8f27b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b07b8f27988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b07b8f267b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4p73x3y8                        0x000055b6d9c2a585 <unavailable> + 5509\n5    libc.so.6                          0x00002b07b941c460 __libc_start_main + 245\n6    tmp4p73x3y8                        0x000055b6d9c2a239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find nth bell number.\nfunc bell_Number(n: Int) -> Int {\n    var bell = [[Int]]()\n    for i in 0...n {\n        bell.append([Int](repeating: 0, count: i+1))\n    }\n    bell[0][0] = 1\n    for i in 1...n {\n        bell[i][0] = bell[i-1][i-1]\n        for j in 1...i {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        }\n    }\n    return bell[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(bell_Number(n: 2) == 2)\nassert(bell_Number(n: 3) == 5)\nassert(bell_Number(n: 4) == 15)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}