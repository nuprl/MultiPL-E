{
  "name": "mbpp_229_re_arrange_array",
  "language": "swift",
  "prompt": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] > 0 {\n            arr.swapAt(i, j)\n            j -= 1\n        } else {\n            i += 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517253,
      "stdout": "",
      "stderr": "tmpv778obts/tmpv778obts.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5353011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5352d08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5352d08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5352d077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpv778obts                        0x0000559ea7734531 <unavailable> + 5425\n5    libc.so.6                          0x00002b53531fd460 __libc_start_main + 245\n6    tmpv778obts                        0x0000559ea77340c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            result.swapAt(i, j)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517258,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpkde_8job/tmpkde_8job.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a78c98c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a7898fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a7898f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a7898e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkde_8job                        0x000055ddef38b741 <unavailable> + 5953\n5    libc.so.6                          0x00002b9a78e84460 __libc_start_main + 245\n6    tmpkde_8job                        0x000055ddef38b2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] > 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517253,
      "stdout": "",
      "stderr": "tmpeaswwer1/tmpeaswwer1.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b377fd0fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b377fa06b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b377fa06988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b377fa057b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpeaswwer1                        0x000055a87599d4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002b377fefb460 __libc_start_main + 245\n6    tmpeaswwer1                        0x000055a87599d079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    \n    while i < j {\n        while i < j && arr[i] < 0 {\n            i += 1\n        }\n        while i < j && arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517253,
      "stdout": "",
      "stderr": "tmpj9if_n3q/tmpj9if_n3q.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9939070c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9938d67b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9938d67988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9938d667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpj9if_n3q                        0x0000556748f9d4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002b993925c460 __libc_start_main + 245\n6    tmpj9if_n3q                        0x0000556748f9d079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if result[i] < 0 {\n            i += 1\n        } else if result[j] > 0 {\n            j -= 1\n        } else {\n            result.swapAt(i, j)\n            i += 1\n            j -= 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517253,
      "stdout": "",
      "stderr": "tmp_mn9nfju/tmp_mn9nfju.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b86aedbcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b86aeab3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b86aeab3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b86aeab27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_mn9nfju                        0x0000556725c1e531 <unavailable> + 5425\n5    libc.so.6                          0x00002b86aefa8460 __libc_start_main + 245\n6    tmp_mn9nfju                        0x0000556725c1e0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            result.append(arr[i])\n        }\n    }\n    for i in 0..<n {\n        if arr[i] >= 0 {\n            result.append(arr[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517253,
      "stdout": "",
      "stderr": "tmp8ld63wvp/tmp8ld63wvp.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abfd51ccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abfd4ec3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abfd4ec3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abfd4ec27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8ld63wvp                        0x00005579dcfb76c1 <unavailable> + 5825\n5    libc.so.6                          0x00002abfd53b8460 __libc_start_main + 245\n6    tmp8ld63wvp                        0x00005579dcfb7259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = 0\n    while i < n {\n        if arr[i] < 0 {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n            j += 1\n        }\n        i += 1\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpqlxo2t8y/tmpqlxo2t8y.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6559c6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6559965b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6559965988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b65599647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqlxo2t8y                        0x0000556400b63531 <unavailable> + 5425\n5    libc.so.6                          0x00002b6559e5a460 __libc_start_main + 245\n6    tmpqlxo2t8y                        0x0000556400b630c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpqlxo2t8y/tmpqlxo2t8y.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6559c6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6559965b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6559965988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b65599647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqlxo2t8y                        0x0000556400b63531 <unavailable> + 5425\n5    libc.so.6                          0x00002b6559e5a460 __libc_start_main + 245\n6    tmpqlxo2t8y                        0x0000556400b630c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var j = 0\n    for i in 0..<n {\n        if arr[i] < 0 {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n            j += 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else if arr[j] >= 0 {\n            j -= 1\n        } else {\n            arr.swapAt(i, j)\n            i += 1\n            j -= 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpxf7r1yrs/tmpxf7r1yrs.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5e35b4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5e32abb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5e32ab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5e32aa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxf7r1yrs                        0x00005610bd179531 <unavailable> + 5425\n5    libc.so.6                          0x00002ad5e37a0460 __libc_start_main + 245\n6    tmpxf7r1yrs                        0x00005610bd1790c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    \n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "tmpnrl3kl0i/tmpnrl3kl0i.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac3f0cafc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac3f09a6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac3f09a6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac3f09a57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnrl3kl0i                        0x000055eed3bd84e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ac3f0e9b460 __libc_start_main + 245\n6    tmpnrl3kl0i                        0x000055eed3bd8079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else {\n            arr.swapAt(i, j)\n            j -= 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmp2c5bu64k/tmp2c5bu64k.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3fef297c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3feef8eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3feef8e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3feef8d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2c5bu64k                        0x000056445602c531 <unavailable> + 5425\n5    libc.so.6                          0x00002b3fef483460 __libc_start_main + 245\n6    tmp2c5bu64k                        0x000056445602c0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    \n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        \n        while arr[j] > 0 {\n            j -= 1\n        }\n        \n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    \n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "tmp3aro27el/tmp3aro27el.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba33d2f7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba33cfeeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba33cfee988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba33cfed7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3aro27el                        0x00005622d6daa4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ba33d4e3460 __libc_start_main + 245\n6    tmp3aro27el                        0x00005622d6daa079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    \n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "tmp0e3po0oj/tmp0e3po0oj.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad570572c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad570269b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad570269988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5702687b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0e3po0oj                        0x000055a649b50531 <unavailable> + 5425\n5    libc.so.6                          0x00002ad57075e460 __libc_start_main + 245\n6    tmp0e3po0oj                        0x000055a649b500c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] >= 0 {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpr4u5s45f/tmpr4u5s45f.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4b98a02c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4b986f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4b986f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4b986f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpr4u5s45f                        0x00005577bb5e7531 <unavailable> + 5425\n5    libc.so.6                          0x00002b4b98bee460 __libc_start_main + 245\n6    tmpr4u5s45f                        0x00005577bb5e70c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmp9x67u3kc/tmp9x67u3kc.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aaed8220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aaed7f17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aaed7f17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aaed7f167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9x67u3kc                        0x0000562798b9f721 <unavailable> + 5921\n5    libc.so.6                          0x00002aaed840c460 __libc_start_main + 245\n6    tmp9x67u3kc                        0x0000562798b9f2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while i < j && arr[i] < 0 {\n            i += 1\n        }\n        while i < j && arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmp_geqy7dp/tmp_geqy7dp.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4bc178cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4bc1483b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4bc1483988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4bc14827b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_geqy7dp                        0x000055aefe780531 <unavailable> + 5425\n5    libc.so.6                          0x00002b4bc1978460 __libc_start_main + 245\n6    tmp_geqy7dp                        0x000055aefe7800c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negatives = [Int]()\n    var positives = [Int]()\n    \n    for i in 0..<n {\n        if arr[i] < 0 {\n            negatives.append(arr[i])\n        } else {\n            positives.append(arr[i])\n        }\n    }\n    \n    result = negatives + positives\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "tmpc_g2gkku/tmpc_g2gkku.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab53c8bac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab53c5b1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab53c5b1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab53c5b07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc_g2gkku                        0x00005567aebb6721 <unavailable> + 5921\n5    libc.so.6                          0x00002ab53caa6460 __libc_start_main + 245\n6    tmpc_g2gkku                        0x00005567aebb62b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while i < j && result[i] < 0 {\n            i += 1\n        }\n        while i < j && result[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            let temp = result[i]\n            result[i] = result[j]\n            result[j] = temp\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmp245peqsy/tmp245peqsy.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab1b22a3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab1b1f9ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab1b1f9a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab1b1f997b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp245peqsy                        0x0000557b1f3884e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ab1b248f460 __libc_start_main + 245\n6    tmp245peqsy                        0x0000557b1f388079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    \n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else {\n            arr.swapAt(i, j)\n            j -= 1\n        }\n    }\n    \n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmp6w370grf/tmp6w370grf.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afbc63d1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afbc60c8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afbc60c8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afbc60c77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6w370grf                        0x000055558ee71531 <unavailable> + 5425\n5    libc.so.6                          0x00002afbc65bd460 __libc_start_main + 245\n6    tmp6w370grf                        0x000055558ee710c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else if arr[j] > 0 {\n            j -= 1\n        } else {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpwrkjk_j1/tmpwrkjk_j1.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81a9031c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81a8d28b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b81a8d28988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b81a8d277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwrkjk_j1                        0x000056130d654531 <unavailable> + 5425\n5    libc.so.6                          0x00002b81a921d460 __libc_start_main + 245\n6    tmpwrkjk_j1                        0x000056130d6540c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmp4398ksxm/tmp4398ksxm.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7fc9f09c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7fc9c00b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7fc9c00988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7fc9bff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4398ksxm                        0x00005601c16134e1 <unavailable> + 5345\n5    libc.so.6                          0x00002b7fca0f5460 __libc_start_main + 245\n6    tmp4398ksxm                        0x00005601c1613079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] > 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517253,
      "stdout": "",
      "stderr": "tmpeaswwer1/tmpeaswwer1.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b377fd0fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b377fa06b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b377fa06988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b377fa057b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpeaswwer1                        0x000055a87599d4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002b377fefb460 __libc_start_main + 245\n6    tmpeaswwer1                        0x000055a87599d079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = arr\n    var i = 0\n    var j = n\n    while i < j {\n        if result[i] < 0 {\n            i += 1\n        } else {\n            result.swapAt(i, j)\n            j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3011969c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3011660561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b3011660286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b301166013c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b301165fbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b301164a8a2 <unavailable> + 1345698\n6    libswiftCore.so                    0x00002b301164a815 <unavailable> + 1345557\n7    libswiftCore.so                    0x00002b301164a450 MutableCollection.swapAt(_:_:) + 377\n8    tmpq7xqsz2k                        0x000055bee1195948 <unavailable> + 6472\n9    tmpq7xqsz2k                        0x000055bee119541d <unavailable> + 5149\n10   libc.so.6                          0x00002b3011b55460 __libc_start_main + 245\n11   tmpq7xqsz2k                        0x000055bee11950c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var neg = [Int]()\n    var pos = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            neg.append(arr[i])\n        } else {\n            pos.append(arr[i])\n        }\n    }\n    result.append(contentsOf: neg)\n    result.append(contentsOf: pos)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpnqk7x3pl/tmpnqk7x3pl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b22b896dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22b8664b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22b8664988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22b86637b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnqk7x3pl                        0x00005589f31f6741 <unavailable> + 5953\n5    libc.so.6                          0x00002b22b8b59460 __libc_start_main + 245\n6    tmpnqk7x3pl                        0x00005589f31f62d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] > 0 {\n            arr.swapAt(i, j)\n            j -= 1\n        } else {\n            i += 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517253,
      "stdout": "",
      "stderr": "tmpv778obts/tmpv778obts.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5353011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5352d08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5352d08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5352d077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpv778obts                        0x0000559ea7734531 <unavailable> + 5425\n5    libc.so.6                          0x00002b53531fd460 __libc_start_main + 245\n6    tmpv778obts                        0x0000559ea77340c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while i < j && result[i] < 0 {\n            i += 1\n        }\n        while i < j && result[j] >= 0 {\n            j -= 1\n        }\n        if i < j {\n            result.swapAt(i, j)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpvgxw27mt/tmpvgxw27mt.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e23550c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e23247b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2e23247988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2e232467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvgxw27mt                        0x0000564a129cb531 <unavailable> + 5425\n5    libc.so.6                          0x00002b2e2373c460 __libc_start_main + 245\n6    tmpvgxw27mt                        0x0000564a129cb0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmp9x67u3kc/tmp9x67u3kc.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aaed8220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aaed7f17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aaed7f17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aaed7f167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9x67u3kc                        0x0000562798b9f721 <unavailable> + 5921\n5    libc.so.6                          0x00002aaed840c460 __libc_start_main + 245\n6    tmp9x67u3kc                        0x0000562798b9f2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var new_arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if new_arr[i] < 0 {\n            i += 1\n        } else if new_arr[j] > 0 {\n            j -= 1\n        } else {\n            new_arr.swapAt(i, j)\n            i += 1\n            j -= 1\n        }\n    }\n    return new_arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "tmpffvzjqfv/tmpffvzjqfv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad0292acc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad028fa3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad028fa3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad028fa27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpffvzjqfv                        0x0000558827f16531 <unavailable> + 5425\n5    libc.so.6                          0x00002ad029498460 __libc_start_main + 245\n6    tmpffvzjqfv                        0x0000558827f160c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else if arr[j] >= 0 {\n            j -= 1\n        } else {\n            arr.swapAt(i, j)\n            i += 1\n            j -= 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpxf7r1yrs/tmpxf7r1yrs.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5e35b4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5e32abb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5e32ab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5e32aa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxf7r1yrs                        0x00005610bd179531 <unavailable> + 5425\n5    libc.so.6                          0x00002ad5e37a0460 __libc_start_main + 245\n6    tmpxf7r1yrs                        0x00005610bd1790c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    \n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    \n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpjlh4oem8/tmpjlh4oem8.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b64961fec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6495ef5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6495ef5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6495ef47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjlh4oem8                        0x000055737d584741 <unavailable> + 5953\n5    libc.so.6                          0x00002b64963ea460 __libc_start_main + 245\n6    tmpjlh4oem8                        0x000055737d5842d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    \n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "tmpnrl3kl0i/tmpnrl3kl0i.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac3f0cafc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac3f09a6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac3f09a6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac3f09a57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnrl3kl0i                        0x000055eed3bd84e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ac3f0e9b460 __libc_start_main + 245\n6    tmpnrl3kl0i                        0x000055eed3bd8079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    \n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    \n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpjlh4oem8/tmpjlh4oem8.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b64961fec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6495ef5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6495ef5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6495ef47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjlh4oem8                        0x000055737d584741 <unavailable> + 5953\n5    libc.so.6                          0x00002b64963ea460 __libc_start_main + 245\n6    tmpjlh4oem8                        0x000055737d5842d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] >= 0 {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmprv3zsbgz/tmprv3zsbgz.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b31674d8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b31671cfb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b31671cf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b31671ce7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprv3zsbgz                        0x0000557d732f94e1 <unavailable> + 5345\n5    libc.so.6                          0x00002b31676c4460 __libc_start_main + 245\n6    tmprv3zsbgz                        0x0000557d732f9079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpt3qjr07x/tmpt3qjr07x.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4cae22ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4cadf21b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4cadf21988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4cadf207b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt3qjr07x                        0x000056428e5db531 <unavailable> + 5425\n5    libc.so.6                          0x00002b4cae416460 __libc_start_main + 245\n6    tmpt3qjr07x                        0x000056428e5db0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpkde_8job/tmpkde_8job.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a78c98c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a7898fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a7898f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a7898e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkde_8job                        0x000055ddef38b741 <unavailable> + 5953\n5    libc.so.6                          0x00002b9a78e84460 __libc_start_main + 245\n6    tmpkde_8job                        0x000055ddef38b2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmp9x67u3kc/tmp9x67u3kc.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aaed8220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aaed7f17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aaed7f17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aaed7f167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9x67u3kc                        0x0000562798b9f721 <unavailable> + 5921\n5    libc.so.6                          0x00002aaed840c460 __libc_start_main + 245\n6    tmp9x67u3kc                        0x0000562798b9f2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else {\n            arr.swapAt(i, j)\n            j -= 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmp2c5bu64k/tmp2c5bu64k.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3fef297c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3feef8eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3feef8e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3feef8d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2c5bu64k                        0x000056445602c531 <unavailable> + 5425\n5    libc.so.6                          0x00002b3fef483460 __libc_start_main + 245\n6    tmp2c5bu64k                        0x000056445602c0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var neg = [Int]()\n    var pos = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            neg.append(arr[i])\n        } else {\n            pos.append(arr[i])\n        }\n    }\n    result = neg + pos\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpdbwbn4ku/tmpdbwbn4ku.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad691fa3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad691c9ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad691c9a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad691c997b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdbwbn4ku                        0x000055e4a76f0721 <unavailable> + 5921\n5    libc.so.6                          0x00002ad69218f460 __libc_start_main + 245\n6    tmpdbwbn4ku                        0x000055e4a76f02b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else if arr[j] > 0 {\n            j -= 1\n        } else {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpwrkjk_j1/tmpwrkjk_j1.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81a9031c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81a8d28b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b81a8d28988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b81a8d277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwrkjk_j1                        0x000056130d654531 <unavailable> + 5425\n5    libc.so.6                          0x00002b81a921d460 __libc_start_main + 245\n6    tmpwrkjk_j1                        0x000056130d6540c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while i < n && result[i] < 0 {\n            i += 1\n        }\n        while j >= 0 && result[j] >= 0 {\n            j -= 1\n        }\n        if i < j {\n            result.swapAt(i, j)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "tmp3dubz440/tmp3dubz440.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab398212c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab397f09b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab397f09988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab397f087b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3dubz440                        0x000055d9ab9c1531 <unavailable> + 5425\n5    libc.so.6                          0x00002ab3983fe460 __libc_start_main + 245\n6    tmp3dubz440                        0x000055d9ab9c10c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    \n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    \n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpjlh4oem8/tmpjlh4oem8.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b64961fec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6495ef5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6495ef5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6495ef47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjlh4oem8                        0x000055737d584741 <unavailable> + 5953\n5    libc.so.6                          0x00002b64963ea460 __libc_start_main + 245\n6    tmpjlh4oem8                        0x000055737d5842d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpkde_8job/tmpkde_8job.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a78c98c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a7898fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a7898f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a7898e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkde_8job                        0x000055ddef38b741 <unavailable> + 5953\n5    libc.so.6                          0x00002b9a78e84460 __libc_start_main + 245\n6    tmpkde_8job                        0x000055ddef38b2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpqlxo2t8y/tmpqlxo2t8y.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6559c6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6559965b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6559965988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b65599647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqlxo2t8y                        0x0000556400b63531 <unavailable> + 5425\n5    libc.so.6                          0x00002b6559e5a460 __libc_start_main + 245\n6    tmpqlxo2t8y                        0x0000556400b630c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] >= 0 {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpr4u5s45f/tmpr4u5s45f.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4b98a02c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4b986f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4b986f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4b986f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpr4u5s45f                        0x00005577bb5e7531 <unavailable> + 5425\n5    libc.so.6                          0x00002b4b98bee460 __libc_start_main + 245\n6    tmpr4u5s45f                        0x00005577bb5e70c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    var negativeArr = [Int]()\n    var positiveArr = [Int]()\n    \n    for i in 0..<n {\n        if arr[i] < 0 {\n            negativeArr.append(arr[i])\n        } else {\n            positiveArr.append(arr[i])\n        }\n    }\n    \n    newArr.append(contentsOf: negativeArr)\n    newArr.append(contentsOf: positiveArr)\n    \n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "tmp_szel1df/tmp_szel1df.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b19bb649c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b19bb340b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b19bb340988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b19bb33f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_szel1df                        0x00005556fff8f741 <unavailable> + 5953\n5    libc.so.6                          0x00002b19bb835460 __libc_start_main + 245\n6    tmp_szel1df                        0x00005556fff8f2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpt3qjr07x/tmpt3qjr07x.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4cae22ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4cadf21b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4cadf21988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4cadf207b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt3qjr07x                        0x000056428e5db531 <unavailable> + 5425\n5    libc.so.6                          0x00002b4cae416460 __libc_start_main + 245\n6    tmpt3qjr07x                        0x000056428e5db0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while i < j && result[i] < 0 {\n            i += 1\n        }\n        while i < j && result[j] >= 0 {\n            j -= 1\n        }\n        if i < j {\n            result.swapAt(i, j)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpvgxw27mt/tmpvgxw27mt.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e23550c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e23247b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2e23247988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2e232467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvgxw27mt                        0x0000564a129cb531 <unavailable> + 5425\n5    libc.so.6                          0x00002b2e2373c460 __libc_start_main + 245\n6    tmpvgxw27mt                        0x0000564a129cb0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else {\n            arr.swapAt(i, j)\n            j -= 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmp2c5bu64k/tmp2c5bu64k.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3fef297c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3feef8eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3feef8e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3feef8d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2c5bu64k                        0x000056445602c531 <unavailable> + 5425\n5    libc.so.6                          0x00002b3fef483460 __libc_start_main + 245\n6    tmp2c5bu64k                        0x000056445602c0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    \n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else if arr[j] > 0 {\n            j -= 1\n        } else {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n            i += 1\n            j -= 1\n        }\n    }\n    \n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "tmprnb1ce5z/tmprnb1ce5z.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b9112cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b90e23b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b90e23988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b90e227b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprnb1ce5z                        0x00005604fd4d04e1 <unavailable> + 5345\n5    libc.so.6                          0x00002b2b91318460 __libc_start_main + 245\n6    tmprnb1ce5z                        0x00005604fd4d0079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmp4398ksxm/tmp4398ksxm.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7fc9f09c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7fc9c00b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7fc9c00988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7fc9bff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4398ksxm                        0x00005601c16134e1 <unavailable> + 5345\n5    libc.so.6                          0x00002b7fca0f5460 __libc_start_main + 245\n6    tmp4398ksxm                        0x00005601c1613079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    \n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    \n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpjlh4oem8/tmpjlh4oem8.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b64961fec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6495ef5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6495ef5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6495ef47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjlh4oem8                        0x000055737d584741 <unavailable> + 5953\n5    libc.so.6                          0x00002b64963ea460 __libc_start_main + 245\n6    tmpjlh4oem8                        0x000055737d5842d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = arr.count - 1\n    while i < j {\n        if arr[i] < 0 {\n            result.append(arr[i])\n            i += 1\n        } else {\n            result.append(arr[j])\n            j -= 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "tmp937kt0ic/tmp937kt0ic.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b37096bac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b37093b1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b37093b1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b37093b07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp937kt0ic                        0x000055bc24c22591 <unavailable> + 5521\n5    libc.so.6                          0x00002b37098a6460 __libc_start_main + 245\n6    tmp937kt0ic                        0x000055bc24c22129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else if arr[j] >= 0 {\n            j -= 1\n        } else {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpw_x3zg8x/tmpw_x3zg8x.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b54e62fdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b54e5ff4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b54e5ff4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b54e5ff37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw_x3zg8x                        0x000056316019c531 <unavailable> + 5425\n5    libc.so.6                          0x00002b54e64e9460 __libc_start_main + 245\n6    tmpw_x3zg8x                        0x000056316019c0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else if arr[j] > 0 {\n            j -= 1\n        } else {\n            arr.swapAt(i, j)\n            i += 1\n            j -= 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpkaxc2bea/tmpkaxc2bea.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b93a8ac9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b93a87c0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b93a87c0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b93a87bf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkaxc2bea                        0x0000564fc66b3531 <unavailable> + 5425\n5    libc.so.6                          0x00002b93a8cb5460 __libc_start_main + 245\n6    tmpkaxc2bea                        0x0000564fc66b30c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else if arr[j] >= 0 {\n            j -= 1\n        } else {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpw_x3zg8x/tmpw_x3zg8x.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b54e62fdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b54e5ff4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b54e5ff4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b54e5ff37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw_x3zg8x                        0x000056316019c531 <unavailable> + 5425\n5    libc.so.6                          0x00002b54e64e9460 __libc_start_main + 245\n6    tmpw_x3zg8x                        0x000056316019c0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmp4398ksxm/tmp4398ksxm.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7fc9f09c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7fc9c00b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7fc9c00988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7fc9bff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4398ksxm                        0x00005601c16134e1 <unavailable> + 5345\n5    libc.so.6                          0x00002b7fca0f5460 __libc_start_main + 245\n6    tmp4398ksxm                        0x00005601c1613079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if result[i] < 0 {\n            i += 1\n        } else if result[j] > 0 {\n            j -= 1\n        } else {\n            result.swapAt(i, j)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "tmpdlv3qy3g/tmpdlv3qy3g.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b20b288fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b20b2586b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b20b2586988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b20b25857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdlv3qy3g                        0x000056110c743531 <unavailable> + 5425\n5    libc.so.6                          0x00002b20b2a7b460 __libc_start_main + 245\n6    tmpdlv3qy3g                        0x000056110c7430c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else if arr[j] > 0 {\n            j -= 1\n        } else {\n            arr.swapAt(i, j)\n            i += 1\n            j -= 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpkaxc2bea/tmpkaxc2bea.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b93a8ac9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b93a87c0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b93a87c0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b93a87bf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkaxc2bea                        0x0000564fc66b3531 <unavailable> + 5425\n5    libc.so.6                          0x00002b93a8cb5460 __libc_start_main + 245\n6    tmpkaxc2bea                        0x0000564fc66b30c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    \n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] > 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpzr_a7s4i/tmpzr_a7s4i.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afabc1d7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afabbeceb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afabbece988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afabbecd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzr_a7s4i                        0x000055a7420c44e1 <unavailable> + 5345\n5    libc.so.6                          0x00002afabc3c3460 __libc_start_main + 245\n6    tmpzr_a7s4i                        0x000055a7420c4079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else if arr[j] > 0 {\n            j -= 1\n        } else {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n            i += 1\n            j -= 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpswp4z04r/tmpswp4z04r.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b06a3685c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b06a337cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b06a337c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b06a337b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpswp4z04r                        0x000055cf3de6c4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002b06a3871460 __libc_start_main + 245\n6    tmpswp4z04r                        0x000055cf3de6c079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = -1\n    for j in 0..<n {\n        if arr[j] < 0 {\n            i += 1\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    \n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    \n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpjlh4oem8/tmpjlh4oem8.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b64961fec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6495ef5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6495ef5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6495ef47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjlh4oem8                        0x000055737d584741 <unavailable> + 5953\n5    libc.so.6                          0x00002b64963ea460 __libc_start_main + 245\n6    tmpjlh4oem8                        0x000055737d5842d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var neg = [Int]()\n    var pos = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            neg.append(arr[i])\n        } else {\n            pos.append(arr[i])\n        }\n    }\n    result.append(contentsOf: neg)\n    result.append(contentsOf: pos)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpnqk7x3pl/tmpnqk7x3pl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b22b896dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22b8664b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22b8664988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22b86637b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnqk7x3pl                        0x00005589f31f6741 <unavailable> + 5953\n5    libc.so.6                          0x00002b22b8b59460 __libc_start_main + 245\n6    tmpnqk7x3pl                        0x00005589f31f62d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = arr\n    var i = 0\n    var j = n - 1\n    \n    while i < j {\n        while i < j && result[i] < 0 {\n            i += 1\n        }\n        while i < j && result[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            let temp = result[i]\n            result[i] = result[j]\n            result[j] = temp\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "tmp1mao1xex/tmp1mao1xex.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad8cdddcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad8cdad3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad8cdad3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad8cdad27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1mao1xex                        0x000055df709cf4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ad8cdfc8460 __libc_start_main + 245\n6    tmp1mao1xex                        0x000055df709cf079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n            i += 1\n            j -= 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpk4qczd59/tmpk4qczd59.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1ce0236c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1cdff2db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1cdff2d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1cdff2c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk4qczd59                        0x000055d5acc14531 <unavailable> + 5425\n5    libc.so.6                          0x00002b1ce0422460 __libc_start_main + 245\n6    tmpk4qczd59                        0x000055d5acc140c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmp9x67u3kc/tmp9x67u3kc.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aaed8220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aaed7f17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aaed7f17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aaed7f167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9x67u3kc                        0x0000562798b9f721 <unavailable> + 5921\n5    libc.so.6                          0x00002aaed840c460 __libc_start_main + 245\n6    tmp9x67u3kc                        0x0000562798b9f2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpkde_8job/tmpkde_8job.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a78c98c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a7898fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a7898f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a7898e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkde_8job                        0x000055ddef38b741 <unavailable> + 5953\n5    libc.so.6                          0x00002b9a78e84460 __libc_start_main + 245\n6    tmpkde_8job                        0x000055ddef38b2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] > 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpkr98k_gn/tmpkr98k_gn.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b12f118dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b12f0e84b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b12f0e84988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b12f0e837b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkr98k_gn                        0x00005603a0c19531 <unavailable> + 5425\n5    libc.so.6                          0x00002b12f1379460 __libc_start_main + 245\n6    tmpkr98k_gn                        0x00005603a0c190c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while i < j && result[i] < 0 {\n            i += 1\n        }\n        while i < j && result[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            result.swapAt(i, j)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpl9jaodbx/tmpl9jaodbx.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b54ebdd9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b54ebad0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b54ebad0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b54ebacf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl9jaodbx                        0x000055b1dd4c2531 <unavailable> + 5425\n5    libc.so.6                          0x00002b54ebfc5460 __libc_start_main + 245\n6    tmpl9jaodbx                        0x000055b1dd4c20c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpqlxo2t8y/tmpqlxo2t8y.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6559c6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6559965b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6559965988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b65599647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqlxo2t8y                        0x0000556400b63531 <unavailable> + 5425\n5    libc.so.6                          0x00002b6559e5a460 __libc_start_main + 245\n6    tmpqlxo2t8y                        0x0000556400b630c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else if arr[j] > 0 {\n            j -= 1\n        } else {\n            arr.swapAt(i, j)\n            i += 1\n            j -= 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpkaxc2bea/tmpkaxc2bea.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b93a8ac9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b93a87c0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b93a87c0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b93a87bf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkaxc2bea                        0x0000564fc66b3531 <unavailable> + 5425\n5    libc.so.6                          0x00002b93a8cb5460 __libc_start_main + 245\n6    tmpkaxc2bea                        0x0000564fc66b30c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    \n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        \n        while arr[j] > 0 {\n            j -= 1\n        }\n        \n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    \n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "tmphnzlfdxg/tmphnzlfdxg.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aea93982c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aea93679b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aea93679988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aea936787b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphnzlfdxg                        0x000055ae35e96531 <unavailable> + 5425\n5    libc.so.6                          0x00002aea93b6e460 __libc_start_main + 245\n6    tmphnzlfdxg                        0x000055ae35e960c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpt3qjr07x/tmpt3qjr07x.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4cae22ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4cadf21b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4cadf21988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4cadf207b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt3qjr07x                        0x000056428e5db531 <unavailable> + 5425\n5    libc.so.6                          0x00002b4cae416460 __libc_start_main + 245\n6    tmpt3qjr07x                        0x000056428e5db0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    \n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    \n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpb649j_mh/tmpb649j_mh.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab47e896c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab47e58db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab47e58d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab47e58c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb649j_mh                        0x0000555615b5f741 <unavailable> + 5953\n5    libc.so.6                          0x00002ab47ea82460 __libc_start_main + 245\n6    tmpb649j_mh                        0x0000555615b5f2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var newArr = arr\n    var i = 0\n    var j = n - 1\n    \n    while i < j {\n        if newArr[i] < 0 {\n            i += 1\n        } else if newArr[j] > 0 {\n            j -= 1\n        } else {\n            let temp = newArr[i]\n            newArr[i] = newArr[j]\n            newArr[j] = temp\n            i += 1\n            j -= 1\n        }\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "tmp3kg10pa5/tmp3kg10pa5.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7c1071ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7c10415b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7c10415988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7c104147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3kg10pa5                        0x000056063389e4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002b7c1090a460 __libc_start_main + 245\n6    tmp3kg10pa5                        0x000056063389e079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpqlxo2t8y/tmpqlxo2t8y.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6559c6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6559965b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6559965988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b65599647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqlxo2t8y                        0x0000556400b63531 <unavailable> + 5425\n5    libc.so.6                          0x00002b6559e5a460 __libc_start_main + 245\n6    tmpqlxo2t8y                        0x0000556400b630c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else if arr[j] > 0 {\n            j -= 1\n        } else {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpwrkjk_j1/tmpwrkjk_j1.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81a9031c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81a8d28b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b81a8d28988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b81a8d277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwrkjk_j1                        0x000056130d654531 <unavailable> + 5425\n5    libc.so.6                          0x00002b81a921d460 __libc_start_main + 245\n6    tmpwrkjk_j1                        0x000056130d6540c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    \n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            swap(&arr[i], &arr[j])\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "/tmp/tmpwe_wq_qs.swift:16:18: error: overlapping accesses to 'arr', but modification requires exclusive access; consider calling MutableCollection.swapAt(_:_:)\n            swap(&arr[i], &arr[j])\n            ~~~~~^~~~~~~~~~~~~~~~~\n            arr.swapAt(i, j)\n/tmp/tmpwe_wq_qs.swift:16:27: note: conflicting access is here\n            swap(&arr[i], &arr[j])\n                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if result[i] < 0 {\n            i += 1\n        } else {\n            result.swapAt(i, j)\n            j -= 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpi1gbvbz7/tmpi1gbvbz7.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b84e3989c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b84e3680b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b84e3680988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b84e367f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpi1gbvbz7                        0x0000561409ed0531 <unavailable> + 5425\n5    libc.so.6                          0x00002b84e3b75460 __libc_start_main + 245\n6    tmpi1gbvbz7                        0x0000561409ed00c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while i < j && result[i] < 0 {\n            i += 1\n        }\n        while i < j && result[j] >= 0 {\n            j -= 1\n        }\n        if i < j {\n            result.swapAt(i, j)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpvgxw27mt/tmpvgxw27mt.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e23550c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e23247b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2e23247988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2e232467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvgxw27mt                        0x0000564a129cb531 <unavailable> + 5425\n5    libc.so.6                          0x00002b2e2373c460 __libc_start_main + 245\n6    tmpvgxw27mt                        0x0000564a129cb0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpkde_8job/tmpkde_8job.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a78c98c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a7898fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a7898f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a7898e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkde_8job                        0x000055ddef38b741 <unavailable> + 5953\n5    libc.so.6                          0x00002b9a78e84460 __libc_start_main + 245\n6    tmpkde_8job                        0x000055ddef38b2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] >= 0 {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmprv3zsbgz/tmprv3zsbgz.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b31674d8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b31671cfb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b31671cf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b31671ce7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprv3zsbgz                        0x0000557d732f94e1 <unavailable> + 5345\n5    libc.so.6                          0x00002b31676c4460 __libc_start_main + 245\n6    tmprv3zsbgz                        0x0000557d732f9079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var j = 0\n    for i in 0..<n {\n        if arr[i] < 0 {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n            j += 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpt3qjr07x/tmpt3qjr07x.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4cae22ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4cadf21b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4cadf21988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4cadf207b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt3qjr07x                        0x000056428e5db531 <unavailable> + 5425\n5    libc.so.6                          0x00002b4cae416460 __libc_start_main + 245\n6    tmpt3qjr07x                        0x000056428e5db0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 && arr[j] > 0 {\n            i += 1\n            j -= 1\n        } else if arr[i] > 0 && arr[j] > 0 {\n            j -= 1\n        } else if arr[i] < 0 && arr[j] < 0 {\n            i += 1\n        } else {\n            arr.swapAt(i, j)\n            i += 1\n            j -= 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "tmpvdrn9w45/tmpvdrn9w45.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7828a44c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b782873bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b782873b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b782873a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdrn9w45                        0x0000565395644531 <unavailable> + 5425\n5    libc.so.6                          0x00002b7828c30460 __libc_start_main + 245\n6    tmpvdrn9w45                        0x00005653956440c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = -1\n    for j in 0..<n {\n        if arr[j] < 0 {\n            i += 1\n            swap(&arr[i], &arr[j])\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "/tmp/tmpve6tdjxu.swift:9:18: error: overlapping accesses to 'arr', but modification requires exclusive access; consider calling MutableCollection.swapAt(_:_:)\n            swap(&arr[i], &arr[j])\n            ~~~~~^~~~~~~~~~~~~~~~~\n            arr.swapAt(i, j)\n/tmp/tmpve6tdjxu.swift:9:27: note: conflicting access is here\n            swap(&arr[i], &arr[j])\n                          ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else if arr[j] >= 0 {\n            j -= 1\n        } else {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpw_x3zg8x/tmpw_x3zg8x.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b54e62fdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b54e5ff4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b54e5ff4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b54e5ff37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw_x3zg8x                        0x000056316019c531 <unavailable> + 5425\n5    libc.so.6                          0x00002b54e64e9460 __libc_start_main + 245\n6    tmpw_x3zg8x                        0x000056316019c0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else if arr[j] > 0 {\n            j -= 1\n        } else {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpwrkjk_j1/tmpwrkjk_j1.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81a9031c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81a8d28b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b81a8d28988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b81a8d277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwrkjk_j1                        0x000056130d654531 <unavailable> + 5425\n5    libc.so.6                          0x00002b81a921d460 __libc_start_main + 245\n6    tmpwrkjk_j1                        0x000056130d6540c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else if arr[j] > 0 {\n            j -= 1\n        } else {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n            i += 1\n            j -= 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpswp4z04r/tmpswp4z04r.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b06a3685c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b06a337cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b06a337c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b06a337b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpswp4z04r                        0x000055cf3de6c4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002b06a3871460 __libc_start_main + 245\n6    tmpswp4z04r                        0x000055cf3de6c079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmp9x67u3kc/tmp9x67u3kc.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aaed8220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aaed7f17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aaed7f17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aaed7f167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9x67u3kc                        0x0000562798b9f721 <unavailable> + 5921\n5    libc.so.6                          0x00002aaed840c460 __libc_start_main + 245\n6    tmp9x67u3kc                        0x0000562798b9f2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while i < j && arr[i] < 0 {\n            i += 1\n        }\n        while i < j && arr[j] >= 0 {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpqltx_ue9/tmpqltx_ue9.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad279a15c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad27970cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad27970c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad27970b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqltx_ue9                        0x0000564c88c23531 <unavailable> + 5425\n5    libc.so.6                          0x00002ad279c01460 __libc_start_main + 245\n6    tmpqltx_ue9                        0x0000564c88c230c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    \n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    \n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "tmpy0yiejiv/tmpy0yiejiv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae6770b6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae676dadb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae676dad988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae676dac7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy0yiejiv                        0x00005600b0f5c741 <unavailable> + 5953\n5    libc.so.6                          0x00002ae6772a2460 __libc_start_main + 245\n6    tmpy0yiejiv                        0x00005600b0f5c2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else if arr[j] > 0 {\n            j -= 1\n        } else {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpwrkjk_j1/tmpwrkjk_j1.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81a9031c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81a8d28b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b81a8d28988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b81a8d277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwrkjk_j1                        0x000056130d654531 <unavailable> + 5425\n5    libc.so.6                          0x00002b81a921d460 __libc_start_main + 245\n6    tmpwrkjk_j1                        0x000056130d6540c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpqlxo2t8y/tmpqlxo2t8y.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6559c6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6559965b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6559965988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b65599647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqlxo2t8y                        0x0000556400b63531 <unavailable> + 5425\n5    libc.so.6                          0x00002b6559e5a460 __libc_start_main + 245\n6    tmpqlxo2t8y                        0x0000556400b630c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if result[i] < 0 {\n            i += 1\n        } else if result[j] >= 0 {\n            j -= 1\n        } else {\n            result.swapAt(i, j)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "tmpyfpzozxd/tmpyfpzozxd.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad818c43c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad81893ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad81893a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad8189397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyfpzozxd                        0x00005574b863d531 <unavailable> + 5425\n5    libc.so.6                          0x00002ad818e2f460 __libc_start_main + 245\n6    tmpyfpzozxd                        0x00005574b863d0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] > 0 {\n            arr.swapAt(i, j)\n            j -= 1\n        } else {\n            i += 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517253,
      "stdout": "",
      "stderr": "tmpv778obts/tmpv778obts.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5353011c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5352d08b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5352d08988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5352d077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpv778obts                        0x0000559ea7734531 <unavailable> + 5425\n5    libc.so.6                          0x00002b53531fd460 __libc_start_main + 245\n6    tmpv778obts                        0x0000559ea77340c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] > 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517253,
      "stdout": "",
      "stderr": "tmpeaswwer1/tmpeaswwer1.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b377fd0fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b377fa06b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b377fa06988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b377fa057b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpeaswwer1                        0x000055a87599d4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002b377fefb460 __libc_start_main + 245\n6    tmpeaswwer1                        0x000055a87599d079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    \n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    \n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpb649j_mh/tmpb649j_mh.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab47e896c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab47e58db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab47e58d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab47e58c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb649j_mh                        0x0000555615b5f741 <unavailable> + 5953\n5    libc.so.6                          0x00002ab47ea82460 __libc_start_main + 245\n6    tmpb649j_mh                        0x0000555615b5f2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while i < j && arr[i] < 0 {\n            i += 1\n        }\n        while i < j && arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "tmpc15zv7ir/tmpc15zv7ir.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aed33e3bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aed33b32b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aed33b32988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aed33b317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc15zv7ir                        0x000055800f44e4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002aed34027460 __libc_start_main + 245\n6    tmpc15zv7ir                        0x000055800f44e079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}