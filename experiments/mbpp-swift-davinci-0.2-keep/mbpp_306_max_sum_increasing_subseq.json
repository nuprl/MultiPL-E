{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "swift",
  "prompt": "\n/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)\nassert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)\nassert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k == index {\n        sum = a[index]\n    }\n    let sum1 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let sum2 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    return max(sum1, sum2 + sum)",
    "    if index == n {\n        return 0\n    }\n    var include = 0\n    if k == index + 1 {\n        include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    } else {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))",
    "    if index == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    return ans",
    "    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k < n {\n        sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n        if a[index] < a[k] {\n            sum = max(sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n        }\n    }\n    return sum",
    "    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k < n {\n        sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    if a[index] < a[k] {\n        sum = max(sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    }\n    return sum",
    "    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max_sum = 0\n    for i in index..<k {\n        max_sum = max(max_sum, dp[i])\n    }\n    return max_sum",
    "    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max_sum = 0\n    for i in index..<k {\n        max_sum = max(max_sum, dp[i])\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    var include = 0\n    if k == index + 1 {\n        include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] && i < k {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    return dp[index]",
    "    if index == n {\n        return 0\n    }\n    var include = 0\n    if k < index {\n        include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)",
    "    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max = 0\n    for i in index..<k {\n        if dp[i] > max {\n            max = dp[i]\n        }\n    }\n    return max",
    "    if index == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if k < index {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    return ans",
    "    if index == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    return ans",
    "    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k < n {\n        sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    if a[index] < a[k] {\n        sum = max(sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return sum",
    "    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i+1, k: k))\n        }\n    }\n    return max_sum + a[k]",
    "    if index == n {\n        return 0\n    }\n    if k > n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))",
    "    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[k] {\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: k))\n        }\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index) + a[index])\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)",
    "    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    \n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k < n {\n        sum = a[k]\n    }\n    for i in index..<n {\n        if a[i] < a[k] {\n            sum += max_sum_increasing_subseq(a: a, n: n, index: i+1, k: k)\n        }\n    }\n    return sum",
    "    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[k] {\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a: a, n: n, index: i+1, k: i))\n        }\n    }\n    return max_sum",
    "    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var max_sum = 0\n    for i in 0..<index {\n        max_sum = max(max_sum, dp[i])\n    }\n    return max_sum + a[k]",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k < index {\n        return 0\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    if a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    }\n    return ans",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var maxSum = dp[index]\n    for i in index..<k {\n        if dp[i] > maxSum {\n            maxSum = dp[i]\n        }\n    }\n    return maxSum",
    "    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[k] {\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: i))\n        }\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return a[index]\n    }\n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var max_sum = 0\n    for i in 0..<index {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, dp[i])\n        }\n    }\n    return max_sum + a[k]",
    "    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k == -1 {\n        sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index + 1)\n    } else {\n        sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    if k == -1 {\n        if a[index] > a[index + 1] {\n            sum = max(sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index + 1))\n        }\n    } else {\n        if a[index] > a[k] {\n            sum = max(sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n        }\n    }\n    return sum",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    var sum1 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    var sum2 = 0\n    if a[index] < a[k] {\n        sum2 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1) + a[index]\n    }\n    return max(sum1, sum2)",
    "    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var sum = 0\n    for i in 0...index {\n        sum += a[i]\n    }\n    sum += dp[k]\n    return sum",
    "    if index == n {\n        return 0\n    }\n    let including = a[index] + max_sum_increasing_subseq(a: a, n: n, index: k, k: k + 1)\n    let excluding = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(including, excluding)",
    "    if index >= n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let including = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let excluding = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(including, excluding)",
    "    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)",
    "    if index == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    return ans",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))",
    "    if index == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return ans",
    "    if index == n {\n        return 0\n    }\n    \n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    \n    if k > index {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: k, k: k))\n    }\n    \n    return ans",
    "    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if k > index && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k == index {\n        sum = a[index]\n    }\n    let sum1 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let sum2 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    return max(sum + sum1, sum2)",
    "    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: i) + a[i])\n        }\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: i) + a[i])\n        }\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    if index > k {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    if a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    }\n    return ans",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))",
    "    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k == index + 1 {\n        sum = a[index]\n    }\n    return max(sum + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var max_sum = 0\n    for i in 0..<index {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, dp[i])\n        }\n    }\n    return max_sum + a[k]",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1))\n    }\n    return max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1)",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))",
    "    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max_sum = 0\n    for i in 0..<n {\n        if i != k {\n            max_sum = max(max_sum, dp[i])\n        }\n    }\n    return max_sum + a[k]",
    "    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    } else {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }",
    "    var max_sum = 0\n    for i in index..<k {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i, k: k))\n        }\n    }\n    return max_sum + a[k]",
    "    if index == n {\n        return 0\n    }\n    \n    if index == k {\n        return a[index]\n    }\n    \n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[index] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i, k: k) + a[index])\n        }\n    }\n    \n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    \n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    \n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k),\n                   max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index) + a[index])\n    } else {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }",
    "    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var result = 0\n    for i in index..<k {\n        result = max(result, dp[i])\n    }\n    return result",
    "    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && i < k {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    return dp[index]",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                if i == k {\n                    dp[i] = max(dp[i], dp[j] + a[i])\n                } else {\n                    dp[i] = max(dp[i], dp[j])\n                }\n            }\n        }\n    }\n    return dp[index]",
    "    if index >= n {\n        return 0\n    }\n    if k >= n {\n        return 0\n    }\n    if k < index {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: k))\n        }\n    }\n    return max_sum + a[k]",
    "    if index == n {\n        return 0\n    }\n    \n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: k, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    \n    return max(include, exclude)",
    "    if index == n {\n        return 0\n    }\n    \n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        ans = max(ans, a[k] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    \n    return ans",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1))\n    } else {\n        return max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1)\n    }",
    "    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    \n    if k == n {\n        return 0\n    }\n    \n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    } else {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }",
    "    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: k))\n        }\n    }\n    return max_sum + a[k]",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k),\n                   a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    }\n    return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))",
    "    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    \n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    if k < index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a: a, n: n, index: i+1, k: k))\n        }\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)",
    "    if index == n {\n        return 0\n    }\n    var sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            sum = max(sum, max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: k))\n        }\n    }\n    return sum + a[k]",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max_sum = 0\n    for i in index..<k {\n        if dp[i] > max_sum {\n            max_sum = dp[i]\n        }\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i+1, k: i) + a[i])\n        }\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    \n    return max_sum",
    "    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max_sum = 0\n    for i in index..<k {\n        max_sum += dp[i]\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    var sum = 0\n    if a[index] < a[k] {\n        sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k) + a[index]\n    } else {\n        sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index)\n    }\n    return sum",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var sum = 0\n    for i in index..<k {\n        sum += a[i]\n    }\n    return sum + dp[n - 1]",
    "    if index == n {\n        return 0\n    }\n    var include = 0\n    if k == index + 1 {\n        include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)",
    "    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max = 0\n    for i in 0..<n {\n        if dp[i] > max {\n            max = dp[i]\n        }\n    }\n    return max",
    "    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    \n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k == -1 {\n        for i in index..<n {\n            sum = max(sum, a[i] + max_sum_increasing_subseq(a: a, n: n, index: i+1, k: i))\n        }\n    } else {\n        for i in index..<n {\n            if i != k {\n                sum = max(sum, a[i] + max_sum_increasing_subseq(a: a, n: n, index: i+1, k: k))\n            }\n        }\n    }\n    return sum",
    "    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max = 0\n    for i in 0..<index {\n        if a[i] < a[k] && dp[i] > max {\n            max = dp[i]\n        }\n    }\n    return max + a[k]",
    "    if index == n {\n        return 0\n    }\n    \n    var sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            sum = max(sum, max_sum_increasing_subseq(a: a, n: n, index: i+1, k: k))\n        }\n    }\n    return sum + a[k]",
    "    if index == n {\n        return 0\n    }\n    \n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: k, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    \n    return max(include, exclude)",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] && dp[j] + a[i] > dp[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max_sum = 0\n    for i in 0..<index {\n        if a[i] < a[k] && dp[i] > max_sum {\n            max_sum = dp[i]\n        }\n    }\n    return max_sum + a[k]",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[i] > a[j] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var max_sum = 0\n    for i in 0..<index {\n        if a[k] > a[i] {\n            max_sum = max(max_sum, dp[i])\n        }\n    }\n    return max_sum + a[k]",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var sum = 0\n    for i in index..<k {\n        sum += a[i]\n    }\n    return dp[index] + sum",
    "    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var sum = 0\n    for i in index..<k {\n        sum += a[i]\n    }\n    return dp[index] + sum",
    "    if index == n {\n        return 0\n    }\n    if k >= n {\n        return 0\n    }\n    let include = a[k] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    return max(include, exclude)",
    "    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k < index {\n        return 0\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)",
    "    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)",
    "    if index == n {\n        return 0\n    }\n    \n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: k, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    \n    return max(include, exclude)",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<k {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i, k: k + 1) + a[k])\n        }\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    \n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    \n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    } else {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }",
    "    if index == n {\n        return 0\n    }\n    \n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    \n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1))\n    } else {\n        return max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1)\n    }",
    "    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max_sum = 0\n    for i in index..<k {\n        max_sum = max(max_sum, dp[i])\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    \n    if k == n {\n        return 0\n    }\n    \n    if k < index {\n        return 0\n    }\n    \n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k),\n                   max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }",
    "    if index == n {\n        return 0\n    }\n    var include = 0\n    if k == index + 1 {\n        include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)",
    "    if index == n {\n        return 0\n    }\n    var sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        sum = max(sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return sum",
    "    if index == n {\n        return 0\n    }\n    \n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[k] {\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: i))\n        }\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[index] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i, k: k) + a[index])\n        }\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    let including_k = a[k] + max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1)\n    let excluding_k = max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1)\n    return max(including_k, excluding_k)",
    "    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k == index {\n        sum = a[index]\n    }\n    return max(sum + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))",
    "    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[i] > a[j] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    return dp[index] + a[k]",
    "    if index == 0 {\n        return a[0]\n    }\n    var max_sum = 0\n    for i in 0..<index {\n        if a[i] < a[index] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i, k: index))\n        }\n    }\n    return max_sum + a[index]",
    "    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] {\n                dp[i] = max(dp[i], dp[j])\n            }\n        }\n        dp[i] += a[i]\n    }\n    var max_sum = 0\n    for i in index..<k {\n        max_sum = max(max_sum, dp[i])\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    \n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: k, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    \n    return max(include, exclude)",
    "    if index == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return ans",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    var sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            sum = max(sum, a[i] + max_sum_increasing_subseq(a: a, n: n, index: i+1, k: k))\n        }\n    }\n    return sum",
    "    if index == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return ans",
    "    var max_sum = 0\n    for i in index..<k {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i, k: k))\n        }\n    }\n    return max_sum + a[k]",
    "    if index == n {\n        return 0\n    }\n    \n    var sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            sum = max(sum, max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: k))\n        }\n    }\n    return a[k] + sum",
    "    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    \n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    // include kth element\n    var include = 0\n    if a[index] < a[k] {\n        include = a[k] + max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1)\n    }\n    // exclude kth element\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1)\n    return max(include, exclude)",
    "    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k < n {\n        sum = a[k]\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: k) + a[i])\n        }\n    }\n    return max(sum, max_sum)",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var result = 0\n    for i in index..<k {\n        result += a[i]\n    }\n    return max(dp[n-1], result)",
    "    if index == n {\n        return 0\n    }\n    var include = 0\n    if k < n {\n        include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)",
    "    if index == n {\n        return 0\n    }\n    \n    var sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    \n    if k > index && a[index] < a[k] {\n        sum = max(sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    \n    return sum",
    "    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k < n {\n        sum = a[k]\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: k))\n        }\n    }\n    return sum + max_sum",
    "    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && i < k {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    return dp[index]",
    "    if index == n {\n        return 0\n    }\n    var ans1 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    var ans2 = 0\n    if a[index] < a[k] {\n        ans2 = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(ans1, ans2)",
    "    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: k))\n        }\n    }\n    return max_sum + a[k]",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    if a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    }\n    return ans",
    "    if index == n {\n        return 0\n    }\n    var include = 0\n    if k == index + 1 {\n        include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    if a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    }\n    return ans",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] && dp[j] + a[i] > dp[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max_sum = 0\n    for i in index..<k {\n        max_sum = max(max_sum, dp[i])\n    }\n    return max_sum",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var max_sum = 0\n    for i in 0..<index {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, dp[i])\n        }\n    }\n    return max_sum + a[k]",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))",
    "    if index == n {\n        return 0\n    }\n    \n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: k, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    \n    return max(include, exclude)",
    "    if index == n {\n        return 0\n    }\n    if index > k {\n        return 0\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)",
    "    if index == n {\n        return 0\n    }\n    \n    if index == k {\n        return a[index]\n    }\n    \n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[index] {\n            let sum = max_sum_increasing_subseq(a: a, n: n, index: i, k: k)\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    \n    return max_sum + a[index]",
    "    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k == index {\n        sum = a[index]\n    }\n    return max(sum + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))",
    "    if index == n {\n        return 0\n    }\n    \n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: k, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    \n    return max(include, exclude)",
    "    if index == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if a[index] < a[k] {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    return ans",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max_sum = 0\n    for i in index..<k {\n        max_sum += a[i]\n    }\n    return max_sum + dp[k]",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var max_sum = dp[index]\n    for i in index+1..<k {\n        max_sum += a[i]\n    }\n    return max_sum",
    "    if index == 0 {\n        return a[0]\n    }\n    var max_sum = a[index]\n    for i in 0..<index {\n        if a[i] < a[index] && i < k {\n            let sum = max_sum_increasing_subseq(a: a, n: n, index: i, k: k)\n            if sum + a[index] > max_sum {\n                max_sum = sum + a[index]\n            }\n        }\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)",
    "    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    \n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            let sum = max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: k)\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return a[k] + max_sum",
    "    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k < n {\n        sum = a[k]\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: k))\n        }\n    }\n    return sum + max_sum",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    var sum = 0\n    if a[index] < a[k] {\n        sum = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    sum = max(sum, max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    return sum",
    "    if index == n {\n        return 0\n    }\n    \n    var max_sum = 0\n    \n    if a[index] < a[k] {\n        max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    \n    let sum = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index)\n    \n    return max(max_sum, sum)",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    var max_sum = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] && j < k && i > k {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n        max_sum = max(max_sum, dp[i])\n    }\n    return max_sum",
    "    var dp = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] + a[i] {\n                dp[i] = dp[j] + a[i]\n            }\n        }\n    }\n    var max_sum = 0\n    for i in index..<k {\n        if max_sum < dp[i] {\n            max_sum = dp[i]\n        }\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)",
    "    if index == n {\n        return 0\n    }\n    if k >= n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i+1, k: k))\n        }\n    }\n    return max_sum + a[k]",
    "    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k < n {\n        sum = a[k]\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    for i in index + 1..<n {\n        if a[i] > a[index] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: i) + sum)\n        }\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    var include = a[index]\n    var exclude = 0\n    for i in index+1..<n {\n        if i == k {\n            include += a[i]\n        } else {\n            exclude = max(exclude, max_sum_increasing_subseq(a: a, n: n, index: i, k: k))\n        }\n    }\n    return max(include, exclude)",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1))\n    } else {\n        return max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1)\n    }",
    "    if index == n {\n        return 0\n    }\n    var max_sum = 0\n    for i in index..<n {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i + 1, k: k))\n        }\n    }\n    return max_sum + a[k]",
    "    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    var ans = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k {\n        ans = max(ans, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return ans",
    "    var dp = Array(repeating: 0, count: n)\n    var max_sum = 0\n    for i in 0..<n {\n        dp[i] = a[i]\n    }\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && i < k {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    for i in 0..<n {\n        max_sum = max(max_sum, dp[i])\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k == index {\n        sum = a[index]\n    }\n    let sum1 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let sum2 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    return max(sum + sum1, sum + sum2)",
    "    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k < n {\n        sum = a[k]\n    }\n    return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k) + sum)",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    }\n    return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)",
    "    if index == n {\n        return 0\n    }\n    if index > k {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))",
    "    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k == index {\n        sum = a[index]\n    }\n    let sum1 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let sum2 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    return max(sum1, sum + sum2)",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] {\n                dp[i] = dp[j]\n            }\n        }\n        dp[i] += a[i]\n    }\n    return dp[index] + a[k]",
    "    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index) + a[index])\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var result = 0\n    for i in 0...index {\n        result = max(result, dp[i])\n    }\n    result += a[k]\n    return result",
    "    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: index))\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let sum1 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let sum2 = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(sum1, sum2)",
    "    if index == n {\n        return 0\n    }\n    \n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i+1, k: i) + a[i])\n        }\n    }\n    \n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    \n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1))\n    } else {\n        return max_sum_increasing_subseq(a: a, n: n, index: index, k: k + 1)\n    }",
    "    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    \n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k == index {\n        sum = a[index]\n    }\n    return max(sum + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1), max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))",
    "    if index == n {\n        return 0\n    }\n    var sum1 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    var sum2 = 0\n    if k > index {\n        sum2 = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(sum1, sum2)",
    "    if index == n {\n        return 0\n    }\n    var incl = 0\n    if k == index + 1 {\n        incl = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    let excl = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(incl, excl)",
    "    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    \n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    \n    return max_sum",
    "    if index >= n {\n        return 0\n    }\n    if k >= n {\n        return 0\n    }\n    if k <= index {\n        return 0\n    }\n    if k == index + 1 {\n        return a[index]\n    }\n    return max(max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k), a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        dp[i] = a[i]\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j] + a[i])\n            }\n        }\n    }\n    var max_sum = 0\n    for i in 0..<index {\n        if a[i] < a[k] {\n            max_sum = max(max_sum, dp[i])\n        }\n    }\n    return max_sum + a[k]",
    "    if index == n {\n        return 0\n    }\n    var max_sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    if index < k && a[index] < a[k] {\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    \n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: k, k: k + 1)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    \n    return max(include, exclude)",
    "    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    return max(include, exclude)",
    "    if index == n {\n        return 0\n    }\n    \n    if k == n {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    \n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k),\n                   max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1))\n    } else {\n        return max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }",
    "    if index == n {\n        return 0\n    }\n    \n    if k == n {\n        return 0\n    }\n    \n    if index > k {\n        return 0\n    }\n    \n    let include = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let exclude = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    \n    return max(include, exclude)",
    "    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    let sum1 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    let sum2 = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k) + a[index]\n    return max(sum1, sum2)",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[i] > a[j] && dp[i] < dp[j] {\n                dp[i] = dp[j]\n            }\n        }\n        dp[i] += a[i]\n    }\n    var max_sum = 0\n    for i in index..<k {\n        if dp[i] > max_sum {\n            max_sum = dp[i]\n        }\n    }\n    return max_sum",
    "    if index == n {\n        return 0\n    }\n    \n    var max_sum = 0\n    for i in index..<n {\n        if a[i] > a[k] {\n            max_sum = max(max_sum, max_sum_increasing_subseq(a: a, n: n, index: i+1, k: i) + a[i])\n        }\n    }\n    return max_sum",
    "    var dp = Array(repeating: 0, count: n)\n    dp[0] = a[0]\n    for i in 1..<n {\n        for j in 0..<i {\n            if a[j] < a[i] {\n                dp[i] = max(dp[i], dp[j])\n            }\n        }\n        dp[i] += a[i]\n    }\n    var sum = 0\n    for i in 0..<index {\n        sum += a[i]\n    }\n    sum += dp[k]\n    return sum",
    "    if index == n {\n        return 0\n    }\n    var sum = 0\n    if a[index] < a[k] {\n        sum = a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k)\n    }\n    return max(sum, max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))",
    "    if index == n {\n        return 0\n    }\n    var sum = 0\n    if k < n {\n        sum = max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k + 1)\n    }\n    if a[index] < a[k] {\n        sum = max(sum, a[index] + max_sum_increasing_subseq(a: a, n: n, index: index + 1, k: k))\n    }\n    return sum"
  ]
}